<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>靛青</title>
  <subtitle>青，取之于藍而青于藍。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://c-xuan.com/"/>
  <updated>2018-01-26T03:49:37.000Z</updated>
  <id>http://c-xuan.com/</id>
  
  <author>
    <name>c-xuan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【Python 3 基础】循环</title>
    <link href="http://c-xuan.com/2018/01/26/20180126001/"/>
    <id>http://c-xuan.com/2018/01/26/20180126001/</id>
    <published>2018-01-26T03:49:37.000Z</published>
    <updated>2018-01-26T03:49:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍Ptyhon 3中while循环、for循环的基本语法，以及利用for循环遍历列表、字典和列表推导的相关内容。</p>
<a id="more"></a>
<h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><p>while循环语法比较简单，与其他语言类似。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#输出1-10</span></div><div class="line">x = <span class="number">1</span></div><div class="line"><span class="keyword">while</span> x &lt;= <span class="number">10</span>:</div><div class="line">    print(x)</div><div class="line">    x +=<span class="number">1</span></div></pre></td></tr></table></figure>
<h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><h4 id="遍历列表"><a href="#遍历列表" class="headerlink" title="遍历列表"></a>遍历列表</h4><p>for循环更多地用于列表，集合，字典等遍历。</p>
<p>例如遍历一个列表：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#遍历列表</span></div><div class="line">numbers = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</div><div class="line"><span class="keyword">for</span> number <span class="keyword">in</span> numbers:</div><div class="line">    print(number)</div></pre></td></tr></table></figure>
<p>如果要生成特定序列，可使用内建函数range()，注意python 3 中xrange()函数跟range()已合并。之前版本中xrange()函数作用与range()函数相同，区别是range()函数一次创建整个序列，xrange()函数一次只创建一个数。需要迭代一个巨大的序列时，xrange()会更高效一些。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#如果只是输出某一范围的数字，可以使用范围函数range(),该函数生成一个包含开始，不含结束区间的序列。</span></div><div class="line"><span class="keyword">for</span> number <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">6</span>):</div><div class="line">    print(number)</div></pre></td></tr></table></figure>
<h4 id="字典遍历"><a href="#字典遍历" class="headerlink" title="字典遍历"></a>字典遍历</h4><p>可使用如下语法遍历字典的键和值。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#循环遍历字典</span></div><div class="line">d = &#123;<span class="string">'x'</span>:<span class="number">1</span>,<span class="string">'y'</span>:<span class="number">2</span>,<span class="string">'z'</span>:<span class="number">3</span>&#125;</div><div class="line"><span class="keyword">for</span> key,value <span class="keyword">in</span> d.items():</div><div class="line">    print(key,<span class="string">'-&gt;'</span>,value)</div></pre></td></tr></table></figure></p>
<p>如果只遍历字典的键，如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#循环遍历字典</span></div><div class="line">d = &#123;<span class="string">'x'</span>:<span class="number">1</span>,<span class="string">'y'</span>:<span class="number">2</span>,<span class="string">'z'</span>:<span class="number">3</span>&#125;</div><div class="line"><span class="keyword">for</span> key <span class="keyword">in</span> d.keys():</div><div class="line">    print(key)</div></pre></td></tr></table></figure></p>
<p>如果只遍历字典的值，如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#循环遍历字典</span></div><div class="line">d = &#123;<span class="string">'x'</span>:<span class="number">1</span>,<span class="string">'y'</span>:<span class="number">2</span>,<span class="string">'z'</span>:<span class="number">3</span>&#125;</div><div class="line"><span class="keyword">for</span> value <span class="keyword">in</span> d.values():</div><div class="line">    print(value)</div></pre></td></tr></table></figure></p>
<h4 id="字典并行遍历"><a href="#字典并行遍历" class="headerlink" title="字典并行遍历"></a>字典并行遍历</h4><p>如果要同时遍历两个列表，可以按如下方式：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#并行迭代，如果要同时遍历两个列表</span></div><div class="line">names = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>]</div><div class="line">ages = [<span class="number">12</span>,<span class="number">34</span>,<span class="number">55</span>]</div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(names)):</div><div class="line">    print(names[i],<span class="string">' is '</span>,ages[i],<span class="string">' years old'</span>)</div></pre></td></tr></table></figure></p>
<p>内建zip()函数可用于并行迭代，把两个序列并在一起，返回一个元祖列表，写法更简洁。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 内建zip()函数可用于并行迭代，把两个序列并在一起，返回一个元祖列表</span></div><div class="line"><span class="comment"># 如果连个序列不等长，遍历完短的序列就结束了</span></div><div class="line">names = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>]</div><div class="line">ages = [<span class="number">12</span>,<span class="number">34</span>,<span class="number">55</span>,<span class="number">66</span>]</div><div class="line"></div><div class="line"><span class="keyword">for</span> name,age <span class="keyword">in</span> zip(names,ages):</div><div class="line">    print(name,<span class="string">' is '</span>,age,<span class="string">' years old'</span>)</div></pre></td></tr></table></figure>
<h4 id="for循环与else语句"><a href="#for循环与else语句" class="headerlink" title="for循环与else语句"></a>for循环与else语句</h4><p>for循环中可以使用判断语句，如果符合某一特定条件就让for循环终止，如下代码，如果n等于3，则循环终止了。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">7</span>):</div><div class="line">    <span class="keyword">if</span> n == <span class="number">3</span>:</div><div class="line">        print(n)</div><div class="line">        <span class="keyword">break</span></div></pre></td></tr></table></figure>
<p>如果在for后加一个else子句，如果for循环被break打断，else子句不会被执行，如下代码输出结果3。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">7</span>):</div><div class="line">    <span class="keyword">if</span> n == <span class="number">3</span>:</div><div class="line">        print(n)</div><div class="line">        <span class="keyword">break</span></div><div class="line"><span class="keyword">else</span>:</div><div class="line">        print(<span class="string">'No'</span>)</div></pre></td></tr></table></figure></p>
<p>如果for循环中没有执行break语句，则else子句会被执行一次，如下代码输出结果:No<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">7</span>):</div><div class="line">    <span class="keyword">if</span> n == <span class="number">7</span>:</div><div class="line">        print(n)</div><div class="line">        <span class="keyword">break</span></div><div class="line"><span class="keyword">else</span>:</div><div class="line">        print(<span class="string">'No'</span>)</div></pre></td></tr></table></figure></p>
<h4 id="列表推导"><a href="#列表推导" class="headerlink" title="列表推导"></a>列表推导</h4><p>刚开始看列表推导的语法可能不大容易理解，它的功能就是在一个列表基础上生成另一个列表，例如生成0-9的平方数列表：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[x*x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>)]</div><div class="line"></div><div class="line"><span class="comment"># 输出结果：[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</span></div></pre></td></tr></table></figure>
<p>还可以在列表推导中加入判断语句，例如，如果要过滤出0-9中能被3整除的数的平方，可以怎么写：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 输出能被3整除的平方数</span></div><div class="line">[x*x <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">10</span>) <span class="keyword">if</span> x % <span class="number">3</span> == <span class="number">0</span>]</div><div class="line"></div><div class="line"><span class="comment"># 输出结果：[0, 9, 36, 81]</span></div></pre></td></tr></table></figure>
<p>列表推导中可以写多个for语句，例如：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[(x,y) <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">3</span>) <span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">3</span>)]</div><div class="line"></div><div class="line"><span class="comment"># 输出结果：[(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)]</span></div></pre></td></tr></table></figure>
<p>可以看到，效果类似于表的全连接，输出连个列表的所有组合，同样可以加入if语句，效果类似于表连接中的where条件过滤。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[(x,y) <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">3</span>) <span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">3</span>) <span class="keyword">if</span> x == y]</div><div class="line"></div><div class="line"><span class="comment"># 输出结果：[(0, 0), (1, 1), (2, 2)]</span></div></pre></td></tr></table></figure>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>Magnus Lie Hetland 著《Beginning Python-From Novice to Professional Secnod Edition》</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍Ptyhon 3中while循环、for循环的基本语法，以及利用for循环遍历列表、字典和列表推导的相关内容。&lt;/p&gt;
    
    </summary>
    
      <category term="码路刺客" scheme="http://c-xuan.com/categories/%E7%A0%81%E8%B7%AF%E5%88%BA%E5%AE%A2/"/>
    
    
      <category term="原创" scheme="http://c-xuan.com/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="Python" scheme="http://c-xuan.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>CentOS Hbase-1.2.0 安装配置</title>
    <link href="http://c-xuan.com/2018/01/24/20180124001/"/>
    <id>http://c-xuan.com/2018/01/24/20180124001/</id>
    <published>2018-01-23T16:00:00.000Z</published>
    <updated>2018-01-23T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇介绍在四个节点的集群中安装Hbase，Hbase依赖于zookeeper,Hbase的安装包内自带zookeeper，本篇将配置使用单独安装的zookeeper。最后启动时遇到<code>Master is initializing</code>、<code>error telling master we are up</code>的异常，通过修改hosts文件得以解决。</p>
<a id="more"></a>
<h3 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h3><ul>
<li>虚拟机：VMware Workstation 12 Player</li>
<li>Linux版本：CentOS release 6.4 (Final)</li>
<li>hadoop版本：hadoop-2.6.0-cdh5.7.6</li>
<li>zookeeper版本：zookeeper-3.4.5-cdh5.7.6</li>
<li>hbase版本：hbase-1.2.0-cdh5.7.6</li>
<li>集群节点：<ul>
<li>master:192.168.137.11 内存1G</li>
<li>slave1:192.168.137.12 内存512M</li>
<li>slave2:192.168.137.13 内存512M</li>
<li>slave3:192.168.137.14 内存512M</li>
</ul>
</li>
<li>前提：java已安装，Hadoop已安装，zookeeper已安装，已配置ssh免密登录，停掉防火墙等。</li>
</ul>
<p>zookeeper安装请参考<a href="/2018/01/20/20180120001/">CentOS上zookeeper集群模式安装配置</a>,本篇将在四个节点上安装Hbase，master作为HMaster，其他slave节点作为HRegionServer。</p>
<h3 id="上传安装包"><a href="#上传安装包" class="headerlink" title="上传安装包"></a>上传安装包</h3><p>将下载的hbase-1.2.0-cdh5.7.6.tar.gz安装包上传到CentOS指定目录，例如<code>/opt</code>。<br>上传方法很多，这里在SecureCRT用rz命令。</p>
<p>解压缩安装包：</p>
<p><code>tar -zxf hbase-1.2.0-cdh5.7.6.tar.gz</code></p>
<p>重命名文件夹：</p>
<p><code>mv hbase-1.2.0-cdh5.7.6 hbase</code></p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>修改环境变量:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">vi /etc/profile</div><div class="line">添加</div><div class="line"><span class="built_in">export</span> HBASE_HOME=/opt/hbase</div><div class="line"><span class="built_in">export</span> PATH=<span class="variable">$HBASE_HOME</span>/bin:<span class="variable">$PATH</span></div></pre></td></tr></table></figure>
<p>修改hbase配置文件hbase-env.sh:</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[root@slave1 <span class="keyword">conf</span>]# <span class="keyword">pwd</span></div><div class="line">/<span class="keyword">opt</span>/hbase/<span class="keyword">conf</span></div><div class="line">[root@slave1 <span class="keyword">conf</span>]# <span class="keyword">vi</span> hbase-env.<span class="keyword">sh</span></div><div class="line"></div><div class="line">文件中去掉一下两行注释并修改</div><div class="line">export JAVA_HOME=/<span class="keyword">opt</span>/jdk</div><div class="line">export HBASE_MANAGES_ZK=false</div></pre></td></tr></table></figure>
<p>因为zookeeper用的是单独安装的，不是hbase自带的，所以上面配置为<code>false</code>.</p>
<p>修改conf文件下的hbase配置文件hbase-site.xml。</p>
<p><configuration>节点中间的内容是空的，增加如下配置：</configuration></p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="params">&lt;configuration&gt;</span></div><div class="line">        <span class="params">&lt;property&gt;</span></div><div class="line">                <span class="params">&lt;name&gt;</span>hbase.rootdir<span class="params">&lt;/name&gt;</span></div><div class="line">                <span class="params">&lt;value&gt;</span>hdfs:<span class="comment">//master:9000/hbase&lt;/value&gt;</span></div><div class="line">        <span class="params">&lt;/property&gt;</span></div><div class="line">        <span class="params">&lt;property&gt;</span></div><div class="line">                <span class="params">&lt;name&gt;</span>hbase.cluster.distributed<span class="params">&lt;/name&gt;</span></div><div class="line">                <span class="params">&lt;value&gt;</span>true<span class="params">&lt;/value&gt;</span></div><div class="line">        <span class="params">&lt;/property&gt;</span></div><div class="line">        <span class="params">&lt;property&gt;</span></div><div class="line">                <span class="params">&lt;name&gt;</span>hbase.zookeeper.quorum<span class="params">&lt;/name&gt;</span></div><div class="line">                <span class="params">&lt;value&gt;</span>master,slave1,slave2,slave3<span class="params">&lt;/value&gt;</span></div><div class="line">        <span class="params">&lt;/property&gt;</span></div><div class="line">        <span class="params">&lt;property&gt;</span></div><div class="line">                <span class="params">&lt;name&gt;</span>hbase.zookeeper.property.dataDir<span class="params">&lt;/name&gt;</span></div><div class="line">                <span class="params">&lt;value&gt;</span><span class="meta-keyword">/opt/</span>zookeeper<span class="params">&lt;/value&gt;</span></div><div class="line">        <span class="params">&lt;/property&gt;</span></div><div class="line"><span class="params">&lt;/configuration&gt;</span></div></pre></td></tr></table></figure>
<p>修改conf文件夹下的regionservers文件：</p>
<figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root<span class="symbol">@slave1</span> conf]<span class="meta"># vi regionservers </span></div><div class="line">slave1</div><div class="line">slave2</div><div class="line">slave3</div></pre></td></tr></table></figure>
<h3 id="启动运行"><a href="#启动运行" class="headerlink" title="启动运行"></a>启动运行</h3><p>HBase的启动顺序为：HDFS-&gt;Zookeeper-&gt;HBase，所以先保证hadoop和zookeeper已经启动。</p>
<figure class="highlight vhdl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">[root@master bin]# /opt/hbase/start-hbase.sh</div><div class="line">starting master, logging <span class="keyword">to</span> /opt/hbase/bin/../logs/hbase-root-master-master.<span class="keyword">out</span></div><div class="line">Java HotSpot(TM) <span class="number">64</span>-<span class="built_in">Bit</span> Server VM <span class="literal">warning</span>: ignoring option PermSize=<span class="number">128</span>m; support was removed <span class="keyword">in</span> <span class="number">8.0</span></div><div class="line">Java HotSpot(TM) <span class="number">64</span>-<span class="built_in">Bit</span> Server VM <span class="literal">warning</span>: ignoring option MaxPermSize=<span class="number">128</span>m; support was removed <span class="keyword">in</span> <span class="number">8.0</span></div><div class="line">slave2: starting regionserver, logging <span class="keyword">to</span> /opt/hbase/logs/hbase-root-regionserver-slave2.<span class="keyword">out</span></div><div class="line">slave3: starting regionserver, logging <span class="keyword">to</span> /opt/hbase/logs/hbase-root-regionserver-slave3.<span class="keyword">out</span></div><div class="line">slave1: starting regionserver, logging <span class="keyword">to</span> /opt/hbase/logs/hbase-root-regionserver-slave1.<span class="keyword">out</span></div><div class="line">slave2: Java HotSpot(TM) <span class="number">64</span>-<span class="built_in">Bit</span> Server VM <span class="literal">warning</span>: ignoring option PermSize=<span class="number">128</span>m; support was removed <span class="keyword">in</span> <span class="number">8.0</span></div><div class="line">slave2: Java HotSpot(TM) <span class="number">64</span>-<span class="built_in">Bit</span> Server VM <span class="literal">warning</span>: ignoring option MaxPermSize=<span class="number">128</span>m; support was removed <span class="keyword">in</span> <span class="number">8.0</span></div><div class="line">slave1: Java HotSpot(TM) <span class="number">64</span>-<span class="built_in">Bit</span> Server VM <span class="literal">warning</span>: ignoring option PermSize=<span class="number">128</span>m; support was removed <span class="keyword">in</span> <span class="number">8.0</span></div><div class="line">slave1: Java HotSpot(TM) <span class="number">64</span>-<span class="built_in">Bit</span> Server VM <span class="literal">warning</span>: ignoring option MaxPermSize=<span class="number">128</span>m; support was removed <span class="keyword">in</span> <span class="number">8.0</span></div></pre></td></tr></table></figure>
<p>master节点上可看到如下进程：</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root@master bin]# jps</div><div class="line"><span class="number">3089</span> Jps</div><div class="line"><span class="number">2696</span> QuorumPeerMain</div><div class="line"><span class="number">2520</span> SecondaryNameNode</div><div class="line"><span class="number">2858</span> HMaster</div><div class="line"><span class="number">2365</span> NameNode</div></pre></td></tr></table></figure>
<p>slave节点上可看到如下进程：</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@slave1 opt]# jps</div><div class="line"><span class="number">2258</span> QuorumPeerMain</div><div class="line"><span class="number">2339</span> HRegionServer</div><div class="line"><span class="number">2154</span> DataNode</div><div class="line"><span class="number">2506</span> Jps</div></pre></td></tr></table></figure>
<p>如果没有问题，那么通过hbase shell查看状态可看到：</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">[root@master logs]<span class="comment"># /opt/hbase/bin/hbase shell</span></div><div class="line"><span class="number">2018</span>-<span class="number">01</span>-<span class="number">24</span> <span class="number">17</span>:<span class="number">38</span>:<span class="number">50</span>,<span class="number">902</span> INFO  [main] Configuration.<span class="symbol">deprecation:</span> hadoop.native.<span class="keyword">lib</span> is deprecated. Instead, use io.native.<span class="keyword">lib</span>.available</div><div class="line"><span class="number">2018</span>-<span class="number">01</span>-<span class="number">24</span> <span class="number">17</span>:<span class="number">38</span>:<span class="number">53</span>,<span class="number">829</span> WARN  [main] util.<span class="symbol">NativeCodeLoader:</span> Unable to load native-hadoop library <span class="keyword">for</span> your platform... using builtin-java classes where applicable</div><div class="line"><span class="symbol">SLF4J:</span> Class path contains multiple SLF4J bindings.</div><div class="line"><span class="symbol">SLF4J:</span> Found binding in [<span class="symbol">jar:</span><span class="symbol">file:</span>/opt/hbase/<span class="class"><span class="keyword">lib</span>/<span class="title">slf4j</span>-<span class="title">log4j12</span>-1.7.5.<span class="title">jar!</span>/<span class="title">org</span>/<span class="title">slf4j</span>/<span class="title">impl</span>/<span class="title">StaticLoggerBinder</span>.<span class="title">class</span>]</span></div><div class="line"><span class="symbol">SLF4J:</span> Found binding in [<span class="symbol">jar:</span><span class="symbol">file:</span>/opt/hadoop/share/hadoop/common/<span class="class"><span class="keyword">lib</span>/<span class="title">slf4j</span>-<span class="title">log4j12</span>-1.7.5.<span class="title">jar!</span>/<span class="title">org</span>/<span class="title">slf4j</span>/<span class="title">impl</span>/<span class="title">StaticLoggerBinder</span>.<span class="title">class</span>]</span></div><div class="line"><span class="symbol">SLF4J:</span> See <span class="symbol">http:</span>/<span class="regexp">/www.slf4j.org/codes</span>.html<span class="comment">#multiple_bindings for an explanation.</span></div><div class="line"><span class="symbol">SLF4J:</span> Actual binding is <span class="keyword">of</span> <span class="keyword">type</span> [org.slf4j.impl.Log4jLoggerFactory]</div><div class="line">HBase Shell; enter <span class="string">'help&lt;RETURN&gt;'</span> <span class="keyword">for</span> list <span class="keyword">of</span> supported commands.</div><div class="line">Type <span class="string">"exit&lt;RETURN&gt;"</span> to leave the HBase Shell</div><div class="line">Version <span class="number">1.2</span>.<span class="number">0</span>-cdh5.<span class="number">7.6</span>, rUnknown, Tue Feb <span class="number">21</span> <span class="number">15</span>:<span class="number">18</span>:<span class="number">14</span> PST <span class="number">2017</span></div><div class="line"></div><div class="line">hbase(main):<span class="number">001</span>:<span class="number">0</span>&gt; status</div><div class="line"><span class="number">1</span> active master, <span class="number">0</span> backup masters, <span class="number">3</span> servers, <span class="number">0</span> dead, <span class="number">0.6667</span> average load</div></pre></td></tr></table></figure>
<p>我第一次查看报错：<code>Master is initializing</code>.</p>
<h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>虽然上面看到相关进程都已启动，但是进入hbase shell后查看状态报错：</p>
<figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">[root@master bin]<span class="comment"># /opt/hbase/bin/hbase shell</span></div><div class="line"><span class="number">2018</span>-<span class="number">01</span>-<span class="number">24</span> <span class="number">16</span>:<span class="number">40</span>:<span class="number">15</span>,<span class="number">994</span> INFO  [main] Configuration.<span class="symbol">deprecation:</span> hadoop.native.<span class="keyword">lib</span> is deprecated. Instead, use io.native.<span class="keyword">lib</span>.available</div><div class="line"><span class="number">2018</span>-<span class="number">01</span>-<span class="number">24</span> <span class="number">16</span>:<span class="number">40</span>:<span class="number">18</span>,<span class="number">484</span> WARN  [main] util.<span class="symbol">NativeCodeLoader:</span> Unable to load native-hadoop library <span class="keyword">for</span> your platform... using builtin-java classes where applicable</div><div class="line"><span class="symbol">SLF4J:</span> Class path contains multiple SLF4J bindings.</div><div class="line"><span class="symbol">SLF4J:</span> Found binding in [<span class="symbol">jar:</span><span class="symbol">file:</span>/opt/hbase/<span class="class"><span class="keyword">lib</span>/<span class="title">slf4j</span>-<span class="title">log4j12</span>-1.7.5.<span class="title">jar!</span>/<span class="title">org</span>/<span class="title">slf4j</span>/<span class="title">impl</span>/<span class="title">StaticLoggerBinder</span>.<span class="title">class</span>]</span></div><div class="line"><span class="symbol">SLF4J:</span> Found binding in [<span class="symbol">jar:</span><span class="symbol">file:</span>/opt/hadoop/share/hadoop/common/<span class="class"><span class="keyword">lib</span>/<span class="title">slf4j</span>-<span class="title">log4j12</span>-1.7.5.<span class="title">jar!</span>/<span class="title">org</span>/<span class="title">slf4j</span>/<span class="title">impl</span>/<span class="title">StaticLoggerBinder</span>.<span class="title">class</span>]</span></div><div class="line"><span class="symbol">SLF4J:</span> See <span class="symbol">http:</span>/<span class="regexp">/www.slf4j.org/codes</span>.html<span class="comment">#multiple_bindings for an explanation.</span></div><div class="line"><span class="symbol">SLF4J:</span> Actual binding is <span class="keyword">of</span> <span class="keyword">type</span> [org.slf4j.impl.Log4jLoggerFactory]</div><div class="line">HBase Shell; enter <span class="string">'help&lt;RETURN&gt;'</span> <span class="keyword">for</span> list <span class="keyword">of</span> supported commands.</div><div class="line">Type <span class="string">"exit&lt;RETURN&gt;"</span> to leave the HBase Shell</div><div class="line">Version <span class="number">1.2</span>.<span class="number">0</span>-cdh5.<span class="number">7.6</span>, rUnknown, Tue Feb <span class="number">21</span> <span class="number">15</span>:<span class="number">18</span>:<span class="number">14</span> PST <span class="number">2017</span></div><div class="line"></div><div class="line">hbase(main):<span class="number">001</span>:<span class="number">0</span>&gt; status</div><div class="line"></div><div class="line"><span class="symbol">ERROR:</span> org.apache.hadoop.hbase.<span class="symbol">PleaseHoldException:</span> Master is initializing</div><div class="line">        at org.apache.hadoop.hbase.master.HMaster.checkInitialized(HMaster.<span class="symbol">java:</span><span class="number">2316</span>)</div><div class="line">        at org.apache.hadoop.hbase.master.MasterRpcServices.getClusterStatus(MasterRpcServices.<span class="symbol">java:</span><span class="number">783</span>)</div><div class="line">        at org.apache.hadoop.hbase.protobuf.generated.MasterProtos$MasterService$<span class="number">2</span>.callBlockingMethod(MasterProtos.<span class="symbol">java:</span><span class="number">55652</span>)</div><div class="line">        at org.apache.hadoop.hbase.ipc.RpcServer.call(RpcServer.<span class="symbol">java:</span><span class="number">2170</span>)</div><div class="line">        at org.apache.hadoop.hbase.ipc.CallRunner.run(CallRunner.<span class="symbol">java:</span><span class="number">109</span>)</div><div class="line">        at org.apache.hadoop.hbase.ipc.RpcExecutor.consumerLoop(RpcExecutor.<span class="symbol">java:</span><span class="number">133</span>)</div><div class="line">        at org.apache.hadoop.hbase.ipc.RpcExecutor$<span class="number">1</span>.run(RpcExecutor.<span class="symbol">java:</span><span class="number">108</span>)</div><div class="line">        at java.lang.Thread.run(Thread.<span class="symbol">java:</span><span class="number">748</span>)</div></pre></td></tr></table></figure>
<p>查看master节点的hbase目录下的logs日志文件<code>hbase-root-master-master.log</code>，发现以下这段总在重复。</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">2018</span><span class="number">-01</span><span class="number">-24</span> <span class="number">17</span>:<span class="number">29</span>:<span class="number">32</span>,<span class="number">752</span> INFO  [master:<span class="number">60000.</span>activeMasterManager] master.ServerManager: Waiting <span class="keyword">for</span> region servers <span class="built_in">count</span> <span class="keyword">to</span> settle; currently checked <span class="keyword">in</span> <span class="number">0</span>, slept <span class="keyword">for</span> <span class="number">529904</span> ms, expecting minimum <span class="keyword">of</span> <span class="number">1</span>, maximum <span class="keyword">of</span> <span class="number">2147483647</span>, <span class="keyword">timeout</span> <span class="keyword">of</span> <span class="number">4500</span> ms, interval <span class="keyword">of</span> <span class="number">1500</span> ms.</div></pre></td></tr></table></figure>
<p>查看slave节点的hbase目录下的logs日志文件<code>hbase-root-regionserver-slave1.log</code>，发现如下一段异常：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="number">2018</span>-<span class="number">01</span>-<span class="number">24</span> <span class="number">17</span>:<span class="number">21</span>:<span class="number">52</span>,<span class="number">093</span> WARN  [regionserver/localhost/<span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">60020</span>] regionserver<span class="selector-class">.HRegionServer</span>: error telling master we are up</div><div class="line">com<span class="selector-class">.google</span><span class="selector-class">.protobuf</span><span class="selector-class">.ServiceException</span>: java<span class="selector-class">.net</span><span class="selector-class">.SocketException</span>: Invalid argument</div><div class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.hadoop</span><span class="selector-class">.hbase</span><span class="selector-class">.ipc</span><span class="selector-class">.AbstractRpcClient</span><span class="selector-class">.callBlockingMethod</span>(AbstractRpcClient<span class="selector-class">.java</span>:<span class="number">240</span>)</div><div class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.hadoop</span><span class="selector-class">.hbase</span><span class="selector-class">.ipc</span><span class="selector-class">.AbstractRpcClient</span><span class="variable">$BlockingRpcChannelImplementation</span>.callBlockingMethod(AbstractRpcClient<span class="selector-class">.java</span>:<span class="number">336</span>)</div><div class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.hadoop</span><span class="selector-class">.hbase</span><span class="selector-class">.protobuf</span><span class="selector-class">.generated</span><span class="selector-class">.RegionServerStatusProtos</span><span class="variable">$RegionServerStatusService</span><span class="variable">$BlockingStub</span>.regionServerStartup(RegionServerStatusProtos<span class="selector-class">.java</span>:<span class="number">8982</span>)</div><div class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.hadoop</span><span class="selector-class">.hbase</span><span class="selector-class">.regionserver</span><span class="selector-class">.HRegionServer</span><span class="selector-class">.reportForDuty</span>(HRegionServer<span class="selector-class">.java</span>:<span class="number">2300</span>)</div><div class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.hadoop</span><span class="selector-class">.hbase</span><span class="selector-class">.regionserver</span><span class="selector-class">.HRegionServer</span><span class="selector-class">.run</span>(HRegionServer<span class="selector-class">.java</span>:<span class="number">914</span>)</div><div class="line">	at java<span class="selector-class">.lang</span><span class="selector-class">.Thread</span><span class="selector-class">.run</span>(Thread<span class="selector-class">.java</span>:<span class="number">748</span>)</div></pre></td></tr></table></figure>
<p>经过百度，发现slave节点上的<code>/etc/hosts</code>文件含有这样一行：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span>   <span class="selector-tag">localhost</span> <span class="selector-tag">slave2</span> <span class="selector-tag">slave2</span> <span class="selector-tag">localhost4</span> <span class="selector-tag">localhost4</span><span class="selector-class">.localdomain4</span></div></pre></td></tr></table></figure>
<p>改为如下再启动hbase就正常了：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span>   <span class="selector-tag">localhost</span> <span class="selector-tag">localhost</span><span class="selector-class">.localdomain</span> <span class="selector-tag">localhost4</span> <span class="selector-tag">localhost4</span><span class="selector-class">.localdomain4</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇介绍在四个节点的集群中安装Hbase，Hbase依赖于zookeeper,Hbase的安装包内自带zookeeper，本篇将配置使用单独安装的zookeeper。最后启动时遇到&lt;code&gt;Master is initializing&lt;/code&gt;、&lt;code&gt;error telling master we are up&lt;/code&gt;的异常，通过修改hosts文件得以解决。&lt;/p&gt;
    
    </summary>
    
      <category term="码路刺客" scheme="http://c-xuan.com/categories/%E7%A0%81%E8%B7%AF%E5%88%BA%E5%AE%A2/"/>
    
    
      <category term="数据库" scheme="http://c-xuan.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="原创" scheme="http://c-xuan.com/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="分布式" scheme="http://c-xuan.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
      <category term="Hbase" scheme="http://c-xuan.com/tags/Hbase/"/>
    
  </entry>
  
  <entry>
    <title>CentOS上zookeeper集群模式安装配置</title>
    <link href="http://c-xuan.com/2018/01/20/20180120001/"/>
    <id>http://c-xuan.com/2018/01/20/20180120001/</id>
    <published>2018-01-19T16:00:00.000Z</published>
    <updated>2018-01-22T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇介绍在四个节点的集群中搭建zookeeper环境，zookeeper可配置三种模式运行：单机模式，伪集群模式，集群模式，本文使用集群模式搭建。</p>
<a id="more"></a>
<h3 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h3><ul>
<li>虚拟机：VMware Workstation 12 Player</li>
<li>Linux版本：CentOS release 6.4 (Final)</li>
<li>zookeeper版本：zookeeper-3.4.5-cdh5.7.6.tar.gz</li>
<li>集群节点：<ul>
<li>master:192.168.137.11 内存1G</li>
<li>slave1:192.168.137.12 内存512M</li>
<li>slave2:192.168.137.13 内存512M</li>
<li>slave3:192.168.137.14 内存512M</li>
</ul>
</li>
<li>前提：java已安装，已配置ssh免密登录，停掉防火墙等。</li>
</ul>
<h3 id="上传安装包"><a href="#上传安装包" class="headerlink" title="上传安装包"></a>上传安装包</h3><p>将下载的zookeeper-3.4.5-cdh5.7.6.tar.gz安装包上传到CentOS指定目录，例如<code>/opt</code>。<br>上传方法很多，这里在SecureCRT用rz命令。</p>
<p>解压缩安装包：</p>
<p><code>tar -zxf zookeeper-3.4.5-cdh5.7.6.tar.gz</code></p>
<p>重命名文件夹：</p>
<p><code>mv zookeeper-3.4.5-cdh5.7.6 zookeeper</code></p>
<h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>配置文件在安装目录<code>conf</code>文件夹下的<code>zoo_sample.cfg</code>，需要先复制一个并且改文件名：</p>
<figure class="highlight tap"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">[root@master conf]<span class="comment"># pwd</span></div><div class="line">/opt/zookeeper/conf</div><div class="line">[root@master conf]<span class="comment"># cp zoo_sample.cfg zoo.cfg</span></div><div class="line">[root@master conf]<span class="comment"># ll</span></div><div class="line">total 16</div><div class="line">-rw-rw-r--.<span class="number"> 1 </span>root root <span class="number"> 535 </span>Feb<span class="number"> 22 </span><span class="number"> 2017 </span>configuration.xsl</div><div class="line">-rw-rw-r--.<span class="number"> 1 </span>root root<span class="number"> 2693 </span>Feb<span class="number"> 22 </span><span class="number"> 2017 </span>log4j.properties</div><div class="line">-rw-r--r--.<span class="number"> 1 </span>root root <span class="number"> 808 </span>Jan<span class="number"> 23 </span>10:06 zoo.cfg</div><div class="line">-rw-rw-r--.<span class="number"> 1 </span>root root <span class="number"> 808 </span>Feb<span class="number"> 22 </span><span class="number"> 2017 </span>zoo_sample.cfg</div></pre></td></tr></table></figure>
<p>修改zoo.cfg配置文件：</p>
<figure class="highlight makefile"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">tickTime=2000</div><div class="line"><span class="comment"># The number of ticks that the initial</span></div><div class="line"><span class="comment"># synchronization phase can take</span></div><div class="line">initLimit=10</div><div class="line"><span class="comment"># The number of ticks that can pass between</span></div><div class="line"><span class="comment"># sending a request and getting an acknowledgement</span></div><div class="line">syncLimit=5</div><div class="line"><span class="comment"># the directory where the snapshot is stored.</span></div><div class="line"><span class="comment"># do not use /tmp for storage, /tmp here is just</span></div><div class="line"><span class="comment"># example sakes.</span></div><div class="line">dataDir=/opt/zookeeper/tmp</div><div class="line"><span class="comment"># the port at which the clients will connect</span></div><div class="line">clientPort=2181</div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># Be sure to read the maintenance section of the</span></div><div class="line"><span class="comment"># administrator guide before turning on autopurge.</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># The number of snapshots to retain in dataDir</span></div><div class="line"><span class="comment">#autopurge.snapRetainCount=3</span></div><div class="line"><span class="comment"># Purge task interval in hours</span></div><div class="line"><span class="comment"># Set to "0" to disable auto purge feature</span></div><div class="line"><span class="comment">#autopurge.purgeInterval=1</span></div><div class="line">dataLogDir=/opt/zookeeper/logs</div><div class="line">server.1=master:2888:3888</div><div class="line">server.2=slave1:2888:3888</div><div class="line">server.3=slave2:2888:3888</div><div class="line">server.4=slave3:2888:3888</div></pre></td></tr></table></figure>
<p>参数说明：</p>
<ul>
<li>tickTime: zookeeper中使用的基本时间单位, 毫秒值.</li>
<li>dataDir: 数据目录. 可以是任意目录.</li>
<li>dataLogDir: log目录, 同样可以是任意目录. 如果没有设置该参数, 将使用和dataDir相同的设置.</li>
<li>clientPort: 监听client连接的端口号.</li>
<li>initLimit: zookeeper集群中的包含多台server, 其中一台为leader, 集群中其余的server为follower. initLimit参数配置初始化连接时, follower和leader之间的最长心跳时间. 此时该参数设置为5, 说明时间限制为5倍tickTime, 即5*2000=10000ms=10s.</li>
<li>syncLimit: 该参数配置leader和follower之间发送消息, 请求和应答的最大时间长度. 此时该参数设置为2, 说明时间限制为2倍tickTime, 即4000ms.</li>
<li>server.X=A:B:C 其中X是一个数字, 表示这是第几号server. A是该server所在的IP地址. B配置该server和集群中的leader交换消息所使用的端口. C配置选举leader时所使用的端口. </li>
</ul>
<p>由于我们修改了<code>dataDir</code>目录，在zookeeper目录中创建一个文件夹用于后面创建<code>myid</code>文件：</p>
<p><code>mkdir /opt/zookeeper/tmp</code></p>
<p><code>mkdir /opt/zookeeper/logs</code></p>
<h3 id="复制安装包到其他节点"><a href="#复制安装包到其他节点" class="headerlink" title="复制安装包到其他节点"></a>复制安装包到其他节点</h3><p>将<code>zookeeper</code>文件夹复制到其他三个服务器上：</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">scp -r /opt/zookeeper/ root<span class="variable">@slave1</span><span class="symbol">:/opt</span></div><div class="line">scp -r /opt/zookeeper/ root<span class="variable">@slave2</span><span class="symbol">:/opt</span></div><div class="line">scp -r /opt/zookeeper/ root<span class="variable">@slave3</span><span class="symbol">:/opt</span></div></pre></td></tr></table></figure>
<p>在master节点上用一下命令给每个节点上创建<code>myid</code>文件，文件中的id号与<code>zoo.cfg</code>配置文件中的对应：</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@<span class="keyword">master</span> <span class="title">zookeeper</span>]<span class="comment"># echo 1 &gt; /opt/zookeeper/tmp/myid</span></div><div class="line">[root@<span class="keyword">master</span> <span class="title">zookeeper</span>]<span class="comment"># ssh slave1 "echo 2 &gt; /opt/zookeeper/tmp/myid"</span></div><div class="line">[root@<span class="keyword">master</span> <span class="title">zookeeper</span>]<span class="comment"># ssh slave2 "echo 3 &gt; /opt/zookeeper/tmp/myid"</span></div><div class="line">[root@<span class="keyword">master</span> <span class="title">zookeeper</span>]<span class="comment"># ssh slave3 "echo 4 &gt; /opt/zookeeper/tmp/myid"</span></div></pre></td></tr></table></figure>
<h3 id="运行启动"><a href="#运行启动" class="headerlink" title="运行启动"></a>运行启动</h3><p>由于没有配置环境变量，需要用全路径执行：</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@master zookeeper]# <span class="regexp">/opt/</span>zookeeper<span class="regexp">/bin/</span>zkServer.sh start</div><div class="line">JMX enabled by <span class="keyword">default</span></div><div class="line">Using config: <span class="regexp">/opt/</span>zookeeper<span class="regexp">/bin/</span>..<span class="regexp">/conf/</span>zoo.cfg</div><div class="line">Starting zookeeper ... STARTED</div></pre></td></tr></table></figure>
<p>其实配置文件中修改<code>dataLogDir</code>的本意是想让启动日志输出到配置的文件夹里，但是好像并没有，日志文件<code>zookeeper.out</code>还是在zookeeper的安装目录下生成。</p>
<p>查看<code>zookeeper.out</code>文件发现有错误：</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">2018-01-23</span> <span class="selector-tag">10</span><span class="selector-pseudo">:48</span><span class="selector-pseudo">:35</span>,<span class="selector-tag">470</span> <span class="selector-attr">[myid:]</span> <span class="selector-tag">-</span> <span class="selector-tag">INFO</span>  <span class="selector-attr">[main:QuorumPeerConfig@101]</span> <span class="selector-tag">-</span> <span class="selector-tag">Reading</span> <span class="selector-tag">configuration</span> <span class="selector-tag">from</span>: /<span class="selector-tag">opt</span>/<span class="selector-tag">zookeeper</span>/<span class="selector-tag">bin</span>/../<span class="selector-tag">conf</span>/<span class="selector-tag">zoo</span><span class="selector-class">.cfg</span></div><div class="line"><span class="selector-tag">2018-01-23</span> <span class="selector-tag">10</span><span class="selector-pseudo">:48</span><span class="selector-pseudo">:35</span>,<span class="selector-tag">484</span> <span class="selector-attr">[myid:]</span> <span class="selector-tag">-</span> <span class="selector-tag">WARN</span>  <span class="selector-attr">[main:QuorumPeerConfig@290]</span> <span class="selector-tag">-</span> <span class="selector-tag">Non-optimial</span> <span class="selector-tag">configuration</span>, <span class="selector-tag">consider</span> <span class="selector-tag">an</span> <span class="selector-tag">odd</span> <span class="selector-tag">number</span> <span class="selector-tag">of</span> <span class="selector-tag">servers</span>.</div><div class="line"><span class="selector-tag">2018-01-23</span> <span class="selector-tag">10</span><span class="selector-pseudo">:48</span><span class="selector-pseudo">:35</span>,<span class="selector-tag">484</span> <span class="selector-attr">[myid:]</span> <span class="selector-tag">-</span> <span class="selector-tag">INFO</span>  <span class="selector-attr">[main:QuorumPeerConfig@334]</span> <span class="selector-tag">-</span> <span class="selector-tag">Defaulting</span> <span class="selector-tag">to</span> <span class="selector-tag">majority</span> <span class="selector-tag">quorums</span></div><div class="line"><span class="selector-tag">2018-01-23</span> <span class="selector-tag">10</span><span class="selector-pseudo">:48</span><span class="selector-pseudo">:35</span>,<span class="selector-tag">512</span> <span class="selector-attr">[myid:4]</span> <span class="selector-tag">-</span> <span class="selector-tag">INFO</span>  <span class="selector-attr">[main:DatadirCleanupManager@78]</span> <span class="selector-tag">-</span> <span class="selector-tag">autopurge</span><span class="selector-class">.snapRetainCount</span> <span class="selector-tag">set</span> <span class="selector-tag">to</span> <span class="selector-tag">3</span></div><div class="line"><span class="selector-tag">2018-01-23</span> <span class="selector-tag">10</span><span class="selector-pseudo">:48</span><span class="selector-pseudo">:35</span>,<span class="selector-tag">513</span> <span class="selector-attr">[myid:4]</span> <span class="selector-tag">-</span> <span class="selector-tag">INFO</span>  <span class="selector-attr">[main:DatadirCleanupManager@79]</span> <span class="selector-tag">-</span> <span class="selector-tag">autopurge</span><span class="selector-class">.purgeInterval</span> <span class="selector-tag">set</span> <span class="selector-tag">to</span> <span class="selector-tag">0</span></div><div class="line"><span class="selector-tag">2018-01-23</span> <span class="selector-tag">10</span><span class="selector-pseudo">:48</span><span class="selector-pseudo">:35</span>,<span class="selector-tag">513</span> <span class="selector-attr">[myid:4]</span> <span class="selector-tag">-</span> <span class="selector-tag">INFO</span>  <span class="selector-attr">[main:DatadirCleanupManager@101]</span> <span class="selector-tag">-</span> <span class="selector-tag">Purge</span> <span class="selector-tag">task</span> <span class="selector-tag">is</span> <span class="selector-tag">not</span> <span class="selector-tag">scheduled</span>.</div><div class="line"><span class="selector-tag">2018-01-23</span> <span class="selector-tag">10</span><span class="selector-pseudo">:48</span><span class="selector-pseudo">:35</span>,<span class="selector-tag">536</span> <span class="selector-attr">[myid:4]</span> <span class="selector-tag">-</span> <span class="selector-tag">INFO</span>  <span class="selector-attr">[main:QuorumPeerMain@132]</span> <span class="selector-tag">-</span> <span class="selector-tag">Starting</span> <span class="selector-tag">quorum</span> <span class="selector-tag">peer</span></div><div class="line"><span class="selector-tag">2018-01-23</span> <span class="selector-tag">10</span><span class="selector-pseudo">:48</span><span class="selector-pseudo">:35</span>,<span class="selector-tag">587</span> <span class="selector-attr">[myid:4]</span> <span class="selector-tag">-</span> <span class="selector-tag">INFO</span>  <span class="selector-attr">[main:NIOServerCnxnFactory@94]</span> <span class="selector-tag">-</span> <span class="selector-tag">binding</span> <span class="selector-tag">to</span> <span class="selector-tag">port</span> <span class="selector-tag">0</span><span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.0</span>/<span class="selector-tag">0</span><span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-pseudo">:2181</span></div><div class="line"><span class="selector-tag">2018-01-23</span> <span class="selector-tag">10</span><span class="selector-pseudo">:48</span><span class="selector-pseudo">:35</span>,<span class="selector-tag">611</span> <span class="selector-attr">[myid:4]</span> <span class="selector-tag">-</span> <span class="selector-tag">INFO</span>  <span class="selector-attr">[main:QuorumPeer@913]</span> <span class="selector-tag">-</span> <span class="selector-tag">tickTime</span> <span class="selector-tag">set</span> <span class="selector-tag">to</span> <span class="selector-tag">2000</span></div><div class="line"><span class="selector-tag">2018-01-23</span> <span class="selector-tag">10</span><span class="selector-pseudo">:48</span><span class="selector-pseudo">:35</span>,<span class="selector-tag">612</span> <span class="selector-attr">[myid:4]</span> <span class="selector-tag">-</span> <span class="selector-tag">INFO</span>  <span class="selector-attr">[main:QuorumPeer@933]</span> <span class="selector-tag">-</span> <span class="selector-tag">minSessionTimeout</span> <span class="selector-tag">set</span> <span class="selector-tag">to</span> <span class="selector-tag">-1</span></div><div class="line"><span class="selector-tag">2018-01-23</span> <span class="selector-tag">10</span><span class="selector-pseudo">:48</span><span class="selector-pseudo">:35</span>,<span class="selector-tag">612</span> <span class="selector-attr">[myid:4]</span> <span class="selector-tag">-</span> <span class="selector-tag">INFO</span>  <span class="selector-attr">[main:QuorumPeer@944]</span> <span class="selector-tag">-</span> <span class="selector-tag">maxSessionTimeout</span> <span class="selector-tag">set</span> <span class="selector-tag">to</span> <span class="selector-tag">-1</span></div><div class="line"><span class="selector-tag">2018-01-23</span> <span class="selector-tag">10</span><span class="selector-pseudo">:48</span><span class="selector-pseudo">:35</span>,<span class="selector-tag">612</span> <span class="selector-attr">[myid:4]</span> <span class="selector-tag">-</span> <span class="selector-tag">INFO</span>  <span class="selector-attr">[main:QuorumPeer@959]</span> <span class="selector-tag">-</span> <span class="selector-tag">initLimit</span> <span class="selector-tag">set</span> <span class="selector-tag">to</span> <span class="selector-tag">10</span></div><div class="line"><span class="selector-tag">2018-01-23</span> <span class="selector-tag">10</span><span class="selector-pseudo">:48</span><span class="selector-pseudo">:35</span>,<span class="selector-tag">639</span> <span class="selector-attr">[myid:4]</span> <span class="selector-tag">-</span> <span class="selector-tag">INFO</span>  <span class="selector-attr">[main:QuorumPeer@429]</span> <span class="selector-tag">-</span> <span class="selector-tag">currentEpoch</span> <span class="selector-tag">not</span> <span class="selector-tag">found</span>! <span class="selector-tag">Creating</span> <span class="selector-tag">with</span> <span class="selector-tag">a</span> <span class="selector-tag">reasonable</span> <span class="selector-tag">default</span> <span class="selector-tag">of</span> <span class="selector-tag">0</span>. <span class="selector-tag">This</span> <span class="selector-tag">should</span> <span class="selector-tag">only</span> <span class="selector-tag">happen</span> <span class="keyword">when</span> you are upgrading your installation</div><div class="line"><span class="number">2018</span>-<span class="number">01</span>-<span class="number">23</span> <span class="number">10</span>:<span class="number">48</span>:<span class="number">35</span>,<span class="number">643</span> [<span class="attribute">myid</span>:<span class="number">4</span>] - INFO  [<span class="attribute">main</span>:QuorumPeer<span class="variable">@444</span>] - acceptedEpoch <span class="keyword">not</span> found! Creating with a reasonable default of <span class="number">0</span>. This should only happen <span class="keyword">when</span> you are upgrading your installation</div><div class="line"><span class="number">2018</span>-<span class="number">01</span>-<span class="number">23</span> <span class="number">10</span>:<span class="number">48</span>:<span class="number">35</span>,<span class="number">652</span> [<span class="attribute">myid</span>:<span class="number">4</span>] - INFO  [<span class="attribute">Thread-1</span>:QuorumCnxManager$Listener<span class="variable">@486</span>] - My election bind <span class="attribute">port</span>: <span class="number">0.0</span>.<span class="number">0.0</span>/<span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">3888</span></div><div class="line"><span class="number">2018</span>-<span class="number">01</span>-<span class="number">23</span> <span class="number">10</span>:<span class="number">48</span>:<span class="number">35</span>,<span class="number">674</span> [<span class="attribute">myid</span>:<span class="number">4</span>] - INFO  [QuorumPeer[myid=<span class="number">4</span>]/<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">2181</span>:QuorumPeer<span class="variable">@670</span>] - LOOKING</div><div class="line"><span class="number">2018</span>-<span class="number">01</span>-<span class="number">23</span> <span class="number">10</span>:<span class="number">48</span>:<span class="number">35</span>,<span class="number">679</span> [<span class="attribute">myid</span>:<span class="number">4</span>] - INFO  [QuorumPeer[myid=<span class="number">4</span>]/<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">2181</span>:FastLeaderElection<span class="variable">@740</span>] - New election. My id =  <span class="number">4</span>, proposed zxid=<span class="number">0</span>x0</div><div class="line"><span class="number">2018</span>-<span class="number">01</span>-<span class="number">23</span> <span class="number">10</span>:<span class="number">48</span>:<span class="number">35</span>,<span class="number">692</span> [<span class="attribute">myid</span>:<span class="number">4</span>] - INFO  [slave3/<span class="number">192.168</span>.<span class="number">137.14</span>:<span class="number">3888</span>:QuorumCnxManager$Listener<span class="variable">@493</span>] - Received connection request /<span class="number">192.168</span>.<span class="number">137.11</span>:<span class="number">34491</span></div><div class="line"><span class="number">2018</span>-<span class="number">01</span>-<span class="number">23</span> <span class="number">10</span>:<span class="number">48</span>:<span class="number">35</span>,<span class="number">704</span> [<span class="attribute">myid</span>:<span class="number">4</span>] - INFO  [WorkerReceiver[myid=<span class="number">4</span>]:FastLeaderElection<span class="variable">@542</span>] - <span class="attribute">Notification</span>: <span class="number">4</span> (n.leader), <span class="number">0</span>x0 (n.zxid), <span class="number">0</span>x1 (n.round), LOOKING (n.state), <span class="number">4</span> (n.sid), <span class="number">0</span>x0 (n.peerEPoch), LOOKING (my state)</div><div class="line"><span class="number">2018</span>-<span class="number">01</span>-<span class="number">23</span> <span class="number">10</span>:<span class="number">48</span>:<span class="number">35</span>,<span class="number">706</span> [<span class="attribute">myid</span>:<span class="number">4</span>] - WARN  [WorkerSender[myid=<span class="number">4</span>]:QuorumCnxManager<span class="variable">@368</span>] - Cannot open channel to <span class="number">2</span> at election address slave1/<span class="number">192.168</span>.<span class="number">137.12</span>:<span class="number">3888</span></div><div class="line">java.net.<span class="attribute">ConnectException</span>: Connection refused (Connection refused)</div><div class="line">	at java.net.PlainSocketImpl.socketConnect(Native Method)</div><div class="line">	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.<span class="attribute">java</span>:<span class="number">350</span>)</div><div class="line">	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.<span class="attribute">java</span>:<span class="number">206</span>)</div><div class="line">	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.<span class="attribute">java</span>:<span class="number">188</span>)</div><div class="line">	at java.net.SocksSocketImpl.connect(SocksSocketImpl.<span class="attribute">java</span>:<span class="number">392</span>)</div><div class="line">	at java.net.Socket.connect(Socket.<span class="attribute">java</span>:<span class="number">589</span>)</div><div class="line">	at org.apache.zookeeper.server.quorum.QuorumCnxManager.connectOne(QuorumCnxManager.<span class="attribute">java</span>:<span class="number">354</span>)</div><div class="line">	at org.apache.zookeeper.server.quorum.QuorumCnxManager.toSend(QuorumCnxManager.<span class="attribute">java</span>:<span class="number">327</span>)</div><div class="line">	at org.apache.zookeeper.server.quorum.FastLeaderElection$Messenger$WorkerSender.process(FastLeaderElection.<span class="attribute">java</span>:<span class="number">393</span>)</div><div class="line">	at org.apache.zookeeper.server.quorum.FastLeaderElection$Messenger$WorkerSender.run(FastLeaderElection.<span class="attribute">java</span>:<span class="number">365</span>)</div><div class="line">	at java.lang.Thread.run(Thread.<span class="attribute">java</span>:<span class="number">748</span>)</div></pre></td></tr></table></figure>
<p>提示<code>Connection refused</code>的异常，其实一开始先不急着百度这个问题，其实要所有节点上都启动zookeeper后再看看运行状态，现在查看运行状态都是没运行的，也找不到相应的进程：</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">[root@master zookeeper]# <span class="regexp">/opt/</span>zookeeper<span class="regexp">/bin/</span>zkServer.sh start</div><div class="line">JMX enabled by <span class="keyword">default</span></div><div class="line">Using config: <span class="regexp">/opt/</span>zookeeper<span class="regexp">/bin/</span>..<span class="regexp">/conf/</span>zoo.cfg</div><div class="line">Starting zookeeper ... STARTED</div><div class="line">[root@master zookeeper]# <span class="regexp">/opt/</span>zookeeper<span class="regexp">/bin/</span>zkServer.sh status</div><div class="line">JMX enabled by <span class="keyword">default</span></div><div class="line">Using config: <span class="regexp">/opt/</span>zookeeper<span class="regexp">/bin/</span>..<span class="regexp">/conf/</span>zoo.cfg</div><div class="line">Error contacting service. It is probably not running.</div></pre></td></tr></table></figure>
<p>到其他节点服务器上都启动zookeeper，过一会儿后每个服务器查看状态：</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[root@<span class="keyword">master</span> <span class="title">zookeeper</span>]<span class="comment"># /opt/zookeeper/bin/zkServer.sh status</span></div><div class="line">JMX enabled by default</div><div class="line">Using config: /opt/zookeeper/bin/../conf/zoo.cfg</div><div class="line">Mode: follower</div><div class="line">[root@<span class="keyword">master</span> <span class="title">zookeeper</span>]<span class="comment"># jps</span></div><div class="line"><span class="number">5488</span> QuorumPeerMain</div><div class="line"><span class="number">5539</span> Jps</div></pre></td></tr></table></figure>
<p>如果有Mode和QuorumPeerMain，就说明已经启动成功了。</p>
<p>如果要关闭zookeeper,需要在每个节点上执行：</p>
<p><code>/opt/zookeeper/bin/zkServer.sh stop</code></p>
<p>另外如果使用如下命令启动，就会在启动时输出日志信息：</p>
<p><code>/opt/zookeeper/bin/zkServer.sh start-foreground</code></p>
<h3 id="批量启动和关闭"><a href="#批量启动和关闭" class="headerlink" title="批量启动和关闭"></a>批量启动和关闭</h3><p>一台一台服务器去执行命令有点麻烦，写一个脚本批量执行：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/bash</span></div><div class="line"></div><div class="line"><span class="comment">#下面变量修改zookeeper安装目录</span></div><div class="line">zooHome=/opt/zookeeper</div><div class="line"><span class="keyword">if</span>  [ <span class="variable">$1</span> != <span class="string">""</span>  ]</div><div class="line">	<span class="keyword">then</span></div><div class="line">        confFile=<span class="variable">$zooHome</span>/conf/zoo.cfg</div><div class="line">        slaves=$(cat <span class="string">"<span class="variable">$confFile</span>"</span> | sed <span class="string">'/^server/!d;s/^.*=//;s/:.*$//g;/^$/d'</span>)</div><div class="line">        <span class="keyword">for</span> salve <span class="keyword">in</span> <span class="variable">$slaves</span> ; <span class="keyword">do</span></div><div class="line">            ssh <span class="variable">$salve</span> <span class="string">"<span class="variable">$zooHome</span>/bin/zkServer.sh <span class="variable">$1</span>"</span></div><div class="line">        <span class="keyword">done</span></div><div class="line">	<span class="keyword">else</span></div><div class="line">		<span class="built_in">echo</span> <span class="string">"parameter empty! parameter:start|stop"</span></div><div class="line"><span class="keyword">fi</span></div></pre></td></tr></table></figure>
<p>将上面脚本保存为<code>zooManager</code>文件，调用执行：</p>
<p><code>sh zooManager start</code></p>
<p><code>sh zooManager stop</code></p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">[root@master opt]# sh zooManager start</div><div class="line">JMX enabled by <span class="keyword">default</span></div><div class="line">Using config: <span class="regexp">/opt/</span>zookeeper<span class="regexp">/bin/</span>..<span class="regexp">/conf/</span>zoo.cfg</div><div class="line">Starting zookeeper ... STARTED</div><div class="line">JMX enabled by <span class="keyword">default</span></div><div class="line">Using config: <span class="regexp">/opt/</span>zookeeper<span class="regexp">/bin/</span>..<span class="regexp">/conf/</span>zoo.cfg</div><div class="line">Starting zookeeper ... STARTED</div><div class="line">JMX enabled by <span class="keyword">default</span></div><div class="line">Using config: <span class="regexp">/opt/</span>zookeeper<span class="regexp">/bin/</span>..<span class="regexp">/conf/</span>zoo.cfg</div><div class="line">Starting zookeeper ... STARTED</div><div class="line">JMX enabled by <span class="keyword">default</span></div><div class="line">Using config: <span class="regexp">/opt/</span>zookeeper<span class="regexp">/bin/</span>..<span class="regexp">/conf/</span>zoo.cfg</div><div class="line">Starting zookeeper ... STARTED</div></pre></td></tr></table></figure>
<p>由于所有服务器节点都是使用root用户，所以没有考虑权限问题，实际情况要考虑的。</p>
<p>参考：<a href="http://coolxing.iteye.com/blog/1871009" target="_blank" rel="external">http://coolxing.iteye.com/blog/1871009</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇介绍在四个节点的集群中搭建zookeeper环境，zookeeper可配置三种模式运行：单机模式，伪集群模式，集群模式，本文使用集群模式搭建。&lt;/p&gt;
    
    </summary>
    
      <category term="码路刺客" scheme="http://c-xuan.com/categories/%E7%A0%81%E8%B7%AF%E5%88%BA%E5%AE%A2/"/>
    
    
      <category term="原创" scheme="http://c-xuan.com/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="zookeeper" scheme="http://c-xuan.com/tags/zookeeper/"/>
    
      <category term="分布式" scheme="http://c-xuan.com/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Markdown使用table标签创建表格的问题</title>
    <link href="http://c-xuan.com/2017/12/10/20171210001/"/>
    <id>http://c-xuan.com/2017/12/10/20171210001/</id>
    <published>2017-12-09T16:00:00.000Z</published>
    <updated>2017-12-09T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用Markdown写东西有时需要插入表格，方式有两种：</p>
<ul>
<li>1.使用Markdown的表格语法</li>
<li>2.使用html的<code>&lt;table&gt;</code>标签来创建表格</li>
</ul>
<p>但是某些Markdown编辑器中使用<code>&lt;table&gt;</code>标签会出现表格前有空行的情况。</p>
<a id="more"></a>
<h3 id="问题复现"><a href="#问题复现" class="headerlink" title="问题复现"></a>问题复现</h3><p>先看使用Markdown语法创建表格：<br><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="params">| Tables   |</span>      Are      <span class="params">|  Cool |</span></div><div class="line"><span class="params">|----------|</span><span class="symbol">:-------------</span><span class="symbol">:|------</span><span class="symbol">:|</span></div><div class="line"><span class="params">| col 1 is |</span>  left-aligned <span class="params">| $1600 |</span></div><div class="line"><span class="params">| col 2 is |</span>    centered   <span class="params">|   $12 |</span></div><div class="line"><span class="params">| col 3 is |</span> right-aligned <span class="params">|    $1 |</span></div></pre></td></tr></table></figure></p>
<p>效果如下（分割线中间的表格）</p>
<hr>
<table>
<thead>
<tr>
<th>Tables</th>
<th style="text-align:center">Are</th>
<th style="text-align:right">Cool</th>
</tr>
</thead>
<tbody>
<tr>
<td>col 1 is</td>
<td style="text-align:center">left-aligned</td>
<td style="text-align:right">$1600</td>
</tr>
<tr>
<td>col 2 is</td>
<td style="text-align:center">centered</td>
<td style="text-align:right">$12</td>
</tr>
<tr>
<td>col 3 is</td>
<td style="text-align:center">right-aligned</td>
<td style="text-align:right">$1</td>
</tr>
</tbody>
</table>
<hr>
<p>同样的表格使用<code>&lt;table&gt;</code>标签创建：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>Tables<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>Are<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>Cool<span class="tag">&lt;/<span class="name">th</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>col 1 is<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>left-aligned<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>$1600<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>col 2 is<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>centered<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>$12<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>col 3 is<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>right-aligned<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>$1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>效果如下：（分割线中间的表格）</p>
<hr>
<p><table><br>  <tr><br>    <th>Tables</th><br>    <th>Are</th><br>    <th>Cool</th><br>  </tr><br>  <tr><br>    <td>col 1 is</td><br>    <td>left-aligned</td><br>    <td>$1600</td><br>  </tr><br>  <tr><br>    <td>col 2 is</td><br>    <td>centered</td><br>    <td>$12</td><br>  </tr><br>  <tr><br>    <td>col 3 is</td><br>    <td>right-aligned</td><br>    <td>$1</td><br>  </tr><br></table></p>
<hr>
<p>会发现表格前多了很多<code>&lt;/br&gt;</code>换行。</p>
<h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>解决办法是将代码改为紧凑模式，修改代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;table&gt;<span class="xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>Tables<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>Are<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>Cool<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>col 1 is<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>left-aligned<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>$1600<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>col 2 is<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>centered<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>$12<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><span class="xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>col 3 is<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>right-aligned<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>$1<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></div></pre></td></tr></table></figure></p>
<p>效果如下：（分割线中间的表格）</p>
<hr>
<p><table><tr><th>Tables</th><th>Are</th><th>Cool</th></tr><tr><td>col 1 is</td><td>left-aligned</td><td>$1600</td></tr><tr><td>col 2 is</td><td>centered</td><td>$12</td></tr><tr><td>col 3 is</td><td>right-aligned</td><td>$1</td></tr></table></p>
<hr>
<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ul>
<li>1由于使用Haroopad编辑器写东西再用Hexo发布到Github上，所以会有这种情况出现。如果是其他编辑器，比如简书，这个不会有，因为简书压根儿不支持<code>&lt;table&gt;</code>标签的表格，CSDN上是支持的，不会出现以上问题。</li>
<li>2.使用哪种方式创建表格根据自己的需要而定，Markdown语法简单，但是缺点是不支持列宽度定义，表格样式定义，单元格合并等。<code>&lt;table&gt;</code>标签相比较而言灵活很多。</li>
<li>3.很多时候直接写表格代码是很累的，比较好的方案是在Excel中编辑，再生成代码，网上搜索相应工具也有很多，比如<a href="http://www.tablesgenerator.com/" target="_blank" rel="external">Tables Generator</a>。</li>
<li>4.笔者使用Excel自行写了个生成<code>&lt;table&gt;</code>代码的工具生成压缩的表格代码，在EXCEL中编辑好表格，生成的表格代码列宽会根据Excel中的表格列宽转成百分比，编辑后点击<code>生成表格代码</code>即在Excel文件的同一目录中出现<code>Output.txt</code>文件，将代码复制到Markdown中即可。</li>
</ul>
<p><a href="/download/table2code.xlsm">代码生成工具下载</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用Markdown写东西有时需要插入表格，方式有两种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.使用Markdown的表格语法&lt;/li&gt;
&lt;li&gt;2.使用html的&lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt;标签来创建表格&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但是某些Markdown编辑器中使用&lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt;标签会出现表格前有空行的情况。&lt;/p&gt;
    
    </summary>
    
      <category term="码路刺客" scheme="http://c-xuan.com/categories/%E7%A0%81%E8%B7%AF%E5%88%BA%E5%AE%A2/"/>
    
    
      <category term="原创" scheme="http://c-xuan.com/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="Markdown" scheme="http://c-xuan.com/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>【cmd】IF ELSE 复制(copy)文件问题</title>
    <link href="http://c-xuan.com/2017/11/28/20171128001/"/>
    <id>http://c-xuan.com/2017/11/28/20171128001/</id>
    <published>2017-11-27T16:00:00.000Z</published>
    <updated>2017-11-27T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>cmd中复制文件<code>COPY</code>命令一般都不会有问题，但是如果把<code>COPY</code>放在<code>IF ELSE</code>中可能导致批处理文件无法运行。</p>
<a id="more"></a>
<h3 id="测试场景"><a href="#测试场景" class="headerlink" title="测试场景"></a>测试场景</h3><p>文件夹结构如下：</p>
<p>test <br><br>|—folder1<br><br>|—|—a(b).txt<br><br>|—folder2</p>
<p>选择是否从folder1文件夹复制a(b).txt文件到folder2文件夹。</p>
<h3 id="测试1"><a href="#测试1" class="headerlink" title="测试1"></a>测试1</h3><p>不进行选择交互，直接复制，脚本如下：<br><figure class="highlight dos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off &amp; <span class="built_in">setlocal</span> EnableDelayedExpansion</div><div class="line"></div><div class="line"><span class="built_in">set</span> currentDir=<span class="variable">!cd!</span></div><div class="line"></div><div class="line"><span class="built_in">DEL</span> /Q <span class="variable">!currentDir!</span>\folder2\*.* </div><div class="line"></div><div class="line"><span class="built_in">copy</span> <span class="variable">!currentDir!</span>\folder1\a(b).txt <span class="variable">!currentDir!</span>\folder2</div></pre></td></tr></table></figure></p>
<p>保存为test.bat文件后执行结果：<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">已复制         <span class="number">1</span> 个文件。</div><div class="line">请按任意键继续. . .</div></pre></td></tr></table></figure></p>
<p>copy复制语句似乎没有问题。</p>
<h3 id="测试2"><a href="#测试2" class="headerlink" title="测试2"></a>测试2</h3><p>修改以上脚本，添加选择交互：<br><figure class="highlight dos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off &amp; <span class="built_in">setlocal</span> EnableDelayedExpansion</div><div class="line"></div><div class="line"><span class="built_in">set</span> /p yesno=是否复制(<span class="number">0</span>:否，<span class="number">1</span>:是): </div><div class="line"></div><div class="line"><span class="built_in">set</span> currentDir=<span class="variable">!cd!</span></div><div class="line"></div><div class="line"><span class="built_in">DEL</span> /Q <span class="variable">!currentDir!</span>\folder2\*.*</div><div class="line"></div><div class="line"><span class="keyword">if</span> <span class="variable">!yesno!</span> <span class="keyword">equ</span> <span class="number">1</span> ( </div><div class="line">    <span class="built_in">copy</span> <span class="variable">!currentDir!</span>\folder1\a(b).txt <span class="variable">!currentDir!</span>\folder2</div><div class="line">)<span class="keyword">else</span> (</div><div class="line">    <span class="built_in">echo</span> 没复制</div><div class="line">)</div><div class="line"></div><div class="line"><span class="built_in">pause</span></div></pre></td></tr></table></figure></p>
<p>保存为test.bat文件后执行,发现一闪而过，看不到什么报错。</p>
<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>经过多次测试，发现将copy中的路径用双引号(“”)包裹起来就可以了。<br><figure class="highlight dos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off &amp; <span class="built_in">setlocal</span> EnableDelayedExpansion</div><div class="line"></div><div class="line"><span class="built_in">set</span> /p yesno=是否复制(<span class="number">0</span>:否，<span class="number">1</span>:是): </div><div class="line"></div><div class="line"><span class="built_in">set</span> currentDir=<span class="variable">!cd!</span></div><div class="line"></div><div class="line"><span class="built_in">DEL</span> /Q <span class="variable">!currentDir!</span>\folder2\*.*</div><div class="line"></div><div class="line"><span class="keyword">if</span> <span class="variable">!yesno!</span> <span class="keyword">equ</span> <span class="number">1</span> ( </div><div class="line">    <span class="built_in">copy</span> "<span class="variable">!currentDir!</span>\folder1\a(b).txt" <span class="variable">!currentDir!</span>\folder2</div><div class="line">)<span class="keyword">else</span> (</div><div class="line">    <span class="built_in">echo</span> 没复制</div><div class="line">)</div><div class="line"></div><div class="line"><span class="built_in">pause</span></div></pre></td></tr></table></figure></p>
<p>由此可见，应该是路径中某些符号没有转义导致的，目测是文件名中的<code>()</code>，修改脚本，用<code>^</code>将<code>()</code>转义：<br><figure class="highlight dos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off &amp; <span class="built_in">setlocal</span> EnableDelayedExpansion</div><div class="line"></div><div class="line"><span class="built_in">set</span> /p yesno=是否复制(<span class="number">0</span>:否，<span class="number">1</span>:是): </div><div class="line"></div><div class="line"><span class="built_in">set</span> currentDir=<span class="variable">!cd!</span></div><div class="line"></div><div class="line"><span class="built_in">DEL</span> /Q <span class="variable">!currentDir!</span>\folder2\*.*</div><div class="line"></div><div class="line"><span class="keyword">if</span> <span class="variable">!yesno!</span> <span class="keyword">equ</span> <span class="number">1</span> ( </div><div class="line">    <span class="built_in">copy</span> <span class="variable">!currentDir!</span>\folder1\a^(b^).txt <span class="variable">!currentDir!</span>\folder2</div><div class="line">)<span class="keyword">else</span> (</div><div class="line">    <span class="built_in">echo</span> 没复制</div><div class="line">)</div><div class="line"></div><div class="line"><span class="built_in">pause</span></div></pre></td></tr></table></figure></p>
<p>运行结果：<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">是否复制(<span class="number">0</span>:否，<span class="number">1</span>:是): <span class="number">1</span></div><div class="line">已复制         <span class="number">1</span> 个文件。</div><div class="line">请按任意键继续. . .</div></pre></td></tr></table></figure></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>虽然测试1中直接执行复制没问题，但是，将同样的语句放入IF ELSE中居然无法执行，还很难定位问题在哪里，所以解决方法是最好把路径放在双引号(“”)里面，就不用担心这个问题了，如果不这样就在IF ELSE中的路径把特殊字符转义。附上CMD中特殊字符转义说明。</p>
<table>
<thead>
<tr>
<th>Character to be escaped</th>
<th>Escape Sequence</th>
<th>Remark</th>
</tr>
</thead>
<tbody>
<tr>
<td>%</td>
<td>%%</td>
<td>May not always be required in doublequoted strings, just try</td>
</tr>
<tr>
<td>^</td>
<td>^^</td>
<td>May not always be required in doublequoted strings, but it won’t hurt</td>
</tr>
<tr>
<td>&amp;</td>
<td>^&amp;</td>
<td>May not always be required in doublequoted strings, but it won’t hurt</td>
</tr>
<tr>
<td>&lt;</td>
<td>^&lt;</td>
<td>May not always be required in doublequoted strings, but it won’t hurt</td>
</tr>
<tr>
<td>&gt;</td>
<td>^&gt;</td>
<td>May not always be required in doublequoted strings, but it won’t hurt</td>
</tr>
<tr>
<td>‘</td>
<td>^’</td>
<td>Required only in the FOR /F “subject” (i.e. between the parenthesis), unless backqis used</td>
</tr>
<tr>
<td>`</td>
<td>^`</td>
<td>Required only in the FOR /F “subject” (i.e. between the parenthesis), if backq is used</td>
</tr>
<tr>
<td>,</td>
<td>^,</td>
<td>Required only in the FOR /F “subject” (i.e. between the parenthesis), even in doublequoted strings</td>
</tr>
<tr>
<td>;</td>
<td>^;</td>
<td>Required only in the FOR /F “subject” (i.e. between the parenthesis), even in doublequoted strings</td>
</tr>
<tr>
<td>=</td>
<td>^=</td>
<td>Required only in the FOR /F “subject” (i.e. between the parenthesis), even in doublequoted strings</td>
</tr>
<tr>
<td>(</td>
<td>^(</td>
<td>Required only in the FOR /F “subject” (i.e. between the parenthesis), even in doublequoted strings</td>
</tr>
<tr>
<td>)</td>
<td>^)</td>
<td>Required only in the FOR /F “subject” (i.e. between the parenthesis), even in doublequoted strings</td>
</tr>
<tr>
<td>!</td>
<td>^^!</td>
<td>Required only when delayed variable expansion is active</td>
</tr>
<tr>
<td>“</td>
<td>“”</td>
<td>Required only inside the search pattern of FIND</td>
</tr>
<tr>
<td>\</td>
<td>\\</td>
<td>Required only inside the regex pattern of FINDSTR</td>
</tr>
<tr>
<td>[</td>
<td>\[</td>
<td>Required only inside the regex pattern of FINDSTR</td>
</tr>
<tr>
<td>]</td>
<td>\]</td>
<td>Required only inside the regex pattern of FINDSTR</td>
</tr>
<tr>
<td>\</td>
<td>\\</td>
<td>Required only inside the regex pattern of FINDSTR</td>
</tr>
<tr>
<td>.</td>
<td>\.</td>
<td>Required only inside the regex pattern of FINDSTR</td>
</tr>
<tr>
<td>*</td>
<td>\*</td>
<td>Required only inside the regex pattern of FINDSTR</td>
</tr>
<tr>
<td>?</td>
<td>\?</td>
<td>Required only inside the regex pattern of FINDSTR</td>
</tr>
</tbody>
</table>
<p>参考：<a href="http://www.robvanderwoude.com/escapechars.php" target="_blank" rel="external">http://www.robvanderwoude.com/escapechars.php</a></p>
<p>将表格快速转换为HTML,Markdown格式：<a href="http://www.tablesgenerator.com/" target="_blank" rel="external">http://www.tablesgenerator.com/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;cmd中复制文件&lt;code&gt;COPY&lt;/code&gt;命令一般都不会有问题，但是如果把&lt;code&gt;COPY&lt;/code&gt;放在&lt;code&gt;IF ELSE&lt;/code&gt;中可能导致批处理文件无法运行。&lt;/p&gt;
    
    </summary>
    
      <category term="码路刺客" scheme="http://c-xuan.com/categories/%E7%A0%81%E8%B7%AF%E5%88%BA%E5%AE%A2/"/>
    
    
      <category term="原创" scheme="http://c-xuan.com/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="cmd" scheme="http://c-xuan.com/tags/cmd/"/>
    
  </entry>
  
  <entry>
    <title>【ORACLE】导致物化视图快速刷新变慢的原因和解决</title>
    <link href="http://c-xuan.com/2017/11/19/20171119001/"/>
    <id>http://c-xuan.com/2017/11/19/20171119001/</id>
    <published>2017-11-18T16:00:00.000Z</published>
    <updated>2017-11-28T17:07:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>ORACLE物化视图(MATERIALIZED VIEW)有自动提交刷新和手动刷新两种刷新方式，每种刷新方式下有增量刷新(FAST)、全量刷新(COMPLETE)、系统自动判断(FORCE)三种刷新方法。一般而言，增量刷新理论上是比全量刷新要快一些的，但是我发现某些情况下增量刷新将导致基表提交后延迟严重，下面将做一些测试。</p>
<a id="more"></a>
<h3 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h3><ul>
<li>操作系统：Red Hat Enterprise Linux Server release 5.8 虚拟机</li>
<li>处理器：Intel(R) Core(TM) i7-4700MQ CPU @ 2.40GHz</li>
<li>内存大小：4G</li>
<li>数据库：Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production</li>
</ul>
<h3 id="准备测试数据"><a href="#准备测试数据" class="headerlink" title="准备测试数据"></a>准备测试数据</h3><p>创建三个表结构相同的测试表，id为自增长主键，这三个表作为物化视图的基表。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> t1 (</div><div class="line">    <span class="keyword">id</span> <span class="built_in">INT</span>,</div><div class="line">    c1 <span class="built_in">INT</span>,</div><div class="line">    c2 <span class="built_in">INT</span>,</div><div class="line">    <span class="keyword">constraint</span> pk1 primary <span class="keyword">key</span>(<span class="keyword">id</span>));</div><div class="line">    </div><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> t2 (</div><div class="line">    <span class="keyword">id</span> <span class="built_in">INT</span>,</div><div class="line">    c1 <span class="built_in">INT</span>,</div><div class="line">    c2 <span class="built_in">INT</span>,</div><div class="line">    <span class="keyword">constraint</span> pk2 primary <span class="keyword">key</span>(<span class="keyword">id</span>));</div><div class="line">    </div><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> t3 (</div><div class="line">    <span class="keyword">id</span> <span class="built_in">INT</span>,</div><div class="line">    c1 <span class="built_in">INT</span>,</div><div class="line">    c2 <span class="built_in">INT</span>,</div><div class="line">    <span class="keyword">constraint</span> pk3 primary <span class="keyword">key</span>(<span class="keyword">id</span>));</div></pre></td></tr></table></figure>
<p>每个表插入30000行数据，并给三个基表创建物化视图日志(MATERIALIZED VIEW LOG)：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">MATERIALIZED</span> <span class="keyword">VIEW</span> <span class="keyword">LOG</span> <span class="keyword">ON</span> t1 <span class="keyword">WITH</span> <span class="keyword">ROWID</span>,<span class="keyword">SEQUENCE</span>(<span class="keyword">id</span>,c1,c2) <span class="keyword">INCLUDING</span> <span class="keyword">NEW</span> <span class="keyword">VALUES</span>;</div><div class="line"></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">MATERIALIZED</span> <span class="keyword">VIEW</span> <span class="keyword">LOG</span> <span class="keyword">ON</span> t2 <span class="keyword">WITH</span> <span class="keyword">ROWID</span>,<span class="keyword">SEQUENCE</span>(<span class="keyword">id</span>,c1,c2) <span class="keyword">INCLUDING</span> <span class="keyword">NEW</span> <span class="keyword">VALUES</span>;</div><div class="line"></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">MATERIALIZED</span> <span class="keyword">VIEW</span> <span class="keyword">LOG</span> <span class="keyword">ON</span> t3 <span class="keyword">WITH</span> <span class="keyword">ROWID</span>,<span class="keyword">SEQUENCE</span>(<span class="keyword">id</span>,c1,c2) <span class="keyword">INCLUDING</span> <span class="keyword">NEW</span> <span class="keyword">VALUES</span>;</div></pre></td></tr></table></figure>
<h3 id="物化视图中不包含列计算"><a href="#物化视图中不包含列计算" class="headerlink" title="物化视图中不包含列计算"></a>物化视图中不包含列计算</h3><p>首先创建的物化视图如下：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">MATERIALIZED</span> <span class="keyword">VIEW</span> mv1</div><div class="line"><span class="keyword">BUILD</span> <span class="keyword">IMMEDIATE</span></div><div class="line"><span class="keyword">REFRESH</span> <span class="keyword">FAST</span> <span class="keyword">ON</span> <span class="keyword">COMMIT</span></div><div class="line"><span class="keyword">WITH</span> <span class="keyword">ROWID</span></div><div class="line"><span class="keyword">AS</span></div><div class="line"><span class="keyword">SELECT</span> a.id aid,a.c1 ac1,a.c2 ac2,b.c1 bc1,b.c2 bc2,</div><div class="line">       a.rowid rida,b.rowid ridb</div><div class="line">  <span class="keyword">FROM</span> t1 a,t2 b</div><div class="line"> <span class="keyword">WHERE</span> a.id=b.id(+)</div><div class="line">   <span class="keyword">AND</span> a.c1=b.c1(+);</div></pre></td></tr></table></figure></p>
<p>该物化视图采用的是基表提交(commit)触发快速刷新(FAST)的方式刷新数据，物化视图为两个基表t1,t2的外联接，SELECT后面的列只是简单列出t1,t2表中的列而已。</p>
<h4 id="更新外联接主表数据"><a href="#更新外联接主表数据" class="headerlink" title="更新外联接主表数据"></a>更新外联接主表数据</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> mv1 <span class="keyword">where</span> aid = <span class="number">9</span>;</div></pre></td></tr></table></figure>
<p><img src="/img/posts/20171119001-01.png" alt="20171119001-01"></p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">update</span> t1 <span class="keyword">set</span> c2=<span class="number">3</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">9</span>;</div></pre></td></tr></table></figure>
<p><img src="/img/posts/20171119001-02.png" alt="20171119001-02"></p>
<p>可见提交耗时很短，再查看物化视图数据，已经更新。</p>
<p><img src="/img/posts/20171119001-03.png" alt="20171119001-03"></p>
<p>使用如下语句查询物化视图的刷新方式，刷新时间等信息。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> MVIEW_NAME,</div><div class="line">       REFRESH_MODE,</div><div class="line">       REFRESH_METHOD,</div><div class="line">       FAST_REFRESHABLE,</div><div class="line">       LAST_REFRESH_TYPE,</div><div class="line">       LAST_REFRESH_DATE,</div><div class="line">       STALENESS </div><div class="line">  <span class="keyword">FROM</span> USER_MVIEWS </div><div class="line"> <span class="keyword">WHERE</span> MVIEW_NAME = <span class="string">'MV1'</span>;</div></pre></td></tr></table></figure>
<p><img src="/img/posts/20171119001-04.png" alt="20171119001-04"></p>
<h4 id="更新外联接非主表数据"><a href="#更新外联接非主表数据" class="headerlink" title="更新外联接非主表数据"></a>更新外联接非主表数据</h4><p>更新非主表t2的同一行的数据，提交后耗时也很短。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">update</span> t2 <span class="keyword">set</span> c2=<span class="number">13</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">9</span>;</div></pre></td></tr></table></figure>
<p><img src="/img/posts/20171119001-05.png" alt="20171119001-05"></p>
<p><img src="/img/posts/20171119001-06.png" alt="20171119001-06"></p>
<p><img src="/img/posts/20171119001-07.png" alt="20171119001-07"></p>
<p>所以这种情况下，物化视图的增量刷新是没有多少延迟的。</p>
<h3 id="物化视图中包含列计算"><a href="#物化视图中包含列计算" class="headerlink" title="物化视图中包含列计算"></a>物化视图中包含列计算</h3><p>将MV1物化视图删除，重新创建一个。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">DROP</span> <span class="keyword">MATERIALIZED</span> <span class="keyword">VIEW</span> mv1;</div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">MATERIALIZED</span> <span class="keyword">VIEW</span> mv1</div><div class="line"><span class="keyword">BUILD</span> <span class="keyword">IMMEDIATE</span></div><div class="line"><span class="keyword">REFRESH</span> <span class="keyword">FAST</span> <span class="keyword">ON</span> <span class="keyword">COMMIT</span></div><div class="line"><span class="keyword">WITH</span> <span class="keyword">ROWID</span></div><div class="line"><span class="keyword">AS</span></div><div class="line"><span class="keyword">SELECT</span> a.id aid,a.c1 ac1,a.c2 ac2,b.c1 bc1,b.c2 bc2,</div><div class="line">       a.c2+b.c2 <span class="keyword">as</span> d,</div><div class="line">       a.rowid rida,b.rowid ridb</div><div class="line"> <span class="keyword">FROM</span> t1 a,t2 b</div><div class="line"><span class="keyword">WHERE</span> a.id=b.id(+)</div><div class="line">  <span class="keyword">AND</span> a.c1=b.c1(+);</div></pre></td></tr></table></figure></p>
<p>在之前的基础上增加了d列，这列是t1和t2基表中各一列的计算。</p>
<h4 id="更新外联接主表数据-1"><a href="#更新外联接主表数据-1" class="headerlink" title="更新外联接主表数据"></a>更新外联接主表数据</h4><p>测试更新主表数据，查看提交耗时。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> mv1 <span class="keyword">where</span> aid = <span class="number">9</span>;</div></pre></td></tr></table></figure>
<p><img src="/img/posts/20171119001-08.png" alt="20171119001-08"></p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">update</span> t1 <span class="keyword">set</span> c2=<span class="number">6</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">9</span>;</div></pre></td></tr></table></figure>
<p><img src="/img/posts/20171119001-09.png" alt="20171119001-09"></p>
<p><img src="/img/posts/20171119001-10.png" alt="20171119001-10"></p>
<p><img src="/img/posts/20171119001-11.png" alt="20171119001-11"></p>
<p>基表数据提交时延迟很小。</p>
<h4 id="更新外联接非主表数据-1"><a href="#更新外联接非主表数据-1" class="headerlink" title="更新外联接非主表数据"></a>更新外联接非主表数据</h4><p>测试更新t2表数据，查看提交耗时。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">update</span> t2 <span class="keyword">set</span> c2=<span class="number">1</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">9</span>;</div></pre></td></tr></table></figure>
<p><img src="/img/posts/20171119001-12.png" alt="20171119001-12"></p>
<p><img src="/img/posts/20171119001-13.png" alt="20171119001-13"></p>
<p><img src="/img/posts/20171119001-14.png" alt="20171119001-14"></p>
<p>基表更新数据提交时，显示<strong>20多秒</strong>才完成，显然，这种情况会导致物化视图增量刷新延迟严重。</p>
<p>将MV1删除后重建为下列情况，相加的两列是同一个表的两列，这时再更新t2表的一行数据，发现提交没有延迟。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">DROP</span> <span class="keyword">MATERIALIZED</span> <span class="keyword">VIEW</span> mv1;</div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">MATERIALIZED</span> <span class="keyword">VIEW</span> mv1</div><div class="line"><span class="keyword">BUILD</span> <span class="keyword">IMMEDIATE</span></div><div class="line"><span class="keyword">REFRESH</span> <span class="keyword">FAST</span> <span class="keyword">ON</span> <span class="keyword">COMMIT</span></div><div class="line"><span class="keyword">WITH</span> <span class="keyword">ROWID</span></div><div class="line"><span class="keyword">AS</span></div><div class="line"><span class="keyword">SELECT</span> a.id aid,a.c1 ac1,a.c2 ac2,b.c1 bc1,b.c2 bc2,</div><div class="line">       b.c1+b.c2 <span class="keyword">as</span> d,</div><div class="line">       a.rowid rida,b.rowid ridb</div><div class="line">  <span class="keyword">FROM</span> t1 a,t2 b</div><div class="line"> <span class="keyword">WHERE</span> a.id=b.id;</div></pre></td></tr></table></figure>
<h3 id="一种解决方案"><a href="#一种解决方案" class="headerlink" title="一种解决方案"></a>一种解决方案</h3><p>既然含有外联接的物化视图多表列运算有问题，可以在MV1中将运算列都SELECT出来，再创建一个嵌套物化视图MV2，将MV1中的列进行运算处理。<br>物化视图MV1创建如下：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">MATERIALIZED</span> <span class="keyword">VIEW</span> mv1</div><div class="line"><span class="keyword">BUILD</span> <span class="keyword">IMMEDIATE</span></div><div class="line"><span class="keyword">REFRESH</span> <span class="keyword">FAST</span> <span class="keyword">ON</span> <span class="keyword">COMMIT</span></div><div class="line"><span class="keyword">WITH</span> <span class="keyword">ROWID</span></div><div class="line"><span class="keyword">AS</span></div><div class="line"><span class="keyword">SELECT</span> a.id aid,a.c1 ac1,a.c2 ac2,b.c1 bc1,b.c2 bc2,</div><div class="line">       a.rowid rida,b.rowid ridb</div><div class="line">  <span class="keyword">FROM</span> t1 a,t2 b</div><div class="line"> <span class="keyword">WHERE</span> a.id=b.id(+)</div><div class="line">   <span class="keyword">AND</span> a.c1=b.c1(+);</div><div class="line"><span class="comment">--因为MV1将作为MV2的基本表，所以要建物化视图日志</span></div><div class="line"><span class="keyword">create</span> <span class="keyword">materialized</span> <span class="keyword">view</span> <span class="keyword">log</span> <span class="keyword">on</span> mv1 <span class="keyword">with</span> <span class="keyword">rowid</span>,<span class="keyword">sequence</span>(aid) <span class="keyword">including</span> <span class="keyword">new</span> <span class="keyword">values</span>;</div></pre></td></tr></table></figure></p>
<p>物化视图MV2创建如下：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">materialized</span> <span class="keyword">view</span> mv2</div><div class="line"><span class="keyword">build</span> <span class="keyword">immediate</span></div><div class="line"><span class="keyword">refresh</span> <span class="keyword">fast</span> <span class="keyword">on</span> <span class="keyword">commit</span></div><div class="line"><span class="keyword">with</span> <span class="keyword">rowid</span></div><div class="line"><span class="keyword">as</span></div><div class="line"><span class="keyword">select</span> aid,ac1,ac2,bc1,bc2,</div><div class="line">       ac2+bc2 <span class="keyword">as</span> d, <span class="comment">--原本在MV1中计算的列在这里计算</span></div><div class="line">       a.rowid rida,b.rowid ridb</div><div class="line">  <span class="keyword">from</span> mv1 a,t3 b <span class="comment">--这里注意，在这个ORACLE版本中，创建嵌套物化视图必须要有表关联或者聚合计算，单独from mv1创建不了MV2.</span></div><div class="line"> <span class="keyword">where</span> a.aid=b.id(+);</div></pre></td></tr></table></figure></p>
<p>查看初始数据<code>select * from mv2 where aid = 99;</code><br><img src="/img/posts/20171119001-15.png" alt="20171119001-15"><br>更新t2表数据<code>update t2 set c2=37 where id = 99;</code>，查看提交耗时<br><img src="/img/posts/20171119001-16.png" alt="20171119001-16"><br>查看MV2结果<br><img src="/img/posts/20171119001-17.png" alt="20171119001-17"><br>查看物化视图刷新情况<br><img src="/img/posts/20171119001-18.png" alt="20171119001-18"><br>可见，两个物化视图在基表数据更新后提交不会耗时很久。用这种方式将一个运算分开两步完成，虽然可行，但是代价也很明显，要多创建嵌套物化视图，不敢保证复杂情况下，嵌套物化视图会有其他问题。</p>
<h3 id="另两种解决方案"><a href="#另两种解决方案" class="headerlink" title="另两种解决方案"></a>另两种解决方案</h3><ul>
<li>1.将含有多表列运算的外联接快速刷新物化视图改为定时全量刷新。</li>
<li>2.将外联接重写为内连接。</li>
</ul>
<h3 id="最终解决"><a href="#最终解决" class="headerlink" title="最终解决"></a>最终解决</h3><p>经测试，除以上方法外，有一个方法比较完美的解决延迟问题的方案，就是在物化视图上的ROWID列创建索引。测试如下：<br>这里做了一个相对复杂的嵌套物化视图测试。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">drop</span> <span class="keyword">MATERIALIZED</span> <span class="keyword">VIEW</span> mv1;</div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">MATERIALIZED</span> <span class="keyword">VIEW</span> mv1</div><div class="line"><span class="keyword">BUILD</span> <span class="keyword">IMMEDIATE</span></div><div class="line"><span class="keyword">REFRESH</span> <span class="keyword">FAST</span> <span class="keyword">ON</span> <span class="keyword">COMMIT</span></div><div class="line"><span class="keyword">WITH</span> <span class="keyword">ROWID</span></div><div class="line"><span class="keyword">AS</span></div><div class="line"><span class="keyword">SELECT</span> a.id aid,a.c1 ac1,a.c2 ac2,b.c1 bc1,b.c2 bc2,</div><div class="line">       a.c2+b.c2 <span class="keyword">as</span> d,</div><div class="line">       (a.c2+b.c2)*b.c1 <span class="keyword">as</span> e,</div><div class="line">       a.rowid rida,b.rowid ridb</div><div class="line"> <span class="keyword">FROM</span> t1 a,t2 b</div><div class="line"><span class="keyword">WHERE</span> a.id=b.id(+)</div><div class="line">  <span class="keyword">AND</span> a.c1=b.c1(+);</div><div class="line"><span class="comment">--在mv1上所有rowid创建索引</span></div><div class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx1 <span class="keyword">on</span> mv1(rida,ridb);</div><div class="line"><span class="comment">--创建mv1物化视图日志</span></div><div class="line"><span class="keyword">create</span> <span class="keyword">materialized</span> <span class="keyword">view</span> <span class="keyword">log</span> <span class="keyword">on</span> mv1 <span class="keyword">with</span> <span class="keyword">rowid</span>(aid,ac1,ac2,bc1,bc2) <span class="keyword">including</span> <span class="keyword">new</span> <span class="keyword">values</span>;</div><div class="line"><span class="comment">--mv2引用mv1</span></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">MATERIALIZED</span> <span class="keyword">VIEW</span> mv2</div><div class="line"><span class="keyword">BUILD</span> <span class="keyword">IMMEDIATE</span></div><div class="line"><span class="keyword">REFRESH</span> <span class="keyword">FAST</span> <span class="keyword">ON</span> <span class="keyword">COMMIT</span></div><div class="line"><span class="keyword">WITH</span> <span class="keyword">ROWID</span></div><div class="line"><span class="keyword">AS</span></div><div class="line"><span class="keyword">select</span> a.aid,a.ac1,a.ac2,b.c1 bc1,b.c2 bc2,a.e,</div><div class="line">       a.e+b.c2 <span class="keyword">as</span> d,</div><div class="line">       a.rowid rida,b.rowid ridb</div><div class="line"><span class="keyword">from</span> mv1 a,t2 b</div><div class="line"><span class="keyword">where</span> a.aid=b.id(+)</div><div class="line">  <span class="keyword">and</span> a.ac1=b.c1(+);</div><div class="line"><span class="comment">--在mv2上所有rowid创建索引</span></div><div class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx2 <span class="keyword">on</span> mv2(rida,ridb);</div></pre></td></tr></table></figure></p>
<p>以上脚本，创建了两个物化视图mv1,mv2，每个物化视图都含有外联接，且select列中含有多个表列结算，mv1嵌套在mv2中，基表t2被两个物化视图引用，且t2的字段在两个物化视图中都参与计算，这样的情况应该算比较复杂了，注意每个物化视图都建立索引。</p>
<p>查询mv2初始值:<br><code>select * from mv2 where aid = 509;</code><br><img src="/img/posts/20171119001-19.png" alt="20171119001-19"><br>修改基表t2的数据：<br><code>update t2 set c2=85 where id = 509;</code><br><img src="/img/posts/20171119001-20.png" alt="20171119001-20"><br>查看结果：<br><code>select * from mv2 where aid = 509;</code><br><img src="/img/posts/20171119001-21.png" alt="20171119001-21"><br>查看物化视图状态：<br><img src="/img/posts/20171119001-22.png" alt="20171119001-22"><br>可见物化视图为增量刷新，且没有之前发生的严重延迟的情况，需要注意的是，物化视图都要建立索引，且索引列都是包含rowid列的复合索引，如果是其他不是rowid列索引，可能没有任何效果。经测试，对基表增删改都是有效果的。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>1.创建含有外联接且刷新方式为REFRESH FAST ON COMMIT的物化视图时，如果select列里含有多个表中取某些列做运算，注意了，这时更新非主表的数据(增删改)，那么基表提交数据后将有可能导致延迟阻塞，这个时间比物化视图全量刷新还要慢。</li>
<li>2.除上述情况，例如物化视图都是内连接，有外联接但是没有多个表列做运算等，增量刷新都没问题。</li>
<li><del>3.至于多表列运算的外联接物化视图增量刷新很慢的原因，与ORACLE物化视图的刷新机制有关，官方文档也有提及这种情况会影响效率，建议最好改为内连接。</del></li>
<li><del>4.解决方法是改为定时全量刷新或者改外联接为内连接或者利用嵌套物化视图，或者还有其他方法，总之就是为了避开这种情况。</del></li>
<li>3.比较靠谱的解决方案是在多表列运算的外联接物化视图上创建包含rowid列的索引，创建与不创建索引在这个问题上显现出天壤之别。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ORACLE物化视图(MATERIALIZED VIEW)有自动提交刷新和手动刷新两种刷新方式，每种刷新方式下有增量刷新(FAST)、全量刷新(COMPLETE)、系统自动判断(FORCE)三种刷新方法。一般而言，增量刷新理论上是比全量刷新要快一些的，但是我发现某些情况下增量刷新将导致基表提交后延迟严重，下面将做一些测试。&lt;/p&gt;
    
    </summary>
    
      <category term="码路刺客" scheme="http://c-xuan.com/categories/%E7%A0%81%E8%B7%AF%E5%88%BA%E5%AE%A2/"/>
    
    
      <category term="数据库" scheme="http://c-xuan.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="ORACLE" scheme="http://c-xuan.com/tags/ORACLE/"/>
    
      <category term="物化视图" scheme="http://c-xuan.com/tags/%E7%89%A9%E5%8C%96%E8%A7%86%E5%9B%BE/"/>
    
      <category term="原创" scheme="http://c-xuan.com/tags/%E5%8E%9F%E5%88%9B/"/>
    
  </entry>
  
  <entry>
    <title>【ORACLE】常用物化视图相关元数据查询语句</title>
    <link href="http://c-xuan.com/2017/08/15/20170815001/"/>
    <id>http://c-xuan.com/2017/08/15/20170815001/</id>
    <published>2017-08-14T16:00:00.000Z</published>
    <updated>2017-08-14T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>对物化视图的状态等信息进行查询，监控和管理时，需要对系统视图进行查询，以下列出了常用的物化视图状态、依赖关联，批量维护时能用到的查询语句，根据具体情况进行适当修改。</p>
<a id="more"></a>
<p>语句中使用到的系统表字段说明请查看<a href="/2017/08/13/20170813001">物化视图相关元数据视图字段说明</a></p>
<h3 id="基本信息查询"><a href="#基本信息查询" class="headerlink" title="基本信息查询"></a>基本信息查询</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- 物化视图基本信息</span></div><div class="line">	<span class="keyword">SELECT</span> OWNER            , <span class="comment">--所有者账户</span></div><div class="line">		   MVIEW_NAME       , <span class="comment">--名称</span></div><div class="line">		   LAST_REFRESH_DATE, <span class="comment">--上次更新时间</span></div><div class="line">		   REFRESH_METHOD   , <span class="comment">--更新方式</span></div><div class="line">		   INVALID          , <span class="comment">--是否失效</span></div><div class="line">		   <span class="keyword">QUERY</span>              <span class="comment">--查询语句</span></div><div class="line">	  <span class="keyword">FROM</span> USER_MVIEW_ANALYSIS </div><div class="line">  <span class="keyword">ORDER</span> <span class="keyword">BY</span> LAST_REFRESH_DATE <span class="keyword">DESC</span>;</div></pre></td></tr></table></figure>
<h3 id="物化视图输出列"><a href="#物化视图输出列" class="headerlink" title="物化视图输出列"></a>物化视图输出列</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">    <span class="keyword">SELECT</span> a.OWNER        , <span class="comment">--所有者账户</span></div><div class="line">		a.MVIEW_NAME   , <span class="comment">--名称</span></div><div class="line">		b.COLUMN_NAME  , <span class="comment">--列名称</span></div><div class="line">		b.COMMENTS       <span class="comment">--列注释</span></div><div class="line">      <span class="keyword">FROM</span> USER_MVIEW_ANALYSIS a</div><div class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> USER_COL_COMMENTS b</div><div class="line">        <span class="keyword">ON</span> a.MVIEW_NAME = b.TABLE_NAME;</div></pre></td></tr></table></figure>
<h3 id="物化视图引用了哪些基表"><a href="#物化视图引用了哪些基表" class="headerlink" title="物化视图引用了哪些基表"></a>物化视图引用了哪些基表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- 物化视图关联表</span></div><div class="line">		<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> </div><div class="line">			   A.OWNER,          <span class="comment">--所有者账户</span></div><div class="line">			   A.MVIEW_NAME     ,<span class="comment">--物化视图名称</span></div><div class="line">		       B.COMMENTS       ,<span class="comment">--视图注释</span></div><div class="line">		       A.DETAILOBJ_OWNER,<span class="comment">--基表所有者账号</span></div><div class="line">		       A.DETAILOBJ_NAME  <span class="comment">--基表名称</span></div><div class="line">		  <span class="keyword">FROM</span> USER_MVIEW_DETAIL_RELATIONS A</div><div class="line">    <span class="keyword">INNER</span> <span class="keyword">JOIN</span> USER_MVIEW_COMMENTS B <span class="keyword">ON</span> A.MVIEW_NAME = B.MVIEW_NAME</div><div class="line">		 <span class="keyword">WHERE</span> DETAILOBJ_NAME <span class="keyword">NOT</span> <span class="keyword">LIKE</span> <span class="string">'BIN%'</span>;</div></pre></td></tr></table></figure>
<h3 id="物化视图-基表-存储过程引用关系"><a href="#物化视图-基表-存储过程引用关系" class="headerlink" title="物化视图-基表-存储过程引用关系"></a>物化视图-基表-存储过程引用关系</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- 物化视图或普通视图引用了什么普通表，视图被哪些存储过程引用</span></div><div class="line">WITH CTE AS (</div><div class="line">    <span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> </div><div class="line">           A.OWNER,               <span class="comment">-- 所有者账户</span></div><div class="line">           A.MVIEW_NAME         , <span class="comment">-- 物化视图名称</span></div><div class="line">           A.DETAILOBJ_OWNER    , <span class="comment">-- 被引用表账号</span></div><div class="line">           A.DETAILOBJ_NAME       <span class="comment">-- 被引用表名称</span></div><div class="line">      <span class="keyword">FROM</span> USER_MVIEW_DETAIL_RELATIONS A</div><div class="line">     <span class="keyword">WHERE</span> A.DETAILOBJ_NAME <span class="keyword">NOT</span> <span class="keyword">LIKE</span> <span class="string">'BIN%'</span></div><div class="line"> <span class="keyword">UNION</span> ALL</div><div class="line">    <span class="keyword">SELECT</span> <span class="string">''</span> <span class="keyword">AS</span> OWNER,</div><div class="line">           <span class="keyword">NAME</span> <span class="keyword">AS</span> MVIEW_NAME,</div><div class="line">           REFERENCED_OWNER <span class="keyword">AS</span> DETAILOBJ_OWNER,</div><div class="line">           REFERENCED_NAME <span class="keyword">AS</span> DETAILOBJ_NAME</div><div class="line">      <span class="keyword">FROM</span> USER_DEPENDENCIES </div><div class="line">     <span class="keyword">WHERE</span> <span class="keyword">TYPE</span> =<span class="string">'VIEW'</span></div><div class="line">)</div><div class="line">    <span class="keyword">SELECT</span> A.OWNER            ,<span class="comment">-- 视图所有者账户</span></div><div class="line">           A.MVIEW_NAME <span class="keyword">AS</span> MV ,<span class="comment">-- 视图名称</span></div><div class="line">           A.DETAILOBJ_OWNER  ,<span class="comment">-- 基表所有者账户</span></div><div class="line">           A.DETAILOBJ_NAME   ,<span class="comment">-- 基表/视图</span></div><div class="line">           NVL(B.NAME,<span class="string">'-'</span>) <span class="keyword">AS</span> PROC_NAME <span class="comment">-- 存储过程名称</span></div><div class="line">      <span class="keyword">FROM</span> CTE A</div><div class="line"> <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> (<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> <span class="keyword">NAME</span>,REFERENCED_NAME </div><div class="line">              <span class="keyword">FROM</span> USER_DEPENDENCIES B </div><div class="line">             <span class="keyword">WHERE</span> B.TYPE = <span class="string">'PROCEDURE'</span> </div><div class="line">            ) B <span class="keyword">ON</span> A.MVIEW_NAME = B.REFERENCED_NAME</div><div class="line">  <span class="keyword">ORDER</span> <span class="keyword">BY</span> A.MVIEW_NAME,A.DETAILOBJ_NAME,B.NAME</div><div class="line">    ;</div></pre></td></tr></table></figure>
<h3 id="批量删除物化视图日志"><a href="#批量删除物化视图日志" class="headerlink" title="批量删除物化视图日志"></a>批量删除物化视图日志</h3><p>将结果复制出来执行。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- 批量删除物化视图日志</span></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">MASTER</span>,<span class="string">'DROP MATERIALIZED VIEW LOG ON '</span> || <span class="keyword">MASTER</span> || <span class="string">' ;'</span> <span class="keyword">AS</span> DSQL </div><div class="line">  <span class="keyword">FROM</span> USER_MVIEW_LOGS;</div></pre></td></tr></table></figure></p>
<h3 id="删除没有被引用的基表的物化视图日志"><a href="#删除没有被引用的基表的物化视图日志" class="headerlink" title="删除没有被引用的基表的物化视图日志"></a>删除没有被引用的基表的物化视图日志</h3><p>将结果复制出来执行。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- 删除没有被物化视图引用的基表的物化视图日志</span></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">MASTER</span>,<span class="string">'DROP MATERIALIZED VIEW LOG ON '</span> || <span class="keyword">MASTER</span> || <span class="string">';'</span>  <span class="keyword">AS</span> A</div><div class="line">  <span class="keyword">FROM</span> ALL_MVIEW_LOGS </div><div class="line"> <span class="keyword">WHERE</span> <span class="keyword">MASTER</span> <span class="keyword">NOT</span> <span class="keyword">IN</span> (</div><div class="line">           <span class="keyword">SELECT</span> DETAILOBJ_NAME </div><div class="line">             <span class="keyword">FROM</span> USER_MVIEW_DETAIL_RELATIONS </div><div class="line">        );</div></pre></td></tr></table></figure></p>
<h3 id="批量修改物化视图刷新方式"><a href="#批量修改物化视图刷新方式" class="headerlink" title="批量修改物化视图刷新方式"></a>批量修改物化视图刷新方式</h3><p>将结果复制出来执行。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">--修改物化视图为手动增量刷新</span></div><div class="line"><span class="keyword">SELECT</span> <span class="string">'ALTER MATERIALIZED VIEW '</span> || MVIEW_NAME || <span class="string">' REFRESH FAST ON DEMAND;'</span> <span class="keyword">AS</span> S</div><div class="line"><span class="keyword">FROM</span> USER_MVIEWS <span class="keyword">WHERE</span> MVIEW_NAME <span class="keyword">LIKE</span> <span class="string">'MV_%'</span>;</div><div class="line"><span class="comment">--手动执行物化视图增量刷新</span></div><div class="line"><span class="keyword">SELECT</span> <span class="string">'DBMS_MVIEW.REFRESH('''</span> || MVIEW_NAME || <span class="string">''',''F'');'</span> <span class="keyword">AS</span> S</div><div class="line"><span class="keyword">FROM</span> USER_MVIEWS <span class="keyword">WHERE</span> MVIEW_NAME <span class="keyword">LIKE</span> <span class="string">'MV_%'</span>;</div><div class="line"><span class="comment">--修改物化视图为自动增量刷新</span></div><div class="line"><span class="keyword">SELECT</span> <span class="string">'ALTER MATERIALIZED VIEW '</span> || MVIEW_NAME || <span class="string">' REFRESH FAST ON COMMIT;'</span> <span class="keyword">AS</span> S</div><div class="line"><span class="keyword">FROM</span> USER_MVIEWS <span class="keyword">WHERE</span> MVIEW_NAME <span class="keyword">LIKE</span> <span class="string">'MV_%'</span>;</div><div class="line"><span class="comment">--修改引用了某个基表的所有物化视图为手动增量刷新</span></div><div class="line"><span class="keyword">SELECT</span> <span class="string">'ALTER MATERIALIZED VIEW '</span> || MVIEW_NAME || <span class="string">' REFRESH FAST ON DEMAND;'</span> <span class="keyword">AS</span> S</div><div class="line"><span class="keyword">FROM</span> USER_MVIEWS</div><div class="line"><span class="keyword">WHERE</span> MVIEW_NAME <span class="keyword">IN</span> (</div><div class="line">      <span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> <span class="keyword">NAME</span> </div><div class="line">      <span class="keyword">FROM</span> USER_DEPENDENCIES </div><div class="line">      <span class="keyword">WHERE</span> <span class="keyword">TYPE</span> = <span class="string">'MATERIALIZED VIEW'</span> </div><div class="line">      <span class="keyword">AND</span> REFERENCED_NAME <span class="keyword">LIKE</span> <span class="string">'%table_name%'</span> <span class="comment">-- 基表名称</span></div><div class="line">);</div></pre></td></tr></table></figure></p>
<h3 id="物化视图刷新信息"><a href="#物化视图刷新信息" class="headerlink" title="物化视图刷新信息"></a>物化视图刷新信息</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">--物化视图刷新信息</span></div><div class="line"><span class="keyword">SELECT</span> MVIEW_NAME,<span class="comment">--物化视图名称</span></div><div class="line">       REFRESH_MODE,<span class="comment">--刷新方式</span></div><div class="line">       REFRESH_METHOD,<span class="comment">--刷新类型</span></div><div class="line">       FAST_REFRESHABLE,<span class="comment">--是否可刷新</span></div><div class="line">       LAST_REFRESH_TYPE,<span class="comment">--最近一次刷新类型</span></div><div class="line">       LAST_REFRESH_DATE,<span class="comment">--最近一次刷新时间</span></div><div class="line">       STALENESS <span class="comment">--数据是否过时</span></div><div class="line">  <span class="keyword">FROM</span> USER_MVIEWS </div><div class="line"> <span class="comment">--WHERE MVIEW_NAME = 'MV1'</span></div><div class="line"> <span class="keyword">ORDER</span> <span class="keyword">BY</span> LAST_REFRESH_DATE <span class="keyword">DESC</span>;</div></pre></td></tr></table></figure>
<h3 id="物化视图最近一次刷新信息"><a href="#物化视图最近一次刷新信息" class="headerlink" title="物化视图最近一次刷新信息"></a>物化视图最近一次刷新信息</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">--查询物化视图最近一次刷新信息</span></div><div class="line"> <span class="keyword">SELECT</span> MVIEW_NAME,  <span class="comment">--物化视图名称</span></div><div class="line">	    LAST_REFRESH_DATE <span class="string">"START_TIME"</span>, <span class="comment">--刷新开始时间</span></div><div class="line">	    <span class="keyword">CASE</span> <span class="keyword">WHEN</span> FULLREFRESHTIM &lt;&gt; <span class="number">0</span> </div><div class="line">			 <span class="keyword">THEN</span> LAST_REFRESH_DATE + FULLREFRESHTIM/<span class="number">60</span>/<span class="number">60</span>/<span class="number">24</span></div><div class="line">		     <span class="keyword">WHEN</span> INCREFRESHTIM &lt;&gt; <span class="number">0</span> </div><div class="line">			 <span class="keyword">THEN</span> LAST_REFRESH_DATE + INCREFRESHTIM/<span class="number">60</span>/<span class="number">60</span>/<span class="number">24</span></div><div class="line">		     <span class="keyword">ELSE</span> LAST_REFRESH_DATE</div><div class="line">	    <span class="keyword">END</span> <span class="string">"END_TIME"</span>, <span class="comment">--刷新结束时间</span></div><div class="line">	    FULLREFRESHTIM, <span class="comment">--全量刷新耗时</span></div><div class="line">	    INCREFRESHTIM , <span class="comment">--增量刷新耗时</span></div><div class="line">	    REFRESH_METHOD, <span class="comment">--最近一次刷新方式</span></div><div class="line">	    SUMMARY       , <span class="comment">--是否含有聚合查询</span></div><div class="line">	    INC_REFRESHABLE,<span class="comment">--是否支持增量刷新</span></div><div class="line">	    INVALID       , <span class="comment">--是否失效</span></div><div class="line">	    REWRITE_ENABLED <span class="comment">--是否支持查询重写</span></div><div class="line">   <span class="keyword">FROM</span> ALL_MVIEW_ANALYSIS</div><div class="line">  <span class="keyword">WHERE</span> OWNER=<span class="string">'OWNER'</span> <span class="comment">--物化视图所有者账户</span></div><div class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> LAST_REFRESH_DATE <span class="keyword">DESC</span>;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对物化视图的状态等信息进行查询，监控和管理时，需要对系统视图进行查询，以下列出了常用的物化视图状态、依赖关联，批量维护时能用到的查询语句，根据具体情况进行适当修改。&lt;/p&gt;
    
    </summary>
    
      <category term="码路刺客" scheme="http://c-xuan.com/categories/%E7%A0%81%E8%B7%AF%E5%88%BA%E5%AE%A2/"/>
    
    
      <category term="数据库" scheme="http://c-xuan.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="ORACLE" scheme="http://c-xuan.com/tags/ORACLE/"/>
    
      <category term="物化视图" scheme="http://c-xuan.com/tags/%E7%89%A9%E5%8C%96%E8%A7%86%E5%9B%BE/"/>
    
      <category term="原创" scheme="http://c-xuan.com/tags/%E5%8E%9F%E5%88%9B/"/>
    
  </entry>
  
  <entry>
    <title>【ORACLE】物化视图相关元数据视图字段说明</title>
    <link href="http://c-xuan.com/2017/08/13/20170813001/"/>
    <id>http://c-xuan.com/2017/08/13/20170813001/</id>
    <published>2017-08-12T16:00:00.000Z</published>
    <updated>2017-08-12T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>当需要对物化视图的状态等信息进行查询，监控和管理时，就要用到相关的系统元数据表了，本文介绍了Oracle物化视图相关的元数据系统视图的表结构，这些视图有：<br><code>ALL_VIEWS</code>,<code>DBA_MVIEWS</code>,<code>USER_MVIEWS</code>，<code>ALL_MVIEW_ANALYSIS</code>，<code>DBA_MVIEW_ANALYSIS</code>，<code>USER_MVIEW_ANALYSIS</code>，<code>ALL_MVIEW_AGGREGATES</code>，<code>DBA_MVIEW_AGGREGATES</code>，<code>USER_MVIEW_AGGREGATES</code>，<code>ALL_MVIEW_REFRESH_TIMES</code>，<code>DBA_MVIEW_REFRESH_TIMES</code>，<code>USER_MVIEW_REFRESH_TIMES</code>，<code>ALL_MVIEW_JOINS</code>，<code>DBA_MVIEW_JOINS</code>，<code>USER_MVIEW_JOINS</code>，<code>ALL_MVIEW_KEYS</code>，<code>DBA_MVIEW_KEYS</code>，<code>USER_MVIEW_KEYS</code>，<code>ALL_MVIEW_LOGS</code>，<code>DBA_MVIEW_LOGS</code>，<code>USER_MVIEW_LOGS</code>。</p>
<a id="more"></a>
<h3 id="ALL-MVIEWS"><a href="#ALL-MVIEWS" class="headerlink" title="ALL_MVIEWS"></a>ALL_MVIEWS</h3><p><code>ALL_MVIEWS</code>系统视图描述了当前用户下所有可以访问的物化视图的相关信息。<br>相关视图</p>
<ul>
<li><code>DBA_MVIEWS</code>描述了数据库中创建的所有物化视图的相关信息。</li>
<li><code>USER_MVIEWS</code>描述了所属于当前用户下的所有物化视图的相关信息。</li>
</ul>
<table style="font-size:14px;"><tr><th width="16.78%">列名称</th><th width="14.24%">数据类型</th><th width="11.44%">是否可为NULL</th><th width="57.58%">字段描述</th></tr><tr><td>OWNER</td><td>VARCHAR2(30)</td><td>NOT NULL</td><td>创建物化视图所用的Schema.</td></tr><tr><td>MVIEW_NAME</td><td>VARCHAR2(30)</td><td>NOT NULL</td><td>物化视图名称</td></tr><tr><td>CONTAINER_NAME</td><td>VARCHAR2(30)</td><td>NOT NULL</td><td>存储物化视图数据的容器名称。一般跟MVIEWNAME是一样的。对于早于Oracle8i的版本，数据库附上了SNAP$的前缀。如果MVIEW_NAME超过里了19比特长度，数据库将会把名称截断至19比特，外加了4位的序列号以免发生名称重复。</td></tr><tr><td>QUERY</td><td>LONG</td><td></td><td>定义物化视图查询的语句</td></tr><tr><td>QUERY_LEN</td><td>NUMBER(38)</td><td></td><td>定义的物化视图查询语句的长度，以比特为单位</td></tr><tr><td>UPDATABLE</td><td>VARCHAR2(1)</td><td></td><td>指明物化视图是(Y)否(N)可更新</td></tr><tr><td>UPDATE_LOG</td><td>VARCHAR2(30)</td><td></td><td>对于可更新的物化视图，更新日志的文件名称</td></tr><tr><td>MASTER_ROLLBACK_SEG</td><td>VARCHAR2(30)</td><td></td><td>Rollback segment for the master site or the master materialized view site</td></tr><tr><td>MASTER_LINK</td><td>VARCHAR2(128)</td><td></td><td>基表端的数据库链接</td></tr><tr><td>REWRITE_ENABLED</td><td>VARCHAR2(1)</td><td></td><td>指出是(Y)否(N)支持物化视图的查询重写</td></tr><tr><td>REWRITE_CAPABILITY</td><td>VARCHAR2(9)</td><td></td><td>指出物化视图是否适合查询重写。会有以下三种情况：<br>NONE：物化视图不能被用于查询重写以为查询重写选项被禁用了。<br>TEXTMATCH：物化视图的查询语句中包含查询重写的相关限制。<br>GENETAL：物化视图的查询语句中没有任何限制，所以数据库将在物化视图上应用支持的查询重写功能。</td></tr><tr><td>REFRESH_MODE</td><td>VARCHAR2(6)</td><td></td><td>物化视图的刷新模式：<br>DEMAND：物化视图将在调用刷新物化视图的存储过程时刷新。<br>COMMIT：物化视图将在基表上的事物提交后刷新。<br>NEVER：物化视图永远不会被刷新。</td></tr><tr><td>REFRESH_METHOD</td><td>VARCHAR2(8)</td><td></td><td>物化视图的刷新方法：<br>COMPLETE：物化视图会对基表的数据进行全量刷新。<br>FORCE：数据库引擎自动判断，如果物化视图可被增量刷新则执行增量刷新，否则全量刷新。<br>FAST：物化视图将从上一次刷新后，对于基表的数据变化进行增量刷新。<br>NEVER：用户告诉数据库该物化视图不用刷新。</td></tr><tr><td>BUILD_MODE</td><td>VARCHAR2(9)</td><td></td><td>指明物化视图在创建时是否填充数据：<br>IMMEDIATE：在创建物化视图时填充数据。<br>DEFERRED：在创建时不填充数据，之后用户要手动更新数据。<br>PREBUILT：在创建物化视图时用一个已经存在的表的数据填充物化视图。</td></tr><tr><td>FAST_REFRESHABLE</td><td>VARCHAR2(18)</td><td></td><td>指明物化视图是否适合增量刷新。Oracle数据库会基于定义物化视图的查询语句静态计算这个值。<br>NO：物化视图不支持增量刷新。<br>DML；只支持DML操作的增量刷新。<br>DIRLOAD_DML；适合于直接装载和DML操作的增加刷新。<br>DIRLOAD_LIMITEDDML；只支持直接装载和某些类型的DML操作的增量刷新。</td></tr><tr><td>LAST_REFRESH_TYPE</td><td>VARCHAR2(8)</td><td></td><td>最近一次刷新方法：COMPLETE：全量刷新。FAST：增量刷新。NA：还没有刷新过，比如创建时没指定填充数据的时候。</td></tr><tr><td>LAST_REFRESH_DATE</td><td>DATE</td><td></td><td>最近一次刷新的日期时间，如果从没刷新过就是空。</td></tr><tr><td>STALENESS</td><td>VARCHAR2(19)</td><td></td><td>物化视图的数据和基表数据的关系：<br>FRESH：物化视图数据跟基表的数据是一致的。<br>STALE：物化视图过期了，因为有一个或多个基表的数据已经变了，如果物化视图在此之前是FRESH，然后才变成STALE，那物化视图的数据跟基表表数据变更前是一致的。<br>NEEDS_COMPILE：物化视图的某些基表已经改了，要用ALTER MATERIALIZED VIEW…COMPILE语句来重新计算物化视图该状态。<br>UNUSABLE：物化视图的数据跟基表的数据任何时间都不一致。<br>UNKNOWN：Oracle数据库无法得知物化视图的数据跟基表的关系。这可能是基于prebuilt table来创建的物化视图。<br>UNDEFINED：物化视图有远程的基表，对于这类物化视图该状态不适用。</td></tr><tr><td>AFTER_FAST_REFRESH</td><td>VARCHAR2(19)</td><td></td><td>指明在物化视图执行增量刷新后是啥状态，状态值跟STALENESS列是一样的，只是多了一个NA，当执行增量刷新后变为不适用增量了出现这个值。</td></tr><tr><td>UNKNOWN_PREBUILT</td><td>VARCHAR2(1)</td><td></td><td>Indicates whether the materialized view is prebuilt (Y) or not (N)</td></tr><tr><td>UNKNOWN_PLSQL_FUNC</td><td>VARCHAR2(1)</td><td></td><td>Indicates whether the materialized view contains PL/SQL functions (Y) or not (N)</td></tr><tr><td>UNKNOWN_EXTERNAL_TABLE</td><td>VARCHAR2(1)</td><td></td><td>Indicates whether the materialized view contains external tables (Y) or not (N)</td></tr><tr><td>UNKNOWN_CONSIDER_FRESH</td><td>VARCHAR2(1)</td><td></td><td>Indicates whether the materialized view is considered fresh (Y) or not (N)</td></tr><tr><td>UNKNOWN_IMPORT</td><td>VARCHAR2(1)</td><td></td><td>Indicates whether the materialized view is imported (Y) or not (N)</td></tr><tr><td>UNKNOWN_TRUSTED_FD</td><td>VARCHAR2(1)</td><td></td><td>Indicates whether the materialized view uses trusted constraints for refresh (Y) or not (N)</td></tr><tr><td>COMPILE_STATE</td><td>VARCHAR2(19)</td><td></td><td>检查物化视图的相关基表都是否合法：<br>VALID：物化视图是没问题的，物化视图的基表没有变更。<br>NEEDS_COMPILE：物化视图的某些基表被改变了，要重新编译。<br>ERROR：物化视图有错误。</td></tr><tr><td>USE_NO_INDEX</td><td>VARCHAR2(1)</td><td></td><td>指出创建物化视图的时候是否使用USING NO INDEX子句，或者物化视图创建时默认了索引。</td></tr><tr><td>STALE_SINCE</td><td>DATE</td><td></td><td>Time from when the materialized view became stale</td></tr><tr><td>NUM_PCT_TABLES</td><td>NUMBER</td><td></td><td>Number of PCT detail tables</td></tr><tr><td>NUM_FRESH_PCT_REGIONS</td><td>NUMBER</td><td></td><td>Number of fresh PCT partition regions</td></tr><tr><td>NUM_STALE_PCT_REGIONS</td><td>NUMBER</td><td></td><td>Number of stale PCT partition regions</td></tr></table>


<p>参考<a href="https://docs.oracle.com/cd/E11882_01/server.112/e40402/statviews_1153.htm#REFRN20139" target="_blank" rel="external">https://docs.oracle.com/cd/E11882_01/server.112/e40402/statviews_1153.htm#REFRN20139</a></p>
<h3 id="ALL-MVIEW-ANALYSIS"><a href="#ALL-MVIEW-ANALYSIS" class="headerlink" title="ALL_MVIEW_ANALYSIS"></a>ALL_MVIEW_ANALYSIS</h3><p>ALL_MVIEW_ANALYSIS describes the materialized views accessible to the current user. It provides additional information for analysis by applications. Minimal information is displayed for materialized views that do not support query rewrite (such as materialized views with remote master tables or nondeterministic functions).<br>Related Views<br>  ● DBA_MVIEW_ANALYSIS describes all such materialized views in the database.<br>  ● USER_MVIEW_ANALYSIS describes all such materialized views owned by the current user.<br>Note:<br>All of the information in these views is also displayed in ALL_MVIEWS and its related views. Oracle recommends that you refer to ALL_MVIEWSfor this information instead of these views.</p>
<table style="font-size:14px;"><tr><th width="16.78%">Column</th><th width="14.24%">Datatype</th><th width="11.44%">NULL</th><th width="57.58%">Description</th></tr><tr><td>OWNER</td><td>VARCHAR2(30)</td><td>NOT NULL</td><td>Owner of the materialized view</td></tr><tr><td>MVIEW_NAME</td><td>VARCHAR2(30)</td><td>NOT NULL</td><td>Name of the materialized view</td></tr><tr><td>MVIEW_TABLE_OWNER</td><td>VARCHAR2(30)</td><td>NOT NULL</td><td>Owner of the container table (see next column)</td></tr><tr><td>CONTAINER_NAME</td><td>VARCHAR2(30)</td><td></td><td>Name of the internal container in which the materialized view data is held. Normally this is the same asMVIEW<em>NAME. For materialized views created prior to Oracle8i, Oracle Database attaches the 6-byte prefix?SNAP$</em>. If?MVIEW_NAMEhas more than 19 bytes, then Oracle Database truncates the name to 19 bytes and adds a 4-byte sequence number as a suffix to produce a nonambiguousCONTAINER_NAME.</td></tr><tr><td>LAST_REFRESH_SCN</td><td>NUMBER</td><td></td><td>System change number (SCN) of the last refresh operation</td></tr><tr><td>LAST_REFRESH_DATE</td><td>DATE</td><td></td><td>SYSDATE?of the last refresh</td></tr><tr><td>REFRESH_METHOD</td><td>VARCHAR2(8)</td><td></td><td>Default refresh method:<br>FORCE<br>FAST<br>COMPLETE<br>NEVER</td></tr><tr><td>SUMMARY</td><td>VARCHAR2(1)</td><td></td><td>Indicates whether this materialized view includes a?GROUP BY?clause or aggregation (Y) or not (N)</td></tr><tr><td>FULLREFRESHTIM</td><td>NUMBER</td><td></td><td>Approximate refresh time, in seconds, for full refresh (defined only when?SUMMARY?=?Y)</td></tr><tr><td>INCREFRESHTIM</td><td>NUMBER</td><td></td><td>Approximate refresh time, in seconds, for fast refresh (defined only when?SUMMARY?=?Y)</td></tr><tr><td>CONTAINS_VIEWS</td><td>VARCHAR2(1)</td><td></td><td>Indicates whether this materialized view contains a view in its definition (Y) or not (N)</td></tr><tr><td>UNUSABLE</td><td>VARCHAR2(1)</td><td></td><td>Indicates whether this materialized view is?UNUSABLE?(inconsistent data) (Y) or not (N). A materialized view can be?UNUSABLE?if a system failure occurs during a full refresh.</td></tr><tr><td>RESTRICTED_SYNTAX</td><td>VARCHAR2(1)</td><td></td><td>Indicates whether this materialized view had a restriction in its defining query that limits the use of query rewrite (Y) or not (N). More complete information is provided by theREWRITE_CAPABILITY?column of the?*_MVIEWS?view.</td></tr><tr><td>INC_REFRESHABLE</td><td>VARCHAR2(1)</td><td></td><td>Indicates whether this materialized view can be fast refreshed (Y) or not (N)</td></tr><tr><td>KNOWN_STALE</td><td>VARCHAR2(1)</td><td></td><td>Indicates whether the data contained in the materialized view is known to be inconsistent with the master table data because that has been updated since the last successful refresh (Y) or not (N)</td></tr><tr><td>INVALID</td><td>VARCHAR2(1)</td><td></td><td>Indicates whether this materialized view is in an invalid state (inconsistent metadata) (Y) or not (N)</td></tr><tr><td>REWRITE_ENABLED</td><td>VARCHAR2(1)</td><td></td><td>Indicates whether this materialized view is currently enabled for query rewrite (Y) or not (N)</td></tr><tr><td>QUERY_LEN</td><td>NUMBER</td><td></td><td>Length (in bytes) of the query field</td></tr><tr><td>QUERY</td><td>LONG</td><td></td><td>SELECT?expression of the materialized view definition</td></tr><tr><td>REVISION</td><td>NUMBER</td><td>NOT NULL</td><td>Reserved for internal use</td></tr></table>

<p>参考<br><a href="https://docs.oracle.com/cd/E11882_01/server.112/e40402/statviews_1144.htm#REFRN20132" target="_blank" rel="external">https://docs.oracle.com/cd/E11882_01/server.112/e40402/statviews_1144.htm#REFRN20132</a></p>
<h3 id="ALL-MVIEW-AGGREGATES"><a href="#ALL-MVIEW-AGGREGATES" class="headerlink" title="ALL_MVIEW_AGGREGATES"></a>ALL_MVIEW_AGGREGATES</h3><p>ALL_MVIEW_AGGREGATES describes the grouping functions (aggregate operations) that appear in the SELECT list of materialized aggregate views accessible to the current user.<br>Related Views<br>  ● DBA_MVIEW_AGGREGATES describes all such grouping functions defined for all materialized views in the database.<br>  ● USER_MVIEW_AGGREGATES describes all such grouping functions defined for all materialized views owned by the current user.<br>Note:<br>All three views exclude materialized views that reference remote tables or that include references to a nonstatic value such as SYSDATE orUSER. These views also exclude materialized views that were created as “snapshots” prior to Oracle8i and that were never altered to enable query rewrite.</p>
<table style="font-size:14px;"><tr><th width="16.78%">Column</th><th width="14.24%">Datatype</th><th width="11.44%">NULL</th><th width="57.58%">Description</th></tr><tr><td>OWNER</td><td>VARCHAR2(30)</td><td>NOT NULL</td><td>Owner of the materialized view</td></tr><tr><td>MVIEW_NAME</td><td>VARCHAR2(30)</td><td>NOT NULL</td><td>Name of the materialized view</td></tr><tr><td>POSITION_IN_SELECT</td><td>NUMBER</td><td>NOT NULL</td><td>Ordinal position of this aggregation within the?SELECT?list. For the position of nonaggregate elements of the select list, see”ALL_MVIEW_KEYS”.</td></tr><tr><td>CONTAINER_COLUMN</td><td>VARCHAR2(30)</td><td>NOT NULL</td><td>Name of this column in the container table</td></tr><tr><td>AGG_FUNCTION</td><td>VARCHAR2(8)</td><td></td><td>Aggregation function</td></tr><tr><td>DISTINCTFLAG</td><td>VARCHAR2(1)</td><td></td><td>Indicates whether this aggregation is distinct (Y) or not (N)</td></tr><tr><td>MEASURE</td><td>LONG</td><td></td><td>SQL text of the measure, excluding the aggregation function. Equal to?<em>?for?COUNT(</em>).</td></tr></table>

<p>参考<br><a href="https://docs.oracle.com/cd/E11882_01/server.112/e40402/statviews_1143.htm#REFRN20131" target="_blank" rel="external">https://docs.oracle.com/cd/E11882_01/server.112/e40402/statviews_1143.htm#REFRN20131</a></p>
<h3 id="ALL-MVIEW-REFRESH-TIMES"><a href="#ALL-MVIEW-REFRESH-TIMES" class="headerlink" title="ALL_MVIEW_REFRESH_TIMES"></a>ALL_MVIEW_REFRESH_TIMES</h3><p>ALL_MVIEW_REFRESH_TIMES describes refresh times of the materialized views accessible to the current user.<br>Related Views<br>  ● DBA_MVIEW_REFRESH_TIMES describes refresh times of all materialized views in the database.<br>  ● USER_MVIEW_REFRESH_TIMES describes refresh times of the materialized views owned by the current user.</p>
<table style="font-size:14px;"><tr><th width="16.78%">Column</th><th width="14.24%">Datatype</th><th width="11.44%">NULL</th><th width="57.58%">Description</th></tr><tr><td>OWNER</td><td>VARCHAR2(30)</td><td>NOT NULL</td><td>Owner of the materialized view</td></tr><tr><td>NAME</td><td>VARCHAR2(30)</td><td>NOT NULL</td><td>Name of the materialized view</td></tr><tr><td>MASTER_OWNER</td><td>VARCHAR2(30)</td><td></td><td>Owner of the master table</td></tr><tr><td>MASTER</td><td>VARCHAR2(30)</td><td></td><td>Name of the master table</td></tr><tr><td>LAST_REFRESH</td><td>DATE</td><td></td><td>SYSDATE?from the master site at the time of the last refresh</td></tr></table>

<h3 id="ALL-MVIEW-JOINS"><a href="#ALL-MVIEW-JOINS" class="headerlink" title="ALL_MVIEW_JOINS"></a>ALL_MVIEW_JOINS</h3><p>ALL_MVIEW_JOINS describes joins between two columns in the WHERE clause of the subquery that defines a materialized view accessible to the current user.<br>Related Views<br>  ● DBA_MVIEW_JOINS describes all such joins for all materialized views in the database.<br>  ● USER_MVIEW_JOINS describes such joins for all materialized views owned by the current user.<br>Note:<br>All three views exclude materialized views that reference remote tables or that includes references to a nonstatic value such as SYSDATE orUSER. These views also exclude materialized views that were created as “snapshots” prior to Oracle8i and that were never altered to enable query rewrite.</p>
<table style="font-size:14px;"><tr><th width="16.78%">Column</th><th width="14.24%">Datatype</th><th width="11.44%">NULL</th><th width="57.58%">Description</th></tr><tr><td>OWNER</td><td>VARCHAR2(30)</td><td>NOT NULL</td><td>Owner of the materialized view</td></tr><tr><td>MVIEW_NAME</td><td>VARCHAR2(30)</td><td>NOT NULL</td><td>Materialized view name</td></tr><tr><td>DETAILOBJ1_OWNER</td><td>VARCHAR2(30)</td><td>NOT NULL</td><td>Owner of the first object in the joinFoot?1?</td></tr><tr><td>DETAILOBJ1_RELATION</td><td>VARCHAR2(30)</td><td>NOT NULL</td><td>Name of the first object in the joinFootref?1</td></tr><tr><td>DETAILOBJ1_COLUMN</td><td>VARCHAR2(30)</td><td>NOT NULL</td><td>Join column of the first object in the joinFootref?1</td></tr><tr><td>OPERATOR</td><td>CHAR(1)</td><td></td><td>Join operatorFootref?1</td></tr><tr><td>OPERATOR_TYPE</td><td>VARCHAR2(1)</td><td></td><td>Indicates whether the join is an inner join (I) or the?DETAILOBJ1table is the left side of an outer join (L)Footref?1</td></tr><tr><td>DETAILOBJ2_OWNER</td><td>VARCHAR2(30)</td><td>NOT NULL</td><td>Owner of the second object in the joinFootref?1</td></tr><tr><td>DETAILOBJ2_RELATION</td><td>VARCHAR2(30)</td><td>NOT NULL</td><td>Name of the second object in the joinFootref?1</td></tr><tr><td>DETAILOBJ2_COLUMN</td><td>VARCHAR2(30)</td><td>NOT NULL</td><td>Join column of the second object in the joinFootref?1</td></tr></table>

<p>Footnote 1 These rows relate only to materialized join views and materialized aggregate views. They describe the two detail objects of a materialized view join.</p>
<p>参考<br><a href="https://docs.oracle.com/cd/E11882_01/server.112/e40402/statviews_1149.htm#REFRN20134" target="_blank" rel="external">https://docs.oracle.com/cd/E11882_01/server.112/e40402/statviews_1149.htm#REFRN20134</a></p>
<h3 id="ALL-MVIEW-KEYS"><a href="#ALL-MVIEW-KEYS" class="headerlink" title="ALL_MVIEW_KEYS"></a>ALL_MVIEW_KEYS</h3><p>ALL_MVIEW_KEYS describes the columns or expressions in the SELECT list upon which materialized views accessible to the current user are based.<br>Related Views<br>  ● DBA_MVIEW_KEYS describes such columns and expressions for all materialized views in the database.<br>  ● USER_MVIEW_KEYS describes such columns and expressions for all materialized views owned by the current user.<br>Note:<br>All three views exclude materialized views that reference remote tables or that includes references to a nonstatic value such as SYSDATE orUSER. These views also exclude materialized views that were created as snapshots prior to Oracle8i and that were never altered to enable query rewrite.</p>
<table style="font-size:14px;"><tr><th width="16.78%">Column</th><th width="14.24%">Datatype</th><th width="11.44%">NULL</th><th width="57.58%">Description</th></tr><tr><td>OWNER</td><td>VARCHAR2(30)</td><td>NOT NULL</td><td>Owner of the materialized view</td></tr><tr><td>MVIEW_NAME</td><td>VARCHAR2(30)</td><td>NOT NULL</td><td>Materialized view name</td></tr><tr><td>POSITION_IN_SELECT</td><td>NUMBER</td><td>NOT NULL</td><td>Ordinal position of this key within the?SELECT?list</td></tr><tr><td>CONTAINER_COLUMN</td><td>VARCHAR2(30)</td><td>NOT NULL</td><td>Name of the column in the container table</td></tr><tr><td>DETAILOBJ_OWNER</td><td>VARCHAR2(30)</td><td>NOT NULL</td><td>Detail object owner</td></tr><tr><td>DETAILOBJ_NAME</td><td>VARCHAR2(30)</td><td>NOT NULL</td><td>Detail object name (for example, the name of a table or view)</td></tr><tr><td>DETAILOBJ_ALIAS</td><td>VARCHAR2(30)</td><td></td><td>Implicit or explicit alias for detail relation</td></tr><tr><td>DETAILOBJ_TYPE</td><td>VARCHAR2(5)</td><td></td><td>Detail object type:</td></tr></table>

<p>参考<br><a href="https://docs.oracle.com/cd/E11882_01/server.112/e40402/statviews_1150.htm#REFRN20135" target="_blank" rel="external">https://docs.oracle.com/cd/E11882_01/server.112/e40402/statviews_1150.htm#REFRN20135</a></p>
<h3 id="ALL-MVIEW-LOGS"><a href="#ALL-MVIEW-LOGS" class="headerlink" title="ALL_MVIEW_LOGS"></a>ALL_MVIEW_LOGS</h3><p>ALL_MVIEW_LOGS describes all materialized view logs accessible to the current user.<br>Related Views<br>  ● DBA_MVIEW_LOGS describes all materialized view logs in the database.<br>  ● USER_MVIEW_LOGS describes all materialized view logs owned by the current user.</p>
<table style="font-size:14px;"><tr><th width="16.78%">Column</th><th width="14.24%">Datatype</th><th width="11.44%">NULL</th><th width="57.58%">Description</th></tr><tr><td>LOG_OWNER</td><td>VARCHAR2(30)</td><td></td><td>Owner of the materialized view log</td></tr><tr><td>MASTER</td><td>VARCHAR2(30)</td><td></td><td>Name of the master table or master materialized view whose changes are logged</td></tr><tr><td>LOG_TABLE</td><td>VARCHAR2(30)</td><td></td><td>Name of the table where the changes to the master table or master materialized view are logged</td></tr><tr><td>LOG_TRIGGER</td><td>VARCHAR2(30)</td><td></td><td>Obsolete with Oracle8i?and later. Set to NULL. Formerly, this parameter was an after-row trigger on the master which inserted rows into the log.</td></tr><tr><td>ROWIDS</td><td>VARCHAR2(3)</td><td></td><td>Indicates whether rowid information is recorded (YES) or not (NO)</td></tr><tr><td>PRIMARY_KEY</td><td>VARCHAR2(3)</td><td></td><td>Indicates whether primary key information is recorded (YES) or not (NO)</td></tr><tr><td>OBJECT_ID</td><td>VARCHAR2(3)</td><td></td><td>Indicates whether object identifier information in an object table is recorded (YES) or not (NO)</td></tr><tr><td>FILTER_COLUMNS</td><td>VARCHAR2(3)</td><td></td><td>Indicates whether filter column information is recorded (YES) or not (NO)</td></tr><tr><td>SEQUENCE</td><td>VARCHAR2(3)</td><td></td><td>Indicates whether the sequence value, which provides additional ordering information, is recorded (YES) or not (NO)</td></tr><tr><td>INCLUDE_NEW_VALUES</td><td>VARCHAR2(3)</td><td></td><td>Indicates whether both old and new values are recorded (YES) or old values are recorded but new values are not recorded (NO)</td></tr><tr><td>PURGE_ASYNCHRONOUS</td><td>VARCHAR2(3)</td><td></td><td>Indicates whether the materialized view log is purged asynchronously (YES) or not (NO)</td></tr><tr><td>PURGE_DEFERRED</td><td>VARCHAR2(3)</td><td></td><td>Indicates whether the materialized view log is purged in a deferred manner (YES) or not (NO)</td></tr><tr><td>PURGE_START</td><td>DATE</td><td></td><td>For deferred purge, the purge start date</td></tr><tr><td>PURGE_INTERVAL</td><td>VARCHAR2(200)</td><td></td><td>For deferred purge, the purge interval</td></tr><tr><td>LAST_PURGE_DATE</td><td>DATE</td><td></td><td>Date of the last purge</td></tr><tr><td>LAST_PURGE_STATUS</td><td>NUMBER</td><td></td><td>Status of the last purge (error code or?0?for success)</td></tr><tr><td>NUM_ROWS_PURGED</td><td>NUMBER</td><td></td><td>Number of rows purged in the last purge</td></tr><tr><td>COMMIT_SCN_BASED</td><td>VARCHAR2(3)</td><td></td><td>Indicates whether the materialized view log is commit SCN-based (YES) or not (NO)</td></tr></table>

<p>参考<br><a href="https://docs.oracle.com/cd/E11882_01/server.112/e40402/statviews_1151.htm#REFRN20137" target="_blank" rel="external">https://docs.oracle.com/cd/E11882_01/server.112/e40402/statviews_1151.htm#REFRN20137</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当需要对物化视图的状态等信息进行查询，监控和管理时，就要用到相关的系统元数据表了，本文介绍了Oracle物化视图相关的元数据系统视图的表结构，这些视图有：&lt;br&gt;&lt;code&gt;ALL_VIEWS&lt;/code&gt;,&lt;code&gt;DBA_MVIEWS&lt;/code&gt;,&lt;code&gt;USER_MVIEWS&lt;/code&gt;，&lt;code&gt;ALL_MVIEW_ANALYSIS&lt;/code&gt;，&lt;code&gt;DBA_MVIEW_ANALYSIS&lt;/code&gt;，&lt;code&gt;USER_MVIEW_ANALYSIS&lt;/code&gt;，&lt;code&gt;ALL_MVIEW_AGGREGATES&lt;/code&gt;，&lt;code&gt;DBA_MVIEW_AGGREGATES&lt;/code&gt;，&lt;code&gt;USER_MVIEW_AGGREGATES&lt;/code&gt;，&lt;code&gt;ALL_MVIEW_REFRESH_TIMES&lt;/code&gt;，&lt;code&gt;DBA_MVIEW_REFRESH_TIMES&lt;/code&gt;，&lt;code&gt;USER_MVIEW_REFRESH_TIMES&lt;/code&gt;，&lt;code&gt;ALL_MVIEW_JOINS&lt;/code&gt;，&lt;code&gt;DBA_MVIEW_JOINS&lt;/code&gt;，&lt;code&gt;USER_MVIEW_JOINS&lt;/code&gt;，&lt;code&gt;ALL_MVIEW_KEYS&lt;/code&gt;，&lt;code&gt;DBA_MVIEW_KEYS&lt;/code&gt;，&lt;code&gt;USER_MVIEW_KEYS&lt;/code&gt;，&lt;code&gt;ALL_MVIEW_LOGS&lt;/code&gt;，&lt;code&gt;DBA_MVIEW_LOGS&lt;/code&gt;，&lt;code&gt;USER_MVIEW_LOGS&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="码路刺客" scheme="http://c-xuan.com/categories/%E7%A0%81%E8%B7%AF%E5%88%BA%E5%AE%A2/"/>
    
    
      <category term="数据库" scheme="http://c-xuan.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="ORACLE" scheme="http://c-xuan.com/tags/ORACLE/"/>
    
      <category term="物化视图" scheme="http://c-xuan.com/tags/%E7%89%A9%E5%8C%96%E8%A7%86%E5%9B%BE/"/>
    
      <category term="翻译" scheme="http://c-xuan.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>【ORACLE】物化视图快速刷新限制条件</title>
    <link href="http://c-xuan.com/2017/07/13/20170713001/"/>
    <id>http://c-xuan.com/2017/07/13/20170713001/</id>
    <published>2017-07-12T16:00:00.000Z</published>
    <updated>2017-07-12T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>快速刷新的物化视图创建比较麻烦，限制条件比较多，本文参考Oracle 11g 11.2版本官方文档，总结一般情况、含有联接、含有聚合计算、UNION ALL等情况下的限制条件。</p>
<a id="more"></a>
<h3 id="所有快速刷新的物化视图都必须满足的条件"><a href="#所有快速刷新的物化视图都必须满足的条件" class="headerlink" title="所有快速刷新的物化视图都必须满足的条件"></a><span id="here">所有快速刷新的物化视图都必须满足的条件</span></h3><p>定义物化视图的查询语句限制如下：</p>
<ul>
<li>1.物化视图中不能含有非重复表达式的引用，例如<code>SYSDATE</code>和<code>ROWNUM</code>.</li>
<li>2.物化视图中不能出现<code>RAW</code>或<code>LONG RAW</code>数据类型的引用。</li>
<li>3.查询语句的<code>SELECT</code>部分语不能出现子查询。</li>
<li>4.<code>SELECT</code>子句部分不能包含分析性质的函数，例如<code>RANK</code>。</li>
<li>5.不能含有<code>MODEL</code>子句。</li>
<li>6.子查询中不能含有<code>HAVING</code>子句。</li>
<li>7.不能出现含有<code>ANY</code>,<code>ALL</code>或<code>NOT EXISTS</code>的嵌套子查询。</li>
<li>8.不能含有<code>[START WITH …] CONNECT BY</code>子句。</li>
<li>9.不能包含不同站点的多个明细表。</li>
<li>10.<code>ON COMMIT</code>刷新方式的物化视图不能有远程明细表的引用。</li>
<li>11.嵌套物化视图必须含有表联接或者聚合计算。</li>
<li>12.物化视图包含联接和<code>GROUP BY</code>子句的聚合计算时，不能select from 一个有索引的表。</li>
</ul>
<h3 id="只包含联接的物化视图快速刷新限制条件"><a href="#只包含联接的物化视图快速刷新限制条件" class="headerlink" title="只包含联接的物化视图快速刷新限制条件"></a>只包含联接的物化视图快速刷新限制条件</h3><p>定义物化视图的查询语句只含有联接且没有聚合计算，实现快速刷新除满足<a href="#here">通用条件</a>外，还要满足条件如下：</p>
<ul>
<li>1.不能含有<code>GROUP BY</code>子句或聚合计算。</li>
<li>2.<code>FROM</code>中出现的每个基表的<code>ROWID</code>必须出现在<code>SELECT</code>子句中。</li>
<li>3.<code>FROM</code>中出现的每个基表都必须创建基于<code>ROWID</code>的物化视图日志(MATERIALIZED VIEW LOG)。</li>
<li>4.<code>SELECT</code>子句中不能含有object类型的列。</li>
</ul>
<p><font color="red"><strong>另外，以下情况将会影响快速刷新的效率：</strong></font></p>
<ul>
<li><strong><font color="red">1.定义的查询语句含有外联接，如果这样的话，请考虑重写查询语句改为内连接。</font></strong></li>
<li><strong><font color="red">2.<code>SELECT</code>子句中含有多个表的列运算。</font></strong></li>
</ul>
<h3 id="包含聚合的物化视图快速刷新限制"><a href="#包含聚合的物化视图快速刷新限制" class="headerlink" title="包含聚合的物化视图快速刷新限制"></a>包含聚合的物化视图快速刷新限制</h3><p>定义物化视图的查询语句含有聚合计算，实现快速刷新除满足<a href="#here">通用条件</a>外，还要满足条件如下：</p>
<ul>
<li>1.所有基表必须建立物化视图日志，创建日志必须满足：<ul>
<li>1.1 包含在物化视图中引用的所有列，确保这些列没有被加密。</li>
<li>1.2 需要指定<code>ROWID</code>和<code>INCLUDING NEW VAUES</code>。</li>
<li>1.3 如果基表会有插入/直接导入，删除，更新数据的混合操作，需要指定<code>SEQUENCE</code>子句。</li>
</ul>
</li>
<li>2.只有<code>SUM</code>,<code>COUNT</code>,<code>AVG</code>,<code>STDDEV</code>,<code>VARIANCE</code>,<code>MIN</code>和<code>MAX</code>才支持快速刷新。</li>
<li>3.必须有写<code>COUNT(*)</code>。</li>
<li>4.聚合函数必须出现在表达式的最外层，也就是说像<code>AVG(AVG(X))</code>或<code>AVG(x)+AVG(x)</code>都是不允许的。</li>
<li>5.对每一个聚集计算如<code>AVG(expr)</code>,相应的<code>COUNT(expr)</code>也必须要有，Oracle建议<code>SUM(expr)</code>也写上。</li>
<li>6.如果含有<code>VARIANCE(expr)</code>或<code>STDDEV(expr)</code>,<code>COUNT(expr)</code>和<code>SUM(expr)</code>都必须写，Oracle建议<code>SUM(expr*expr)</code>也写上。</li>
<li>7.查询中定义的<code>SELECT</code>列不能是来自多个表的列复杂运算，可以考虑使用嵌套物化视图作为变通方案。</li>
<li>8.<code>GROUP BY</code>中的列都要在<code>SELECT</code>里出现。</li>
<li>9.如果物化视图日志中过滤列字段类型为<code>CHAR</code>，那么基表所在的数据库和物化视图所在的数据库的字符集必须要一样。</li>
<li>10.如果物化视图有以下情况，增量刷新只支持DML操作中的<code>INSERT</code>和直接装载(direct loads)操作，这种物化视图叫只能插入(insert-only)的物化视图：<ul>
<li>10.1 物化视图有<code>MIN</code>或者<code>MAX</code>聚合计算。</li>
<li>10.2 物化视图有<code>SUM(expr)</code>但是没有<code>COUNT(expr)</code>。</li>
<li>10.3 物化视图没有指定<code>COUNT(*)</code>。</li>
</ul>
</li>
<li>11.含有<code>MAX</code>或<code>MIN</code>聚合计算的物化视图如果没有<code>WHERE</code>子句，是支持基表增删改的增量刷新的。</li>
<li>12.物化视图的<code>FROM</code>子句中有普通视图或者子查询，如果普通视图可以被完全合并是可以支持增量刷新的。(PS.这一条不懂啥意思)</li>
<li>13.如果没有外联接，<code>WHERE</code>子句没有限制。<br>-14.有外联接和聚合计算的物化视图是支持增量刷新的，只有外接表数据变更的时候。另外，唯一约束必须存在于表的内连接列上。如果有外联接，所有连接必须用<code>AND</code>和<code>=</code>操作符。</li>
<li>15.对于含有<code>CUBE</code>，<code>ROLLUP</code>，<code>GOUPING SETS</code>的物化视图，会有以下限制：<ul>
<li>15.1<code>SELECT</code>列表要包含<code>GROUP BY</code>所有字段的<code>GROUPING_ID</code>或<code>GROUPING</code>。举个例子，<code>GROUP BY</code>子句是<code>GROUP BY CUBE(a, b)</code>，那么<code>SELECT</code>列表中应该包含<code>GROUPING_ID(a, b)</code>或<code>GROUPING(a) , GROUPING(b)</code>，这样才会使物化视图增量刷新。</li>
<li>15.2 <code>GROUP BY</code>不能导致多个groupings的情况，比如，<code>GROUP BY a, ROLLUP(a, b)</code>就不会增量刷新因为这会导致多个groupings，<code>(a), (a, b), (a)</code>。</li>
</ul>
</li>
</ul>
<h3 id="包含UNION-ALL的物化视图快速刷新限制"><a href="#包含UNION-ALL的物化视图快速刷新限制" class="headerlink" title="包含UNION ALL的物化视图快速刷新限制"></a>包含UNION ALL的物化视图快速刷新限制</h3><p>含有<code>UNION ALL</code>的物化视图<code>REFRESH FAST</code>需要满足以下条件：</p>
<ul>
<li>1.<code>UNION ALL</code>操作必须在查询语句的顶层。<code>UNION ALL</code>不能被嵌套在一个子查询里面，这里有一个例外：<code>SELECT * FROM</code>后面直接跟含有<code>UNION ALL</code>的子查询。</li>
</ul>
<p>例如：<br>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> view_with_unionall <span class="keyword">AS</span></div><div class="line">(<span class="keyword">SELECT</span> c.rowid crid, c.cust_id, <span class="number">2</span> umarker</div><div class="line">   <span class="keyword">FROM</span> customers c <span class="keyword">WHERE</span> c.cust_last_name = <span class="string">'Smith'</span></div><div class="line">  <span class="keyword">UNION</span> ALL</div><div class="line"> <span class="keyword">SELECT</span> c.rowid crid, c.cust_id, <span class="number">3</span> umarker</div><div class="line">   <span class="keyword">FROM</span> customers c <span class="keyword">WHERE</span> c.cust_last_name = <span class="string">'Jones'</span>);</div><div class="line"></div><div class="line"> <span class="keyword">CREATE</span> <span class="keyword">MATERIALIZED</span> <span class="keyword">VIEW</span> unionall_inside_view_mv</div><div class="line"><span class="keyword">REFRESH</span> <span class="keyword">FAST</span> <span class="keyword">ON</span> <span class="keyword">DEMAND</span> <span class="keyword">AS</span></div><div class="line"> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> view_with_unionall;</div></pre></td></tr></table></figure></p>
<ul>
<li>2.<code>UNION ALL</code>的每一部分查询必须满足聚合物化视图货连接物化视图的增量刷新条件。相应的物化视图日志也要建上。</li>
<li>3.<code>UNION ALL</code>的每一部分查询必须包含一列标记列，这个标识列必须是数值或者字符型的固定数值，而且这一列在每一部分的查询中<code>SELECT</code>列顺序相同。</li>
<li>4.一些特性如外联接，只能插入(insert-only)的物化视图查询和远程表都是不支持<code>UNION ALL</code>物化视图的。然而，那些被用于复制的不包含联接和聚集计算的物化视图，是可以增量刷新的。</li>
<li>5.创建包含<code>UNION ALL</code>的增量刷新物化视图，版本需满足9.2.0或更高才能满足兼容。</li>
</ul>
<p>参考：<br><a href="https://docs.oracle.com/cd/E11882_01/server.112/e25554/basicmv.htm#i1007013" target="_blank" rel="external">https://docs.oracle.com/cd/E11882_01/server.112/e25554/basicmv.htm#i1007013</a></p>
<p>更多：<br><a href="http://c-xuan.com/2017/07/13/20170713001">http://c-xuan.com/2017/07/13/20170713001</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;快速刷新的物化视图创建比较麻烦，限制条件比较多，本文参考Oracle 11g 11.2版本官方文档，总结一般情况、含有联接、含有聚合计算、UNION ALL等情况下的限制条件。&lt;/p&gt;
    
    </summary>
    
      <category term="码路刺客" scheme="http://c-xuan.com/categories/%E7%A0%81%E8%B7%AF%E5%88%BA%E5%AE%A2/"/>
    
    
      <category term="数据库" scheme="http://c-xuan.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="ORACLE" scheme="http://c-xuan.com/tags/ORACLE/"/>
    
      <category term="物化视图" scheme="http://c-xuan.com/tags/%E7%89%A9%E5%8C%96%E8%A7%86%E5%9B%BE/"/>
    
      <category term="翻译" scheme="http://c-xuan.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>树形结构数据存储方案（五）：区间嵌套</title>
    <link href="http://c-xuan.com/2017/03/07/tree-table-store5/"/>
    <id>http://c-xuan.com/2017/03/07/tree-table-store5/</id>
    <published>2017-03-07T15:44:08.000Z</published>
    <updated>2017-03-07T16:11:16.129Z</updated>
    
    <content type="html"><![CDATA[<p>前面的一篇文章介绍了左右值编码，不知道大家注意到了没有，如果数据庞大，每次更新都需要更新差不多全表，效率较低没有更好的方式？今天我们就来研究下区间嵌套法。</p>
<p><strong>区间嵌套法原理</strong></p>
<p>如果节点区间<code>[clft, crgt]</code>与<code>[plft, prgt]</code>存在如下关系：<code>plft &lt;= clft and crgt &gt;= prgt</code>，则<code>[clft, crgt]</code>区间里的点是<code>[plft, prgt]</code>的子节点。基于此假设我们就可以通过对区间的不断的向下划来获取新的区间。举例：如果在区间<code>[plft, prgt]</code>中存在一个空白区间<code>[lft1, rgt1]</code>，如果要加入一个<code>[plft,lft1]</code>、<code>[rgt1,prgt]</code>同级的区间，只需插入节点：<code>[(2*lft1+rgt1)/3</code>,  <code>(rgt1+2*lft)/3]</code>。在添加完节点后我们还留下<code>[lft1,(2*lft1+rgt1)/3]</code>和 <code>[(rgt1+2*lft)/3,rgt1]</code>两个空余的空间用来添加更多的子节点。</p>
<a id="more"></a>
<center><img src="/img/posts/tree-table-store5-1.gif"></center>

<p>如果我们把区间放在二位平面上，把<code>rgt</code>当成是x轴，<code>lft</code>当做是y轴，纳闷嵌套的区间数差不多是这样的：</p>
<center><img src="/img/posts/tree-table-store5-2.gif"></center>

<p>每个节点<code>[lft, rgt]</code>拥有的子节点都被包含在<code>y &gt;= lft &amp; x &lt;= rgt</code>中。同时<code>y &gt;= clft &amp; x &lt;= crgt</code>所在的空间也是<code>y &gt;= plft  &amp; x &lt;= prgt</code>的子集。另外由于新增的右区间都小于已有的左区间，所以新增的节点均在y=x这条直线以下。</p>
<p><strong>区间嵌套法实现</strong></p>
<p>了解了区间嵌套法的原理后，接下来我们就要考虑如何实现他，原则上初始的区间使用任何区间都是可以的，这里我们使用的是[0,1]作为根区间。</p>
<center><img src="/img/posts/tree-table-store5-3.gif"></center>

<p>首先，我们在XY平面上定义2个点。深度优先集合点和广度有限集合点，针对点<code>&lt;x=1,y=1/2&gt;</code>的深度优先集合点为<code>&lt;x=1,y=1&gt;</code>，广度优先集合点为<code>&lt;x=1/2,y=1/2&gt;</code>。接下来我们定义第一个子节点的位置为父节点和深度优先集合点的中间点。兄弟节点则为前一个子节点到广度优先集合点的中间点，如上图所示，节点1.2的位置为<code>&lt;x=3/4, y=5/8&gt;</code>。</p>
<p>另外仔细看我们可以看到点与点之间的关系。另外如果我们知道x和y的和，我们就能反推出x,y的值（具体的逻辑是什么，我现在也还没有搞懂，有知道的朋友可以帮忙解释下）。</p>
<p>我们以节点<code>&lt;x=3/4, y=5/8&gt;</code>为例，我们可以得到他的和为11/8。</p>
<p>我们定义11为分子（numerator），8为分母（denominator），则x点的分子为：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> DEFINER = <span class="string">`root`</span>@<span class="string">`localhost`</span> <span class="keyword">FUNCTION</span> <span class="string">`x_numer`</span>(<span class="string">`numer`</span> <span class="built_in">int</span>,<span class="string">`denom`</span> <span class="built_in">int</span>)</div><div class="line"><span class="keyword">RETURNS</span> <span class="built_in">int</span>(<span class="number">11</span>)</div><div class="line"><span class="keyword">BEGIN</span></div><div class="line"><span class="keyword">DECLARE</span> ret_num <span class="built_in">INT</span>;</div><div class="line"><span class="keyword">DECLARE</span> ret_den <span class="built_in">INT</span>;</div><div class="line"><span class="keyword">SET</span> ret_num := numer+<span class="number">1</span>;</div><div class="line"><span class="keyword">SET</span> ret_den := denom*<span class="number">2</span>;</div><div class="line">WHILE floor(ret_num/2) = ret_num/2 <span class="keyword">DO</span></div><div class="line"><span class="keyword">SET</span> ret_num := ret_num/<span class="number">2</span>;</div><div class="line"><span class="keyword">SET</span> ret_den := ret_den/<span class="number">2</span>;</div><div class="line"><span class="keyword">END</span> <span class="keyword">WHILE</span>;</div><div class="line">RETURN ret_num;</div><div class="line"><span class="keyword">END</span>;</div></pre></td></tr></table></figure>
<p>x点的分母为：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> DEFINER = <span class="string">`root`</span>@<span class="string">`localhost`</span> <span class="keyword">FUNCTION</span> <span class="string">`x_ denom`</span>(<span class="string">`numer`</span> <span class="built_in">int</span>,<span class="string">`denom`</span> <span class="built_in">int</span>)</div><div class="line"><span class="keyword">RETURNS</span> <span class="built_in">int</span>(<span class="number">11</span>)</div><div class="line"><span class="keyword">BEGIN</span></div><div class="line"><span class="keyword">DECLARE</span> ret_num <span class="built_in">INT</span>;</div><div class="line"><span class="keyword">DECLARE</span> ret_den <span class="built_in">INT</span>;</div><div class="line"><span class="keyword">SET</span> ret_num := numer+<span class="number">1</span>;</div><div class="line"><span class="keyword">SET</span> ret_den := denom*<span class="number">2</span>;</div><div class="line">WHILE floor(ret_num/2) = ret_num/2 <span class="keyword">DO</span></div><div class="line"><span class="keyword">SET</span> ret_num := ret_num/<span class="number">2</span>;</div><div class="line"><span class="keyword">SET</span> ret_den := ret_den/<span class="number">2</span>;</div><div class="line"><span class="keyword">END</span> <span class="keyword">WHILE</span>;</div><div class="line">RETURN ret_den;</div><div class="line"><span class="keyword">END</span>;</div></pre></td></tr></table></figure>
<p>Y点的分子:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">CREATE DEFINER = `root`@`localhost` FUNCTION `y_numer`(`numer` int,`denom` int)</div><div class="line">RETURNS int(11)</div><div class="line">BEGIN</div><div class="line">DECLARE num INT;</div><div class="line">DECLARE den INT;</div><div class="line">SET num := x_numer(numer, denom);</div><div class="line">SET den := x_denom(numer, denom);</div><div class="line">WHILE den &lt; denom DO</div><div class="line">SET num := num*2;</div><div class="line">SET den := den*2;</div><div class="line">END WHILE;</div><div class="line">SET num := (numer - num);</div><div class="line">WHILE floor(num/2) = num/2 DO</div><div class="line">SET num := num/2;</div><div class="line">SET den := den/2;</div><div class="line">END WHILE;</div><div class="line">RETURN num;</div><div class="line">END;</div></pre></td></tr></table></figure>
<p>Y 的分母：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">CREATE DEFINER = `root`@`localhost` FUNCTION `y_denom`(`numer` int,`denom` int)</div><div class="line">RETURNS int(11)</div><div class="line">BEGIN</div><div class="line">DECLARE num INT;</div><div class="line">DECLARE den INT;</div><div class="line">SET num := x_numer(numer, denom);</div><div class="line">SET den := x_denom(numer, denom);</div><div class="line">WHILE den &lt; denom DO</div><div class="line">SET num := num*2;</div><div class="line">SET den := den*2;</div><div class="line">END WHILE;</div><div class="line">SET num := (numer - num);</div><div class="line">WHILE floor(num/2) = num/2 DO</div><div class="line">SET num := num/2;</div><div class="line">SET den := den/2;</div><div class="line">END WHILE;</div><div class="line">RETURN den;</div><div class="line">END;</div></pre></td></tr></table></figure>
<p>接下来我们来测试下，X与Y是否能解码出来：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span></div><div class="line"><span class="keyword">CONCAT</span>(x_numer (<span class="number">11</span>, <span class="number">8</span>),<span class="string">'/'</span>,x_denom (<span class="number">11</span>, <span class="number">8</span>)) <span class="keyword">AS</span> X,</div><div class="line"><span class="keyword">CONCAT</span>(y_numer (<span class="number">11</span>, <span class="number">8</span>),<span class="string">'/'</span>,y_denom (<span class="number">11</span>, <span class="number">8</span>)) <span class="keyword">AS</span> Y</div></pre></td></tr></table></figure>
<center><img src="/img/posts/tree-table-store5-4.gif"></center>

<p>结果与节点1.2的位置为<code>&lt;x=3/4, y=5/8&gt;</code>完全一致。现在我们知道只需要一个分数即可表示平面上的一个点。</p>
<p>如有已经有分数11/8如何获取该节点的父节点？(如果分子为3，则代表其为根节点)</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> DEFINER = <span class="string">`root`</span>@<span class="string">`localhost`</span> <span class="keyword">FUNCTION</span> <span class="string">`parent_numer`</span>(<span class="string">`numer`</span> <span class="built_in">int</span>,<span class="string">`denom`</span> <span class="built_in">int</span>)</div><div class="line"><span class="keyword">RETURNS</span> <span class="built_in">int</span>(<span class="number">11</span>)</div><div class="line"><span class="keyword">BEGIN</span></div><div class="line"><span class="keyword">DECLARE</span> ret_num <span class="built_in">INT</span>;</div><div class="line"><span class="keyword">DECLARE</span> ret_den <span class="built_in">INT</span>;</div><div class="line">IF numer=3 THEN</div><div class="line">RETURN denom/2;</div><div class="line"><span class="keyword">END</span> <span class="keyword">IF</span>;</div><div class="line"><span class="keyword">SET</span> ret_num := (numer<span class="number">-1</span>)/<span class="number">2</span>;</div><div class="line"><span class="keyword">SET</span> ret_den := denom/<span class="number">2</span>;</div><div class="line">WHILE floor((ret_num-1)/4) = (ret_num-1)/4 <span class="keyword">DO</span></div><div class="line"><span class="keyword">SET</span> ret_num := (ret_num+<span class="number">1</span>)/<span class="number">2</span>;</div><div class="line"><span class="keyword">SET</span> ret_den := ret_den/<span class="number">2</span>;</div><div class="line"><span class="keyword">END</span> <span class="keyword">WHILE</span>;</div><div class="line">RETURN ret_num;</div><div class="line"><span class="keyword">END</span>;</div><div class="line"></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">CONCAT</span>(parent_numer(<span class="number">11</span>,<span class="number">8</span>),<span class="string">'/'</span>,parent_denom(<span class="number">11</span>,<span class="number">8</span>)) <span class="keyword">AS</span> <span class="keyword">parent</span></div></pre></td></tr></table></figure>
<p>计算当前节点在同级所在的位置：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> DEFINER = <span class="string">`root`</span>@<span class="string">`localhost`</span> <span class="keyword">FUNCTION</span> <span class="string">`parent_denom`</span>(<span class="string">`numer`</span> <span class="built_in">int</span>,<span class="string">`denom`</span> <span class="built_in">int</span>)</div><div class="line"><span class="keyword">RETURNS</span> <span class="built_in">int</span>(<span class="number">11</span>)</div><div class="line"><span class="keyword">BEGIN</span></div><div class="line"><span class="keyword">DECLARE</span> ret_num <span class="built_in">INT</span>;</div><div class="line"><span class="keyword">DECLARE</span> ret_den <span class="built_in">INT</span>;</div><div class="line">IF numer=3 THEN</div><div class="line">RETURN NULL;</div><div class="line"><span class="keyword">END</span> <span class="keyword">IF</span>;</div><div class="line"><span class="keyword">SET</span> ret_num := (numer<span class="number">-1</span>)/<span class="number">2</span>;</div><div class="line"><span class="keyword">SET</span> ret_den := denom/<span class="number">2</span>;</div><div class="line">WHILE floor((ret_num-1)/4) = (ret_num-1)/4 <span class="keyword">DO</span></div><div class="line"><span class="keyword">SET</span> ret_num := (ret_num+<span class="number">1</span>)/<span class="number">2</span>;</div><div class="line"><span class="keyword">SET</span> ret_den := ret_den/<span class="number">2</span>;</div><div class="line"><span class="keyword">END</span> <span class="keyword">WHILE</span>;</div><div class="line">RETURN ret_den;</div><div class="line"><span class="keyword">END</span>;</div></pre></td></tr></table></figure>
<p>有了查询父节点的方法及当前节点所在同级中的位置的方法，即可通过这两个的组合，将节点的路径给计算出来。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> DEFINER = <span class="string">`root`</span>@<span class="string">`localhost`</span> <span class="keyword">FUNCTION</span> <span class="string">`path`</span>(<span class="string">`numer`</span> <span class="built_in">int</span>,<span class="string">`denom`</span> <span class="built_in">int</span>)</div><div class="line"><span class="keyword">RETURNS</span> <span class="built_in">varchar</span>(<span class="number">255</span>)</div><div class="line"><span class="keyword">BEGIN</span></div><div class="line"><span class="keyword">IF</span> numer <span class="keyword">is</span> <span class="literal">NULL</span> <span class="keyword">THEN</span></div><div class="line"><span class="keyword">RETURN</span> <span class="string">''</span>;</div><div class="line"><span class="keyword">END</span> <span class="keyword">IF</span>;</div><div class="line">RETURN path(parent_numer(numer, denom),parent_denom(numer, denom))|| ‘.’ || sibling_number(numer, denom);</div><div class="line"><span class="keyword">END</span>;</div></pre></td></tr></table></figure>
<p>按照以上方法添加后进行测试，返回<br><strong>[Err] 1424 – Recursive stored functions and triggers are not allowed.</strong>即MySQL的自定义函数不支持递归查询。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> DEFINER = <span class="string">`root`</span>@<span class="string">`localhost`</span> <span class="keyword">FUNCTION</span> <span class="string">`path`</span>(<span class="string">`numer`</span> <span class="built_in">int</span>,<span class="string">`denom`</span> <span class="built_in">int</span>)</div><div class="line"><span class="keyword">RETURNS</span> <span class="built_in">varchar</span>(<span class="number">255</span>)</div><div class="line"><span class="keyword">BEGIN</span></div><div class="line"><span class="keyword">DECLARE</span> numer_temp <span class="built_in">INT</span>;</div><div class="line"><span class="keyword">DECLARE</span> denom_temp <span class="built_in">INT</span>;</div><div class="line"><span class="keyword">DECLARE</span> path_result <span class="built_in">VARCHAR</span>(<span class="number">255</span>);</div><div class="line"><span class="keyword">DECLARE</span> path_temp <span class="built_in">VARCHAR</span>(<span class="number">255</span>);</div><div class="line"><span class="keyword">DECLARE</span> sn <span class="built_in">VARCHAR</span>(<span class="number">255</span>);</div><div class="line"><span class="keyword">SET</span> path_temp := <span class="string">''</span>;</div><div class="line">WHILE numer IS NOT NULL <span class="keyword">DO</span></div><div class="line"><span class="keyword">IF</span> path_temp = <span class="string">''</span></div><div class="line"><span class="keyword">THEN</span></div><div class="line"><span class="keyword">SET</span> path_result := sibling_number(numer, denom);</div><div class="line">ELSE</div><div class="line"><span class="keyword">SET</span> path_result := <span class="keyword">CONCAT</span>(sibling_number(numer, denom),<span class="string">'.'</span>,path_temp);</div><div class="line"><span class="keyword">END</span> <span class="keyword">IF</span>;</div><div class="line"><span class="keyword">SET</span> path_temp := path_result;</div><div class="line"><span class="keyword">SET</span> numer_temp := parent_numer(numer, denom);</div><div class="line"><span class="keyword">SET</span> denom_temp := parent_denom(numer, denom);</div><div class="line"><span class="keyword">SET</span> numer := numer_temp;</div><div class="line"><span class="keyword">SET</span> denom := denom_temp;</div><div class="line"><span class="keyword">END</span> <span class="keyword">WHILE</span>;</div><div class="line">RETURN path_result;</div><div class="line"><span class="keyword">END</span>;</div></pre></td></tr></table></figure>
<p><code>SELECT path (11, 8)</code>的结果为 1.2</p>
<p>计算节点层级的方法：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> DEFINER = <span class="string">`root`</span>@<span class="string">`localhost`</span> <span class="keyword">FUNCTION</span> <span class="string">`node_level`</span>(<span class="string">`numer`</span> <span class="built_in">int</span>,<span class="string">`denom`</span> <span class="built_in">int</span>)</div><div class="line"><span class="keyword">RETURNS</span> <span class="built_in">int</span>(<span class="number">11</span>)</div><div class="line"><span class="keyword">BEGIN</span></div><div class="line"><span class="keyword">DECLARE</span> ret_num <span class="built_in">INT</span>;</div><div class="line"><span class="keyword">DECLARE</span> ret_den <span class="built_in">INT</span>;</div><div class="line"><span class="keyword">DECLARE</span> ret <span class="built_in">INT</span>;</div><div class="line"><span class="keyword">SET</span> ret =<span class="number">1</span>;</div><div class="line">IF numer=3 THEN</div><div class="line">return 1;</div><div class="line"><span class="keyword">END</span> <span class="keyword">IF</span>;</div><div class="line">WHILE numer!=3 <span class="keyword">DO</span></div><div class="line"><span class="keyword">SET</span> ret_num := parent_numer(numer, denom);</div><div class="line"><span class="keyword">SET</span> ret_den := parent_denom(numer, denom);</div><div class="line"><span class="keyword">SET</span> numer := ret_num;</div><div class="line"><span class="keyword">SET</span> denom := ret_den;</div><div class="line"><span class="keyword">SET</span> ret := ret + <span class="number">1</span>;</div><div class="line"><span class="keyword">END</span> <span class="keyword">WHILE</span>;</div><div class="line">RETURN ret;</div><div class="line"><span class="keyword">END</span>;</div></pre></td></tr></table></figure>
<p>我们知道了如何将编码过的节点转成目录形式，如何逆转呢？以下是方法：</p>
<p>先添加2个辅助函数：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> DEFINER = <span class="string">`root`</span>@<span class="string">`localhost`</span> <span class="keyword">FUNCTION</span> <span class="string">`child_numer`</span>(<span class="string">`num`</span> <span class="built_in">int</span>,<span class="string">`den`</span> <span class="built_in">int</span>,<span class="string">`child`</span> <span class="built_in">int</span>)</div><div class="line"><span class="keyword">RETURNS</span> <span class="built_in">int</span>(<span class="number">11</span>)</div><div class="line"><span class="keyword">BEGIN</span></div><div class="line"><span class="keyword">RETURN</span> <span class="keyword">num</span> * <span class="keyword">power</span>(<span class="number">2</span>, <span class="keyword">child</span>) + <span class="number">3</span> - <span class="keyword">power</span>(<span class="number">2</span>, <span class="keyword">child</span>);</div><div class="line"><span class="keyword">END</span>;</div></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> DEFINER = <span class="string">`root`</span>@<span class="string">`localhost`</span> <span class="keyword">FUNCTION</span> <span class="string">`child_denom`</span>(<span class="string">`num`</span> <span class="built_in">int</span>,<span class="string">`den`</span> <span class="built_in">int</span>,<span class="string">`child`</span> <span class="built_in">int</span>)</div><div class="line"><span class="keyword">RETURNS</span> <span class="built_in">int</span>(<span class="number">11</span>)</div><div class="line"><span class="keyword">BEGIN</span></div><div class="line"><span class="keyword">RETURN</span> den*<span class="keyword">power</span>(<span class="number">2</span>, <span class="keyword">child</span>);</div><div class="line"><span class="keyword">END</span>;</div></pre></td></tr></table></figure>
<p>再来编写逆转函数：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">CREATE DEFINER = `root`@`localhost` FUNCTION `path_numer`(`path` varchar(255))</div><div class="line">RETURNS int(11)</div><div class="line">BEGIN</div><div class="line">DECLARE num INT;</div><div class="line">DECLARE den INT;</div><div class="line">DECLARE postfix VARCHAR(255);</div><div class="line">DECLARE sibling VARCHAR(255);</div><div class="line">SET num := 1;</div><div class="line">SET den := 1;</div><div class="line">SET postfix := CONCAT(path,'.');</div><div class="line">WHILE length(postfix) &gt; 1 DO</div><div class="line">SET sibling := SUBSTR(postfix, 1, instr(postfix,'.')-1);</div><div class="line">SET postfix := SUBSTR(postfix, instr(postfix,'.')+1);</div><div class="line">SET num := child_numer(num,den,sibling+0);</div><div class="line">SET den := child_denom(num,den,sibling+0);</div><div class="line">END WHILE;</div><div class="line">RETURN num;</div><div class="line">END;</div></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">CREATE DEFINER = `root`@`localhost` FUNCTION `path_denom`(`path` varchar(255))</div><div class="line">RETURNS int(11)</div><div class="line">BEGIN</div><div class="line">DECLARE num INT;</div><div class="line">DECLARE den INT;</div><div class="line">DECLARE postfix VARCHAR(255);</div><div class="line">DECLARE sibling VARCHAR(255);</div><div class="line">SET num := 1;</div><div class="line">SET den := 1;</div><div class="line">SET postfix := CONCAT(path,'.');</div><div class="line">WHILE length(postfix) &gt; 1 DO</div><div class="line">SET sibling := SUBSTR(postfix, 1, instr(postfix,'.')-1);</div><div class="line">SET postfix := SUBSTR(postfix, instr(postfix,'.')+1);</div><div class="line">SET num := child_numer(num,den,sibling+0);</div><div class="line">SET den := child_denom(num,den,sibling+0);</div><div class="line">END WHILE;</div><div class="line">RETURN den;</div><div class="line">END;</div></pre></td></tr></table></figure>
<p><code>select CONCAT(path_numer(‘2.1.3′),’/’,path_denom(‘2.1.3’))</code>结果为51/64</p>
<p>参考资料：<br>  ● <a href="http://www.rampant-books.com/art_vadim_nested_sets_sql_trees.htm" target="_blank" rel="external">http://www.rampant-books.com/art_vadim_nested_sets_sql_trees.htm</a></p>
<p>转自<a href="https://www.biaodianfu.com/nested-intervals.html" target="_blank" rel="external">https://www.biaodianfu.com/nested-intervals.html</a></p>
<p>作者：标点符</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前面的一篇文章介绍了左右值编码，不知道大家注意到了没有，如果数据庞大，每次更新都需要更新差不多全表，效率较低没有更好的方式？今天我们就来研究下区间嵌套法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;区间嵌套法原理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果节点区间&lt;code&gt;[clft, crgt]&lt;/code&gt;与&lt;code&gt;[plft, prgt]&lt;/code&gt;存在如下关系：&lt;code&gt;plft &amp;lt;= clft and crgt &amp;gt;= prgt&lt;/code&gt;，则&lt;code&gt;[clft, crgt]&lt;/code&gt;区间里的点是&lt;code&gt;[plft, prgt]&lt;/code&gt;的子节点。基于此假设我们就可以通过对区间的不断的向下划来获取新的区间。举例：如果在区间&lt;code&gt;[plft, prgt]&lt;/code&gt;中存在一个空白区间&lt;code&gt;[lft1, rgt1]&lt;/code&gt;，如果要加入一个&lt;code&gt;[plft,lft1]&lt;/code&gt;、&lt;code&gt;[rgt1,prgt]&lt;/code&gt;同级的区间，只需插入节点：&lt;code&gt;[(2*lft1+rgt1)/3&lt;/code&gt;,  &lt;code&gt;(rgt1+2*lft)/3]&lt;/code&gt;。在添加完节点后我们还留下&lt;code&gt;[lft1,(2*lft1+rgt1)/3]&lt;/code&gt;和 &lt;code&gt;[(rgt1+2*lft)/3,rgt1]&lt;/code&gt;两个空余的空间用来添加更多的子节点。&lt;/p&gt;
    
    </summary>
    
      <category term="码路刺客" scheme="http://c-xuan.com/categories/%E7%A0%81%E8%B7%AF%E5%88%BA%E5%AE%A2/"/>
    
    
      <category term="转载" scheme="http://c-xuan.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="数据库" scheme="http://c-xuan.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>树形结构数据存储方案（四）：左右值编码</title>
    <link href="http://c-xuan.com/2017/03/07/tree-table-store4/"/>
    <id>http://c-xuan.com/2017/03/07/tree-table-store4/</id>
    <published>2017-03-07T15:34:08.000Z</published>
    <updated>2017-03-07T16:12:54.036Z</updated>
    
    <content type="html"><![CDATA[<p>在基于数据库的一般应用中，查询的需求总要大于删除和修改。为了避免对于树形结构查询时的“递归”过程，基于Tree的前序遍历设计一种全新的无递归查询、无限分组的左右值编码方案，来保存该树的数据。</p>
<center><img src="/img/posts/tree-table-store4-1.gif"></center>

<a id="more"></a>
<p>第一次看见这种表结构，相信大部分人都不清楚左值（Lft）和右值（Rgt）是如何计算出来的，而且这种表设计似乎并没有保存父子节点的继承关系。但当你用手指指着表中的数字从1数到18，你应该会发现点什么吧。对，你手指移动的顺序就是对这棵树进行前序遍历的顺序，如下图所示。当我们从根节点Food左侧开始，标记为1，并沿前序遍历的方向，依次在遍历的路径上标注数字，最后我们回到了根节点Food，并在右边写上了18。</p>
<center><img src="/img/posts/tree-table-store4-2.gif"></center>

<p>依据此设计，我们可以推断出所有左值大于2，并且右值小于11的节点都是Fruit的后续节点，整棵树的结构通过左值和右值存储了下来。然而，这还不够，我们的目的是能够对树进行CRUD操作，即需要构造出与之配套的相关算法。按照深度优先，由左到右的原则遍历整个树，从1开始给每个节点标注上left值和right值，并将这两个值存入对应的name之中。</p>
<p>如何查询？</p>
<p>1、获取某个节点下的所有子孙节点，以Fruit为例：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> Tree <span class="keyword">WHERE</span> Lft &gt; <span class="number">2</span> <span class="keyword">AND</span> Lft &lt; <span class="number">11</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> Lft <span class="keyword">ASC</span></div></pre></td></tr></table></figure>
<p>2、获取子孙节点总数<br>子孙总数 = (右值–左值–1)/2，以Fruit为例，其子孙总数为：(11–2–1)/2 = 4</p>
<p>3、 获取节点在树中所处的层数，以Fruit为例：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">FROM</span> Tree <span class="keyword">WHERE</span> Lft &lt;= <span class="number">2</span> <span class="keyword">AND</span> Rgt &gt;=<span class="number">11</span></div></pre></td></tr></table></figure>
<p>4、 获取当前节点所在路径，以Fruit为例：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> Tree <span class="keyword">WHERE</span> Lft &lt;= <span class="number">2</span> <span class="keyword">AND</span> Rgt &gt;=<span class="number">11</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> Lft <span class="keyword">ASC</span></div></pre></td></tr></table></figure>
<p>在日常的处理中我们经常还会遇到的需要获取某一个节点的直属上级、同级、直属下级。为了更好的描述层级关系，我们可以为Tree建立一个视图，添加一个层次列，该列数值可以编写一个自定义函数来计算：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> <span class="string">`CountLayer`</span>(<span class="string">`_node_id`</span> <span class="built_in">int</span>)</div><div class="line"><span class="keyword">RETURNS</span> <span class="built_in">int</span>(<span class="number">11</span>)</div><div class="line"><span class="keyword">BEGIN</span></div><div class="line"><span class="keyword">DECLARE</span> _result <span class="built_in">INT</span>;</div><div class="line"><span class="keyword">DECLARE</span> _lft <span class="built_in">INT</span>;</div><div class="line"><span class="keyword">DECLARE</span> _rgt <span class="built_in">INT</span>;</div><div class="line">IF EXISTS(<span class="keyword">SELECT</span> Node_id <span class="keyword">FROM</span> Tree <span class="keyword">WHERE</span> Node_id = _node_id)</div><div class="line"><span class="keyword">THEN</span></div><div class="line"><span class="keyword">SELECT</span> Lft,Rgt <span class="keyword">FROM</span> Tree <span class="keyword">WHERE</span> Node_id = _node_id <span class="keyword">INTO</span> _lft,_rgt;</div><div class="line"><span class="keyword">SET</span> _result = (<span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(<span class="number">1</span>) <span class="keyword">FROM</span> Tree <span class="keyword">WHERE</span> Lft &lt;= _lft <span class="keyword">AND</span> Rgt &gt;= _rgt); </div><div class="line">RETURN _result;</div><div class="line">ELSE</div><div class="line">RETURN 0;</div><div class="line"><span class="keyword">END</span> <span class="keyword">IF</span>;</div><div class="line"><span class="keyword">END</span>;</div></pre></td></tr></table></figure>
<p>在添加完函数以后，我们创建一个a视图，添加新的层次列：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> <span class="string">`NewView`</span><span class="keyword">AS</span> </div><div class="line"><span class="keyword">SELECT</span> Node_id, <span class="keyword">Name</span>, Lft, Rgt, CountLayer(Node_id) <span class="keyword">AS</span> Layer <span class="keyword">FROM</span> Tree <span class="keyword">ORDER</span> <span class="keyword">BY</span> Lft ;</div></pre></td></tr></table></figure>
<p>5、 获取当前节点父节点,以Fruit为例：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> treeview <span class="keyword">WHERE</span> Lft &lt;= <span class="number">2</span> <span class="keyword">AND</span> Rgt &gt;=<span class="number">11</span> <span class="keyword">AND</span> Layer=<span class="number">1</span></div></pre></td></tr></table></figure>
<p>6、 获取所有直属子节点，以Fruit为例：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> treeview <span class="keyword">WHERE</span> Lft <span class="keyword">BETWEEN</span> <span class="number">2</span> <span class="keyword">AND</span> <span class="number">11</span> <span class="keyword">AND</span> Layer=<span class="number">3</span></div></pre></td></tr></table></figure>
<p>7、 获取所有兄弟节点，以Fruit为例：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> treeview <span class="keyword">WHERE</span> Rgt &gt; <span class="number">11</span> <span class="keyword">AND</span> Rgt &lt; (<span class="keyword">SELECT</span> Rgt <span class="keyword">FROM</span> treeview <span class="keyword">WHERE</span> Lft &lt;= <span class="number">2</span> <span class="keyword">AND</span> Rgt &gt;=<span class="number">11</span> <span class="keyword">AND</span> Layer=<span class="number">1</span>) <span class="keyword">AND</span> Layer=<span class="number">2</span></div></pre></td></tr></table></figure>
<p>8、 返回所有叶子节点</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> Tree <span class="keyword">WHERE</span> Rgt = Lft + <span class="number">1</span></div></pre></td></tr></table></figure>
<p><strong>如何创建树？如何新增数据？</strong></p>
<p>上面已经介绍了如何检索结果，那么如何才能增加新的节点呢？Nested set 最重要是一定要有一个根节点作为所有节点的起点，而且通常这个节点是不被使用的。为了便于控制查询级别，在建表的时候建议添加parent_id配合之联结列表方式一起使用。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">`Tree`</span> (</div><div class="line"><span class="string">`node_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</div><div class="line"><span class="string">`parent_id`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span>,</div><div class="line"><span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="string">`lft`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span>,</div><div class="line"><span class="string">`rgt`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span>,</div><div class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`node_id`</span>),</div><div class="line"><span class="keyword">KEY</span> <span class="string">`idx_left_right`</span> (<span class="string">`lft`</span>,<span class="string">`rgt`</span>)</div><div class="line">) <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</div></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`Tree`</span> (parent_id,<span class="keyword">name</span>,lft,rgt) <span class="keyword">VALUES</span> ( <span class="number">0</span>,<span class="string">'Food'</span>,<span class="number">1</span>,<span class="number">2</span>)</div></pre></td></tr></table></figure>
<p>添加子节点（子节点起始处），以在Food下添加子节点Fruit为例：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">LOCK</span> <span class="keyword">TABLE</span> Tree WRITE;</div><div class="line"><span class="keyword">SELECT</span> @parent_id := node_id, @myLeft := lft <span class="keyword">FROM</span> Tree <span class="keyword">WHERE</span> <span class="keyword">name</span> = <span class="string">'Food'</span>;</div><div class="line"><span class="keyword">UPDATE</span> Tree <span class="keyword">SET</span> rgt = rgt + <span class="number">2</span> <span class="keyword">WHERE</span> rgt &gt; @myLeft;</div><div class="line"><span class="keyword">UPDATE</span> Tree <span class="keyword">SET</span> lft = lft + <span class="number">2</span> <span class="keyword">WHERE</span> lft &gt; @myLeft;</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Tree(parent_id, <span class="keyword">name</span>, lft, rgt) <span class="keyword">VALUES</span>(@parent_id, <span class="string">'Fruit'</span>, @myLeft + <span class="number">1</span>, @myLeft + <span class="number">2</span>);</div><div class="line"><span class="keyword">UNLOCK</span> <span class="keyword">TABLES</span>;</div></pre></td></tr></table></figure>
<p>如需在末尾追加就需要以下方式进行（以在Red下添加Apple为例）：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">LOCK</span> <span class="keyword">TABLE</span> Tree WRITE;</div><div class="line"><span class="keyword">SELECT</span> @parent_id := node_id , @myRight := rgt <span class="keyword">FROM</span> Tree <span class="keyword">WHERE</span> <span class="keyword">name</span> = <span class="string">'Red'</span>;</div><div class="line"><span class="keyword">UPDATE</span> Tree <span class="keyword">SET</span> rgt = rgt + <span class="number">2</span> <span class="keyword">WHERE</span> rgt &gt;= @myRight;</div><div class="line"><span class="keyword">UPDATE</span> Tree <span class="keyword">SET</span> lft = lft + <span class="number">2</span> <span class="keyword">WHERE</span> lft &gt; @myRight;</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Tree(parent_id, <span class="keyword">name</span>, lft, rgt) <span class="keyword">VALUES</span>(@parent_id, <span class="string">'Apple'</span>, @myRight, @myRight + <span class="number">1</span>);</div><div class="line"><span class="keyword">UNLOCK</span> <span class="keyword">TABLES</span>;</div></pre></td></tr></table></figure>
<p>在节点A后面添加同级节点（以在Yellow后面添加Green为例）</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">LOCK</span> <span class="keyword">TABLE</span> Tree WRITE;</div><div class="line"><span class="keyword">SELECT</span> @parent_id := parent_id , @myRight := rgt <span class="keyword">FROM</span> Tree <span class="keyword">WHERE</span> <span class="keyword">name</span> = <span class="string">'Yellow'</span>;</div><div class="line"><span class="keyword">UPDATE</span> Tree <span class="keyword">SET</span> rgt = rgt + <span class="number">2</span> <span class="keyword">WHERE</span> rgt &gt; @myRight;</div><div class="line"><span class="keyword">UPDATE</span> Tree <span class="keyword">SET</span> lft = lft + <span class="number">2</span> <span class="keyword">WHERE</span> lft &gt; @myRight;</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Tree(parent_id, <span class="keyword">name</span>, lft, rgt) <span class="keyword">VALUES</span>(@parent_id, <span class="string">'Green'</span>, @myRight+<span class="number">1</span>, @myRight+<span class="number">2</span>);</div><div class="line"><span class="keyword">UNLOCK</span> <span class="keyword">TABLES</span>;</div></pre></td></tr></table></figure>
<p>以上讨论的添加节点指的都是添加末端节点，即插入的这个节点不是当前已存在节点的父节点。如果需要插入非末端节点要怎么办呢？<br>这个过程可以将流程分为2步，首先新增节点，接下里再将需要的节点移到新增的节点下级。节点移动方法(以将Apple移到Yellow中为例)：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">LOCK</span> <span class="keyword">TABLE</span> Tree WRITE;</div><div class="line"><span class="keyword">SELECT</span> @nodeId := node_id , @myLeft := lft , @myRight := rgt <span class="keyword">FROM</span> Tree <span class="keyword">WHERE</span> <span class="keyword">name</span> = <span class="string">'Apple'</span>;</div><div class="line"><span class="keyword">UPDATE</span> Tree <span class="keyword">SET</span> lft = lft - (@myRight - @myLeft) - <span class="number">1</span> <span class="keyword">WHERE</span> lft &gt; @myRight;</div><div class="line"><span class="keyword">UPDATE</span> Tree <span class="keyword">SET</span> rgt = rgt - (@myRight - @myLeft) - <span class="number">1</span> <span class="keyword">WHERE</span> rgt &gt; @myRight;</div><div class="line"><span class="keyword">SELECT</span> @parent_id := node_id , @<span class="keyword">Left</span> := lft , @<span class="keyword">Right</span> := rgt <span class="keyword">FROM</span> Tree <span class="keyword">WHERE</span> <span class="keyword">name</span> = <span class="string">'Yellow'</span>;</div><div class="line"><span class="keyword">UPDATE</span> Tree <span class="keyword">SET</span> lft = lft + (@myRight - @myLeft) + <span class="number">1</span> <span class="keyword">WHERE</span> lft &gt; @<span class="keyword">Left</span>;</div><div class="line"><span class="keyword">UPDATE</span> Tree <span class="keyword">SET</span> rgt = rgt + (@myRight - @myLeft) + <span class="number">1</span> <span class="keyword">WHERE</span> lft &gt; @<span class="keyword">Left</span>;</div><div class="line"><span class="keyword">UPDATE</span> Tree <span class="keyword">SET</span> parent_id = @parent_id <span class="keyword">WHERE</span> <span class="keyword">name</span> = node_id = @nodeId;</div><div class="line"><span class="keyword">UPDATE</span> Tree <span class="keyword">SET</span> lft = @<span class="keyword">Left</span> + lft - @myLeft + <span class="number">1</span>, rgt = @<span class="keyword">Left</span> + lft - @myLeft + <span class="number">1</span> + (@myRight - @myLeft) <span class="keyword">WHERE</span> lft &gt;= @myLeft <span class="keyword">AND</span> rgt &lt;= @myRight;</div><div class="line"><span class="keyword">UNLOCK</span> <span class="keyword">TABLES</span>;</div></pre></td></tr></table></figure>
<p><strong>删除节点（包含子节点）</strong></p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">LOCK</span> <span class="keyword">TABLE</span> Tree WRITE;</div><div class="line"><span class="keyword">SELECT</span> @myLeft := lft , @myRight := rgt <span class="keyword">FROM</span> Tree <span class="keyword">WHERE</span> <span class="keyword">name</span> = <span class="string">'Apple'</span>;</div><div class="line"><span class="keyword">DELETE</span> Tree <span class="keyword">WHERE</span> lft &gt;= @myLeft <span class="keyword">AND</span> rgt &lt;= @myRight;</div><div class="line"><span class="keyword">UPDATE</span> Tree <span class="keyword">SET</span> lft = lft - (@myRight - @myLeft) - <span class="number">1</span> <span class="keyword">WHERE</span> lft &gt; @myRight;</div><div class="line"><span class="keyword">UPDATE</span> Tree <span class="keyword">SET</span> rgt = rgt - (@myRight - @myLeft) - <span class="number">1</span> <span class="keyword">WHERE</span> rgt &gt; @myRight;</div><div class="line"><span class="keyword">UNLOCK</span> <span class="keyword">TABLES</span>;</div></pre></td></tr></table></figure>
<p>如果需要只删除该节点，子节点自动上移一级如何处理？</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">LOCK</span> <span class="keyword">TABLE</span> Tree WRITE;</div><div class="line"><span class="keyword">SELECT</span> @parent_id := parent_id , @node_id :=node_id , @myLeft := lft , @myRight := rgt <span class="keyword">FROM</span> Tree <span class="keyword">WHERE</span> <span class="keyword">name</span> = <span class="string">'Red'</span>;</div><div class="line"><span class="keyword">UPDATE</span> Tree <span class="keyword">SET</span> parent_id = @parent_id <span class="keyword">WHERE</span> parent_id = @node_id</div><div class="line"><span class="keyword">DELETE</span> Tree <span class="keyword">WHERE</span> lft = @myLeft;</div><div class="line"><span class="keyword">UPDATE</span> Tree <span class="keyword">SET</span> lft = lft - <span class="number">1</span>,rgt = rgt<span class="number">-1</span> <span class="keyword">Where</span> lft &gt; @myLeft <span class="keyword">AND</span> @rgt &lt; @myRight</div><div class="line"><span class="keyword">UPDATE</span> Tree <span class="keyword">SET</span> lft = lft - <span class="number">2</span>,rgt = rgt<span class="number">-2</span> <span class="keyword">Where</span> lft &gt; @rgt &gt; @myRight</div><div class="line"><span class="keyword">UNLOCK</span> <span class="keyword">TABLES</span>;</div></pre></td></tr></table></figure>
<p>以上为Nested Set的CURD操作，具体在使用时建议结合事务和存储过程一起使用。本方案的优点时查询非常的方便，缺点就是每次插入删除数据涉及到的更新内容太多，如果树非常大，插入一条数据可能花很长的时间。</p>
<p>参考链接：<br>  ● <a href="https://www.sitepoint.com/hierarchical-data-database/" target="_blank" rel="external">https://www.sitepoint.com/hierarchical-data-database/</a><br>  ● <a href="https://packagist.org/search/?q=Nested+Set" target="_blank" rel="external">https://packagist.org/search/?q=Nested+Set</a></p>
<p>转自<a href="https://www.biaodianfu.com/the-nested-set-model.html" target="_blank" rel="external">https://www.biaodianfu.com/the-nested-set-model.html</a></p>
<p>作者：标点符</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在基于数据库的一般应用中，查询的需求总要大于删除和修改。为了避免对于树形结构查询时的“递归”过程，基于Tree的前序遍历设计一种全新的无递归查询、无限分组的左右值编码方案，来保存该树的数据。&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;/img/posts/tree-table-store4-1.gif&quot;&gt;&lt;/img&gt;&lt;/center&gt;
    
    </summary>
    
      <category term="码路刺客" scheme="http://c-xuan.com/categories/%E7%A0%81%E8%B7%AF%E5%88%BA%E5%AE%A2/"/>
    
    
      <category term="转载" scheme="http://c-xuan.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="数据库" scheme="http://c-xuan.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>树形结构数据存储方案（三）：闭包表</title>
    <link href="http://c-xuan.com/2017/03/06/tree-table-store3/"/>
    <id>http://c-xuan.com/2017/03/06/tree-table-store3/</id>
    <published>2017-03-06T15:50:20.000Z</published>
    <updated>2017-03-06T16:05:44.650Z</updated>
    
    <content type="html"><![CDATA[<p>将Closure Table翻译成闭包表不知道是否合适，闭包表的思路和物化路径差不多，都是空间换时间，Closure Table，一种更为彻底的全路径结构，分别记录路径上相关结点的全展开形式。能明晰任意两结点关系而无须多余查询，级联删除和结点移动也很方便。但是它的存储开销会大一些，除了表示结点的Meta信息，还需要一张专用的关系表。</p>
<a id="more"></a>
<p>以下图举例数据举例：</p>
<center><img src="/img/posts/tree-table-store3-1.gif"></center>

<p>创建主表：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> nodeInfo (</div><div class="line">node_id <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</div><div class="line">node_name <span class="built_in">VARCHAR</span> (<span class="number">255</span>),</div><div class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`node_id`</span>)</div><div class="line">) <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span> = utf8;</div></pre></td></tr></table></figure>
<p>创建关系表：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> nodeRelationship (</div><div class="line">ancestor <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">descendant <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">distance <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">PRIMARY <span class="keyword">KEY</span> (ancestor, descendant)</div><div class="line">) <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span> = utf8;</div></pre></td></tr></table></figure>
<p>其中</p>
<ul>
<li>Ancestor代表祖先节点</li>
<li>Descendant代表后代节点</li>
<li>Distance 祖先距离后代的距离</li>
</ul>
<p>添加数据（创建存储过程）</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> DEFINER = <span class="string">`root`</span>@<span class="string">`localhost`</span> <span class="keyword">PROCEDURE</span> <span class="string">`AddNode`</span>(<span class="string">`_parent_name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>),<span class="string">`_node_name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>))</div><div class="line"><span class="keyword">BEGIN</span></div><div class="line"><span class="keyword">DECLARE</span> _ancestor <span class="built_in">INT</span>;</div><div class="line"><span class="keyword">DECLARE</span> _descendant <span class="built_in">INT</span>;</div><div class="line"><span class="keyword">DECLARE</span> _parent <span class="built_in">INT</span>;</div><div class="line">IF NOT EXISTS(<span class="keyword">SELECT</span> node_id <span class="keyword">From</span> nodeinfo <span class="keyword">WHERE</span> node_name = _node_name)</div><div class="line"><span class="keyword">THEN</span></div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> nodeinfo (node_name) <span class="keyword">VALUES</span>(_node_name);</div><div class="line"><span class="keyword">SET</span> _descendant = (<span class="keyword">SELECT</span> node_id <span class="keyword">FROM</span> nodeinfo <span class="keyword">WHERE</span> node_name = _node_name);</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> noderelationship (ancestor,descendant,distance) <span class="keyword">VALUES</span>(_descendant,_descendant,<span class="number">0</span>);</div><div class="line">IF EXISTS (<span class="keyword">SELECT</span> node_id <span class="keyword">FROM</span> nodeinfo <span class="keyword">WHERE</span> node_name = _parent_name)</div><div class="line"><span class="keyword">THEN</span></div><div class="line"><span class="keyword">SET</span> _parent = (<span class="keyword">SELECT</span> node_id <span class="keyword">FROM</span> nodeinfo <span class="keyword">WHERE</span> node_name = _parent_name);</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> noderelationship (ancestor,descendant,distance) <span class="keyword">SELECT</span> ancestor,_descendant,distance+<span class="number">1</span> <span class="keyword">from</span> noderelationship <span class="keyword">where</span> descendant = _parent;</div><div class="line"><span class="keyword">END</span> <span class="keyword">IF</span>;</div><div class="line"><span class="keyword">END</span> <span class="keyword">IF</span>;</div><div class="line"><span class="keyword">END</span>;</div></pre></td></tr></table></figure>
<p>完成后2张表的数据大致是这样的：（注意：每个节点都有一条到其本身的记录。）</p>
<center><img src="/img/posts/tree-table-store3-2.gif"></center>

<p>查询Fruit下所有的子节点：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span></div><div class="line">n3.node_name</div><div class="line"><span class="keyword">FROM</span></div><div class="line">nodeinfo n1</div><div class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> noderelationship n2 <span class="keyword">ON</span> n1.node_id = n2.ancestor</div><div class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> nodeinfo n3 <span class="keyword">ON</span> n2.descendant = n3.node_id</div><div class="line"><span class="keyword">WHERE</span></div><div class="line">n1.node_name = <span class="string">'Fruit'</span></div><div class="line"><span class="keyword">AND</span> n2.distance != <span class="number">0</span></div></pre></td></tr></table></figure>
<p>查询Fruit下直属子节点</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span></div><div class="line">n3.node_name</div><div class="line"><span class="keyword">FROM</span></div><div class="line">nodeinfo n1</div><div class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> noderelationship n2 <span class="keyword">ON</span> n1.node_id = n2.ancestor</div><div class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> nodeinfo n3 <span class="keyword">ON</span> n2.descendant = n3.node_id</div><div class="line"><span class="keyword">WHERE</span></div><div class="line">n1.node_name = <span class="string">'Fruit'</span></div><div class="line"><span class="keyword">AND</span> n2.distance = <span class="number">1</span></div></pre></td></tr></table></figure>
<p>查询Fruit所处的层级：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span></div><div class="line">n2.*, n3.node_name</div><div class="line"><span class="keyword">FROM</span></div><div class="line">nodeinfo n1</div><div class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> noderelationship n2 <span class="keyword">ON</span> n1.node_id = n2.descendant</div><div class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> nodeinfo n3 <span class="keyword">ON</span> n2.ancestor = n3.node_id</div><div class="line"><span class="keyword">WHERE</span></div><div class="line">n1.node_name = <span class="string">'Fruit'</span></div><div class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></div><div class="line">n2.distance <span class="keyword">DESC</span></div></pre></td></tr></table></figure>
<p>另外要删除节点也非常的简单，这里就不再做过多的阐述。<br>参考链接：</p>
<p>  ● <a href="https://coderwall.com/p/lixing/closure-tables-for-browsing-trees-in-sql" target="_blank" rel="external">https://coderwall.com/p/lixing/closure-tables-for-browsing-trees-in-sql</a></p>
<p>转自<a href="https://www.biaodianfu.com/closure-table.html" target="_blank" rel="external">https://www.biaodianfu.com/closure-table.html</a></p>
<p>作者：标点符</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;将Closure Table翻译成闭包表不知道是否合适，闭包表的思路和物化路径差不多，都是空间换时间，Closure Table，一种更为彻底的全路径结构，分别记录路径上相关结点的全展开形式。能明晰任意两结点关系而无须多余查询，级联删除和结点移动也很方便。但是它的存储开销会大一些，除了表示结点的Meta信息，还需要一张专用的关系表。&lt;/p&gt;
    
    </summary>
    
      <category term="码路刺客" scheme="http://c-xuan.com/categories/%E7%A0%81%E8%B7%AF%E5%88%BA%E5%AE%A2/"/>
    
    
      <category term="转载" scheme="http://c-xuan.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="数据库" scheme="http://c-xuan.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>树形结构数据存储方案（二）： 物化路径</title>
    <link href="http://c-xuan.com/2017/03/06/tree-table-store2/"/>
    <id>http://c-xuan.com/2017/03/06/tree-table-store2/</id>
    <published>2017-03-06T15:40:20.000Z</published>
    <updated>2017-03-06T15:58:06.312Z</updated>
    
    <content type="html"><![CDATA[<p>前一篇文章介绍了比较简单的邻接列表模式，物化路径其实更加容易理解，其实就是在创建节点时，将节点的完整路径进行记录。以下图为例：</p>
<center><img src="/img/posts/tree-table-store2-1.gif"></center>

<a id="more"></a>
<p>按照Path Enumeration 进行存储后的结果如下：</p>
<center><img src="/img/posts/tree-table-store2-2.gif"></center>

<p>此种方案借助了unix文件目录的思想，主要时以空间换时间。<br>查询某一节点下的所有子节点:（以Fruit为例）</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SET</span> @<span class="keyword">path</span> = (<span class="keyword">SELECT</span> <span class="keyword">path</span> <span class="keyword">FROM</span> pathTree <span class="keyword">WHERE</span> node_name = <span class="string">'Fruit'</span>);</div><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> pathTree <span class="keyword">WHERE</span> <span class="keyword">path</span> <span class="keyword">like</span> <span class="keyword">CONCAT</span>(@<span class="keyword">path</span>,<span class="string">'/%'</span>);</div></pre></td></tr></table></figure>
<p>如何查询直属子节点？需要采用MySQL的正则表达式查询：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SET</span> @<span class="keyword">path</span> = (<span class="keyword">SELECT</span> <span class="keyword">path</span> <span class="keyword">FROM</span> pathTree <span class="keyword">WHERE</span> node_name = <span class="string">'Fruit'</span>);</div><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> pathTree <span class="keyword">WHERE</span> <span class="keyword">path</span> REGEXP <span class="keyword">CONCAT</span>(@<span class="keyword">path</span>,<span class="string">'/'</span>,<span class="string">'[0-9]$'</span>);</div></pre></td></tr></table></figure>
<p>查询任意节点的所有上级：（以Yellow为例）：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SET</span> @<span class="keyword">path</span> = (<span class="keyword">SELECT</span> <span class="keyword">path</span> <span class="keyword">FROM</span> pathTree <span class="keyword">WHERE</span> node_name = <span class="string">'Yellow'</span>);</div><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> pathTree <span class="keyword">WHERE</span> @<span class="keyword">path</span> <span class="keyword">LIKE</span> <span class="keyword">CONCAT</span>(<span class="keyword">path</span>, <span class="string">'%'</span>) <span class="keyword">AND</span> <span class="keyword">path</span> &lt;&gt; @<span class="keyword">path</span>;</div></pre></td></tr></table></figure>
<p>插入新增数据：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SET</span> @parent_path = ( <span class="keyword">SELECT</span> <span class="keyword">path</span> <span class="keyword">FROM</span> pathTree <span class="keyword">WHERE</span> node_name = <span class="string">'Fruit'</span>);</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> pathtree (<span class="keyword">path</span>,node_name) <span class="keyword">VALUES</span> (<span class="keyword">CONCAT</span>(@parent_path,<span class="string">'/'</span>,<span class="keyword">LAST_INSERT_ID</span>()+<span class="number">1</span>),<span class="string">'White'</span>)</div></pre></td></tr></table></figure>
<p>此方案的缺点是树的层级太深有可能会超过PATH字段的长度，所以其能支持的最大深度并非无限的。</p>
<p>如果层级数量是确定的，可以再将所有的列都展开，如下图，比较试用于类似行政区划、生物分类法（界、门、纲、目、科、属、种）这些层级确定的内容。</p>
<center><img src="/img/posts/tree-table-store2-3.gif"></center>

<p>转自<a href="https://www.biaodianfu.com/path-enumeration.html" target="_blank" rel="external">https://www.biaodianfu.com/path-enumeration.html</a></p>
<p>作者：标点符</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前一篇文章介绍了比较简单的邻接列表模式，物化路径其实更加容易理解，其实就是在创建节点时，将节点的完整路径进行记录。以下图为例：&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;/img/posts/tree-table-store2-1.gif&quot;&gt;&lt;/img&gt;&lt;/center&gt;
    
    </summary>
    
      <category term="码路刺客" scheme="http://c-xuan.com/categories/%E7%A0%81%E8%B7%AF%E5%88%BA%E5%AE%A2/"/>
    
    
      <category term="转载" scheme="http://c-xuan.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="数据库" scheme="http://c-xuan.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>树型结构数据存储方案（一）：邻接列表模式</title>
    <link href="http://c-xuan.com/2017/03/06/tree-table-store1/"/>
    <id>http://c-xuan.com/2017/03/06/tree-table-store1/</id>
    <published>2017-03-06T15:31:20.000Z</published>
    <updated>2017-03-06T15:43:21.565Z</updated>
    
    <content type="html"><![CDATA[<p>在程序开发中，我们常遇到用树型结构来表示某些数据间的关系，如企业的组织架构、商品的分类、操作栏目等，目前的关系型数据库都是以二维表的形式记录存储数据，而树型结构的数据如需存入二维表就必须进行Schema设计。</p>
<a id="more"></a>
<p>最近对此方面比较感兴趣，专门做下梳理，如下为常见的树型结构的数据：</p>
<center><img src="/img/posts/tree-table-store1-1.gif"></center>

<p>其中最简单的方法是：Adjacency List（邻接列表模式）。简单的说是根据节点之间的继承关系，显现的描述某一节点的父节点，从而建立二位的关系表。表结构通常设计为{Node_id,Parent_id}，如下图：</p>
<center><img src="/img/posts/tree-table-store1-2.gif"></center>

<p>使用连接表的大致代码：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">// $parent is the parent of the children we want to see</span></div><div class="line"><span class="comment">// $level is increased when we go deeper into the tree,</span></div><div class="line"><span class="comment">// used to display a nice indented tree</span></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">display_children</span><span class="params">($parent, $level)</span> </span></div><div class="line">&#123;</div><div class="line"> <span class="comment">// 获得一个 父节点 $parent 的所有子节点</span></div><div class="line"> $result = mysql_query(<span class="string">'SELECT name FROM tree WHERE parent="'</span>.$parent.<span class="string">'";'</span>);</div><div class="line"> </div><div class="line"> <span class="comment">// 显示每个子节点</span></div><div class="line"> <span class="keyword">while</span> ($row = mysql_fetch_array($result)) </div><div class="line"> &#123;</div><div class="line"> <span class="comment">// 缩进显示节点名称</span></div><div class="line"> <span class="keyword">echo</span> str_repeat(<span class="string">' '</span>,$level).$row[<span class="string">'name'</span>].<span class="string">"\n"</span>;</div><div class="line"> </div><div class="line"> <span class="comment">//再次调用这个函数显示子节点的子节点</span></div><div class="line"> </div><div class="line"> display_children($row[<span class="string">'name'</span>], $level+<span class="number">1</span>);</div><div class="line"> &#125;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>对整个结构的根节点（Food）使用这个函数就可以打印出整个多级树结构，由于Food是根节点它的父节点是空的，所以这样调用: display_children(”,0)。将显示整个树的内容。如果你只想显示整个结构中的一部分，比如说水果部分，就可以这样调用：</p>
<p>display_children(‘Fruit’,0);</p>
<p>几乎使用同样的方法我们可以知道从根节点到任意节点的路径。比如 Cherry 的路径是　”Food &gt;; Fruit &gt;; Red”。 为了得到这样的一个路径我们需要从最深的一级”Cherry”开始， 查询得到它的父节点”Red”把它添加到路径中， 然后我们再查询Red的父节点并把它也添加到路径中，以此类推直到最高层的”Food”<br>以下是代码：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">// $node 是那个最深的节点</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_path</span><span class="params">($node)</span> </span></div><div class="line">&#123;</div><div class="line"> <span class="comment">// 查询这个节点的父节点</span></div><div class="line"> $result = mysql_query(<span class="string">'SELECT parent FROM tree '</span>.</div><div class="line"> <span class="string">'WHERE name="'</span>.$node.<span class="string">'";'</span>);</div><div class="line"> $row = mysql_fetch_array($result);</div><div class="line"> </div><div class="line"> <span class="comment">// 用一个数组保存路径</span></div><div class="line"> $path = <span class="keyword">array</span>();</div><div class="line"> </div><div class="line"> <span class="comment">// 如果不是根节点则继续向上查询</span></div><div class="line"> <span class="comment">// (根节点没有父节点)</span></div><div class="line"> <span class="keyword">if</span> ($row[<span class="string">'parent'</span>]!=<span class="string">''</span>) </div><div class="line"> &#123;</div><div class="line"> <span class="comment">// the last part of the path to $node, is the name</span></div><div class="line"> <span class="comment">// of the parent of $node</span></div><div class="line"> $path[] = $row[<span class="string">'parent'</span>];</div><div class="line"> </div><div class="line"> <span class="comment">// we should add the path to the parent of this node</span></div><div class="line"> <span class="comment">// to the path</span></div><div class="line"> $path = array_merge(get_path($row[<span class="string">'parent'</span>]), $path);</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="comment">// return the path</span></div><div class="line"> <span class="keyword">return</span> $path;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>如果对”Cherry”使用这个函数：print_r(get_path(‘Cherry’))，就会得到这样的一个数组了：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Array</span> </div><div class="line">( </div><div class="line"> [<span class="number">0</span>] =&gt;; Food </div><div class="line"> [<span class="number">1</span>] =&gt;; Fruit </div><div class="line"> [<span class="number">2</span>] =&gt;; Red </div><div class="line">)</div></pre></td></tr></table></figure>
<p>这种方案的优点很明显：结构简单易懂，由于互相之间的关系只由一个parent_id维护，所以增删改都是非常容易，只需要改动和他直接相关的记录就可以。缺点当然也是非常的突出：由于直接地记录了节点之间的继承关系，因此对Tree的任何CRUD操作都将是低效的，这主要归根于频繁的“递归”操作，递归过程不断地访问数据库，每次数据库IO都会有时间开销。举个例子，如果想要返回所有水果，也就是水果的所有子孙节点，看似很简单的操作，就需要用到一堆递归。当然，这种方案并非没有用武之地，在树的层级比较少的时候就非常实用，在邻接列表模式的基础上还可以拓展的是平面表，区别是将节点的level和当前节点的顺序也放入表中，比较适合类似评论等场景，具体的表结构类似这样，这里就不再深入阐述。</p>
<center><img src="/img/posts/tree-table-store1-3.gif"></center>

<p>参考链接：<br>  ● <a href="http://salman-w.blogspot.com/2012/08/php-adjacency-list-hierarchy-tree-traversal.html" target="_blank" rel="external">http://salman-w.blogspot.com/2012/08/php-adjacency-list-hierarchy-tree-traversal.html</a><br>  ● <a href="https://packagist.org/search/?tags=adjacency%20list" target="_blank" rel="external">https://packagist.org/search/?tags=adjacency%20list</a></p>
<p>转自<a href="https://www.biaodianfu.com/adjacency-list.html" target="_blank" rel="external">https://www.biaodianfu.com/adjacency-list.html</a></p>
<p>作者：标点符</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在程序开发中，我们常遇到用树型结构来表示某些数据间的关系，如企业的组织架构、商品的分类、操作栏目等，目前的关系型数据库都是以二维表的形式记录存储数据，而树型结构的数据如需存入二维表就必须进行Schema设计。&lt;/p&gt;
    
    </summary>
    
      <category term="码路刺客" scheme="http://c-xuan.com/categories/%E7%A0%81%E8%B7%AF%E5%88%BA%E5%AE%A2/"/>
    
    
      <category term="转载" scheme="http://c-xuan.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="数据库" scheme="http://c-xuan.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Kimball维度建模技术总结</title>
    <link href="http://c-xuan.com/2017/02/05/KimballDimModing/"/>
    <id>http://c-xuan.com/2017/02/05/KimballDimModing/</id>
    <published>2017-02-04T16:00:00.000Z</published>
    <updated>2017-03-12T15:06:59.497Z</updated>
    
    <content type="html"><![CDATA[<p>Kimball维度建模技术几乎已经成为数据仓库建模的最佳实践。维度建模的基本概念总结。</p>
<a id="more"></a>
<center><img src="/img/posts/KimballDimModing.gif"></center>

<h2 id="收集业务需求"><a href="#收集业务需求" class="headerlink" title="收集业务需求"></a>收集业务需求</h2><p>在建模工作前，项目组需要跟使用数据的业务人员进行沟通调研，理解业务过程的KPI，数据分析的目标，利用数据进行哪些决策制定。可以收集业务人员，高层决策者经常看的报表，了解他们观察数据的维度跟指标。</p>
<h2 id="协作维度建模研讨"><a href="#协作维度建模研讨" class="headerlink" title="协作维度建模研讨"></a>协作维度建模研讨</h2><p>维度建模不应该只由那些不懂业务以及业务需求的技术人员来负责，还需要企业数据管理者与使用者的参与共同制定数据分析主题。与业务代表开展一系列高级别交流讨论可以帮助技术人员和需求分析人员对数据有更深入的了解，寻找不同部门使用数据的分析维度与指标的异同。</p>
<h2 id="维度建模的设计过程"><a href="#维度建模的设计过程" class="headerlink" title="维度建模的设计过程"></a>维度建模的设计过程</h2><p>维度模型设计主要设计四个步骤：</p>
<h3 id="选择业务过程"><a href="#选择业务过程" class="headerlink" title="选择业务过程"></a>选择业务过程</h3><p>业务过程是组织完成的操作型活动，例如：获得订单，处理保险索赔、学生课程注册或每个月每个账单的快照等等。过程的选择很重要，因为我们要从业务过程中得出事实的指标度量，以及事实表的粒度选取，维度划分等等。</p>
<h3 id="声明粒度"><a href="#声明粒度" class="headerlink" title="声明粒度"></a>声明粒度</h3><p>声明粒度是维度设计的重要步骤。粒度用于确定某一事实表中的行表示什么。选择维度或事实前必须声明粒度，因为每个候选维度或事实必须与定义的粒度保持一致。在所有维度设计中强制实行一致性是保证BI应用性能和易用性能的关键。在从给定的业务过程获取数据时，原子粒度是最低级别的粒度。粒度越小，描述的业务过程越详细。建议从设计最小粒度的数据开始，这样可以保证比较大的灵活性，满足无法预期的业务用户的查询需求。这对不同的事实表粒度要建立不同的物理表，在同一事实表中不要混用多种不同的粒度。</p>
<h3 id="确认维度"><a href="#确认维度" class="headerlink" title="确认维度"></a>确认维度</h3><p>维度表又是被称为数据仓库的“灵魂”，因为维度包含确保DW/BI系统能够被用作业务分析的入口和描述性标识。维度提供围绕某一业务过程事件所涉及的“谁、什么、何处、何时、为什么、如何”等背景。维度表包含BI应用所需要的用于过滤及分类事实的描述性属性。牢牢掌握事实表的粒度，就能够将所有可能存在的维度区分开。当与给定事实表行关联是，任何情况下都应使维度保持但一值。</p>
<h3 id="确认事实"><a href="#确认事实" class="headerlink" title="确认事实"></a>确认事实</h3><p>事实基本上都是以数量值表示，涉及来自业务过程事件的度量，例如销售量，销售额等。一个事实表行与按照事实表粒度描述的度量事件之间存在一对一关系，因此事实表对应一个物理可观察的事件。</p>
<h2 id="星型模型与OLAP多维数据库"><a href="#星型模型与OLAP多维数据库" class="headerlink" title="星型模型与OLAP多维数据库"></a>星型模型与OLAP多维数据库</h2><p>星型模式是部署在关系数据库管理系统(RDBMS)之上的多维结构。典型地，主要包含事实表，以及通过主键/外键关系与之关联的维度表。联机分析处理(OLAP)多维数据库是实现在多维数据库之上的数据结构，它来源于关系型星型模式。OLAP多维数据库包含维度属性和事实表，但它能够比SQL语言具有更强的分析能力和访问，比如XMLA和MDX等。</p>
<h2 id="灵活扩展"><a href="#灵活扩展" class="headerlink" title="灵活扩展"></a>灵活扩展</h2><p>维度模型对数据关系发生变化具有灵活的适用性。当发生如下变化时，不需要改变现存的BI查询或应用，就可以方便的适应。</p>
<ul>
<li>当事实与存在的事实表粒度一致时，可以创建新列。</li>
<li>通过建立新的外键列，可以将维度关联到已经存在的事实表上，前提是维度列与事实表粒度保持一致。</li>
<li>可以在维度表上通过建立新列添加属性。</li>
<li>可以使事实表的烈度更原子化，方法是在维度表上增加属性。然后以更细的烈度重置事实表，小心保存事实表及维度表的列名。</li>
</ul>
<p><em>参考</em></p>
<p><em>《The Data Warehouse Toolkit:The Definitive Guide to Dimensional Modeling》,Ralph Kimball &amp; Margy Ross</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Kimball维度建模技术几乎已经成为数据仓库建模的最佳实践。维度建模的基本概念总结。&lt;/p&gt;
    
    </summary>
    
      <category term="BI墨客" scheme="http://c-xuan.com/categories/BI%E5%A2%A8%E5%AE%A2/"/>
    
    
      <category term="原创" scheme="http://c-xuan.com/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="数据仓库" scheme="http://c-xuan.com/tags/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/"/>
    
      <category term="维度建模" scheme="http://c-xuan.com/tags/%E7%BB%B4%E5%BA%A6%E5%BB%BA%E6%A8%A1/"/>
    
  </entry>
  
  <entry>
    <title>宽表和窄表的建设该如何选择？</title>
    <link href="http://c-xuan.com/2017/01/03/wide-table-thinking/"/>
    <id>http://c-xuan.com/2017/01/03/wide-table-thinking/</id>
    <published>2017-01-02T16:00:00.000Z</published>
    <updated>2017-02-26T10:14:26.853Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>宽表从字面意义上讲就是字段比较多的数据库表。通常是指业务主题相关的指标、维度、属性关联在一起的一张数据库表。由于把不同的内容都放在同一张表存储，宽表已经不符合三范式的模型设计规范，随之带来的主要坏处就是数据的大量冗余，与之相对应的好处就是查询性能的提高与便捷。这种宽表的设计广泛应用于数据挖掘模型训练前的数据准备，通过把相关字段放在同一张表中，可以大大提高数据挖掘模型训练过程中迭代计算时的效率问题。<br>————百度百科</p>
</blockquote>
<a id="more"></a>
<h3 id="宽表和窄表的建设该如何选择？"><a href="#宽表和窄表的建设该如何选择？" class="headerlink" title="宽表和窄表的建设该如何选择？"></a>宽表和窄表的建设该如何选择？</h3><p>这个问题相信纠结了很多从是数据库开发、数据仓库开发和后台开发人员；单单考虑这个问题，难给出一个绝对的答案；本人从事数据仓库开发工作到现在已经有一年半时间了，对于这个问题，我也曾经纠结过，但是是否有绝对的答案呢？事实上任何东西都没有绝对的说法。</p>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>考虑这样的一个问题，一个公司有这样的一个需求：</p>
<p>设计销售领域的订单事实表，该事实表应该包含哪些维度和度量？事实表和维表该分别如何去设计？</p>
<p>好了，我们把关键信息拿出来，首先我们要有维度包括：销售员、销售员所属部门、下订单的时间；度量：销售量；</p>
<p>那么，订单事实表，其实就是一个商品销售的清单。</p>
<h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><p>依照这个思路，我们建立的第一个模型可能是以下这样的：</p>
<center><img src="/img/posts/wide-table-thinking-1.gif"></center>

<p>单单看上去，貌似是符合我们的问题的需要，而且符合数据库的范式设计：没有冗余字段；但是情况真的就是这样吗？</p>
<p>答案是否定的，确实对于一般的OLTP系统而言这样的表设计确实减少了冗余和，增删改查等操作也很方便，但是往往对于我们的统计系统、OLAP、数据挖掘而言，情况却并非如此，举个例子：我们要统计每个部门各自的销售量为多少？那么对于上表,sql是这样的：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> a.*,b.sid <span class="keyword">into</span> #dep_saleser <span class="keyword">from</span> department a,saleser_dim b <span class="keyword">on</span> a.dep_id = b.dep_id;</div><div class="line"><span class="keyword">select</span> <span class="keyword">count</span>(<span class="number">1</span>),a.dep_name <span class="keyword">from</span> #dep_saleser a,order_fact b <span class="keyword">on</span> a.sid=b.sid <span class="keyword">group</span> <span class="keyword">by</span> a.dep_name;</div></pre></td></tr></table></figure>
<p>对于这么一个简单的需求已经要写两了sql去实现了，其实数据库表模型的的设计是灵活的，我们完全可以根据我们的业务去设计我们的数据表；考虑到部门和销售员可以是同属于销售者这个维度，只是他们是有上下级别关系的。</p>
<h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><p>那么依照这个思路，我们的模型可以建立为下面这样：</p>
<center><img src="/img/posts/wide-table-thinking-2.gif"></center>

<p>那么统计每个部门各自的销售量，可以用如下sql去实现：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> <span class="keyword">count</span>(<span class="number">1</span>),a.dep_name <span class="keyword">from</span> saleser_dim a,order_fact b</div><div class="line"><span class="keyword">on</span> a.sid=b.sid <span class="keyword">group</span> <span class="keyword">by</span> a.dep_name;</div></pre></td></tr></table></figure>
<p>确实对于这个模型而言，有些情况下会出现冗余（填写用户，没有填写部门，填写部门没填写用户），但是对于提取数统计的逻辑又相对来说要简单了好多。</p>
<h3 id="方案三"><a href="#方案三" class="headerlink" title="方案三"></a>方案三</h3><p>考虑到要实现取数简单，我们还可以想出另外一种方法：</p>
<center><img src="/img/posts/wide-table-thinking-3.gif"></center>

<p>看上去好像不错哦~~，取数据也就一句sql就搞掂了，但是却是最最槽糕的情况，有可能一个销售员，前几天登记的部门是a，但是其实他的所属于的部门为b，那么对于上面这个模型，我们得改动销售员和订单表；而对于上面的其他两个模型都仅仅需要改动一张表就行了，造成查询数据部一致往往也就是这种数据模型所造成的。</p>
<p>所谓的宽表就是字段比较多的表，包含的维度层次比较多，造成冗余也比较多，毁范式设计，但是利于取数统计，而窄表往往对于OLTP比较合适，符合范式设计原则。</p>
<p>转自<a href="http://www.cnblogs.com/super-d2/p/3384938.html" target="_blank" rel="external">http://www.cnblogs.com/super-d2/p/3384938.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;宽表从字面意义上讲就是字段比较多的数据库表。通常是指业务主题相关的指标、维度、属性关联在一起的一张数据库表。由于把不同的内容都放在同一张表存储，宽表已经不符合三范式的模型设计规范，随之带来的主要坏处就是数据的大量冗余，与之相对应的好处就是查询性能的提高与便捷。这种宽表的设计广泛应用于数据挖掘模型训练前的数据准备，通过把相关字段放在同一张表中，可以大大提高数据挖掘模型训练过程中迭代计算时的效率问题。&lt;br&gt;————百度百科&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="BI墨客" scheme="http://c-xuan.com/categories/BI%E5%A2%A8%E5%AE%A2/"/>
    
    
      <category term="转载" scheme="http://c-xuan.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="数据仓库" scheme="http://c-xuan.com/tags/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>【SQL Server】编辑、修改字段说明（备注）</title>
    <link href="http://c-xuan.com/2016/12/02/SQLAddColumnNote/"/>
    <id>http://c-xuan.com/2016/12/02/SQLAddColumnNote/</id>
    <published>2016-12-01T16:01:43.000Z</published>
    <updated>2016-12-01T16:13:05.593Z</updated>
    
    <content type="html"><![CDATA[<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">sp_addextendedproperty</div><div class="line">    [ @name = ] &#123; <span class="string">'property_name'</span> &#125;</div><div class="line">    [ , [ @value = ] &#123; <span class="string">'value'</span> &#125; </div><div class="line">        [ , [ @level0type = ] &#123; <span class="string">'level0_object_type'</span> &#125; </div><div class="line">                    , [ @level0name = ] &#123; <span class="string">'level0_object_name'</span> &#125; </div><div class="line">                [ , [ @level1type = ] &#123; <span class="string">'level1_object_type'</span> &#125; </div><div class="line">                                    , [ @level1name = ] &#123; <span class="string">'level1_object_name'</span> &#125; </div><div class="line">                        [ , [ @level2type = ] &#123; <span class="string">'level2_object_type'</span> &#125; </div><div class="line">                                                    , [ @level2name = ] &#123; <span class="string">'level2_object_name'</span> &#125; </div><div class="line">                        ] </div><div class="line">                ]</div><div class="line">        ] </div><div class="line">    ]</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h3><p>为了指定扩展属性，SQL Server 数据库中的对象分为三个级别（0、1 和 2）。级别 0 是最高级别，定义为包含在数据库作用域中的对象。级别 1 的对象包含在架构作用域或用户作用域中，而级别 ２ 的对象包含在级别 1 对象中。可以为这些级别中任一级别的对象定义扩展属性。</p>
<p>引用某个级别中的对象必须用拥有或包含它们的更高级别对象的名称进行限制。例如，当将扩展属性添加到表列（级别 2）时，还必须指定包含该列的表名（级别 1）以及包含该表的架构（级别 0）。</p>
<p>有关对象及其有效的级别 0、1 和 2 类型的完整列表，请参阅对数据库对象使用扩展属性。如果所有对象类型和名称都为空，则属性属于当前数据库本身。对于系统对象、用户定义数据库的作用域以外的对象或者未在 Arguments 中作为有效输入列出的对象，不允许使用扩展属性。</p>
<h3 id="架构与用户"><a href="#架构与用户" class="headerlink" title="架构与用户"></a>架构与用户</h3><p>在 SQL Server 的早期版本中，用户拥有表、视图和触发器之类的数据库对象。因此，允许将扩展属性添加到这些对象之一以及将用户名指定为级别 0 类型。但在 SQL Server 2005 中，数据库对象包含在架构中。它们独立于拥有架构的用户。在 SQL Server 2005 中，我们建议不要在将扩展属性应用于数据库对象时指定 USER 作为级别 0 类型，因为这会导致名称解析不明确。例如，假定用户 Mary 拥有两个架构（Mary 和 MySchema），并且这两个架构都包含名为 MyTable 的表。如果 Mary 将扩展属性添加到表 MyTable 并指定 @level0type = N’USER’、@level0name = Mary，则扩展属性应用于哪个表并不明确。为了保持向后兼容，SQL Server 将属性应用于名为 Mary 的架构所包含的表。有关用户与架构的详细信息，请参阅用户架构分离。</p>
<h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p><code>[ @name ] = { &#39;property_name&#39; }</code></p>
<p>要添加的属性的名称。property_name 的数据类型为 sysname，不能为 NULL。名称还可以包括空格或非字母数字字符串以及二进制值。</p>
<p><code>[ @value = ] { &#39;value&#39; }</code></p>
<p>要与属性关联的值。value 的数据类型为 sql_variant，默认值为 NULL。value 的大小不能超过 7,500 个字节。</p>
<p><code>[ @level0type = ] { &#39;level0_object_type&#39; }</code></p>
<p>级别 0 对象的类型。level0_object_type 的数据类型为 varchar(128)，默认值为 NULL。<br>有效的输入包括：ASSEMBLY、CONTRACT、EVENT NOTIFICATION、FILEGROUP、MESSAGE TYPE、PARTITION FUNCTION、PARTITION SCHEME、REMOTE SERVICE BINDING、ROUTE、SCHEMA、SERVICE、USER、TRIGGER、TYPE 和 NULL。<br>重要事项：</p>
<p>作为级别 0 类型的 USER 和 TYPE 将在 SQL Server 的未来版本中删除。请避免在新的开发工作中使用这些功能，并考虑修改当前使用这些功能的应用程序。改用 SCHEMA 代替 USER 作为级别 0 类型。对于 TYPE，请使用 SCHEMA 作为级别 0 类型，使用 TYPE 作为级别 1 类型。</p>
<p><code>[ @level0name = ] { &#39;level0_object_name&#39; }</code></p>
<p>所指定的级别 0 对象类型的名称。level0_object_name 的数据类型为 sysname，默认值为 NULL。</p>
<p><code>[ @level1type = ] { &#39;level1_object_type&#39; }</code></p>
<p>级别 1 对象的类型。level1_object_type 的数据类型为 varchar(128)，默认值为 NULL。有效的输入包括：AGGREGATE、DEFAULT、FUNCTION、LOGICAL FILE NAME、PROCEDURE、QUEUE、RULE、SYNONYM、TABLE、TYPE、VIEW、XML SCHEMA COLLECTION 和 NULL。</p>
<p><code>[ @level1name = ] { &#39;level1_object_name&#39; }</code></p>
<p>所指定的级别 1 对象类型的名称。level1_object_name 的数据类型为 sysname，默认值为 NULL。</p>
<p><code>[ @level2type = ] { &#39;level2_object_type&#39; }</code></p>
<p>级别 2 对象的类型。level2_object_type 的数据类型为 varchar(128)，默认值为 NULL。有效的输入包括：COLUMN、CONSTRAINT、EVENT NOTIFICATION、INDEX、PARAMETER、TRIGGER 和 NULL。</p>
<p><code>[ @level2name = ] { &#39;level2_object_name&#39; }</code></p>
<p>所指定的级别 2 对象类型的名称。level2_object_name 的数据类型为 sysname，默认值为 NULL。</p>
<h3 id="返回代码值"><a href="#返回代码值" class="headerlink" title="返回代码值"></a>返回代码值</h3><p>0（成功）或 1（失败）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">EXEC sys.sp_addextendedproperty @name=N&apos;MS_Description&apos;, @value=N&apos;0:取消,1:已到,2:未到,3:预订违约&apos; ,@level0type=N&apos;SCHEMA&apos;, @level0name=N&apos;dbo&apos;, @level1type=N&apos;TABLE&apos;, @level1name=N&apos;Tab_Passenger&apos;, @level2type=N&apos;COLUMN&apos;, @level2name=N&apos;PassengerState&apos;</div><div class="line">-表及字段描述信息处理示例</div><div class="line"></div><div class="line">--创建表</div><div class="line">create table 表(a1 varchar(10),a2 char(2))</div><div class="line"></div><div class="line">--为表添加描述信息</div><div class="line">EXECUTE sp_addextendedproperty N&apos;MS_Description&apos;, &apos;人员信息表&apos;, N&apos;user&apos;, N&apos;dbo&apos;, N&apos;table&apos;, N&apos;表&apos;, NULL, NULL</div><div class="line"></div><div class="line">--为字段a1添加描述信息</div><div class="line">EXECUTE sp_addextendedproperty N&apos;MS_Description&apos;, &apos;姓名&apos;, N&apos;user&apos;, N&apos;dbo&apos;, N&apos;table&apos;, N&apos;表&apos;, N&apos;column&apos;, N&apos;a1&apos;</div><div class="line"></div><div class="line">--为字段a2添加描述信息</div><div class="line">EXECUTE sp_addextendedproperty N&apos;MS_Description&apos;, &apos;性别&apos;, N&apos;user&apos;, N&apos;dbo&apos;, N&apos;table&apos;, N&apos;表&apos;, N&apos;column&apos;, N&apos;a2&apos;</div><div class="line"></div><div class="line">--更新表中列a1的描述属性：</div><div class="line">EXEC sp_updateextendedproperty &apos;MS_Description&apos;,&apos;字段1&apos;,&apos;user&apos;,dbo,&apos;table&apos;,&apos;表&apos;,&apos;column&apos;,a1</div><div class="line"></div><div class="line">--删除表中列a1的描述属性：</div><div class="line">EXEC sp_dropextendedproperty &apos;MS_Description&apos;,&apos;user&apos;,dbo,&apos;table&apos;,&apos;表&apos;,&apos;column&apos;,a1</div><div class="line"></div><div class="line">--删除测试</div><div class="line">drop table 表</div></pre></td></tr></table></figure>
<p>转自:<a href="http://blog.csdn.net/zanychou/article/details/7403336" target="_blank" rel="external">http://blog.csdn.net/zanychou/article/details/7403336</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;语法&quot;&gt;&lt;a href=&quot;#语法&quot; class=&quot;headerlink&quot; title=&quot;语法&quot;&gt;&lt;/a&gt;语法&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sp_addextendedproperty&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    [ @name = ] &amp;#123; &lt;span class=&quot;string&quot;&gt;&#39;property_name&#39;&lt;/span&gt; &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    [ , [ @value = ] &amp;#123; &lt;span class=&quot;string&quot;&gt;&#39;value&#39;&lt;/span&gt; &amp;#125; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        [ , [ @level0type = ] &amp;#123; &lt;span class=&quot;string&quot;&gt;&#39;level0_object_type&#39;&lt;/span&gt; &amp;#125; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    , [ @level0name = ] &amp;#123; &lt;span class=&quot;string&quot;&gt;&#39;level0_object_name&#39;&lt;/span&gt; &amp;#125; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                [ , [ @level1type = ] &amp;#123; &lt;span class=&quot;string&quot;&gt;&#39;level1_object_type&#39;&lt;/span&gt; &amp;#125; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                                    , [ @level1name = ] &amp;#123; &lt;span class=&quot;string&quot;&gt;&#39;level1_object_name&#39;&lt;/span&gt; &amp;#125; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        [ , [ @level2type = ] &amp;#123; &lt;span class=&quot;string&quot;&gt;&#39;level2_object_type&#39;&lt;/span&gt; &amp;#125; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                                                    , [ @level2name = ] &amp;#123; &lt;span class=&quot;string&quot;&gt;&#39;level2_object_name&#39;&lt;/span&gt; &amp;#125; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        ] &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                ]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        ] &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ]&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="码路刺客" scheme="http://c-xuan.com/categories/%E7%A0%81%E8%B7%AF%E5%88%BA%E5%AE%A2/"/>
    
    
      <category term="转载" scheme="http://c-xuan.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="数据库" scheme="http://c-xuan.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="SQL Server" scheme="http://c-xuan.com/tags/SQL-Server/"/>
    
  </entry>
  
  <entry>
    <title>从事技术，坚持写博客的好处？</title>
    <link href="http://c-xuan.com/2016/12/01/BenifitOfWritingBlog/"/>
    <id>http://c-xuan.com/2016/12/01/BenifitOfWritingBlog/</id>
    <published>2016-12-01T15:38:04.000Z</published>
    <updated>2016-12-01T15:55:20.677Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><ul>
<li>1.写博客的担心</li>
</ul>
<p>今天来谈谈,写博客对我的益处,说起写博客,其实我写博客的时间不长,也就10来个月时间;之前工作的时候,看到同事每天晚上写博客,当时觉得很奇怪,就觉得写这个东西,非常浪费时间,自己知道的好的技术或者是好的技术解决思路,如果分享出去,不是被别人学去了吗等等一系列问题.</p>
<ul>
<li>2.自己的经历</li>
</ul>
<p>等写了一段时间博客时,慢慢发现,其实之前的担心的完全没必要,你会的东西,精通的知识,即使分享出去,别人也未必能学的会,即时要学会学透,也是要花费时间和精力的,所以这种担心我们大可不必.人还是要有点分享和谦虚精神的,仅仅是这种只进不出的思想,我想你也很难有的发展!那么写博客10来个时间里,通过写博客给自己带来了哪些方面的提升呢?下面我就结合自己经力来给大家做个详细的总结. </p>
<a id="more"></a>
<h2 id="写博客的好处"><a href="#写博客的好处" class="headerlink" title="写博客的好处"></a>写博客的好处</h2><p>下面我就大家来做一个详细的分析.以思维导图的形式给大家列举一下,写博客这10来个月时间里,给我带来了哪些变化.</p>
<ul>
<li>1.没写博客的原因</li>
</ul>
<center><img src="/img/posts/BenifitOfWritingBlog-1.jpg"></center>

<p>下面也对当初写博客时担心,给大家一一分析.</p>
<ul>
<li>1.1 浪费时间</li>
</ul>
<p>如果你刚开始写博客,你可能会有这样的担心,觉得他很浪费时间,需要花时间去思考,去总结,去整理成章,这一系列过程都是要花费很多时间.当你渐渐养成写博客习惯时,就会慢慢意识到这是花费时间,而不是所谓的浪费时间!</p>
<ul>
<li>1.2. 工作太忙,没时间去写</li>
</ul>
<p>这是最无能为力的，有热情的程序员是不会总以这个理由推脱的。习惯成自然!</p>
<ul>
<li>1.3.怕自己的技术被别人学去</li>
</ul>
<p>这个完全没必要去担心,你会的别人也未必会,即使你分享出去,别人也未必学的会!人还是要有点分享精神的!</p>
<ul>
<li>1.4.懒于思考,疏于总结</li>
</ul>
<p>这个是最致命的,事情的成败在于此!吃一堑长一智,能力都是在思考和总结中得带长足进步的!</p>
<ul>
<li>1.5.想写,但不知道该写些什么?</li>
</ul>
<p>这其实是一种思考总结能力的欠缺。大胆迈出第一步,慢慢来,就把它当做每天发微信动态一样,把它变成一种常态。</p>
<ul>
<li>1.6.技术含量低,写出来没意义</li>
</ul>
<p>写博客不一定要写出多么牛逼的文章,只要是自己所悟所思所想就行,记录自己知识点滴的不足,例如,今天我一个变量用错了,我也可以把它写出来,自己的博客无关他人怎么看.事实上，除了你的挚友和亲人，没有人会那么在意你，这些担心都是庸人自扰。知识是自己的事,我总结我进步!</p>
<ul>
<li>2.最初的想法</li>
</ul>
<p>我为什么要写博客呢?其实当时的想法非常简单,仅仅是想把自己当天工作中学到的知识及解决问题的思路,整理记录下来,方便自己日后工作用到的时候能够翻翻,快速的找到.原因就这么简单.</p>
<ul>
<li>3.最后的好处</li>
</ul>
<center><img src="/img/posts/BenifitOfWritingBlog-2.jpg"></center>

<p>那么问题来了,写博客有什么好处呢,能让一个人坚持这么久?下面我就给大家一一做个解释.</p>
<ul>
<li>3.1.加深对技术点的理解</li>
</ul>
<p>每天写博客,可以加深对技术点的理解,假如工作中,对某个技术点运用的不熟,当你通过博客的形式写出来,这个过程中,遇到不懂的知识点,你就会查阅相关的资料,弄明白他.</p>
<ul>
<li>3.2.自己日后用到</li>
</ul>
<p>就相当于笔记本一样,把重要的东西都记录下来,等哪天在遇到同样的问题,我们可以翻阅他.确实偶尔会用到，但频率不会那么高；因为你遇到过一次，解决了之后记忆能保存很长时间，除非又过了一段时间后又遇到这个问题；或者问题解决方案比较复杂，不是简单一次就能记住的。</p>
<ul>
<li>3.3.获得阅读量,得到认可</li>
</ul>
<p>当一篇文章,获得更多人阅读时或者是被各大网站转发时,往往就会有一种喜悦感,一种得到认可的感觉,写文章的动力就随之而来了.</p>
<ul>
<li>3.4.成就感</li>
</ul>
<p>当你的文章被大量阅读时,是不是很有成就感?当别人对你的文章称赞的时,是不是有某种成就感,继续写下去的<br>冲动?当你的文章被大量转发,被收录,是不是也有成就感?</p>
<ul>
<li>3.5.一点小虚荣</li>
</ul>
<p>当你遇到一个问题，搜索结果是自己的博客文章；当你的同事遇到问题，搜索结果是你的文章；当你的名称出现在全球最大中文IT社区的博客首页上；每个月博客网给你送书,是否感到一种无比的欣喜?你是不是有那么一点小小的虚荣心和自豪感呢？</p>
<ul>
<li>3.6.提高自己思维能力</li>
</ul>
<p>博客写多了,你的逻辑思维是不是很强了;解决问题的思路更加清晰了;技术文档是不是轻易的就写出来了.可以时刻保持思考的习惯,不至于思想比较僵化.可以提高解决问题的思维角度,有利于我们作为程序员的长远发展!</p>
<ul>
<li>3.7.提高自己的写作水平</li>
</ul>
<p>这个，确实有一定的帮助；但对于程序方面的文档来说，文字是一方面，画图是另一方面（思维导图，关系图，架构图之类的）。不过目前也就普通的文档还行，招投标文档感觉写起来还是有难度。</p>
<ul>
<li>3.8.为自己的人生留下只言片语</li>
</ul>
<p>就像日志一样,人生总有回味的地方吧.你不能说你做了10来年的技术,10年来的技术积累在哪,总要留下点只言片语.人生需要回味!<br>这同时也是是一个知识积累的过程，但更重的是为自己的人生留下一点痕迹。你也可以把它当成写日志，只不过是程序员体的语言,在IT圈子里，如果有人问起我关于某个技术，文字是不容易撒谎的。翻阅自己以前写的博客，很容易找到自己的成长轨迹.</p>
<ul>
<li>3.9.提高自己的知名度</li>
</ul>
<p>现在自己只是个无名的程序员,对这个倒没啥感觉</p>
<ul>
<li>3.10.养成有始有终的好习惯</li>
</ul>
<p>每天写日志,私密的东西,始终是自己一个人看,对我而言很难坚持下去,;而技术就不一样了,一篇博客人人都可以去看,好就点个赞,就评论一下,分享给大家!</p>
<ul>
<li>3.11.结交志同道合的朋友</li>
</ul>
<p>这个可以有,看你文章的人,大部分都是跟你从事同一领域的人,交流多了,进步也快了!</p>
<ul>
<li>3.12.碎片化学习</li>
</ul>
<p>你是否有这样的困惑？通过网络确实能够学习到很多东西，但从网上学到的东西大都是零零散散的，不系统，好像学了很多东西，又好像什么都没学到，或者学过之后又忘了，这该怎么办？有个博客就很简单了，我们可以把学习的知识按自己的结构整理记录下来，方便日后查阅巩固。</p>
<ul>
<li>3.13.使自己成为技术大牛</li>
</ul>
<p>这个真的可以做到,写博客,在相同的时间里, 带给自己能力的提升要比别人要快很多,不过这也是个循序渐进的过程,非一日之寒!</p>
<ul>
<li>3.14.分享与学习</li>
</ul>
<p>什么意思呢？也就是随着你的分享越来越多， 可能会出现一批技术的追随者、崇拜者。当然，我的技术还远远没达到那个层次，这也就是为什么是分享与学习；也就是说，你分享的内容如果有说的不对的地方，考虑的不周的地方，角度不全面的地方，热心的小伙伴会帮你指出来！这样就通过你的分享，产生沟通与交流的介质，从而学习更多的知识。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总之写博客,对一个技术人员来讲,益处很大,最自己能力,技能,知识的提升都有很大的帮助,在这里大家要记住写博客是非常花费时间的,注意这里说的是花费时间而不是浪费时间,我觉得花费时间去写博客是值得的!</p>
<p>最后希望那些想想写博客而没有坚持写下去的人,继续坚持写下去,坚持了就有收获.而那些没有写博客的人.给自己找个自己写博客的理由不需要太复杂太充分，正如我的简简单单就可以.</p>
<p>坚持下去!</p>
<p>转自:<a href="http://www.toutiao.com/a6308960007249559810/" target="_blank" rel="external">http://www.toutiao.com/a6308960007249559810/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;1.写博客的担心&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今天来谈谈,写博客对我的益处,说起写博客,其实我写博客的时间不长,也就10来个月时间;之前工作的时候,看到同事每天晚上写博客,当时觉得很奇怪,就觉得写这个东西,非常浪费时间,自己知道的好的技术或者是好的技术解决思路,如果分享出去,不是被别人学去了吗等等一系列问题.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2.自己的经历&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;等写了一段时间博客时,慢慢发现,其实之前的担心的完全没必要,你会的东西,精通的知识,即使分享出去,别人也未必能学的会,即时要学会学透,也是要花费时间和精力的,所以这种担心我们大可不必.人还是要有点分享和谦虚精神的,仅仅是这种只进不出的思想,我想你也很难有的发展!那么写博客10来个时间里,通过写博客给自己带来了哪些方面的提升呢?下面我就结合自己经力来给大家做个详细的总结. &lt;/p&gt;
    
    </summary>
    
      <category term="随笔感悟" scheme="http://c-xuan.com/categories/%E9%9A%8F%E7%AC%94%E6%84%9F%E6%82%9F/"/>
    
    
      <category term="转载" scheme="http://c-xuan.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="知识管理" scheme="http://c-xuan.com/tags/%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>再见Solo，谢谢!</title>
    <link href="http://c-xuan.com/2016/11/28/HardSayGoodby/"/>
    <id>http://c-xuan.com/2016/11/28/HardSayGoodby/</id>
    <published>2016-11-27T16:00:00.000Z</published>
    <updated>2017-02-26T10:30:45.708Z</updated>
    
    <content type="html"><![CDATA[<center><img src="/img/posts/HardSayGoodbye-1.jpeg"></center>

<p>还有一天，购买的服务器就要到期了，并没有续期的打算，意味着在服务器上运行的这个Solo博客就停掉了。其实也没有什么大不了的事情，只是想来这一路没有为自己能够坚持而愧疚。</p>
<a id="more"></a>
<p>购买服务器的初衷就是想有一个自己部署的博客，当然有CSDN这些非常优秀的博客平台，上面的大牛资源很多，在上面写东西分享东西会更好些，自己搞个服务器运行个博客，还没什么人去看，无外乎为了装个X罢了。没错，是这样的，但是坦白讲这个X装的并不好。每当在网上搜索解决问题的方法的时候，链接到一些不错的个人博客，看到那随着时光而留下的一篇篇印记，就很是羡慕，看得出那一路的积累、总结与成长。</p>
<center><img src="/img/posts/HardSayGoodbye-2.jpeg"></center>

<p>记得服务器是去年双十一优惠买的阿里云服务器，单核1G内存。买之前还买了域名。那时候刚知道有WP(Wordpress)不久，这个相信很多人都知道，一个很不错的开源的博客与内容展示平台，用PHP写的，在互联网世界还是很流行的(还记得嘛，PHP是世界上最好的语言)。所以起初是部署的WP的博客，所以就要搞一个MySql+PHP的运行环境，自然不用说，用集成的XAMPP就好了。</p>
<p>但是后来让我换成了现在用的Solo，并不是因为Wordpress不好，Wordpress还是很不错的，功能很完善，还有各种插件皮肤可以用，由于买的服务器配置比较低，1G的内存，本身运行了Win Server 2012在运行其他的显得比较勉强，经常出现PHP运行环境不稳定崩溃的现象。所以想到有没有一些比较轻量级的博客平台，也不记得怎么找到的Solo，觉着挺好，按个JAVA环境，就可以独立启动运行。功能上也够用，还可以将博客同步到黑客派。当然也折腾了一下皮肤，修改了默认皮肤的一些样式。</p>
<center><img src="/img/posts/HardSayGoodbye-3.jpeg"></center>

<p>其实大部分文章都是转来的，平时搜东西的时候觉得挺好就转载一下，偶尔也把自己遇到的一些问题整理记录下来放出去。必须得承认，自己整理的东西会让自己更加印象深刻，在整理成博客的时候会让你理清思路，还可以练习你的表达。我还得承认我的写作能力巅峰时期应该在高中，高考后再没那时的水准。大学里论文什么的虽然字数多，但怎么出来的你懂得。</p>
<p>大概是在8月份，开始比较深入了解Git，自然就少不了GitHub，后来了解到在Github上可以发布静态网页的博客，遂折腾了一段时间，觉得还是蛮神奇的，用nodejs生成静态网页在同步到Github，还可以练习Git命令，所以就用Hexo搭了一个github静态博客<a href="http://c-xuan.com">c-xuan.com</a>。当然它并没有B3log那么方便，每次更新博客都要push。而且还得想办法解决多个地方发布的同步问题。但好处也显而易见，不需要独立的服务器，注册一个Github账号即可。有没有即功能齐全又不需要独立服务器的？有，像博客园、CSDN、简书等等都不错。</p>
<center><img src="/img/posts/HardSayGoodbye-4.jpeg"></center>

<p>最后我想说的是，选择什么样的平台发布自己的博客并不需要太过在意，适合自己的就是最好的，无论什么工具，目的都是总结自己的经历，分享自己的历程。我们庆幸自己生活在一个互联网的时代，这是一个最好的时代，我们可以随心所欲在浩瀚的网络中学到自己想要的东西。另外，就是坚持，其实坚持并不是胜利，坚持到底才是胜利，坚持着去写些东西，让岁月在互联网上留下点痕迹。诚然，网络是一个虚拟的世界，想必我们都已离不开这个世界，学着在这个世界里让自己更快成长。看到过这样一句话：有些人你可能忘了，但输入法还记得。就像很多事情你也忘了，但可能会有这样一个地方会让你回忆起什么(我说的不是朋友圈)。愿你迷茫时都可以找回来时的路。</p>
<p>PS:感谢Solo开源博客平台，感谢B3log团队。</p>
]]></content>
    
    <summary type="html">
    
      &lt;center&gt;&lt;img src=&quot;/img/posts/HardSayGoodbye-1.jpeg&quot;&gt;&lt;/img&gt;&lt;/center&gt;

&lt;p&gt;还有一天，购买的服务器就要到期了，并没有续期的打算，意味着在服务器上运行的这个Solo博客就停掉了。其实也没有什么大不了的事情，只是想来这一路没有为自己能够坚持而愧疚。&lt;/p&gt;
    
    </summary>
    
      <category term="随笔感悟" scheme="http://c-xuan.com/categories/%E9%9A%8F%E7%AC%94%E6%84%9F%E6%82%9F/"/>
    
    
      <category term="原创" scheme="http://c-xuan.com/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="知识管理" scheme="http://c-xuan.com/tags/%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript :零基础打造自己的类库</title>
    <link href="http://c-xuan.com/2016/10/29/JS-BuildBaseClassLib/"/>
    <id>http://c-xuan.com/2016/10/29/JS-BuildBaseClassLib/</id>
    <published>2016-10-29T05:31:39.000Z</published>
    <updated>2016-10-29T14:22:45.059Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在之前的章节中，我们已经不依赖jQuery，单纯地用JavaScript封装了很多方法，这个时候，你一定会想，这些经常使用的方法能不能单独整理成一个js文件呢？</p>
<p>当然可以，封装本来就是干这个用的。放在一个单独js文件里固然不错，其实我们也可以单独整一个js类库，一方面可以锻炼一下自己封装方法的能力，另一方面，也可以将自己学到的东西做一个整理。</p>
<p>出于这个目的，本文将介绍如何封装一个简单的js类库。（当然，只是开一个头，熟悉一下js基础而已。实际使用的话我感觉完全没有必要，因为jQuery已经很强大了，直接使用第三方的就可以）</p>
<a id="more"></a>
<h3 id="总体设计"><a href="#总体设计" class="headerlink" title="总体设计"></a>总体设计</h3><p>所谓的js库，其实也就是一个js文件，我思前想后，决定取个名字叫“miniQuery”,是不是山寨的味道十足呢？哈，请不要在意这些小细节。</p>
<p>大概的设计如下：</p>
<ul>
<li>1.扩展方法的兼容（主要写一些兼容的扩展方法，比如 forEach 方法等）</li>
<li>2.工具包定义 （就是之前封装的utils.js，我们的miniQuery需要依赖这个工具包，为了方便，就干脆写在一个文件里面了。）</li>
<li>3.miniQuery定义</li>
</ul>
<h3 id="扩展方法的兼容"><a href="#扩展方法的兼容" class="headerlink" title="扩展方法的兼容"></a>扩展方法的兼容</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ------------------------ 基本扩展, 字符串,数组等-------------------------------//</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">extend_base</span> (<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(!<span class="built_in">String</span>.prototype.format )&#123;</div><div class="line">        <span class="built_in">String</span>.prototype.format = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> e = <span class="built_in">arguments</span>;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.replace(<span class="regexp">/&#123;(\d+)&#125;/g</span>,<span class="function"><span class="keyword">function</span>(<span class="params">t, n</span>) </span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">typeof</span> e[n] != <span class="string">"undefined"</span> ? e[n] : t</div><div class="line">            &#125;)</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (!<span class="built_in">Array</span>.prototype.forEach &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">Array</span>.prototype.forEach !== <span class="string">"function"</span>) &#123;</div><div class="line">        <span class="built_in">Array</span>.prototype.forEach = <span class="function"><span class="keyword">function</span>(<span class="params">callback, context</span>) </span>&#123;</div><div class="line">           <span class="comment">// 遍历数组,在每一项上调用回调函数，这里使用原生方法验证数组。</span></div><div class="line">           <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.toString.call(<span class="keyword">this</span>) === <span class="string">"[object Array]"</span>) &#123;</div><div class="line">               <span class="keyword">var</span> i,len;</div><div class="line">               <span class="comment">//遍历该数组所有的元素</span></div><div class="line">               <span class="keyword">for</span> (i = <span class="number">0</span>, len = <span class="keyword">this</span>.length; i &lt; len; i++) &#123;</div><div class="line">                   <span class="keyword">if</span> (<span class="keyword">typeof</span> callback === <span class="string">"function"</span>  &amp;&amp; <span class="built_in">Object</span>.prototype.hasOwnProperty.call(<span class="keyword">this</span>, i)) &#123;</div><div class="line">                       <span class="keyword">if</span> (callback.call(context, <span class="keyword">this</span>[i], i, <span class="keyword">this</span>) === <span class="literal">false</span>) &#123;</div><div class="line">                           <span class="keyword">break</span>; <span class="comment">// or return;</span></div><div class="line">                       &#125;</div><div class="line">                   &#125;</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span>(!<span class="built_in">String</span>.prototype.format )&#123;</div><div class="line">        <span class="built_in">Array</span>.isArray = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">            <span class="keyword">return</span> obj.constructor.toString().indexOf(<span class="string">'Array'</span>) != <span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">//待补充 ...</span></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们定义一个extend_base方法，里面主要对js内置对象的api做了一些兼容性补充，目前还不完善，只有寥寥几个方法。当然，如果你不考虑IE678的话，那么基本上不需要这一部分了。</p>
<p>定义完成后立即调用。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">extend_base();</div></pre></td></tr></table></figure>
<h3 id="工具包整合"><a href="#工具包整合" class="headerlink" title="工具包整合"></a>工具包整合</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ------------------------ 工具包---------------------------------//</span></div><div class="line"><span class="keyword">var</span> utils = &#123;</div><div class="line">            <span class="attr">center</span> : <span class="function"><span class="keyword">function</span>(<span class="params">dom</span>)</span>&#123;</div><div class="line">                dom.style.position = <span class="string">'absolute'</span>;</div><div class="line">                dom.style.top = <span class="string">'50%'</span>;</div><div class="line">                dom.style.left = <span class="string">'50%'</span>;</div><div class="line">                dom.style[<span class="string">'margin-top'</span>] = - dom.offsetHeight / <span class="number">2</span> + <span class="string">'px'</span>;</div><div class="line">                dom.style[<span class="string">'margin-left'</span>] = - dom.offsetWidth / <span class="number">2</span> + <span class="string">'px'</span>;</div><div class="line">            &#125;,</div><div class="line">        </div><div class="line">            <span class="comment">/** dom相关 * */</span></div><div class="line">            isDom : ( <span class="keyword">typeof</span> HTMLElement === <span class="string">'object'</span> ) ?</div><div class="line">                <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">                    <span class="keyword">return</span> obj <span class="keyword">instanceof</span> HTMLElement;</div><div class="line">                &#125; :</div><div class="line">                <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">                    <span class="keyword">return</span> obj &amp;&amp; <span class="keyword">typeof</span> obj === <span class="string">'object'</span> &amp;&amp; obj.nodeType === <span class="number">1</span> &amp;&amp; <span class="keyword">typeof</span> obj.nodeName === <span class="string">'string'</span>;</div><div class="line">                &#125; ,</div><div class="line">             </div><div class="line">            <span class="comment">/** 数组相关 * */</span></div><div class="line">            isArray : <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">                <span class="keyword">return</span> obj.constructor.toString().indexOf(<span class="string">'Array'</span>) != <span class="number">-1</span>;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<ul>
<li>center ：控制dom元素相对于父盒子居中</li>
<li>isDom ：判断是否为dom元素</li>
<li>isArray ：判断是否为数组</li>
</ul>
<h3 id="miniQuery总体设计"><a href="#miniQuery总体设计" class="headerlink" title="miniQuery总体设计"></a>miniQuery总体设计</h3><p>终于到miniQuery了，在写代码之前，先简单说一下自执行函数。<br>可能你在很多书上，或者下载的源码里面，经常会看到这样的代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    </div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<p>这样子你或许觉得很奇怪，没事，我们一起来分析。</p>
<p>在js中，你如果把函数看作一个数据类型，和其他语言中的 Integer， Float ， String等等一样，就会理解很多事情了。当然，其实在js中，函数本身就是一个对象，不然的话就不会出现call方法了。因为只有对象才可以调用方法嘛。不过，大部分情况下，你把函数理解为数据类型就可以了。</p>
<p>匿名函数：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>不过，因为js语法的关系，这样子是不能执行的，你需要用一对圆括号来包一下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(  </div><div class="line">    <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    alert(<span class="string">"你好！"</span>);</div><div class="line">    &#125;()  </div><div class="line">) ;</div></pre></td></tr></table></figure>
<p>这样就可以了，下面是另一种写法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(  </div><div class="line">    <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    alert(<span class="string">"你好！"</span>);</div><div class="line">    &#125;  </div><div class="line">)();</div></pre></td></tr></table></figure>
<p>这样也可以，这种写法会更多一点。它的意思就是说，我不关心你这个函数叫什么名字，反正你在被定义的时候就要给我执行，这就是所谓的自执行函数。</p>
<p>好，问题来了，怎么加参数呢？</p>
<p>以前我们习惯于这么写：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params">str</span>)</span>&#123;</div><div class="line">    alert(str);</div><div class="line"> &#125; </div><div class="line"></div><div class="line">say(<span class="string">"你好！"</span>);</div></pre></td></tr></table></figure>
<p>依葫芦画瓢</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(  </div><div class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">str</span>)</span>&#123;</div><div class="line">       alert(str);</div><div class="line">    &#125;  </div><div class="line">)(<span class="string">"你好！"</span>);</div></pre></td></tr></table></figure>
<p>OK了。</p>
<p>是不是一样的意思呢？</p>
<p>没啥区别，以前怎么做，现在还怎么做，无非就是一个函数传参的事情罢了。</p>
<p>我们将圆括号的位置调整一下</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">( <span class="function"><span class="keyword">function</span>(<span class="params">str</span>)</span>&#123;</div><div class="line">    alert(str);</div><div class="line">&#125; )(<span class="string">"你好！"</span>);</div></pre></td></tr></table></figure>
<p>这样差不多就是最终的版本了，我记得初学js的时候，看这种代码很吃力，好像在看外星语言一样，后来看多了也就习惯了。</p>
<p>自执行函数就是这么一回事，没什么大不了的。</p>
<p>有了上面的解释，以后如果你再遇到这种写法，就 so easy 啦。</p>
<p>所以，不要再恐惧了，它就是这么回事，没什么大不了的，我这么后知后觉的人都能写，你也可以。我花了半年的时间才看明白，我相信你现在只需要几分钟。我的意思是，如果你之前不知道这些的话。</p>
<p>那么，什么时候用自执行函数呢？</p>
<p><strong>当你觉得某个函数只需要执行一次，而且不需要在其他地方调用的时候，就用。</strong></p>
<p>你可能会问了，我干嘛要这样写啊，反正就执行一次，我直接把实现代码写在外面不就行了？</p>
<p><strong>原因很简单，因为那样的话，你定义的变量就会是全局的，而一般来说我们设计的原则是尽量不要使用全局变量。</strong></p>
<p>而采用这种方式，我们就形成了一个匿名函数，函数的定义又会形成闭包，所以比较安全和简洁。</p>
<p>你可能还会觉得疑惑，我干嘛要这些写，如果我非要给函数取一个名字，然后马上调用呢？</p>
<p>额，其实我个人认为这也是没有问题的，但是你得费一番心思去给函数取名字，取 a,b,c,d 这样的名字肯定是不好的。那么，我私以为，还不如干脆就用匿名函数算了，省得麻烦。</p>
<p>如果这部分知识你以前就不知道，那么我建议你把这篇文章多看几遍，反正就是那么回事，没什么大不了的。我当初就是走了很多弯路，也没有人教我，只有靠自己在那瞎摸索和各种百度，当然，现在想想很简单了。</p>
<p>我们的miniQuery的定义就放在这个自执行函数里面，这样一来，只要有人调用了这个js文件，就能调用miniQuery函数了。</p>
<p>当然，你直接放在外面其实也没事，因为反正就一个方法，而且这个方法本来就是要暴露出去的。</p>
<p>这边为了说明自执行函数，就硬加进来了。</p>
<p>我们把miniQuery的定义丢进去。</p>
<p>比如，像这样子的：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">   </div><div class="line">   <span class="keyword">var</span> miniQuery = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    alert(<span class="string">'Hello miniQuery!'</span>);</div><div class="line">   &#125;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<p>我们尝试在外面调用：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">miniQuery();</div></pre></td></tr></table></figure>
<p>很遗憾，调不到。</p>
<p>我们再回顾一下代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">   </div><div class="line">   <span class="keyword">var</span> miniQuery = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        alert(<span class="string">'Hello miniQuery!'</span>);</div><div class="line">   &#125;</div><div class="line">   </div><div class="line">&#125;)();</div><div class="line"></div><div class="line">miniQuery();</div></pre></td></tr></table></figure>
<p>原来，miniQuery是存在于一个闭包中的，它可以访问到父级作用域的变量，但是反过来就不行，除非函数自己用 return 的方式将私有数据暴露出去。这些在之前的关于闭包的文章里面已经解释过了，这里不再赘述。</p>
<p>解决方法有很多，比如，最简单的，我们直接把var去掉，这样就会发生一次变量提升，miniQuery被升级为全局变量，挂在window对象上面。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">   </div><div class="line">   miniQuery = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    alert(<span class="string">'Hello miniQuery!'</span>);</div><div class="line">   &#125;</div><div class="line">   </div><div class="line">&#125;)();</div><div class="line"></div><div class="line">miniQuery();</div></pre></td></tr></table></figure>
<p>成了，简单明了，干干净净。</p>
<p>虽然我觉得很有道理，但是我看别人的代码，他们封装自己的js库的时候，几乎没有这样做的，因此我们也采用一种大众的做法。</p>
<p>即，我们把window作为参数传进去，然后手动将miniQuery挂上去。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">win</span>)</span>&#123;</div><div class="line">   </div><div class="line">   <span class="keyword">var</span> miniQuery = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    alert(<span class="string">'Hello miniQuery!'</span>);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   win.miniQuery = miniQuery;</div><div class="line">   </div><div class="line">&#125;)(<span class="built_in">window</span>);</div><div class="line"></div><div class="line">miniQuery();</div></pre></td></tr></table></figure>
<p>是不是也可以呢？</p>
<p>如果你觉得每次写miniQuery太麻烦，那么我们可以给它换一个名字，比如 $</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">win</span>)</span>&#123;</div><div class="line">   </div><div class="line">   <span class="keyword">var</span> miniQuery = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    alert(<span class="string">'Hello miniQuery!'</span>);</div><div class="line">   &#125;</div><div class="line">   </div><div class="line">   </div><div class="line">   win.$ = miniQuery;</div><div class="line">   </div><div class="line">&#125;)(<span class="built_in">window</span>);</div><div class="line"></div><div class="line">$();</div></pre></td></tr></table></figure>
<p>这样就差不多了。</p>
<h3 id="miniQuery-包裹对象"><a href="#miniQuery-包裹对象" class="headerlink" title="miniQuery 包裹对象"></a>miniQuery 包裹对象</h3><p>我们先弄来一个测试用的网页：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.wrap</span> &#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">80px</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">80px</span>;</div><div class="line">    <span class="attribute">background</span>:darkslateblue;</div><div class="line">    <span class="attribute">margin</span>:<span class="number">20px</span>;</div><div class="line">    <span class="attribute">border-radius</span>: <span class="number">2px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'boxes'</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'box1'</span> <span class="attr">class</span>=<span class="string">'wrap'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'box2'</span> <span class="attr">class</span>=<span class="string">'wrap'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'box3'</span> <span class="attr">class</span>=<span class="string">'wrap'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<p>举一个例子，现在我们要获取id为box1的盒子，并把它的背景色改为红色。</p>
<p>用js代码，我们会这样做：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> box2 = <span class="built_in">document</span>.getElementById(<span class="string">'box2'</span>);</div><div class="line">box2.style.backgroundColor = <span class="string">'red'</span>;</div></pre></td></tr></table></figure>
<p>思路很清晰，分为简单的两步：</p>
<p>第一步：获取dom对象。<br>第二部：设置其背景色为红色。</p>
<p>同样的，我们的 miniQuery 也要这么做，首先得获取对象，然后进行操作。就好像你做饭，首先得有米面吧。所谓巧妇难为，无米之炊。</p>
<p>于是，我们有了下面的代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> miniQuery = <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>)</span>&#123;</div><div class="line">   <span class="keyword">var</span> miniQuery = <span class="built_in">document</span>.getElementById(selector);</div><div class="line">   <span class="built_in">console</span>.log(miniQuery);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>selector 代表选择器，它只是一个参数名字，参数列表的名称是可以自己定义的。你写 aaa , bbb , ccc 都没问题，只要你愿意的话。</p>
<p>我以前经常看别人写的代码，参数里面有callback，现在我知道是回调函数的意思。可是我以前不知道，然后就觉得很困惑，作为一个英语比日语还差的js玩家，我感到很那个啥。</p>
<p>其实无所谓，只是一个名字而已，你写什么都行，只要符合标识符的命名规范就成。</p>
<p>总有人觉得，看到参数里边写了context（上下文），callback（回调函数）这样的词汇，就觉得很困惑。</p>
<p>不要困惑啦，不要再惊恐啦，它就是一个名称罢了！</p>
<p>。。。</p>
<p>额，扯远了，继续回来。</p>
<p>我们在外面调用miniQuery ~</p>
<p>window 上面挂的是 $ , 其实就是 miniQuery</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'box1'</span>);</div></pre></td></tr></table></figure>
<p>接下里，我们给dom元素变更背景色为红色。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> miniQuery = <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>)</span>&#123;</div><div class="line">   <span class="keyword">var</span> miniQuery = <span class="built_in">document</span>.getElementById(selector);</div><div class="line">   miniQuery.style.backgroundColor = <span class="string">'red'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>效果确实出来了。</p>
<p>可是呢，如果用户过几天又来个需求，说我要把box1的宽度变为之前的两倍，你怎么办？</p>
<p>总不可能去修改源码吧！</p>
<p>这时候，我们就可以考虑能不能通过一个什么办法，我先用miniQuery把你传进来的东西包装成dom元素，保存起来返回给你，同时再给你返回一大堆方法，比如改变高度啊，添加背景色啊等等。那么，操作的就是之前保存的元素了。也就是你一开始希望操作的元素。</p>
<p>这是一个很好的想法，我们经过代码的重写，最终产生了这样的一个miniQuery函数：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> miniQuery = <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> miniQuery = <span class="built_in">document</span>.getElementById(selector);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">obj</span> : miniQuery , <span class="comment">//将dom元素保存起来，再返回给你</span></div><div class="line">        </div><div class="line">        <span class="comment">// ------------------------ css 相关 ------------------------//</span></div><div class="line">        backgroundColor : <span class="function"><span class="keyword">function</span>(<span class="params">color</span>)</span>&#123;</div><div class="line">            <span class="keyword">this</span>.obj.style.backgroundColor = color;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">   </div><div class="line">   win.$ = miniQuery;</div><div class="line">   </div><div class="line">&#125;)(<span class="built_in">window</span>);</div></pre></td></tr></table></figure>
<p>我们再调用一次，看看这回它给我们返回的是什么东东？</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> $box = $(<span class="string">'box1'</span>);</div><div class="line"><span class="built_in">console</span>.log($box);</div></pre></td></tr></table></figure>
<center><img src="/img/posts/JS-BuildBaseClassLib-1.gif"></center>

<p>可见，它给我们返回的是一个json对象，里面有 obj 变量和 backgroundColor 函数。这样的好处就是极大的扩展了我们的miniQuery，你给我一个选择器，我就包起来，然后不仅把它返回给你，而且还给你各种api方法！</p>
<p>于是我们就可以直接调用 backgroundColor 函数了。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> $box = $(<span class="string">'box1'</span>);</div><div class="line">$box.backgroundColor(<span class="string">'red'</span>);</div></pre></td></tr></table></figure>
<center><img src="/img/posts/JS-BuildBaseClassLib-2.gif"></center>

<p>成了。</p>
<p>我们现在返回的，不是一个单纯的dom元素，dom元素只是它的一部分。可以说，我们返回给用户的是一个miniQuery对象！</p>
<p>经过改进，我已经陆陆续续地给miniQuery添加了很多方法，大部分是模拟的jQuery：</p>
<center><img src="/img/posts/JS-BuildBaseClassLib-3.gif"></center>

<p>顺便弄了两个小型的组件，一个是按钮，另一个是简单的数据列表。</p>
<p>按钮使用：</p>
<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;link rel=<span class="string">"stylesheet"</span> type=<span class="string">"text/css"</span> href=<span class="string">"css/mui.css"</span>/&gt;</div><div class="line">&lt;<span class="built-in">div</span> class=<span class="string">'box'</span>&gt;&lt;/<span class="built-in">div</span>&gt;</div><div class="line">var <span class="symbol">$</span>box = <span class="symbol">$</span>(<span class="string">'.box'</span>).<span class="keyword">eq</span>(<span class="number">0</span>);</div><div class="line"><span class="meta"><span class="meta-keyword">$box</span>.linkbutton();</span></div></pre></td></tr></table></figure>
<p>按钮的样式就出来了，然后我们来设置按钮的属性。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> $box = $(<span class="string">'.box'</span>).eq(<span class="number">0</span>);</div><div class="line">$box.linkbutton(&#123;</div><div class="line">    <span class="attr">text</span> : <span class="string">'保存'</span> ,</div><div class="line">    <span class="attr">click</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        alert(<span class="string">'保存成功！'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>按钮的大小也自动变大了。</p>
<p>对应的css：</p>
<p>mui.css</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.linkbutton</span> &#123;</div><div class="line">    <span class="attribute">padding</span>: .<span class="number">4em</span> .<span class="number">9em</span>; <span class="comment">/*em的好处就是随着父元素的字体大小而变化，当该元素的字体变化时，会自适应*/</span></div><div class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">rgba</span>(0,0,0,.1);</div><div class="line">    <span class="attribute">background-color</span>: <span class="number">#ac0</span>;</div><div class="line">    <span class="attribute">border-radius</span>: .<span class="number">2em</span>;</div><div class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">5px</span> <span class="built_in">rgba</span>(0,0,0,.5);</div><div class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</div><div class="line">    <span class="attribute">text-shadow</span>: <span class="number">0</span> -.<span class="number">06em</span> .<span class="number">24em</span> <span class="built_in">rgba</span>(0,0,0,.5); <span class="comment">/*将阴影设置为半透明，就无所谓底色了，都能很好地适应*/</span></div><div class="line">    <span class="attribute">font-size</span>: <span class="number">130%</span>; </div><div class="line">    <span class="attribute">line-height</span>: <span class="number">1.5</span>; <span class="comment">/*行高是字号的1.5倍*/</span></div><div class="line">    <span class="attribute">display</span>:inline-block;</div><div class="line">    <span class="attribute">cursor</span>:pointer;</div><div class="line">    <span class="attribute">font-family</span>: <span class="string">"微软雅黑"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>数据列表简单演示：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"css/mui.css"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/miniQuery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">'btn0'</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        </div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'grid0'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        $(<span class="string">'#btn0'</span>).linkbutton(&#123;</div><div class="line">            <span class="attr">text</span> : <span class="string">'测试'</span> ,</div><div class="line">            <span class="attr">click</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="keyword">if</span>(grid0.getSize() &lt; <span class="number">1</span>)&#123;</div><div class="line">                    alert(<span class="string">'请选择一条数据！'</span>);</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line">                alert(<span class="string">'您选择的是'</span> + <span class="built_in">JSON</span>.stringify(grid0.getSelected()));</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">var</span> grid0 = mui.get(<span class="string">'#grid0'</span>).dataGrid(&#123;</div><div class="line">            <span class="attr">header</span> : [</div><div class="line">                &#123;<span class="attr">name</span>:<span class="string">'ID'</span> ,  <span class="attr">width</span>:<span class="number">10</span> , <span class="attr">type</span> : <span class="string">'checkColumn'</span> &#125; ,</div><div class="line">                &#123;<span class="attr">name</span>:<span class="string">'标题'</span> , <span class="attr">type</span> : <span class="string">'column'</span> , <span class="attr">field</span> : <span class="string">'title'</span>&#125; ,</div><div class="line">                &#123;<span class="attr">name</span>:<span class="string">'分类'</span> , <span class="attr">type</span> : <span class="string">'column'</span> , <span class="attr">field</span> : <span class="string">'type'</span>&#125; ,</div><div class="line">                &#123;<span class="attr">name</span>:<span class="string">'作者'</span> ,  <span class="attr">type</span> : <span class="string">'column'</span> , <span class="attr">field</span> : <span class="string">'author'</span>&#125; ,</div><div class="line">                &#123;<span class="attr">name</span>:<span class="string">'时间'</span> ,  <span class="attr">type</span> : <span class="string">'column'</span> , <span class="attr">field</span> : <span class="string">'time'</span>&#125; ,</div><div class="line">            ] ,</div><div class="line">            </div><div class="line">        &#125;);</div><div class="line">        </div><div class="line">        </div><div class="line">        grid0.load([</div><div class="line">            &#123;<span class="attr">title</span> : <span class="string">'111'</span> , <span class="attr">type</span> : <span class="string">'A'</span> , <span class="attr">author</span> : <span class="string">'张三'</span> , <span class="attr">time</span> : <span class="string">'2015'</span>&#125; ,</div><div class="line">            &#123;<span class="attr">title</span> : <span class="string">'222'</span> , <span class="attr">type</span> : <span class="string">'B'</span> , <span class="attr">author</span> : <span class="string">'李四'</span> , <span class="attr">time</span> : <span class="string">'2015'</span>&#125; ,</div><div class="line">            &#123;<span class="attr">title</span> : <span class="string">'333'</span> , <span class="attr">type</span> : <span class="string">'C'</span> , <span class="attr">author</span> : <span class="string">'王五'</span> , <span class="attr">time</span> : <span class="string">'2015'</span>&#125; ,</div><div class="line">            &#123;<span class="attr">title</span> : <span class="string">'444'</span> , <span class="attr">type</span> : <span class="string">'D'</span> , <span class="attr">author</span> : <span class="string">'赵六'</span> , <span class="attr">time</span> : <span class="string">'2015'</span>&#125; ,</div><div class="line">        ]);</div><div class="line">        </div><div class="line">        </div><div class="line">        </div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>当然，好多组件都还不够完善，我主要也是自己尝试一下，不过并不打算再拓展了。</p>
<p>自己做个小类库主要用于学习，以后还是用jQuery吧。</p>
<p>附录A</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div><div class="line">467</div><div class="line">468</div><div class="line">469</div><div class="line">470</div><div class="line">471</div><div class="line">472</div><div class="line">473</div><div class="line">474</div><div class="line">475</div><div class="line">476</div><div class="line">477</div><div class="line">478</div><div class="line">479</div><div class="line">480</div><div class="line">481</div><div class="line">482</div><div class="line">483</div><div class="line">484</div><div class="line">485</div><div class="line">486</div><div class="line">487</div><div class="line">488</div><div class="line">489</div><div class="line">490</div><div class="line">491</div><div class="line">492</div><div class="line">493</div><div class="line">494</div><div class="line">495</div><div class="line">496</div><div class="line">497</div><div class="line">498</div><div class="line">499</div><div class="line">500</div><div class="line">501</div><div class="line">502</div><div class="line">503</div><div class="line">504</div><div class="line">505</div><div class="line">506</div><div class="line">507</div><div class="line">508</div><div class="line">509</div><div class="line">510</div><div class="line">511</div><div class="line">512</div><div class="line">513</div><div class="line">514</div><div class="line">515</div><div class="line">516</div><div class="line">517</div><div class="line">518</div><div class="line">519</div><div class="line">520</div><div class="line">521</div><div class="line">522</div><div class="line">523</div><div class="line">524</div><div class="line">525</div><div class="line">526</div><div class="line">527</div><div class="line">528</div><div class="line">529</div><div class="line">530</div><div class="line">531</div></pre></td><td class="code"><pre><div class="line"><span class="meta">"use strict"</span>;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * miniQuery 和 工具类库</div><div class="line"> * 版本 1.1 (修正了一部分Bug，增加了一些方法)</div><div class="line"> * 作者：剽悍一小兔</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="comment">// ------------------------ 基本扩展, 字符串,数组等---------------------------------//</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">extend_base</span> (<span class="params"></span>)</span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span>(!<span class="built_in">String</span>.prototype.format )&#123;</div><div class="line">        <span class="built_in">String</span>.prototype.format = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> e = <span class="built_in">arguments</span>;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.replace(<span class="regexp">/&#123;(\d+)&#125;/g</span>,<span class="function"><span class="keyword">function</span>(<span class="params">t, n</span>) </span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">typeof</span> e[n] != <span class="string">"undefined"</span> ? e[n] : t</div><div class="line">            &#125;)</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (!<span class="built_in">Array</span>.prototype.forEach &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">Array</span>.prototype.forEach !== <span class="string">"function"</span>) &#123;</div><div class="line">        <span class="built_in">Array</span>.prototype.forEach = <span class="function"><span class="keyword">function</span>(<span class="params">callback, context</span>) </span>&#123;</div><div class="line">           <span class="comment">// 遍历数组,在每一项上调用回调函数，这里使用原生方法验证数组。</span></div><div class="line">           <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.toString.call(<span class="keyword">this</span>) === <span class="string">"[object Array]"</span>) &#123;</div><div class="line">               <span class="keyword">var</span> i,len;</div><div class="line">               <span class="comment">//遍历该数组所有的元素</span></div><div class="line">               <span class="keyword">for</span> (i = <span class="number">0</span>, len = <span class="keyword">this</span>.length; i &lt; len; i++) &#123;</div><div class="line">                   <span class="keyword">if</span> (<span class="keyword">typeof</span> callback === <span class="string">"function"</span>  &amp;&amp; <span class="built_in">Object</span>.prototype.hasOwnProperty.call(<span class="keyword">this</span>, i)) &#123;</div><div class="line">                       <span class="keyword">if</span> (callback.call(context, <span class="keyword">this</span>[i], i, <span class="keyword">this</span>) === <span class="literal">false</span>) &#123;</div><div class="line">                           <span class="keyword">break</span>; <span class="comment">// or return;</span></div><div class="line">                       &#125;</div><div class="line">                   &#125;</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span>(!<span class="built_in">String</span>.prototype.format )&#123;</div><div class="line">        <span class="built_in">Array</span>.isArray = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">            <span class="keyword">return</span> obj.constructor.toString().indexOf(<span class="string">'Array'</span>) != <span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">extend_base(); </div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// ------------------------ 工具包---------------------------------//</span></div><div class="line"><span class="keyword">var</span> utils = &#123;</div><div class="line">            <span class="attr">center</span> : <span class="function"><span class="keyword">function</span>(<span class="params">dom</span>)</span>&#123;</div><div class="line">                dom.style.position = <span class="string">'absolute'</span>;</div><div class="line">                dom.style.top = <span class="string">'50%'</span>;</div><div class="line">                dom.style.left = <span class="string">'50%'</span>;</div><div class="line">                dom.style[<span class="string">'margin-top'</span>] = - dom.offsetHeight / <span class="number">2</span> + <span class="string">'px'</span>;</div><div class="line">                dom.style[<span class="string">'margin-left'</span>] = - dom.offsetWidth / <span class="number">2</span> + <span class="string">'px'</span>;</div><div class="line">            &#125;,</div><div class="line">        </div><div class="line">            <span class="comment">/** dom相关 * */</span></div><div class="line">            isDom : ( <span class="keyword">typeof</span> HTMLElement === <span class="string">'object'</span> ) ?</div><div class="line">                <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">                    <span class="keyword">return</span> obj <span class="keyword">instanceof</span> HTMLElement;</div><div class="line">                &#125; :</div><div class="line">                <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">                    <span class="keyword">return</span> obj &amp;&amp; <span class="keyword">typeof</span> obj === <span class="string">'object'</span> &amp;&amp; obj.nodeType === <span class="number">1</span> &amp;&amp; <span class="keyword">typeof</span> obj.nodeName === <span class="string">'string'</span>;</div><div class="line">                &#125; ,</div><div class="line">             </div><div class="line">            <span class="comment">/** 数组相关 * */</span></div><div class="line">            isArray : <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">                <span class="keyword">return</span> obj.constructor.toString().indexOf(<span class="string">'Array'</span>) != <span class="number">-1</span>;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        </div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// ------------------------ miniQuery.js ---------------------------------//</span></div><div class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params">win</span>)</span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> miniQuery = <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> miniQuery = <span class="literal">null</span>;</div><div class="line">        <span class="keyword">var</span> length = <span class="number">0</span>;</div><div class="line">        <span class="keyword">var</span> children = [];</div><div class="line">        <span class="keyword">if</span>(!selector) <span class="keyword">return</span>;</div><div class="line">        </div><div class="line">        <span class="comment">/** 1. 传入的是id * */</span></div><div class="line">        <span class="keyword">if</span>(selector.toString().indexOf(<span class="string">'#'</span>) != <span class="number">-1</span>) &#123;</div><div class="line">            selector = selector.replace(<span class="string">'#'</span>,<span class="string">''</span>);</div><div class="line">            miniQuery = <span class="built_in">document</span>.getElementById(selector);</div><div class="line">        &#125; </div><div class="line">        </div><div class="line">        <span class="comment">/** 2. 传入的是class * */</span></div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(selector.toString().indexOf(<span class="string">'.'</span>) != <span class="number">-1</span>)&#123;</div><div class="line">            selector = selector.replace(<span class="string">'.'</span>,<span class="string">''</span>);</div><div class="line">            miniQuery = <span class="built_in">document</span>.getElementsByClassName(selector);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        </div><div class="line">        <span class="comment">/** 3. 传入的是dom元素 * */</span></div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(utils.isDom(selector))&#123;</div><div class="line">            miniQuery = selector;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">         <span class="comment">/** 4. 传入的是标签 * */</span></div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> selector === <span class="string">'string'</span>)&#123;</div><div class="line">            miniQuery = <span class="built_in">document</span>.getElementsByTagName(selector);</div><div class="line">            <span class="keyword">return</span> miniQuery;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(!miniQuery) <span class="keyword">return</span>; <span class="comment">//如果本类库包装不了，就返回</span></div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(miniQuery.length)&#123;   <span class="comment">//如果是一个类数组元素的话，就获取他的长度</span></div><div class="line">            length = miniQuery.length; </div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            length = <span class="number">1</span>; <span class="comment">//这种情况，说明成功包裹了元素，但是该元素还是存在的，就将长度设定为1</span></div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        children = miniQuery.children; <span class="comment">//取得所有的孩子节点</span></div><div class="line">        </div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            </div><div class="line">            <span class="comment">/** 属性区 */</span></div><div class="line">            obj : miniQuery,    <span class="comment">//返回的dom元素</span></div><div class="line">            index : <span class="number">0</span> ,         <span class="comment">//默认的角标（假如 miniquery 是一个类数组的话）</span></div><div class="line">            length : length,    <span class="comment">//元素的个数（假如 miniquery 是一个类数组的话）</span></div><div class="line">            children : children,<span class="comment">//所有孩子节点</span></div><div class="line">            </div><div class="line">            </div><div class="line">            <span class="comment">/** 方法区 */</span></div><div class="line">            </div><div class="line">            <span class="comment">// ------------------------ dom 相关 ---------------------------------//</span></div><div class="line">            </div><div class="line">            <span class="comment">/**获取dom对象本身,返回纯粹的dom元素，而非miniQuery元素*/</span></div><div class="line">            getObj : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.obj;</div><div class="line">            &#125; ,</div><div class="line">            </div><div class="line">            <span class="comment">/**获取元素的长度*/</span></div><div class="line">            size : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.length;</div><div class="line">            &#125; ,</div><div class="line">            </div><div class="line">            <span class="comment">/** 假如 miniquery 是一个类数组的话，用于返回其中一个元素 */</span></div><div class="line">            eq : <span class="function"><span class="keyword">function</span>(<span class="params">index</span>)</span>&#123;</div><div class="line">                <span class="keyword">if</span>(length &gt; <span class="number">0</span>) &#123;</div><div class="line">                    <span class="keyword">return</span> $(<span class="keyword">this</span>.obj[index]); <span class="comment">//eq返回的还是miniQuery对象</span></div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">                &#125;</div><div class="line">            &#125; ,</div><div class="line">            </div><div class="line">            <span class="comment">/** 获得第一个匹配元素 */</span></div><div class="line">            first : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="keyword">return</span> $(<span class="keyword">this</span>.obj[<span class="number">0</span>]);</div><div class="line">            &#125; ,</div><div class="line">            </div><div class="line">            <span class="comment">/** 获得最后一个匹配元素 */</span></div><div class="line">            last : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="keyword">return</span> $(<span class="keyword">this</span>.obj[<span class="keyword">this</span>.length - <span class="number">1</span>]);</div><div class="line">            &#125; ,</div><div class="line">            </div><div class="line">            <span class="comment">/** 获得最后一个匹配元素 */</span></div><div class="line">            getChildren : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.obj.children;</div><div class="line">            &#125; ,</div><div class="line">            </div><div class="line">            <span class="comment">/** 获得某一个孩子节点 */</span></div><div class="line">            getChild : <span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</div><div class="line">                <span class="keyword">return</span> $(<span class="keyword">this</span>.children[i]);</div><div class="line">            &#125; ,</div><div class="line">            </div><div class="line">            <span class="comment">/** 获得父节点 */</span></div><div class="line">            getParent : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="keyword">return</span> $(<span class="keyword">this</span>.obj.parentElement);</div><div class="line">            &#125; ,</div><div class="line">            </div><div class="line">            <span class="comment">/** 获得上一个节点 */</span></div><div class="line">            previous : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="keyword">var</span> parent = <span class="keyword">this</span>.getParent();</div><div class="line">                <span class="keyword">var</span> children = parent.children;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; children.length; i++)&#123;</div><div class="line">                    <span class="keyword">if</span>(<span class="keyword">this</span>.obj == children[i]) &#123;</div><div class="line">                        <span class="keyword">return</span> $(children[i - <span class="number">1</span>]);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">            &#125; ,</div><div class="line">            </div><div class="line">            <span class="comment">/** 获得下一个节点 */</span></div><div class="line">            next : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="keyword">var</span> parent = <span class="keyword">this</span>.getParent();</div><div class="line">                <span class="keyword">var</span> children = parent.children;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; children.length; i++)&#123;</div><div class="line">                    <span class="keyword">if</span>(<span class="keyword">this</span>.obj == children[i]) &#123;</div><div class="line">                        <span class="keyword">return</span> $(children[i + <span class="number">1</span>]);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">            &#125; ,</div><div class="line">            </div><div class="line">            <span class="attr">findClassDom</span> : <span class="function"><span class="keyword">function</span>(<span class="params">className</span>)</span>&#123;</div><div class="line">                 <span class="keyword">this</span>.obj = <span class="keyword">this</span>.obj.getElementsByClassName(className) ;</div><div class="line">                 <span class="keyword">return</span> <span class="keyword">this</span> ;</div><div class="line">            &#125; ,</div><div class="line">            </div><div class="line">            <span class="attr">findIdDom</span> : <span class="function"><span class="keyword">function</span>(<span class="params">id</span>)</span>&#123;</div><div class="line">                 <span class="keyword">var</span> $<span class="keyword">this</span> = <span class="keyword">this</span>; </div><div class="line">                 <span class="keyword">var</span> children = <span class="keyword">this</span>.getChildren();</div><div class="line">                 children = <span class="built_in">Array</span>.prototype.slice.call(children); <span class="comment">//obj 转  []</span></div><div class="line">                 children.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</div><div class="line">                    <span class="comment">//console.log(item.id);</span></div><div class="line">                    (id === item.id) &amp;&amp; ($<span class="keyword">this</span> = item) ;</div><div class="line">                 &#125;);</div><div class="line">                 <span class="keyword">return</span> <span class="keyword">this</span> ;</div><div class="line">            &#125; ,</div><div class="line">            </div><div class="line">            <span class="comment">// ------------------------ css 相关 ---------------------------------//</span></div><div class="line">            <span class="comment">/** 添加背景色 */</span></div><div class="line">            backgroundColor : <span class="function"><span class="keyword">function</span>(<span class="params">color</span>)</span>&#123;</div><div class="line">                <span class="keyword">this</span>.obj.style.backgroundColor = color;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">            &#125; ,</div><div class="line">            </div><div class="line">            <span class="comment">/** 获取style */</span></div><div class="line">            getStyle : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="keyword">var</span> styleEle = <span class="literal">null</span>;</div><div class="line">                <span class="keyword">if</span>(<span class="built_in">window</span>.getComputedStyle)&#123;</div><div class="line">                    styleEle = <span class="built_in">window</span>.getComputedStyle(<span class="keyword">this</span>.obj,<span class="literal">null</span>);</div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    styleEle = ht.currentStyle;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> styleEle;</div><div class="line">             &#125; ,</div><div class="line">            </div><div class="line">            <span class="comment">/** 设置或者拿到高度 */</span> </div><div class="line">            height : <span class="function"><span class="keyword">function</span>(<span class="params">h</span>)</span>&#123;</div><div class="line">                <span class="keyword">if</span>(!h) <span class="keyword">return</span> <span class="keyword">this</span>.getStyle().getPropertyValue(<span class="string">'height'</span>);</div><div class="line">                (<span class="keyword">typeof</span> h == <span class="string">'number'</span>) &amp;&amp; (h = h + <span class="string">'px'</span>);</div><div class="line">                <span class="keyword">this</span>.obj.style.height = h;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">            &#125; ,</div><div class="line">            </div><div class="line">            <span class="comment">/** 设置或者拿到宽度 */</span> </div><div class="line">            width : <span class="function"><span class="keyword">function</span>(<span class="params">w</span>)</span>&#123;</div><div class="line">                <span class="keyword">if</span>(!w) <span class="keyword">return</span> <span class="keyword">this</span>.getStyle().getPropertyValue(<span class="string">'width'</span>);</div><div class="line">                (<span class="keyword">typeof</span> w == <span class="string">'number'</span>) &amp;&amp; (w = w + <span class="string">'px'</span>);</div><div class="line">                <span class="keyword">this</span>.obj.style.width = w;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">            &#125; ,</div><div class="line">            </div><div class="line">            <span class="comment">/** 设置自定义样式 */</span></div><div class="line">            css : <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">                <span class="keyword">if</span>(!obj) <span class="keyword">return</span>;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> obj)&#123;</div><div class="line">                    <span class="comment">//console.log(key + '=========' + obj[key]);</span></div><div class="line">                    <span class="keyword">this</span>.obj.style[key] = <span class="keyword">typeof</span> obj[key] === <span class="string">'number'</span> ? obj[key] + <span class="string">'px'</span> : obj[key];</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">            &#125; ,</div><div class="line">            </div><div class="line">            <span class="comment">/** 设置放大 倍数*/</span></div><div class="line">            scale : <span class="function"><span class="keyword">function</span>(<span class="params">scaleNumber</span>)</span>&#123;</div><div class="line">                <span class="keyword">this</span>.css(&#123;</div><div class="line">                    <span class="attr">scale</span> : scaleNumber</div><div class="line">                &#125;);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">            &#125; ,</div><div class="line">            </div><div class="line">            </div><div class="line">            <span class="attr">hasClass</span> : <span class="function"><span class="keyword">function</span>(<span class="params">cls</span>) </span>&#123;  </div><div class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.obj.className.match(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'(\\s|^)'</span> + cls + <span class="string">'(\\s|$)'</span>));  </div><div class="line">            &#125;  ,</div><div class="line">            </div><div class="line">            <span class="attr">addClass</span> : <span class="function"><span class="keyword">function</span>(<span class="params">cls</span>)</span>&#123;</div><div class="line">                <span class="keyword">if</span> (!<span class="keyword">this</span>.hasClass(cls)) <span class="keyword">this</span>.obj.className += <span class="string">" "</span> + cls;  </div><div class="line">            &#125; ,</div><div class="line">            </div><div class="line">            <span class="attr">removeClass</span> : <span class="function"><span class="keyword">function</span>(<span class="params">cls</span>) </span>&#123;  </div><div class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.hasClass(cls)) &#123;  </div><div class="line">                    <span class="comment">//console.log(this.obj);</span></div><div class="line">                    <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'(\\s|^)'</span> + cls + <span class="string">'(\\s|$)'</span>);  </div><div class="line">                    <span class="keyword">this</span>.obj.className = <span class="keyword">this</span>.obj.className.replace(reg, <span class="string">' '</span>);  <span class="comment">//修正bug，之前右边少了一个this</span></div><div class="line">                &#125;  </div><div class="line">            &#125; ,</div><div class="line">            </div><div class="line">            <span class="attr">toggleClass</span> : <span class="function"><span class="keyword">function</span>(<span class="params">cls</span>)</span>&#123;  </div><div class="line">                <span class="keyword">if</span>(<span class="keyword">this</span>.hasClass(cls))&#123;  </div><div class="line">                    <span class="keyword">this</span>.removeClass(cls);  </div><div class="line">                &#125;<span class="keyword">else</span>&#123;  </div><div class="line">                    <span class="keyword">this</span>.addClass(cls);  </div><div class="line">                &#125;  </div><div class="line">            &#125;  ,</div><div class="line">            </div><div class="line">            </div><div class="line">            </div><div class="line">            <span class="comment">// ------------------------ 动画 相关 ---------------------------------//</span></div><div class="line">            </div><div class="line">            <span class="comment">//TODO</span></div><div class="line">            animate : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                </div><div class="line">            &#125; ,</div><div class="line">            </div><div class="line">            <span class="comment">// ------------------------ 事件相关 ---------------------------------//</span></div><div class="line">            </div><div class="line">            on : <span class="function"><span class="keyword">function</span>(<span class="params">eventName,callback</span>)</span>&#123;</div><div class="line">                <span class="keyword">var</span> $<span class="keyword">this</span> = <span class="keyword">this</span>;</div><div class="line">                <span class="keyword">this</span>.obj[<span class="string">'on'</span> + eventName] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                    callback.call($<span class="keyword">this</span>,$<span class="keyword">this</span>.obj); <span class="comment">//context指向$this，参数传入dom对象</span></div><div class="line">                &#125;;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">            &#125; ,</div><div class="line">            </div><div class="line">            <span class="comment">// ------------------------ 属性相关 ---------------------------------//</span></div><div class="line">            </div><div class="line">            attr : <span class="function"><span class="keyword">function</span>(<span class="params">attr</span>)</span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.obj.attributes[attr];</div><div class="line">            &#125; ,</div><div class="line">            </div><div class="line">            </div><div class="line">            <span class="comment">// ------------------------ ajax相关 ---------------------------------//</span></div><div class="line">            </div><div class="line">            ajax : <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">                <span class="keyword">var</span> defaults = &#123;</div><div class="line">                    <span class="attr">type</span> : <span class="string">'post'</span> ,</div><div class="line">                    <span class="attr">data</span> : &#123;&#125; ,</div><div class="line">                    <span class="attr">success</span> : <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">                        </div><div class="line">                    &#125;</div><div class="line">                &#125;;</div><div class="line">                </div><div class="line">                </div><div class="line">                <span class="comment">// 创建一个ajax对象</span></div><div class="line">                <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">                <span class="comment">//开始和后台的upload.jsp页面进行交换</span></div><div class="line">                xhr.open(<span class="string">"post"</span>, basePath+<span class="string">"/upload/file.do"</span>, <span class="literal">true</span>);</div><div class="line">                <span class="comment">//上传成功进入的毁掉函数</span></div><div class="line">                xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                    <span class="keyword">if</span>(xhr.readyState==<span class="number">4</span> &amp;&amp; xhr.status==<span class="number">200</span>)&#123;<span class="comment">//状态4和200代表和服务器端交互成功</span></div><div class="line">                        <span class="comment">//获取上传成功的返回数据</span></div><div class="line">                        <span class="keyword">var</span> data = xhr.responseText.trim();</div><div class="line">                        <span class="keyword">var</span> jdata = <span class="built_in">eval</span>(<span class="string">"("</span>+data+<span class="string">")"</span>);</div><div class="line">                        jdata[<span class="string">"target"</span>]=uploadTo;</div><div class="line">                        tz_uploadsuccess($(uploadTo),jdata);</div><div class="line">                    &#125;</div><div class="line">                &#125;;</div><div class="line">                <span class="comment">//监听文件上传的进度</span></div><div class="line">                xhr.upload.addEventListener(<span class="string">"progress"</span>, progressFunction, <span class="literal">false</span>);</div><div class="line">                <span class="comment">//发送文件上传的进度</span></div><div class="line">                xhr.send(form);</div><div class="line">            &#125; ,</div><div class="line">            </div><div class="line">            <span class="comment">// ------------------------ ui ---------------------------------//</span></div><div class="line">            </div><div class="line">            <span class="comment">/** 按钮 * */</span></div><div class="line">            linkbutton : <span class="function"><span class="keyword">function</span>(<span class="params">opts</span>)</span>&#123;</div><div class="line">                <span class="keyword">var</span> opts = opts || &#123;&#125;;</div><div class="line">                <span class="comment">/**添加基本样式* */</span></div><div class="line">                <span class="keyword">this</span>.addClass(<span class="string">'linkbutton'</span>);</div><div class="line">                <span class="keyword">this</span>.on(<span class="string">'mouseover'</span> , <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">                    <span class="comment">//console.log(e);</span></div><div class="line">                    <span class="keyword">this</span>.css(&#123;</div><div class="line">                        <span class="attr">backgroundColor</span>: <span class="string">'#d4ef50'</span></div><div class="line">                    &#125;);</div><div class="line">                &#125;).on(<span class="string">'mouseout'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">                    <span class="keyword">this</span>.css(&#123;</div><div class="line">                        <span class="attr">backgroundColor</span>: <span class="string">'#ac0'</span></div><div class="line">                    &#125;);</div><div class="line">                &#125;);</div><div class="line">                </div><div class="line">                opts.text &amp;&amp; (<span class="keyword">this</span>.obj.innerText = opts.text);</div><div class="line">                opts.click &amp;&amp; (<span class="keyword">this</span>.on(<span class="string">'click'</span> , opts.click));</div><div class="line">            &#125; ,</div><div class="line">            </div><div class="line">            <span class="comment">/** 数据列表 * */</span></div><div class="line">            dataGrid : <span class="function"><span class="keyword">function</span>(<span class="params">opts</span>)</span>&#123;</div><div class="line">                <span class="keyword">var</span> $<span class="keyword">this</span> = <span class="keyword">this</span>;</div><div class="line">                <span class="keyword">var</span> opts = opts || &#123;&#125;;</div><div class="line">                <span class="keyword">var</span> header = <span class="literal">null</span>; <span class="comment">//表头</span></div><div class="line">                <span class="keyword">var</span> id = <span class="literal">null</span>; <span class="comment">//grid的id，唯一</span></div><div class="line">                <span class="keyword">var</span> tb_id = <span class="literal">null</span>;</div><div class="line">                <span class="keyword">var</span> tbody_id = <span class="literal">null</span>;</div><div class="line">                <span class="keyword">var</span> count = <span class="number">0</span>; <span class="comment">//为了防止id重复</span></div><div class="line">                <span class="keyword">var</span> columns = []; <span class="comment">//存放field</span></div><div class="line">                <span class="keyword">var</span> types = [];</div><div class="line">                <span class="keyword">if</span>(!<span class="keyword">this</span>.obj.id) <span class="keyword">return</span>;</div><div class="line">                <span class="keyword">else</span> id = <span class="keyword">this</span>.obj.id;</div><div class="line">                </div><div class="line">                <span class="keyword">if</span>(!opts.header) <span class="keyword">return</span>;</div><div class="line">                <span class="keyword">else</span> header = opts.header;</div><div class="line">                </div><div class="line">                <span class="comment">/**添加基本样式* */</span></div><div class="line">                <span class="keyword">this</span>.addClass(<span class="string">'tableBox'</span>);</div><div class="line">                </div><div class="line">                <span class="comment">//初始化表头</span></div><div class="line">                <span class="function"><span class="keyword">function</span> <span class="title">initHeader</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                    <span class="keyword">var</span> time = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</div><div class="line">                    tb_id = <span class="string">'mui-table_'</span> + time + <span class="string">'_'</span> + count++;</div><div class="line">                    <span class="keyword">var</span> html = <span class="string">" &lt;table id='"</span>+tb_id+<span class="string">"'&gt;&lt;thead&gt;"</span> ;</div><div class="line">                    </div><div class="line">                    <span class="comment">//拼接表头</span></div><div class="line">                    html += <span class="string">'&lt;tr&gt;'</span> ;</div><div class="line">                    header.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</div><div class="line">                        columns.push(item.field); <span class="comment">//添加字段名</span></div><div class="line">                        types.push(item.type);    <span class="comment">//添加列类型</span></div><div class="line">                        <span class="keyword">var</span> width = <span class="literal">null</span>;</div><div class="line">                        <span class="keyword">if</span>(item.width) width = item.width + <span class="string">'px'</span>; <span class="comment">//设置宽度</span></div><div class="line">                        <span class="keyword">if</span>(width) width = <span class="string">"width='"</span>+width+<span class="string">"' "</span>;</div><div class="line">                        html += <span class="string">"&lt;th "</span>+width+<span class="string">"&gt;"</span> + item.name + <span class="string">'&lt;/th&gt;'</span></div><div class="line">                    &#125;);</div><div class="line">                    tbody_id = <span class="string">'mui-table-tbody_'</span> + time + <span class="string">'_'</span> + count++;</div><div class="line">                    html += <span class="string">"&lt;/tr&gt;&lt;/thread&gt;&lt;tbody id='"</span>+tbody_id+<span class="string">"'&gt;&lt;/tbody&gt;"</span> ;</div><div class="line">                    html += <span class="string">'&lt;/table&gt;'</span> ;</div><div class="line">                    </div><div class="line">                    $<span class="keyword">this</span>.obj.innerHTML = html;</div><div class="line">                &#125;</div><div class="line">                </div><div class="line">                </div><div class="line">                <span class="comment">//</span></div><div class="line">                initHeader();</div><div class="line">                </div><div class="line">                <span class="keyword">return</span> &#123;</div><div class="line">                    <span class="attr">tbody_id</span> : tbody_id ,</div><div class="line">                    <span class="attr">allData</span> : <span class="literal">null</span> ,</div><div class="line">                    <span class="attr">ids</span> : [], <span class="comment">//保存每一行的id</span></div><div class="line">                    index : <span class="number">0</span>,<span class="comment">//作为行号和id</span></div><div class="line">                    <span class="comment">//加载数据</span></div><div class="line">                    load : <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">                        <span class="keyword">this</span>.allData = data;</div><div class="line">                        <span class="keyword">var</span> html = <span class="string">''</span>;</div><div class="line">                        <span class="comment">//console.log($('#' + tbody_id));</span></div><div class="line">                        <span class="keyword">var</span> len = data.length; <span class="comment">//总行数</span></div><div class="line">                        <span class="keyword">var</span> columnSize = columns.length;<span class="comment">//总列数</span></div><div class="line">                        <span class="comment">//alert(len);</span></div><div class="line">                        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; len ; i++)&#123;</div><div class="line">                            <span class="keyword">this</span>.ids.push(<span class="string">'mui-dataGrid-tr_'</span> + ( <span class="keyword">new</span> <span class="built_in">Date</span>().getTime() ) + <span class="string">'_'</span> + <span class="keyword">this</span>.index++) ;</div><div class="line">                            <span class="comment">//console.log(this.ids[this.index - 1]);</span></div><div class="line">                            <span class="comment">//console.log(this.ids[this.index - 1].substring(this.ids[this.index - 1].length - 1 )); //获取行号</span></div><div class="line">                            html += <span class="string">"&lt;tr id='"</span>+<span class="keyword">this</span>.ids[<span class="keyword">this</span>.index - <span class="number">1</span>]+<span class="string">"'&gt;"</span>; <span class="comment">/*之前在这里少了一个单引号，最终显示的数据只有全部的一半，现在已经更正*/</span></div><div class="line">                            <span class="comment">//遍历列</span></div><div class="line">                            <span class="comment">//console.log(types);</span></div><div class="line">                            <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; columnSize ; j++)&#123;</div><div class="line">                                <span class="keyword">var</span> columnName = columns[j];</div><div class="line">                                <span class="keyword">if</span>(data[i][columnName])&#123;</div><div class="line">                                    html += <span class="string">'&lt;td&gt;'</span> + data[i][columnName] + <span class="string">'&lt;/td&gt;'</span>;</div><div class="line">                                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(types[j] == <span class="string">'checkColumn'</span>)&#123;</div><div class="line">                                    html += <span class="string">'&lt;td&gt;&lt;input type="checkbox" value=""/&gt;&lt;/td&gt;'</span>;</div><div class="line">                                &#125;<span class="keyword">else</span> &#123;</div><div class="line">                                    html += <span class="string">'&lt;td&gt;&lt;/td&gt;'</span>;</div><div class="line">                                &#125;</div><div class="line">                                </div><div class="line">                            &#125;</div><div class="line">                            <span class="comment">//列遍历完后，这一行才结束</span></div><div class="line">                            html += <span class="string">'&lt;/tr&gt;'</span></div><div class="line">                            </div><div class="line">                        &#125;</div><div class="line">                        </div><div class="line">                        <span class="comment">//展示数据</span></div><div class="line">                        win.$(<span class="string">'#'</span> + <span class="keyword">this</span>.tbody_id).obj.innerHTML = html;</div><div class="line">                        </div><div class="line">                        <span class="comment">//给每一行添加事件</span></div><div class="line">                        <span class="keyword">this</span>.ids.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">rowId</span>)</span>&#123;</div><div class="line">                            win.$(<span class="string">'#'</span> + rowId).on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                                <span class="keyword">this</span>.toggleClass(<span class="string">'selected'</span>);</div><div class="line">                                <span class="keyword">if</span>(<span class="keyword">this</span>.hasClass(<span class="string">'selected'</span>))&#123;</div><div class="line">                                    <span class="keyword">this</span>.obj.getElementsByTagName(<span class="string">'input'</span>)[<span class="number">0</span>].checked = <span class="literal">true</span>;</div><div class="line">                                &#125;<span class="keyword">else</span> &#123;</div><div class="line">                                    <span class="keyword">this</span>.obj.getElementsByTagName(<span class="string">'input'</span>)[<span class="number">0</span>].checked = <span class="literal">false</span>;</div><div class="line">                                &#125;</div><div class="line">                            &#125;);</div><div class="line">                        &#125;);</div><div class="line">                        </div><div class="line">                        </div><div class="line">                            </div><div class="line">                    &#125; ,</div><div class="line">                    </div><div class="line">                    <span class="comment">//获取所有数据</span></div><div class="line">                    getData : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                        <span class="keyword">return</span> <span class="keyword">this</span>.allData;</div><div class="line">                    &#125; ,</div><div class="line">                    </div><div class="line">                    <span class="comment">//根据行号获取某一行</span></div><div class="line">                    </div><div class="line">                    getRow : <span class="function"><span class="keyword">function</span>(<span class="params">rowIndex</span>)</span>&#123;</div><div class="line">                        <span class="keyword">return</span> <span class="keyword">this</span>.getData()[rowIndex];</div><div class="line">                    &#125; ,</div><div class="line">                    </div><div class="line">                    <span class="comment">//获取所有的行号</span></div><div class="line">                    getSize : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                        <span class="keyword">var</span> len = <span class="number">0</span>;</div><div class="line">                        <span class="keyword">this</span>.getSelected &amp;&amp; (len = <span class="keyword">this</span>.getSelected().length) ;</div><div class="line">                        <span class="keyword">return</span> len;</div><div class="line">                    &#125; ,</div><div class="line">                    </div><div class="line">                    <span class="comment">//返回选中的行，一条或者多条</span></div><div class="line">                    getSelected : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                        <span class="keyword">var</span> rows = win.$(<span class="string">'.selected'</span>).obj; <span class="comment">//获取所有选中行</span></div><div class="line">                        <span class="keyword">var</span> len = <span class="number">0</span>;</div><div class="line">                        len = rows.length;</div><div class="line">                        <span class="keyword">var</span> arr = [];</div><div class="line">                        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; len;i++)&#123;</div><div class="line">                            <span class="comment">//console.log(rows[i].id.substring(rows[i].id.length - 1));</span></div><div class="line">                            arr.push(<span class="keyword">this</span>.getRow(rows[i].id.split(<span class="string">'_'</span>)[<span class="number">2</span>])) ;</div><div class="line">                        &#125;</div><div class="line">                        </div><div class="line">                        arr.length == <span class="number">1</span> &amp;&amp; ( arr = arr[<span class="number">0</span>] );</div><div class="line">                        </div><div class="line">                        <span class="keyword">return</span> arr;</div><div class="line">                        </div><div class="line">                        <span class="comment">//this.ids[this.index - 1].substring(this.ids[this.index - 1].length - 1 )</span></div><div class="line">                    &#125;</div><div class="line">                    </div><div class="line">                    </div><div class="line">                    </div><div class="line">                    </div><div class="line">                &#125;;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    win.$ = miniQuery;</div><div class="line">    </div><div class="line">    win.mui = &#123;</div><div class="line">        <span class="attr">get</span> : <span class="function"><span class="keyword">function</span>(<span class="params">sel</span>)</span>&#123;</div><div class="line">            <span class="keyword">return</span> miniQuery(sel);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;)(<span class="built_in">window</span>);</div></pre></td></tr></table></figure>
<p>附录B mui.css</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.linkbutton</span> &#123;</div><div class="line">    <span class="attribute">padding</span>: .<span class="number">4em</span> .<span class="number">9em</span>; <span class="comment">/*em的好处就是随着父元素的字体大小而变化，当该元素的字体变化时，会自适应*/</span></div><div class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">rgba</span>(0,0,0,.1);</div><div class="line">    <span class="attribute">background-color</span>: <span class="number">#ac0</span>;</div><div class="line">    <span class="attribute">border-radius</span>: .<span class="number">2em</span>;</div><div class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">5px</span> <span class="built_in">rgba</span>(0,0,0,.5);</div><div class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</div><div class="line">    <span class="attribute">text-shadow</span>: <span class="number">0</span> -.<span class="number">06em</span> .<span class="number">24em</span> <span class="built_in">rgba</span>(0,0,0,.5); <span class="comment">/*将阴影设置为半透明，就无所谓底色了，都能很好地适应*/</span></div><div class="line">    <span class="attribute">font-size</span>: <span class="number">130%</span>; </div><div class="line">    <span class="attribute">line-height</span>: <span class="number">1.5</span>; <span class="comment">/*行高是字号的1.5倍*/</span></div><div class="line">    <span class="attribute">display</span>:inline-block;</div><div class="line">    <span class="attribute">cursor</span>:pointer;</div><div class="line">    <span class="attribute">font-family</span>: <span class="string">"微软雅黑"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.tableBox</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">1200px</span>;</div><div class="line">    <span class="attribute">background</span>:<span class="number">#f9f9f9</span>;</div><div class="line">    <span class="attribute">margin</span>:<span class="number">20px</span> auto <span class="number">0</span>;</div><div class="line">    <span class="attribute">padding</span>:<span class="number">6px</span>;</div><div class="line">    <span class="attribute">position</span>:relative;</div><div class="line">    <span class="attribute">font-family</span>: 微软雅黑;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.tableBox</span> <span class="selector-tag">table</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">100%</span>;</div><div class="line">    <span class="attribute">border</span>:<span class="number">2px</span> solid <span class="number">#fff</span>;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.tableBox</span> <span class="selector-tag">table</span> <span class="selector-tag">tr</span> &#123;</div><div class="line">    <span class="attribute">border-collapse</span>: separate;   </div><div class="line">    <span class="attribute">border-spacing</span>: <span class="number">1px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*选中行*/</span></div><div class="line"><span class="selector-class">.tableBox</span> <span class="selector-tag">table</span> <span class="selector-tag">tr</span><span class="selector-class">.selected</span> &#123;</div><div class="line">    <span class="attribute">background</span>:<span class="number">#cce4f3</span>;</div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="comment">/*表头*/</span></div><div class="line"><span class="selector-class">.tableBox</span>  <span class="selector-tag">th</span>&#123;  </div><div class="line">    <span class="attribute">background</span>: <span class="number">#eaeaea</span>;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">6px</span>;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#666</span>;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.tableBox</span>  <span class="selector-tag">td</span> &#123;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">13px</span>;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">4px</span> <span class="number">10px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>毕竟是自己DIY出来的，所以没仔细测试，肯定还有一些BUG。不过不管怎么说，都算是一次尝试吧，呵呵。</p>
<p>转自<a href="http://www.cnblogs.com/skyblue-li/p/6010625.html" target="_blank" rel="external">http://www.cnblogs.com/skyblue-li/p/6010625.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在之前的章节中，我们已经不依赖jQuery，单纯地用JavaScript封装了很多方法，这个时候，你一定会想，这些经常使用的方法能不能单独整理成一个js文件呢？&lt;/p&gt;
&lt;p&gt;当然可以，封装本来就是干这个用的。放在一个单独js文件里固然不错，其实我们也可以单独整一个js类库，一方面可以锻炼一下自己封装方法的能力，另一方面，也可以将自己学到的东西做一个整理。&lt;/p&gt;
&lt;p&gt;出于这个目的，本文将介绍如何封装一个简单的js类库。（当然，只是开一个头，熟悉一下js基础而已。实际使用的话我感觉完全没有必要，因为jQuery已经很强大了，直接使用第三方的就可以）&lt;/p&gt;
    
    </summary>
    
      <category term="码路刺客" scheme="http://c-xuan.com/categories/%E7%A0%81%E8%B7%AF%E5%88%BA%E5%AE%A2/"/>
    
    
      <category term="转载" scheme="http://c-xuan.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="JavaScript" scheme="http://c-xuan.com/tags/JavaScript/"/>
    
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>靛青</title>
  <subtitle>青，取之于藍而青于藍。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://c-xuan.com/"/>
  <updated>2017-02-26T10:14:26.853Z</updated>
  <id>http://c-xuan.com/</id>
  
  <author>
    <name>c-xuan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>宽表和窄表的建设该如何选择？</title>
    <link href="http://c-xuan.com/2017/01/03/wide-table-thinking/"/>
    <id>http://c-xuan.com/2017/01/03/wide-table-thinking/</id>
    <published>2017-01-02T16:00:00.000Z</published>
    <updated>2017-02-26T10:14:26.853Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>宽表从字面意义上讲就是字段比较多的数据库表。通常是指业务主题相关的指标、维度、属性关联在一起的一张数据库表。由于把不同的内容都放在同一张表存储，宽表已经不符合三范式的模型设计规范，随之带来的主要坏处就是数据的大量冗余，与之相对应的好处就是查询性能的提高与便捷。这种宽表的设计广泛应用于数据挖掘模型训练前的数据准备，通过把相关字段放在同一张表中，可以大大提高数据挖掘模型训练过程中迭代计算时的效率问题。<br>————百度百科</p>
</blockquote>
<a id="more"></a>
<h3 id="宽表和窄表的建设该如何选择？"><a href="#宽表和窄表的建设该如何选择？" class="headerlink" title="宽表和窄表的建设该如何选择？"></a>宽表和窄表的建设该如何选择？</h3><p>这个问题相信纠结了很多从是数据库开发、数据仓库开发和后台开发人员；单单考虑这个问题，难给出一个绝对的答案；本人从事数据仓库开发工作到现在已经有一年半时间了，对于这个问题，我也曾经纠结过，但是是否有绝对的答案呢？事实上任何东西都没有绝对的说法。</p>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>考虑这样的一个问题，一个公司有这样的一个需求：</p>
<p>设计销售领域的订单事实表，该事实表应该包含哪些维度和度量？事实表和维表该分别如何去设计？</p>
<p>好了，我们把关键信息拿出来，首先我们要有维度包括：销售员、销售员所属部门、下订单的时间；度量：销售量；</p>
<p>那么，订单事实表，其实就是一个商品销售的清单。</p>
<h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><p>依照这个思路，我们建立的第一个模型可能是以下这样的：</p>
<center><img src="/img/posts/wide-table-thinking-1.gif"></center>

<p>单单看上去，貌似是符合我们的问题的需要，而且符合数据库的范式设计：没有冗余字段；但是情况真的就是这样吗？</p>
<p>答案是否定的，确实对于一般的OLTP系统而言这样的表设计确实减少了冗余和，增删改查等操作也很方便，但是往往对于我们的统计系统、OLAP、数据挖掘而言，情况却并非如此，举个例子：我们要统计每个部门各自的销售量为多少？那么对于上表,sql是这样的：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> a.*,b.sid <span class="keyword">into</span> #dep_saleser <span class="keyword">from</span> department a,saleser_dim b <span class="keyword">on</span> a.dep_id = b.dep_id;</div><div class="line"><span class="keyword">select</span> <span class="keyword">count</span>(<span class="number">1</span>),a.dep_name <span class="keyword">from</span> #dep_saleser a,order_fact b <span class="keyword">on</span> a.sid=b.sid <span class="keyword">group</span> <span class="keyword">by</span> a.dep_name;</div></pre></td></tr></table></figure>
<p>对于这么一个简单的需求已经要写两了sql去实现了，其实数据库表模型的的设计是灵活的，我们完全可以根据我们的业务去设计我们的数据表；考虑到部门和销售员可以是同属于销售者这个维度，只是他们是有上下级别关系的。</p>
<h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><p>那么依照这个思路，我们的模型可以建立为下面这样：</p>
<center><img src="/img/posts/wide-table-thinking-2.gif"></center>

<p>那么统计每个部门各自的销售量，可以用如下sql去实现：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> <span class="keyword">count</span>(<span class="number">1</span>),a.dep_name <span class="keyword">from</span> saleser_dim a,order_fact b</div><div class="line"><span class="keyword">on</span> a.sid=b.sid <span class="keyword">group</span> <span class="keyword">by</span> a.dep_name;</div></pre></td></tr></table></figure>
<p>确实对于这个模型而言，有些情况下会出现冗余（填写用户，没有填写部门，填写部门没填写用户），但是对于提取数统计的逻辑又相对来说要简单了好多。</p>
<h3 id="方案三"><a href="#方案三" class="headerlink" title="方案三"></a>方案三</h3><p>考虑到要实现取数简单，我们还可以想出另外一种方法：</p>
<center><img src="/img/posts/wide-table-thinking-3.gif"></center>

<p>看上去好像不错哦~~，取数据也就一句sql就搞掂了，但是却是最最槽糕的情况，有可能一个销售员，前几天登记的部门是a，但是其实他的所属于的部门为b，那么对于上面这个模型，我们得改动销售员和订单表；而对于上面的其他两个模型都仅仅需要改动一张表就行了，造成查询数据部一致往往也就是这种数据模型所造成的。</p>
<p>所谓的宽表就是字段比较多的表，包含的维度层次比较多，造成冗余也比较多，毁范式设计，但是利于取数统计，而窄表往往对于OLTP比较合适，符合范式设计原则。</p>
<p>转自<a href="http://www.cnblogs.com/super-d2/p/3384938.html" target="_blank" rel="external">http://www.cnblogs.com/super-d2/p/3384938.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;宽表从字面意义上讲就是字段比较多的数据库表。通常是指业务主题相关的指标、维度、属性关联在一起的一张数据库表。由于把不同的内容都放在同一张表存储，宽表已经不符合三范式的模型设计规范，随之带来的主要坏处就是数据的大量冗余，与之相对应的好处就是查询性能的提高与便捷。这种宽表的设计广泛应用于数据挖掘模型训练前的数据准备，通过把相关字段放在同一张表中，可以大大提高数据挖掘模型训练过程中迭代计算时的效率问题。&lt;br&gt;————百度百科&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="BI墨客" scheme="http://c-xuan.com/categories/BI%E5%A2%A8%E5%AE%A2/"/>
    
    
      <category term="数据仓库" scheme="http://c-xuan.com/tags/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/"/>
    
      <category term="转载" scheme="http://c-xuan.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>再见Solo，谢谢!</title>
    <link href="http://c-xuan.com/2017/01/03/HardSayGoodby/"/>
    <id>http://c-xuan.com/2017/01/03/HardSayGoodby/</id>
    <published>2017-01-02T16:00:00.000Z</published>
    <updated>2017-02-26T10:13:31.246Z</updated>
    
    <content type="html"><![CDATA[<center><img src="/img/posts/HardSayGoodbye-1.jpeg"></center>

<p>还有一天，购买的服务器就要到期了，并没有续期的打算，意味着在服务器上运行的这个Solo博客就停掉了。其实也没有什么大不了的事情，只是想来这一路没有为自己能够坚持而愧疚。</p>
<a id="more"></a>
<p>购买服务器的初衷就是想有一个自己部署的博客，当然有CSDN这些非常优秀的博客平台，上面的大牛资源很多，在上面写东西分享东西会更好些，自己搞个服务器运行个博客，还没什么人去看，无外乎为了装个X罢了。没错，是这样的，但是坦白讲这个X装的并不好。每当在网上搜索解决问题的方法的时候，链接到一些不错的个人博客，看到那随着时光而留下的一篇篇印记，就很是羡慕，看得出那一路的积累、总结与成长。</p>
<center><img src="/img/posts/HardSayGoodbye-2.jpeg"></center>

<p>记得服务器是去年双十一优惠买的阿里云服务器，单核1G内存。买之前还买了域名。那时候刚知道有WP(Wordpress)不久，这个相信很多人都知道，一个很不错的开源的博客与内容展示平台，用PHP写的，在互联网世界还是很流行的(还记得嘛，PHP是世界上最好的语言)。所以起初是部署的WP的博客，所以就要搞一个MySql+PHP的运行环境，自然不用说，用集成的XAMPP就好了。</p>
<p>但是后来让我换成了现在用的Solo，并不是因为Wordpress不好，Wordpress还是很不错的，功能很完善，还有各种插件皮肤可以用，由于买的服务器配置比较低，1G的内存，本身运行了Win Server 2012在运行其他的显得比较勉强，经常出现PHP运行环境不稳定崩溃的现象。所以想到有没有一些比较轻量级的博客平台，也不记得怎么找到的Solo，觉着挺好，按个JAVA环境，就可以独立启动运行。功能上也够用，还可以将博客同步到黑客派。当然也折腾了一下皮肤，修改了默认皮肤的一些样式。</p>
<center><img src="/img/posts/HardSayGoodbye-3.jpeg"></center>

<p>其实大部分文章都是转来的，平时搜东西的时候觉得挺好就转载一下，偶尔也把自己遇到的一些问题整理记录下来放出去。必须得承认，自己整理的东西会让自己更加印象深刻，在整理成博客的时候会让你理清思路，还可以练习你的表达。我还得承认我的写作能力巅峰时期应该在高中，高考后再没那时的水准。大学里论文什么的虽然字数多，但怎么出来的你懂得。</p>
<p>大概是在8月份，开始比较深入了解Git，自然就少不了GitHub，后来了解到在Github上可以发布静态网页的博客，遂折腾了一段时间，觉得还是蛮神奇的，用nodejs生成静态网页在同步到Github，还可以练习Git命令，所以就用Hexo搭了一个github静态博客<a href="http://c-xuan.com">c-xuan.com</a>。当然它并没有B3log那么方便，每次更新博客都要push。而且还得想办法解决多个地方发布的同步问题。但好处也显而易见，不需要独立的服务器，注册一个Github账号即可。有没有即功能齐全又不需要独立服务器的？有，像博客园、CSDN、简书等等都不错。</p>
<center><img src="/img/posts/HardSayGoodbye-4.jpeg"></center>

<p>最后我想说的是，选择什么样的平台发布自己的博客并不需要太过在意，适合自己的就是最好的，无论什么工具，目的都是总结自己的经历，分享自己的历程。我们庆幸自己生活在一个互联网的时代，这是一个最好的时代，我们可以随心所欲在浩瀚的网络中学到自己想要的东西。另外，就是坚持，其实坚持并不是胜利，坚持到底才是胜利，坚持着去写些东西，让岁月在互联网上留下点痕迹。诚然，网络是一个虚拟的世界，想必我们都已离不开这个世界，学着在这个世界里让自己更快成长。看到过这样一句话：有些人你可能忘了，但输入法还记得。就像很多事情你也忘了，但可能会有这样一个地方会让你回忆起什么(我说的不是朋友圈)。愿你迷茫时都可以找回来时的路。</p>
<p>PS:感谢Solo开源博客平台，感谢B3log团队。</p>
]]></content>
    
    <summary type="html">
    
      &lt;center&gt;&lt;img src=&quot;/img/posts/HardSayGoodbye-1.jpeg&quot;&gt;&lt;/img&gt;&lt;/center&gt;

&lt;p&gt;还有一天，购买的服务器就要到期了，并没有续期的打算，意味着在服务器上运行的这个Solo博客就停掉了。其实也没有什么大不了的事情，只是想来这一路没有为自己能够坚持而愧疚。&lt;/p&gt;
    
    </summary>
    
      <category term="随笔感悟" scheme="http://c-xuan.com/categories/%E9%9A%8F%E7%AC%94%E6%84%9F%E6%82%9F/"/>
    
    
      <category term="原创" scheme="http://c-xuan.com/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="知识管理" scheme="http://c-xuan.com/tags/%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>【SQL Server】编辑、修改字段说明（备注）</title>
    <link href="http://c-xuan.com/2016/12/02/SQLAddColumnNote/"/>
    <id>http://c-xuan.com/2016/12/02/SQLAddColumnNote/</id>
    <published>2016-12-01T16:01:43.000Z</published>
    <updated>2016-12-01T16:13:05.593Z</updated>
    
    <content type="html"><![CDATA[<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">sp_addextendedproperty</div><div class="line">    [ @name = ] &#123; <span class="string">'property_name'</span> &#125;</div><div class="line">    [ , [ @value = ] &#123; <span class="string">'value'</span> &#125; </div><div class="line">        [ , [ @level0type = ] &#123; <span class="string">'level0_object_type'</span> &#125; </div><div class="line">                    , [ @level0name = ] &#123; <span class="string">'level0_object_name'</span> &#125; </div><div class="line">                [ , [ @level1type = ] &#123; <span class="string">'level1_object_type'</span> &#125; </div><div class="line">                                    , [ @level1name = ] &#123; <span class="string">'level1_object_name'</span> &#125; </div><div class="line">                        [ , [ @level2type = ] &#123; <span class="string">'level2_object_type'</span> &#125; </div><div class="line">                                                    , [ @level2name = ] &#123; <span class="string">'level2_object_name'</span> &#125; </div><div class="line">                        ] </div><div class="line">                ]</div><div class="line">        ] </div><div class="line">    ]</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h3><p>为了指定扩展属性，SQL Server 数据库中的对象分为三个级别（0、1 和 2）。级别 0 是最高级别，定义为包含在数据库作用域中的对象。级别 1 的对象包含在架构作用域或用户作用域中，而级别 ２ 的对象包含在级别 1 对象中。可以为这些级别中任一级别的对象定义扩展属性。</p>
<p>引用某个级别中的对象必须用拥有或包含它们的更高级别对象的名称进行限制。例如，当将扩展属性添加到表列（级别 2）时，还必须指定包含该列的表名（级别 1）以及包含该表的架构（级别 0）。</p>
<p>有关对象及其有效的级别 0、1 和 2 类型的完整列表，请参阅对数据库对象使用扩展属性。如果所有对象类型和名称都为空，则属性属于当前数据库本身。对于系统对象、用户定义数据库的作用域以外的对象或者未在 Arguments 中作为有效输入列出的对象，不允许使用扩展属性。</p>
<h3 id="架构与用户"><a href="#架构与用户" class="headerlink" title="架构与用户"></a>架构与用户</h3><p>在 SQL Server 的早期版本中，用户拥有表、视图和触发器之类的数据库对象。因此，允许将扩展属性添加到这些对象之一以及将用户名指定为级别 0 类型。但在 SQL Server 2005 中，数据库对象包含在架构中。它们独立于拥有架构的用户。在 SQL Server 2005 中，我们建议不要在将扩展属性应用于数据库对象时指定 USER 作为级别 0 类型，因为这会导致名称解析不明确。例如，假定用户 Mary 拥有两个架构（Mary 和 MySchema），并且这两个架构都包含名为 MyTable 的表。如果 Mary 将扩展属性添加到表 MyTable 并指定 @level0type = N’USER’、@level0name = Mary，则扩展属性应用于哪个表并不明确。为了保持向后兼容，SQL Server 将属性应用于名为 Mary 的架构所包含的表。有关用户与架构的详细信息，请参阅用户架构分离。</p>
<h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p><code>[ @name ] = { &#39;property_name&#39; }</code></p>
<p>要添加的属性的名称。property_name 的数据类型为 sysname，不能为 NULL。名称还可以包括空格或非字母数字字符串以及二进制值。</p>
<p><code>[ @value = ] { &#39;value&#39; }</code></p>
<p>要与属性关联的值。value 的数据类型为 sql_variant，默认值为 NULL。value 的大小不能超过 7,500 个字节。</p>
<p><code>[ @level0type = ] { &#39;level0_object_type&#39; }</code></p>
<p>级别 0 对象的类型。level0_object_type 的数据类型为 varchar(128)，默认值为 NULL。<br>有效的输入包括：ASSEMBLY、CONTRACT、EVENT NOTIFICATION、FILEGROUP、MESSAGE TYPE、PARTITION FUNCTION、PARTITION SCHEME、REMOTE SERVICE BINDING、ROUTE、SCHEMA、SERVICE、USER、TRIGGER、TYPE 和 NULL。<br>重要事项：</p>
<p>作为级别 0 类型的 USER 和 TYPE 将在 SQL Server 的未来版本中删除。请避免在新的开发工作中使用这些功能，并考虑修改当前使用这些功能的应用程序。改用 SCHEMA 代替 USER 作为级别 0 类型。对于 TYPE，请使用 SCHEMA 作为级别 0 类型，使用 TYPE 作为级别 1 类型。</p>
<p><code>[ @level0name = ] { &#39;level0_object_name&#39; }</code></p>
<p>所指定的级别 0 对象类型的名称。level0_object_name 的数据类型为 sysname，默认值为 NULL。</p>
<p><code>[ @level1type = ] { &#39;level1_object_type&#39; }</code></p>
<p>级别 1 对象的类型。level1_object_type 的数据类型为 varchar(128)，默认值为 NULL。有效的输入包括：AGGREGATE、DEFAULT、FUNCTION、LOGICAL FILE NAME、PROCEDURE、QUEUE、RULE、SYNONYM、TABLE、TYPE、VIEW、XML SCHEMA COLLECTION 和 NULL。</p>
<p><code>[ @level1name = ] { &#39;level1_object_name&#39; }</code></p>
<p>所指定的级别 1 对象类型的名称。level1_object_name 的数据类型为 sysname，默认值为 NULL。</p>
<p><code>[ @level2type = ] { &#39;level2_object_type&#39; }</code></p>
<p>级别 2 对象的类型。level2_object_type 的数据类型为 varchar(128)，默认值为 NULL。有效的输入包括：COLUMN、CONSTRAINT、EVENT NOTIFICATION、INDEX、PARAMETER、TRIGGER 和 NULL。</p>
<p><code>[ @level2name = ] { &#39;level2_object_name&#39; }</code></p>
<p>所指定的级别 2 对象类型的名称。level2_object_name 的数据类型为 sysname，默认值为 NULL。</p>
<h3 id="返回代码值"><a href="#返回代码值" class="headerlink" title="返回代码值"></a>返回代码值</h3><p>0（成功）或 1（失败）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">EXEC sys.sp_addextendedproperty @name=N&apos;MS_Description&apos;, @value=N&apos;0:取消,1:已到,2:未到,3:预订违约&apos; ,@level0type=N&apos;SCHEMA&apos;, @level0name=N&apos;dbo&apos;, @level1type=N&apos;TABLE&apos;, @level1name=N&apos;Tab_Passenger&apos;, @level2type=N&apos;COLUMN&apos;, @level2name=N&apos;PassengerState&apos;</div><div class="line">-表及字段描述信息处理示例</div><div class="line"></div><div class="line">--创建表</div><div class="line">create table 表(a1 varchar(10),a2 char(2))</div><div class="line"></div><div class="line">--为表添加描述信息</div><div class="line">EXECUTE sp_addextendedproperty N&apos;MS_Description&apos;, &apos;人员信息表&apos;, N&apos;user&apos;, N&apos;dbo&apos;, N&apos;table&apos;, N&apos;表&apos;, NULL, NULL</div><div class="line"></div><div class="line">--为字段a1添加描述信息</div><div class="line">EXECUTE sp_addextendedproperty N&apos;MS_Description&apos;, &apos;姓名&apos;, N&apos;user&apos;, N&apos;dbo&apos;, N&apos;table&apos;, N&apos;表&apos;, N&apos;column&apos;, N&apos;a1&apos;</div><div class="line"></div><div class="line">--为字段a2添加描述信息</div><div class="line">EXECUTE sp_addextendedproperty N&apos;MS_Description&apos;, &apos;性别&apos;, N&apos;user&apos;, N&apos;dbo&apos;, N&apos;table&apos;, N&apos;表&apos;, N&apos;column&apos;, N&apos;a2&apos;</div><div class="line"></div><div class="line">--更新表中列a1的描述属性：</div><div class="line">EXEC sp_updateextendedproperty &apos;MS_Description&apos;,&apos;字段1&apos;,&apos;user&apos;,dbo,&apos;table&apos;,&apos;表&apos;,&apos;column&apos;,a1</div><div class="line"></div><div class="line">--删除表中列a1的描述属性：</div><div class="line">EXEC sp_dropextendedproperty &apos;MS_Description&apos;,&apos;user&apos;,dbo,&apos;table&apos;,&apos;表&apos;,&apos;column&apos;,a1</div><div class="line"></div><div class="line">--删除测试</div><div class="line">drop table 表</div></pre></td></tr></table></figure>
<p>转自:<a href="http://blog.csdn.net/zanychou/article/details/7403336" target="_blank" rel="external">http://blog.csdn.net/zanychou/article/details/7403336</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;语法&quot;&gt;&lt;a href=&quot;#语法&quot; class=&quot;headerlink&quot; title=&quot;语法&quot;&gt;&lt;/a&gt;语法&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sp_addextendedproperty&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    [ @name = ] &amp;#123; &lt;span class=&quot;string&quot;&gt;&#39;property_name&#39;&lt;/span&gt; &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    [ , [ @value = ] &amp;#123; &lt;span class=&quot;string&quot;&gt;&#39;value&#39;&lt;/span&gt; &amp;#125; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        [ , [ @level0type = ] &amp;#123; &lt;span class=&quot;string&quot;&gt;&#39;level0_object_type&#39;&lt;/span&gt; &amp;#125; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    , [ @level0name = ] &amp;#123; &lt;span class=&quot;string&quot;&gt;&#39;level0_object_name&#39;&lt;/span&gt; &amp;#125; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                [ , [ @level1type = ] &amp;#123; &lt;span class=&quot;string&quot;&gt;&#39;level1_object_type&#39;&lt;/span&gt; &amp;#125; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                                    , [ @level1name = ] &amp;#123; &lt;span class=&quot;string&quot;&gt;&#39;level1_object_name&#39;&lt;/span&gt; &amp;#125; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        [ , [ @level2type = ] &amp;#123; &lt;span class=&quot;string&quot;&gt;&#39;level2_object_type&#39;&lt;/span&gt; &amp;#125; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                                                    , [ @level2name = ] &amp;#123; &lt;span class=&quot;string&quot;&gt;&#39;level2_object_name&#39;&lt;/span&gt; &amp;#125; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        ] &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                ]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        ] &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ]&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="码路刺客" scheme="http://c-xuan.com/categories/%E7%A0%81%E8%B7%AF%E5%88%BA%E5%AE%A2/"/>
    
    
      <category term="转载" scheme="http://c-xuan.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="SQL Server" scheme="http://c-xuan.com/tags/SQL-Server/"/>
    
      <category term="数据库" scheme="http://c-xuan.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>从事技术，坚持写博客的好处？</title>
    <link href="http://c-xuan.com/2016/12/01/BenifitOfWritingBlog/"/>
    <id>http://c-xuan.com/2016/12/01/BenifitOfWritingBlog/</id>
    <published>2016-12-01T15:38:04.000Z</published>
    <updated>2016-12-01T15:55:20.677Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><ul>
<li>1.写博客的担心</li>
</ul>
<p>今天来谈谈,写博客对我的益处,说起写博客,其实我写博客的时间不长,也就10来个月时间;之前工作的时候,看到同事每天晚上写博客,当时觉得很奇怪,就觉得写这个东西,非常浪费时间,自己知道的好的技术或者是好的技术解决思路,如果分享出去,不是被别人学去了吗等等一系列问题.</p>
<ul>
<li>2.自己的经历</li>
</ul>
<p>等写了一段时间博客时,慢慢发现,其实之前的担心的完全没必要,你会的东西,精通的知识,即使分享出去,别人也未必能学的会,即时要学会学透,也是要花费时间和精力的,所以这种担心我们大可不必.人还是要有点分享和谦虚精神的,仅仅是这种只进不出的思想,我想你也很难有的发展!那么写博客10来个时间里,通过写博客给自己带来了哪些方面的提升呢?下面我就结合自己经力来给大家做个详细的总结. </p>
<a id="more"></a>
<h2 id="写博客的好处"><a href="#写博客的好处" class="headerlink" title="写博客的好处"></a>写博客的好处</h2><p>下面我就大家来做一个详细的分析.以思维导图的形式给大家列举一下,写博客这10来个月时间里,给我带来了哪些变化.</p>
<ul>
<li>1.没写博客的原因</li>
</ul>
<center><img src="/img/posts/BenifitOfWritingBlog-1.jpg"></center>

<p>下面也对当初写博客时担心,给大家一一分析.</p>
<ul>
<li>1.1 浪费时间</li>
</ul>
<p>如果你刚开始写博客,你可能会有这样的担心,觉得他很浪费时间,需要花时间去思考,去总结,去整理成章,这一系列过程都是要花费很多时间.当你渐渐养成写博客习惯时,就会慢慢意识到这是花费时间,而不是所谓的浪费时间!</p>
<ul>
<li>1.2. 工作太忙,没时间去写</li>
</ul>
<p>这是最无能为力的，有热情的程序员是不会总以这个理由推脱的。习惯成自然!</p>
<ul>
<li>1.3.怕自己的技术被别人学去</li>
</ul>
<p>这个完全没必要去担心,你会的别人也未必会,即使你分享出去,别人也未必学的会!人还是要有点分享精神的!</p>
<ul>
<li>1.4.懒于思考,疏于总结</li>
</ul>
<p>这个是最致命的,事情的成败在于此!吃一堑长一智,能力都是在思考和总结中得带长足进步的!</p>
<ul>
<li>1.5.想写,但不知道该写些什么?</li>
</ul>
<p>这其实是一种思考总结能力的欠缺。大胆迈出第一步,慢慢来,就把它当做每天发微信动态一样,把它变成一种常态。</p>
<ul>
<li>1.6.技术含量低,写出来没意义</li>
</ul>
<p>写博客不一定要写出多么牛逼的文章,只要是自己所悟所思所想就行,记录自己知识点滴的不足,例如,今天我一个变量用错了,我也可以把它写出来,自己的博客无关他人怎么看.事实上，除了你的挚友和亲人，没有人会那么在意你，这些担心都是庸人自扰。知识是自己的事,我总结我进步!</p>
<ul>
<li>2.最初的想法</li>
</ul>
<p>我为什么要写博客呢?其实当时的想法非常简单,仅仅是想把自己当天工作中学到的知识及解决问题的思路,整理记录下来,方便自己日后工作用到的时候能够翻翻,快速的找到.原因就这么简单.</p>
<ul>
<li>3.最后的好处</li>
</ul>
<center><img src="/img/posts/BenifitOfWritingBlog-2.jpg"></center>

<p>那么问题来了,写博客有什么好处呢,能让一个人坚持这么久?下面我就给大家一一做个解释.</p>
<ul>
<li>3.1.加深对技术点的理解</li>
</ul>
<p>每天写博客,可以加深对技术点的理解,假如工作中,对某个技术点运用的不熟,当你通过博客的形式写出来,这个过程中,遇到不懂的知识点,你就会查阅相关的资料,弄明白他.</p>
<ul>
<li>3.2.自己日后用到</li>
</ul>
<p>就相当于笔记本一样,把重要的东西都记录下来,等哪天在遇到同样的问题,我们可以翻阅他.确实偶尔会用到，但频率不会那么高；因为你遇到过一次，解决了之后记忆能保存很长时间，除非又过了一段时间后又遇到这个问题；或者问题解决方案比较复杂，不是简单一次就能记住的。</p>
<ul>
<li>3.3.获得阅读量,得到认可</li>
</ul>
<p>当一篇文章,获得更多人阅读时或者是被各大网站转发时,往往就会有一种喜悦感,一种得到认可的感觉,写文章的动力就随之而来了.</p>
<ul>
<li>3.4.成就感</li>
</ul>
<p>当你的文章被大量阅读时,是不是很有成就感?当别人对你的文章称赞的时,是不是有某种成就感,继续写下去的<br>冲动?当你的文章被大量转发,被收录,是不是也有成就感?</p>
<ul>
<li>3.5.一点小虚荣</li>
</ul>
<p>当你遇到一个问题，搜索结果是自己的博客文章；当你的同事遇到问题，搜索结果是你的文章；当你的名称出现在全球最大中文IT社区的博客首页上；每个月博客网给你送书,是否感到一种无比的欣喜?你是不是有那么一点小小的虚荣心和自豪感呢？</p>
<ul>
<li>3.6.提高自己思维能力</li>
</ul>
<p>博客写多了,你的逻辑思维是不是很强了;解决问题的思路更加清晰了;技术文档是不是轻易的就写出来了.可以时刻保持思考的习惯,不至于思想比较僵化.可以提高解决问题的思维角度,有利于我们作为程序员的长远发展!</p>
<ul>
<li>3.7.提高自己的写作水平</li>
</ul>
<p>这个，确实有一定的帮助；但对于程序方面的文档来说，文字是一方面，画图是另一方面（思维导图，关系图，架构图之类的）。不过目前也就普通的文档还行，招投标文档感觉写起来还是有难度。</p>
<ul>
<li>3.8.为自己的人生留下只言片语</li>
</ul>
<p>就像日志一样,人生总有回味的地方吧.你不能说你做了10来年的技术,10年来的技术积累在哪,总要留下点只言片语.人生需要回味!<br>这同时也是是一个知识积累的过程，但更重的是为自己的人生留下一点痕迹。你也可以把它当成写日志，只不过是程序员体的语言,在IT圈子里，如果有人问起我关于某个技术，文字是不容易撒谎的。翻阅自己以前写的博客，很容易找到自己的成长轨迹.</p>
<ul>
<li>3.9.提高自己的知名度</li>
</ul>
<p>现在自己只是个无名的程序员,对这个倒没啥感觉</p>
<ul>
<li>3.10.养成有始有终的好习惯</li>
</ul>
<p>每天写日志,私密的东西,始终是自己一个人看,对我而言很难坚持下去,;而技术就不一样了,一篇博客人人都可以去看,好就点个赞,就评论一下,分享给大家!</p>
<ul>
<li>3.11.结交志同道合的朋友</li>
</ul>
<p>这个可以有,看你文章的人,大部分都是跟你从事同一领域的人,交流多了,进步也快了!</p>
<ul>
<li>3.12.碎片化学习</li>
</ul>
<p>你是否有这样的困惑？通过网络确实能够学习到很多东西，但从网上学到的东西大都是零零散散的，不系统，好像学了很多东西，又好像什么都没学到，或者学过之后又忘了，这该怎么办？有个博客就很简单了，我们可以把学习的知识按自己的结构整理记录下来，方便日后查阅巩固。</p>
<ul>
<li>3.13.使自己成为技术大牛</li>
</ul>
<p>这个真的可以做到,写博客,在相同的时间里, 带给自己能力的提升要比别人要快很多,不过这也是个循序渐进的过程,非一日之寒!</p>
<ul>
<li>3.14.分享与学习</li>
</ul>
<p>什么意思呢？也就是随着你的分享越来越多， 可能会出现一批技术的追随者、崇拜者。当然，我的技术还远远没达到那个层次，这也就是为什么是分享与学习；也就是说，你分享的内容如果有说的不对的地方，考虑的不周的地方，角度不全面的地方，热心的小伙伴会帮你指出来！这样就通过你的分享，产生沟通与交流的介质，从而学习更多的知识。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总之写博客,对一个技术人员来讲,益处很大,最自己能力,技能,知识的提升都有很大的帮助,在这里大家要记住写博客是非常花费时间的,注意这里说的是花费时间而不是浪费时间,我觉得花费时间去写博客是值得的!</p>
<p>最后希望那些想想写博客而没有坚持写下去的人,继续坚持写下去,坚持了就有收获.而那些没有写博客的人.给自己找个自己写博客的理由不需要太复杂太充分，正如我的简简单单就可以.</p>
<p>坚持下去!</p>
<p>转自:<a href="http://www.toutiao.com/a6308960007249559810/" target="_blank" rel="external">http://www.toutiao.com/a6308960007249559810/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;1.写博客的担心&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今天来谈谈,写博客对我的益处,说起写博客,其实我写博客的时间不长,也就10来个月时间;之前工作的时候,看到同事每天晚上写博客,当时觉得很奇怪,就觉得写这个东西,非常浪费时间,自己知道的好的技术或者是好的技术解决思路,如果分享出去,不是被别人学去了吗等等一系列问题.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2.自己的经历&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;等写了一段时间博客时,慢慢发现,其实之前的担心的完全没必要,你会的东西,精通的知识,即使分享出去,别人也未必能学的会,即时要学会学透,也是要花费时间和精力的,所以这种担心我们大可不必.人还是要有点分享和谦虚精神的,仅仅是这种只进不出的思想,我想你也很难有的发展!那么写博客10来个时间里,通过写博客给自己带来了哪些方面的提升呢?下面我就结合自己经力来给大家做个详细的总结. &lt;/p&gt;
    
    </summary>
    
      <category term="随笔感悟" scheme="http://c-xuan.com/categories/%E9%9A%8F%E7%AC%94%E6%84%9F%E6%82%9F/"/>
    
    
      <category term="转载" scheme="http://c-xuan.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="知识管理" scheme="http://c-xuan.com/tags/%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript :零基础打造自己的类库</title>
    <link href="http://c-xuan.com/2016/10/29/JS-BuildBaseClassLib/"/>
    <id>http://c-xuan.com/2016/10/29/JS-BuildBaseClassLib/</id>
    <published>2016-10-29T05:31:39.000Z</published>
    <updated>2016-10-29T14:22:45.059Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在之前的章节中，我们已经不依赖jQuery，单纯地用JavaScript封装了很多方法，这个时候，你一定会想，这些经常使用的方法能不能单独整理成一个js文件呢？</p>
<p>当然可以，封装本来就是干这个用的。放在一个单独js文件里固然不错，其实我们也可以单独整一个js类库，一方面可以锻炼一下自己封装方法的能力，另一方面，也可以将自己学到的东西做一个整理。</p>
<p>出于这个目的，本文将介绍如何封装一个简单的js类库。（当然，只是开一个头，熟悉一下js基础而已。实际使用的话我感觉完全没有必要，因为jQuery已经很强大了，直接使用第三方的就可以）</p>
<a id="more"></a>
<h3 id="总体设计"><a href="#总体设计" class="headerlink" title="总体设计"></a>总体设计</h3><p>所谓的js库，其实也就是一个js文件，我思前想后，决定取个名字叫“miniQuery”,是不是山寨的味道十足呢？哈，请不要在意这些小细节。</p>
<p>大概的设计如下：</p>
<ul>
<li>1.扩展方法的兼容（主要写一些兼容的扩展方法，比如 forEach 方法等）</li>
<li>2.工具包定义 （就是之前封装的utils.js，我们的miniQuery需要依赖这个工具包，为了方便，就干脆写在一个文件里面了。）</li>
<li>3.miniQuery定义</li>
</ul>
<h3 id="扩展方法的兼容"><a href="#扩展方法的兼容" class="headerlink" title="扩展方法的兼容"></a>扩展方法的兼容</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ------------------------ 基本扩展, 字符串,数组等-------------------------------//</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">extend_base</span> (<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(!<span class="built_in">String</span>.prototype.format )&#123;</div><div class="line">        <span class="built_in">String</span>.prototype.format = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> e = <span class="built_in">arguments</span>;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.replace(<span class="regexp">/&#123;(\d+)&#125;/g</span>,<span class="function"><span class="keyword">function</span>(<span class="params">t, n</span>) </span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">typeof</span> e[n] != <span class="string">"undefined"</span> ? e[n] : t</div><div class="line">            &#125;)</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (!<span class="built_in">Array</span>.prototype.forEach &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">Array</span>.prototype.forEach !== <span class="string">"function"</span>) &#123;</div><div class="line">        <span class="built_in">Array</span>.prototype.forEach = <span class="function"><span class="keyword">function</span>(<span class="params">callback, context</span>) </span>&#123;</div><div class="line">           <span class="comment">// 遍历数组,在每一项上调用回调函数，这里使用原生方法验证数组。</span></div><div class="line">           <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.toString.call(<span class="keyword">this</span>) === <span class="string">"[object Array]"</span>) &#123;</div><div class="line">               <span class="keyword">var</span> i,len;</div><div class="line">               <span class="comment">//遍历该数组所有的元素</span></div><div class="line">               <span class="keyword">for</span> (i = <span class="number">0</span>, len = <span class="keyword">this</span>.length; i &lt; len; i++) &#123;</div><div class="line">                   <span class="keyword">if</span> (<span class="keyword">typeof</span> callback === <span class="string">"function"</span>  &amp;&amp; <span class="built_in">Object</span>.prototype.hasOwnProperty.call(<span class="keyword">this</span>, i)) &#123;</div><div class="line">                       <span class="keyword">if</span> (callback.call(context, <span class="keyword">this</span>[i], i, <span class="keyword">this</span>) === <span class="literal">false</span>) &#123;</div><div class="line">                           <span class="keyword">break</span>; <span class="comment">// or return;</span></div><div class="line">                       &#125;</div><div class="line">                   &#125;</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span>(!<span class="built_in">String</span>.prototype.format )&#123;</div><div class="line">        <span class="built_in">Array</span>.isArray = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">            <span class="keyword">return</span> obj.constructor.toString().indexOf(<span class="string">'Array'</span>) != <span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">//待补充 ...</span></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们定义一个extend_base方法，里面主要对js内置对象的api做了一些兼容性补充，目前还不完善，只有寥寥几个方法。当然，如果你不考虑IE678的话，那么基本上不需要这一部分了。</p>
<p>定义完成后立即调用。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">extend_base();</div></pre></td></tr></table></figure>
<h3 id="工具包整合"><a href="#工具包整合" class="headerlink" title="工具包整合"></a>工具包整合</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ------------------------ 工具包---------------------------------//</span></div><div class="line"><span class="keyword">var</span> utils = &#123;</div><div class="line">            <span class="attr">center</span> : <span class="function"><span class="keyword">function</span>(<span class="params">dom</span>)</span>&#123;</div><div class="line">                dom.style.position = <span class="string">'absolute'</span>;</div><div class="line">                dom.style.top = <span class="string">'50%'</span>;</div><div class="line">                dom.style.left = <span class="string">'50%'</span>;</div><div class="line">                dom.style[<span class="string">'margin-top'</span>] = - dom.offsetHeight / <span class="number">2</span> + <span class="string">'px'</span>;</div><div class="line">                dom.style[<span class="string">'margin-left'</span>] = - dom.offsetWidth / <span class="number">2</span> + <span class="string">'px'</span>;</div><div class="line">            &#125;,</div><div class="line">        </div><div class="line">            <span class="comment">/** dom相关 * */</span></div><div class="line">            isDom : ( <span class="keyword">typeof</span> HTMLElement === <span class="string">'object'</span> ) ?</div><div class="line">                <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">                    <span class="keyword">return</span> obj <span class="keyword">instanceof</span> HTMLElement;</div><div class="line">                &#125; :</div><div class="line">                <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">                    <span class="keyword">return</span> obj &amp;&amp; <span class="keyword">typeof</span> obj === <span class="string">'object'</span> &amp;&amp; obj.nodeType === <span class="number">1</span> &amp;&amp; <span class="keyword">typeof</span> obj.nodeName === <span class="string">'string'</span>;</div><div class="line">                &#125; ,</div><div class="line">             </div><div class="line">            <span class="comment">/** 数组相关 * */</span></div><div class="line">            isArray : <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">                <span class="keyword">return</span> obj.constructor.toString().indexOf(<span class="string">'Array'</span>) != <span class="number">-1</span>;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<ul>
<li>center ：控制dom元素相对于父盒子居中</li>
<li>isDom ：判断是否为dom元素</li>
<li>isArray ：判断是否为数组</li>
</ul>
<h3 id="miniQuery总体设计"><a href="#miniQuery总体设计" class="headerlink" title="miniQuery总体设计"></a>miniQuery总体设计</h3><p>终于到miniQuery了，在写代码之前，先简单说一下自执行函数。<br>可能你在很多书上，或者下载的源码里面，经常会看到这样的代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    </div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<p>这样子你或许觉得很奇怪，没事，我们一起来分析。</p>
<p>在js中，你如果把函数看作一个数据类型，和其他语言中的 Integer， Float ， String等等一样，就会理解很多事情了。当然，其实在js中，函数本身就是一个对象，不然的话就不会出现call方法了。因为只有对象才可以调用方法嘛。不过，大部分情况下，你把函数理解为数据类型就可以了。</p>
<p>匿名函数：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>不过，因为js语法的关系，这样子是不能执行的，你需要用一对圆括号来包一下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(  </div><div class="line">    <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    alert(<span class="string">"你好！"</span>);</div><div class="line">    &#125;()  </div><div class="line">) ;</div></pre></td></tr></table></figure>
<p>这样就可以了，下面是另一种写法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(  </div><div class="line">    <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    alert(<span class="string">"你好！"</span>);</div><div class="line">    &#125;  </div><div class="line">)();</div></pre></td></tr></table></figure>
<p>这样也可以，这种写法会更多一点。它的意思就是说，我不关心你这个函数叫什么名字，反正你在被定义的时候就要给我执行，这就是所谓的自执行函数。</p>
<p>好，问题来了，怎么加参数呢？</p>
<p>以前我们习惯于这么写：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params">str</span>)</span>&#123;</div><div class="line">    alert(str);</div><div class="line"> &#125; </div><div class="line"></div><div class="line">say(<span class="string">"你好！"</span>);</div></pre></td></tr></table></figure>
<p>依葫芦画瓢</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(  </div><div class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">str</span>)</span>&#123;</div><div class="line">       alert(str);</div><div class="line">    &#125;  </div><div class="line">)(<span class="string">"你好！"</span>);</div></pre></td></tr></table></figure>
<p>OK了。</p>
<p>是不是一样的意思呢？</p>
<p>没啥区别，以前怎么做，现在还怎么做，无非就是一个函数传参的事情罢了。</p>
<p>我们将圆括号的位置调整一下</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">( <span class="function"><span class="keyword">function</span>(<span class="params">str</span>)</span>&#123;</div><div class="line">    alert(str);</div><div class="line">&#125; )(<span class="string">"你好！"</span>);</div></pre></td></tr></table></figure>
<p>这样差不多就是最终的版本了，我记得初学js的时候，看这种代码很吃力，好像在看外星语言一样，后来看多了也就习惯了。</p>
<p>自执行函数就是这么一回事，没什么大不了的。</p>
<p>有了上面的解释，以后如果你再遇到这种写法，就 so easy 啦。</p>
<p>所以，不要再恐惧了，它就是这么回事，没什么大不了的，我这么后知后觉的人都能写，你也可以。我花了半年的时间才看明白，我相信你现在只需要几分钟。我的意思是，如果你之前不知道这些的话。</p>
<p>那么，什么时候用自执行函数呢？</p>
<p><strong>当你觉得某个函数只需要执行一次，而且不需要在其他地方调用的时候，就用。</strong></p>
<p>你可能会问了，我干嘛要这样写啊，反正就执行一次，我直接把实现代码写在外面不就行了？</p>
<p><strong>原因很简单，因为那样的话，你定义的变量就会是全局的，而一般来说我们设计的原则是尽量不要使用全局变量。</strong></p>
<p>而采用这种方式，我们就形成了一个匿名函数，函数的定义又会形成闭包，所以比较安全和简洁。</p>
<p>你可能还会觉得疑惑，我干嘛要这些写，如果我非要给函数取一个名字，然后马上调用呢？</p>
<p>额，其实我个人认为这也是没有问题的，但是你得费一番心思去给函数取名字，取 a,b,c,d 这样的名字肯定是不好的。那么，我私以为，还不如干脆就用匿名函数算了，省得麻烦。</p>
<p>如果这部分知识你以前就不知道，那么我建议你把这篇文章多看几遍，反正就是那么回事，没什么大不了的。我当初就是走了很多弯路，也没有人教我，只有靠自己在那瞎摸索和各种百度，当然，现在想想很简单了。</p>
<p>我们的miniQuery的定义就放在这个自执行函数里面，这样一来，只要有人调用了这个js文件，就能调用miniQuery函数了。</p>
<p>当然，你直接放在外面其实也没事，因为反正就一个方法，而且这个方法本来就是要暴露出去的。</p>
<p>这边为了说明自执行函数，就硬加进来了。</p>
<p>我们把miniQuery的定义丢进去。</p>
<p>比如，像这样子的：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">   </div><div class="line">   <span class="keyword">var</span> miniQuery = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    alert(<span class="string">'Hello miniQuery!'</span>);</div><div class="line">   &#125;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<p>我们尝试在外面调用：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">miniQuery();</div></pre></td></tr></table></figure>
<p>很遗憾，调不到。</p>
<p>我们再回顾一下代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">   </div><div class="line">   <span class="keyword">var</span> miniQuery = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        alert(<span class="string">'Hello miniQuery!'</span>);</div><div class="line">   &#125;</div><div class="line">   </div><div class="line">&#125;)();</div><div class="line"></div><div class="line">miniQuery();</div></pre></td></tr></table></figure>
<p>原来，miniQuery是存在于一个闭包中的，它可以访问到父级作用域的变量，但是反过来就不行，除非函数自己用 return 的方式将私有数据暴露出去。这些在之前的关于闭包的文章里面已经解释过了，这里不再赘述。</p>
<p>解决方法有很多，比如，最简单的，我们直接把var去掉，这样就会发生一次变量提升，miniQuery被升级为全局变量，挂在window对象上面。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">   </div><div class="line">   miniQuery = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    alert(<span class="string">'Hello miniQuery!'</span>);</div><div class="line">   &#125;</div><div class="line">   </div><div class="line">&#125;)();</div><div class="line"></div><div class="line">miniQuery();</div></pre></td></tr></table></figure>
<p>成了，简单明了，干干净净。</p>
<p>虽然我觉得很有道理，但是我看别人的代码，他们封装自己的js库的时候，几乎没有这样做的，因此我们也采用一种大众的做法。</p>
<p>即，我们把window作为参数传进去，然后手动将miniQuery挂上去。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">win</span>)</span>&#123;</div><div class="line">   </div><div class="line">   <span class="keyword">var</span> miniQuery = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    alert(<span class="string">'Hello miniQuery!'</span>);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   win.miniQuery = miniQuery;</div><div class="line">   </div><div class="line">&#125;)(<span class="built_in">window</span>);</div><div class="line"></div><div class="line">miniQuery();</div></pre></td></tr></table></figure>
<p>是不是也可以呢？</p>
<p>如果你觉得每次写miniQuery太麻烦，那么我们可以给它换一个名字，比如 $</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">win</span>)</span>&#123;</div><div class="line">   </div><div class="line">   <span class="keyword">var</span> miniQuery = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    alert(<span class="string">'Hello miniQuery!'</span>);</div><div class="line">   &#125;</div><div class="line">   </div><div class="line">   </div><div class="line">   win.$ = miniQuery;</div><div class="line">   </div><div class="line">&#125;)(<span class="built_in">window</span>);</div><div class="line"></div><div class="line">$();</div></pre></td></tr></table></figure>
<p>这样就差不多了。</p>
<h3 id="miniQuery-包裹对象"><a href="#miniQuery-包裹对象" class="headerlink" title="miniQuery 包裹对象"></a>miniQuery 包裹对象</h3><p>我们先弄来一个测试用的网页：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.wrap</span> &#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">80px</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">80px</span>;</div><div class="line">    <span class="attribute">background</span>:darkslateblue;</div><div class="line">    <span class="attribute">margin</span>:<span class="number">20px</span>;</div><div class="line">    <span class="attribute">border-radius</span>: <span class="number">2px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'boxes'</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'box1'</span> <span class="attr">class</span>=<span class="string">'wrap'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'box2'</span> <span class="attr">class</span>=<span class="string">'wrap'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'box3'</span> <span class="attr">class</span>=<span class="string">'wrap'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<p>举一个例子，现在我们要获取id为box1的盒子，并把它的背景色改为红色。</p>
<p>用js代码，我们会这样做：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> box2 = <span class="built_in">document</span>.getElementById(<span class="string">'box2'</span>);</div><div class="line">box2.style.backgroundColor = <span class="string">'red'</span>;</div></pre></td></tr></table></figure>
<p>思路很清晰，分为简单的两步：</p>
<p>第一步：获取dom对象。<br>第二部：设置其背景色为红色。</p>
<p>同样的，我们的 miniQuery 也要这么做，首先得获取对象，然后进行操作。就好像你做饭，首先得有米面吧。所谓巧妇难为，无米之炊。</p>
<p>于是，我们有了下面的代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> miniQuery = <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>)</span>&#123;</div><div class="line">   <span class="keyword">var</span> miniQuery = <span class="built_in">document</span>.getElementById(selector);</div><div class="line">   <span class="built_in">console</span>.log(miniQuery);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>selector 代表选择器，它只是一个参数名字，参数列表的名称是可以自己定义的。你写 aaa , bbb , ccc 都没问题，只要你愿意的话。</p>
<p>我以前经常看别人写的代码，参数里面有callback，现在我知道是回调函数的意思。可是我以前不知道，然后就觉得很困惑，作为一个英语比日语还差的js玩家，我感到很那个啥。</p>
<p>其实无所谓，只是一个名字而已，你写什么都行，只要符合标识符的命名规范就成。</p>
<p>总有人觉得，看到参数里边写了context（上下文），callback（回调函数）这样的词汇，就觉得很困惑。</p>
<p>不要困惑啦，不要再惊恐啦，它就是一个名称罢了！</p>
<p>。。。</p>
<p>额，扯远了，继续回来。</p>
<p>我们在外面调用miniQuery ~</p>
<p>window 上面挂的是 $ , 其实就是 miniQuery</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'box1'</span>);</div></pre></td></tr></table></figure>
<p>接下里，我们给dom元素变更背景色为红色。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> miniQuery = <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>)</span>&#123;</div><div class="line">   <span class="keyword">var</span> miniQuery = <span class="built_in">document</span>.getElementById(selector);</div><div class="line">   miniQuery.style.backgroundColor = <span class="string">'red'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>效果确实出来了。</p>
<p>可是呢，如果用户过几天又来个需求，说我要把box1的宽度变为之前的两倍，你怎么办？</p>
<p>总不可能去修改源码吧！</p>
<p>这时候，我们就可以考虑能不能通过一个什么办法，我先用miniQuery把你传进来的东西包装成dom元素，保存起来返回给你，同时再给你返回一大堆方法，比如改变高度啊，添加背景色啊等等。那么，操作的就是之前保存的元素了。也就是你一开始希望操作的元素。</p>
<p>这是一个很好的想法，我们经过代码的重写，最终产生了这样的一个miniQuery函数：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> miniQuery = <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> miniQuery = <span class="built_in">document</span>.getElementById(selector);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">obj</span> : miniQuery , <span class="comment">//将dom元素保存起来，再返回给你</span></div><div class="line">        </div><div class="line">        <span class="comment">// ------------------------ css 相关 ------------------------//</span></div><div class="line">        backgroundColor : <span class="function"><span class="keyword">function</span>(<span class="params">color</span>)</span>&#123;</div><div class="line">            <span class="keyword">this</span>.obj.style.backgroundColor = color;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">   </div><div class="line">   win.$ = miniQuery;</div><div class="line">   </div><div class="line">&#125;)(<span class="built_in">window</span>);</div></pre></td></tr></table></figure>
<p>我们再调用一次，看看这回它给我们返回的是什么东东？</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> $box = $(<span class="string">'box1'</span>);</div><div class="line"><span class="built_in">console</span>.log($box);</div></pre></td></tr></table></figure>
<center><img src="/img/posts/JS-BuildBaseClassLib-1.gif"></center>

<p>可见，它给我们返回的是一个json对象，里面有 obj 变量和 backgroundColor 函数。这样的好处就是极大的扩展了我们的miniQuery，你给我一个选择器，我就包起来，然后不仅把它返回给你，而且还给你各种api方法！</p>
<p>于是我们就可以直接调用 backgroundColor 函数了。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> $box = $(<span class="string">'box1'</span>);</div><div class="line">$box.backgroundColor(<span class="string">'red'</span>);</div></pre></td></tr></table></figure>
<center><img src="/img/posts/JS-BuildBaseClassLib-2.gif"></center>

<p>成了。</p>
<p>我们现在返回的，不是一个单纯的dom元素，dom元素只是它的一部分。可以说，我们返回给用户的是一个miniQuery对象！</p>
<p>经过改进，我已经陆陆续续地给miniQuery添加了很多方法，大部分是模拟的jQuery：</p>
<center><img src="/img/posts/JS-BuildBaseClassLib-3.gif"></center>

<p>顺便弄了两个小型的组件，一个是按钮，另一个是简单的数据列表。</p>
<p>按钮使用：</p>
<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;link rel=<span class="string">"stylesheet"</span> type=<span class="string">"text/css"</span> href=<span class="string">"css/mui.css"</span>/&gt;</div><div class="line">&lt;<span class="built-in">div</span> class=<span class="string">'box'</span>&gt;&lt;/<span class="built-in">div</span>&gt;</div><div class="line">var <span class="symbol">$</span>box = <span class="symbol">$</span>(<span class="string">'.box'</span>).<span class="keyword">eq</span>(<span class="number">0</span>);</div><div class="line"><span class="meta"><span class="meta-keyword">$box</span>.linkbutton();</span></div></pre></td></tr></table></figure>
<p>按钮的样式就出来了，然后我们来设置按钮的属性。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> $box = $(<span class="string">'.box'</span>).eq(<span class="number">0</span>);</div><div class="line">$box.linkbutton(&#123;</div><div class="line">    <span class="attr">text</span> : <span class="string">'保存'</span> ,</div><div class="line">    <span class="attr">click</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        alert(<span class="string">'保存成功！'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>按钮的大小也自动变大了。</p>
<p>对应的css：</p>
<p>mui.css</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.linkbutton</span> &#123;</div><div class="line">    <span class="attribute">padding</span>: .<span class="number">4em</span> .<span class="number">9em</span>; <span class="comment">/*em的好处就是随着父元素的字体大小而变化，当该元素的字体变化时，会自适应*/</span></div><div class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">rgba</span>(0,0,0,.1);</div><div class="line">    <span class="attribute">background-color</span>: <span class="number">#ac0</span>;</div><div class="line">    <span class="attribute">border-radius</span>: .<span class="number">2em</span>;</div><div class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">5px</span> <span class="built_in">rgba</span>(0,0,0,.5);</div><div class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</div><div class="line">    <span class="attribute">text-shadow</span>: <span class="number">0</span> -.<span class="number">06em</span> .<span class="number">24em</span> <span class="built_in">rgba</span>(0,0,0,.5); <span class="comment">/*将阴影设置为半透明，就无所谓底色了，都能很好地适应*/</span></div><div class="line">    <span class="attribute">font-size</span>: <span class="number">130%</span>; </div><div class="line">    <span class="attribute">line-height</span>: <span class="number">1.5</span>; <span class="comment">/*行高是字号的1.5倍*/</span></div><div class="line">    <span class="attribute">display</span>:inline-block;</div><div class="line">    <span class="attribute">cursor</span>:pointer;</div><div class="line">    <span class="attribute">font-family</span>: <span class="string">"微软雅黑"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>数据列表简单演示：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"css/mui.css"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/miniQuery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">'btn0'</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        </div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'grid0'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        $(<span class="string">'#btn0'</span>).linkbutton(&#123;</div><div class="line">            <span class="attr">text</span> : <span class="string">'测试'</span> ,</div><div class="line">            <span class="attr">click</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="keyword">if</span>(grid0.getSize() &lt; <span class="number">1</span>)&#123;</div><div class="line">                    alert(<span class="string">'请选择一条数据！'</span>);</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line">                alert(<span class="string">'您选择的是'</span> + <span class="built_in">JSON</span>.stringify(grid0.getSelected()));</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">var</span> grid0 = mui.get(<span class="string">'#grid0'</span>).dataGrid(&#123;</div><div class="line">            <span class="attr">header</span> : [</div><div class="line">                &#123;<span class="attr">name</span>:<span class="string">'ID'</span> ,  <span class="attr">width</span>:<span class="number">10</span> , <span class="attr">type</span> : <span class="string">'checkColumn'</span> &#125; ,</div><div class="line">                &#123;<span class="attr">name</span>:<span class="string">'标题'</span> , <span class="attr">type</span> : <span class="string">'column'</span> , <span class="attr">field</span> : <span class="string">'title'</span>&#125; ,</div><div class="line">                &#123;<span class="attr">name</span>:<span class="string">'分类'</span> , <span class="attr">type</span> : <span class="string">'column'</span> , <span class="attr">field</span> : <span class="string">'type'</span>&#125; ,</div><div class="line">                &#123;<span class="attr">name</span>:<span class="string">'作者'</span> ,  <span class="attr">type</span> : <span class="string">'column'</span> , <span class="attr">field</span> : <span class="string">'author'</span>&#125; ,</div><div class="line">                &#123;<span class="attr">name</span>:<span class="string">'时间'</span> ,  <span class="attr">type</span> : <span class="string">'column'</span> , <span class="attr">field</span> : <span class="string">'time'</span>&#125; ,</div><div class="line">            ] ,</div><div class="line">            </div><div class="line">        &#125;);</div><div class="line">        </div><div class="line">        </div><div class="line">        grid0.load([</div><div class="line">            &#123;<span class="attr">title</span> : <span class="string">'111'</span> , <span class="attr">type</span> : <span class="string">'A'</span> , <span class="attr">author</span> : <span class="string">'张三'</span> , <span class="attr">time</span> : <span class="string">'2015'</span>&#125; ,</div><div class="line">            &#123;<span class="attr">title</span> : <span class="string">'222'</span> , <span class="attr">type</span> : <span class="string">'B'</span> , <span class="attr">author</span> : <span class="string">'李四'</span> , <span class="attr">time</span> : <span class="string">'2015'</span>&#125; ,</div><div class="line">            &#123;<span class="attr">title</span> : <span class="string">'333'</span> , <span class="attr">type</span> : <span class="string">'C'</span> , <span class="attr">author</span> : <span class="string">'王五'</span> , <span class="attr">time</span> : <span class="string">'2015'</span>&#125; ,</div><div class="line">            &#123;<span class="attr">title</span> : <span class="string">'444'</span> , <span class="attr">type</span> : <span class="string">'D'</span> , <span class="attr">author</span> : <span class="string">'赵六'</span> , <span class="attr">time</span> : <span class="string">'2015'</span>&#125; ,</div><div class="line">        ]);</div><div class="line">        </div><div class="line">        </div><div class="line">        </div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>当然，好多组件都还不够完善，我主要也是自己尝试一下，不过并不打算再拓展了。</p>
<p>自己做个小类库主要用于学习，以后还是用jQuery吧。</p>
<p>附录A</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div><div class="line">467</div><div class="line">468</div><div class="line">469</div><div class="line">470</div><div class="line">471</div><div class="line">472</div><div class="line">473</div><div class="line">474</div><div class="line">475</div><div class="line">476</div><div class="line">477</div><div class="line">478</div><div class="line">479</div><div class="line">480</div><div class="line">481</div><div class="line">482</div><div class="line">483</div><div class="line">484</div><div class="line">485</div><div class="line">486</div><div class="line">487</div><div class="line">488</div><div class="line">489</div><div class="line">490</div><div class="line">491</div><div class="line">492</div><div class="line">493</div><div class="line">494</div><div class="line">495</div><div class="line">496</div><div class="line">497</div><div class="line">498</div><div class="line">499</div><div class="line">500</div><div class="line">501</div><div class="line">502</div><div class="line">503</div><div class="line">504</div><div class="line">505</div><div class="line">506</div><div class="line">507</div><div class="line">508</div><div class="line">509</div><div class="line">510</div><div class="line">511</div><div class="line">512</div><div class="line">513</div><div class="line">514</div><div class="line">515</div><div class="line">516</div><div class="line">517</div><div class="line">518</div><div class="line">519</div><div class="line">520</div><div class="line">521</div><div class="line">522</div><div class="line">523</div><div class="line">524</div><div class="line">525</div><div class="line">526</div><div class="line">527</div><div class="line">528</div><div class="line">529</div><div class="line">530</div><div class="line">531</div></pre></td><td class="code"><pre><div class="line"><span class="meta">"use strict"</span>;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * miniQuery 和 工具类库</div><div class="line"> * 版本 1.1 (修正了一部分Bug，增加了一些方法)</div><div class="line"> * 作者：剽悍一小兔</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="comment">// ------------------------ 基本扩展, 字符串,数组等---------------------------------//</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">extend_base</span> (<span class="params"></span>)</span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span>(!<span class="built_in">String</span>.prototype.format )&#123;</div><div class="line">        <span class="built_in">String</span>.prototype.format = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> e = <span class="built_in">arguments</span>;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.replace(<span class="regexp">/&#123;(\d+)&#125;/g</span>,<span class="function"><span class="keyword">function</span>(<span class="params">t, n</span>) </span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">typeof</span> e[n] != <span class="string">"undefined"</span> ? e[n] : t</div><div class="line">            &#125;)</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (!<span class="built_in">Array</span>.prototype.forEach &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">Array</span>.prototype.forEach !== <span class="string">"function"</span>) &#123;</div><div class="line">        <span class="built_in">Array</span>.prototype.forEach = <span class="function"><span class="keyword">function</span>(<span class="params">callback, context</span>) </span>&#123;</div><div class="line">           <span class="comment">// 遍历数组,在每一项上调用回调函数，这里使用原生方法验证数组。</span></div><div class="line">           <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.toString.call(<span class="keyword">this</span>) === <span class="string">"[object Array]"</span>) &#123;</div><div class="line">               <span class="keyword">var</span> i,len;</div><div class="line">               <span class="comment">//遍历该数组所有的元素</span></div><div class="line">               <span class="keyword">for</span> (i = <span class="number">0</span>, len = <span class="keyword">this</span>.length; i &lt; len; i++) &#123;</div><div class="line">                   <span class="keyword">if</span> (<span class="keyword">typeof</span> callback === <span class="string">"function"</span>  &amp;&amp; <span class="built_in">Object</span>.prototype.hasOwnProperty.call(<span class="keyword">this</span>, i)) &#123;</div><div class="line">                       <span class="keyword">if</span> (callback.call(context, <span class="keyword">this</span>[i], i, <span class="keyword">this</span>) === <span class="literal">false</span>) &#123;</div><div class="line">                           <span class="keyword">break</span>; <span class="comment">// or return;</span></div><div class="line">                       &#125;</div><div class="line">                   &#125;</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span>(!<span class="built_in">String</span>.prototype.format )&#123;</div><div class="line">        <span class="built_in">Array</span>.isArray = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">            <span class="keyword">return</span> obj.constructor.toString().indexOf(<span class="string">'Array'</span>) != <span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">extend_base(); </div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// ------------------------ 工具包---------------------------------//</span></div><div class="line"><span class="keyword">var</span> utils = &#123;</div><div class="line">            <span class="attr">center</span> : <span class="function"><span class="keyword">function</span>(<span class="params">dom</span>)</span>&#123;</div><div class="line">                dom.style.position = <span class="string">'absolute'</span>;</div><div class="line">                dom.style.top = <span class="string">'50%'</span>;</div><div class="line">                dom.style.left = <span class="string">'50%'</span>;</div><div class="line">                dom.style[<span class="string">'margin-top'</span>] = - dom.offsetHeight / <span class="number">2</span> + <span class="string">'px'</span>;</div><div class="line">                dom.style[<span class="string">'margin-left'</span>] = - dom.offsetWidth / <span class="number">2</span> + <span class="string">'px'</span>;</div><div class="line">            &#125;,</div><div class="line">        </div><div class="line">            <span class="comment">/** dom相关 * */</span></div><div class="line">            isDom : ( <span class="keyword">typeof</span> HTMLElement === <span class="string">'object'</span> ) ?</div><div class="line">                <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">                    <span class="keyword">return</span> obj <span class="keyword">instanceof</span> HTMLElement;</div><div class="line">                &#125; :</div><div class="line">                <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">                    <span class="keyword">return</span> obj &amp;&amp; <span class="keyword">typeof</span> obj === <span class="string">'object'</span> &amp;&amp; obj.nodeType === <span class="number">1</span> &amp;&amp; <span class="keyword">typeof</span> obj.nodeName === <span class="string">'string'</span>;</div><div class="line">                &#125; ,</div><div class="line">             </div><div class="line">            <span class="comment">/** 数组相关 * */</span></div><div class="line">            isArray : <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">                <span class="keyword">return</span> obj.constructor.toString().indexOf(<span class="string">'Array'</span>) != <span class="number">-1</span>;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        </div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// ------------------------ miniQuery.js ---------------------------------//</span></div><div class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params">win</span>)</span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> miniQuery = <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> miniQuery = <span class="literal">null</span>;</div><div class="line">        <span class="keyword">var</span> length = <span class="number">0</span>;</div><div class="line">        <span class="keyword">var</span> children = [];</div><div class="line">        <span class="keyword">if</span>(!selector) <span class="keyword">return</span>;</div><div class="line">        </div><div class="line">        <span class="comment">/** 1. 传入的是id * */</span></div><div class="line">        <span class="keyword">if</span>(selector.toString().indexOf(<span class="string">'#'</span>) != <span class="number">-1</span>) &#123;</div><div class="line">            selector = selector.replace(<span class="string">'#'</span>,<span class="string">''</span>);</div><div class="line">            miniQuery = <span class="built_in">document</span>.getElementById(selector);</div><div class="line">        &#125; </div><div class="line">        </div><div class="line">        <span class="comment">/** 2. 传入的是class * */</span></div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(selector.toString().indexOf(<span class="string">'.'</span>) != <span class="number">-1</span>)&#123;</div><div class="line">            selector = selector.replace(<span class="string">'.'</span>,<span class="string">''</span>);</div><div class="line">            miniQuery = <span class="built_in">document</span>.getElementsByClassName(selector);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        </div><div class="line">        <span class="comment">/** 3. 传入的是dom元素 * */</span></div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(utils.isDom(selector))&#123;</div><div class="line">            miniQuery = selector;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">         <span class="comment">/** 4. 传入的是标签 * */</span></div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> selector === <span class="string">'string'</span>)&#123;</div><div class="line">            miniQuery = <span class="built_in">document</span>.getElementsByTagName(selector);</div><div class="line">            <span class="keyword">return</span> miniQuery;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(!miniQuery) <span class="keyword">return</span>; <span class="comment">//如果本类库包装不了，就返回</span></div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(miniQuery.length)&#123;   <span class="comment">//如果是一个类数组元素的话，就获取他的长度</span></div><div class="line">            length = miniQuery.length; </div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            length = <span class="number">1</span>; <span class="comment">//这种情况，说明成功包裹了元素，但是该元素还是存在的，就将长度设定为1</span></div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        children = miniQuery.children; <span class="comment">//取得所有的孩子节点</span></div><div class="line">        </div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            </div><div class="line">            <span class="comment">/** 属性区 */</span></div><div class="line">            obj : miniQuery,    <span class="comment">//返回的dom元素</span></div><div class="line">            index : <span class="number">0</span> ,         <span class="comment">//默认的角标（假如 miniquery 是一个类数组的话）</span></div><div class="line">            length : length,    <span class="comment">//元素的个数（假如 miniquery 是一个类数组的话）</span></div><div class="line">            children : children,<span class="comment">//所有孩子节点</span></div><div class="line">            </div><div class="line">            </div><div class="line">            <span class="comment">/** 方法区 */</span></div><div class="line">            </div><div class="line">            <span class="comment">// ------------------------ dom 相关 ---------------------------------//</span></div><div class="line">            </div><div class="line">            <span class="comment">/**获取dom对象本身,返回纯粹的dom元素，而非miniQuery元素*/</span></div><div class="line">            getObj : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.obj;</div><div class="line">            &#125; ,</div><div class="line">            </div><div class="line">            <span class="comment">/**获取元素的长度*/</span></div><div class="line">            size : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.length;</div><div class="line">            &#125; ,</div><div class="line">            </div><div class="line">            <span class="comment">/** 假如 miniquery 是一个类数组的话，用于返回其中一个元素 */</span></div><div class="line">            eq : <span class="function"><span class="keyword">function</span>(<span class="params">index</span>)</span>&#123;</div><div class="line">                <span class="keyword">if</span>(length &gt; <span class="number">0</span>) &#123;</div><div class="line">                    <span class="keyword">return</span> $(<span class="keyword">this</span>.obj[index]); <span class="comment">//eq返回的还是miniQuery对象</span></div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">                &#125;</div><div class="line">            &#125; ,</div><div class="line">            </div><div class="line">            <span class="comment">/** 获得第一个匹配元素 */</span></div><div class="line">            first : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="keyword">return</span> $(<span class="keyword">this</span>.obj[<span class="number">0</span>]);</div><div class="line">            &#125; ,</div><div class="line">            </div><div class="line">            <span class="comment">/** 获得最后一个匹配元素 */</span></div><div class="line">            last : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="keyword">return</span> $(<span class="keyword">this</span>.obj[<span class="keyword">this</span>.length - <span class="number">1</span>]);</div><div class="line">            &#125; ,</div><div class="line">            </div><div class="line">            <span class="comment">/** 获得最后一个匹配元素 */</span></div><div class="line">            getChildren : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.obj.children;</div><div class="line">            &#125; ,</div><div class="line">            </div><div class="line">            <span class="comment">/** 获得某一个孩子节点 */</span></div><div class="line">            getChild : <span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</div><div class="line">                <span class="keyword">return</span> $(<span class="keyword">this</span>.children[i]);</div><div class="line">            &#125; ,</div><div class="line">            </div><div class="line">            <span class="comment">/** 获得父节点 */</span></div><div class="line">            getParent : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="keyword">return</span> $(<span class="keyword">this</span>.obj.parentElement);</div><div class="line">            &#125; ,</div><div class="line">            </div><div class="line">            <span class="comment">/** 获得上一个节点 */</span></div><div class="line">            previous : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="keyword">var</span> parent = <span class="keyword">this</span>.getParent();</div><div class="line">                <span class="keyword">var</span> children = parent.children;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; children.length; i++)&#123;</div><div class="line">                    <span class="keyword">if</span>(<span class="keyword">this</span>.obj == children[i]) &#123;</div><div class="line">                        <span class="keyword">return</span> $(children[i - <span class="number">1</span>]);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">            &#125; ,</div><div class="line">            </div><div class="line">            <span class="comment">/** 获得下一个节点 */</span></div><div class="line">            next : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="keyword">var</span> parent = <span class="keyword">this</span>.getParent();</div><div class="line">                <span class="keyword">var</span> children = parent.children;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; children.length; i++)&#123;</div><div class="line">                    <span class="keyword">if</span>(<span class="keyword">this</span>.obj == children[i]) &#123;</div><div class="line">                        <span class="keyword">return</span> $(children[i + <span class="number">1</span>]);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">            &#125; ,</div><div class="line">            </div><div class="line">            <span class="attr">findClassDom</span> : <span class="function"><span class="keyword">function</span>(<span class="params">className</span>)</span>&#123;</div><div class="line">                 <span class="keyword">this</span>.obj = <span class="keyword">this</span>.obj.getElementsByClassName(className) ;</div><div class="line">                 <span class="keyword">return</span> <span class="keyword">this</span> ;</div><div class="line">            &#125; ,</div><div class="line">            </div><div class="line">            <span class="attr">findIdDom</span> : <span class="function"><span class="keyword">function</span>(<span class="params">id</span>)</span>&#123;</div><div class="line">                 <span class="keyword">var</span> $<span class="keyword">this</span> = <span class="keyword">this</span>; </div><div class="line">                 <span class="keyword">var</span> children = <span class="keyword">this</span>.getChildren();</div><div class="line">                 children = <span class="built_in">Array</span>.prototype.slice.call(children); <span class="comment">//obj 转  []</span></div><div class="line">                 children.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</div><div class="line">                    <span class="comment">//console.log(item.id);</span></div><div class="line">                    (id === item.id) &amp;&amp; ($<span class="keyword">this</span> = item) ;</div><div class="line">                 &#125;);</div><div class="line">                 <span class="keyword">return</span> <span class="keyword">this</span> ;</div><div class="line">            &#125; ,</div><div class="line">            </div><div class="line">            <span class="comment">// ------------------------ css 相关 ---------------------------------//</span></div><div class="line">            <span class="comment">/** 添加背景色 */</span></div><div class="line">            backgroundColor : <span class="function"><span class="keyword">function</span>(<span class="params">color</span>)</span>&#123;</div><div class="line">                <span class="keyword">this</span>.obj.style.backgroundColor = color;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">            &#125; ,</div><div class="line">            </div><div class="line">            <span class="comment">/** 获取style */</span></div><div class="line">            getStyle : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="keyword">var</span> styleEle = <span class="literal">null</span>;</div><div class="line">                <span class="keyword">if</span>(<span class="built_in">window</span>.getComputedStyle)&#123;</div><div class="line">                    styleEle = <span class="built_in">window</span>.getComputedStyle(<span class="keyword">this</span>.obj,<span class="literal">null</span>);</div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    styleEle = ht.currentStyle;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> styleEle;</div><div class="line">             &#125; ,</div><div class="line">            </div><div class="line">            <span class="comment">/** 设置或者拿到高度 */</span> </div><div class="line">            height : <span class="function"><span class="keyword">function</span>(<span class="params">h</span>)</span>&#123;</div><div class="line">                <span class="keyword">if</span>(!h) <span class="keyword">return</span> <span class="keyword">this</span>.getStyle().getPropertyValue(<span class="string">'height'</span>);</div><div class="line">                (<span class="keyword">typeof</span> h == <span class="string">'number'</span>) &amp;&amp; (h = h + <span class="string">'px'</span>);</div><div class="line">                <span class="keyword">this</span>.obj.style.height = h;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">            &#125; ,</div><div class="line">            </div><div class="line">            <span class="comment">/** 设置或者拿到宽度 */</span> </div><div class="line">            width : <span class="function"><span class="keyword">function</span>(<span class="params">w</span>)</span>&#123;</div><div class="line">                <span class="keyword">if</span>(!w) <span class="keyword">return</span> <span class="keyword">this</span>.getStyle().getPropertyValue(<span class="string">'width'</span>);</div><div class="line">                (<span class="keyword">typeof</span> w == <span class="string">'number'</span>) &amp;&amp; (w = w + <span class="string">'px'</span>);</div><div class="line">                <span class="keyword">this</span>.obj.style.width = w;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">            &#125; ,</div><div class="line">            </div><div class="line">            <span class="comment">/** 设置自定义样式 */</span></div><div class="line">            css : <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">                <span class="keyword">if</span>(!obj) <span class="keyword">return</span>;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> obj)&#123;</div><div class="line">                    <span class="comment">//console.log(key + '=========' + obj[key]);</span></div><div class="line">                    <span class="keyword">this</span>.obj.style[key] = <span class="keyword">typeof</span> obj[key] === <span class="string">'number'</span> ? obj[key] + <span class="string">'px'</span> : obj[key];</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">            &#125; ,</div><div class="line">            </div><div class="line">            <span class="comment">/** 设置放大 倍数*/</span></div><div class="line">            scale : <span class="function"><span class="keyword">function</span>(<span class="params">scaleNumber</span>)</span>&#123;</div><div class="line">                <span class="keyword">this</span>.css(&#123;</div><div class="line">                    <span class="attr">scale</span> : scaleNumber</div><div class="line">                &#125;);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">            &#125; ,</div><div class="line">            </div><div class="line">            </div><div class="line">            <span class="attr">hasClass</span> : <span class="function"><span class="keyword">function</span>(<span class="params">cls</span>) </span>&#123;  </div><div class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.obj.className.match(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'(\\s|^)'</span> + cls + <span class="string">'(\\s|$)'</span>));  </div><div class="line">            &#125;  ,</div><div class="line">            </div><div class="line">            <span class="attr">addClass</span> : <span class="function"><span class="keyword">function</span>(<span class="params">cls</span>)</span>&#123;</div><div class="line">                <span class="keyword">if</span> (!<span class="keyword">this</span>.hasClass(cls)) <span class="keyword">this</span>.obj.className += <span class="string">" "</span> + cls;  </div><div class="line">            &#125; ,</div><div class="line">            </div><div class="line">            <span class="attr">removeClass</span> : <span class="function"><span class="keyword">function</span>(<span class="params">cls</span>) </span>&#123;  </div><div class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.hasClass(cls)) &#123;  </div><div class="line">                    <span class="comment">//console.log(this.obj);</span></div><div class="line">                    <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'(\\s|^)'</span> + cls + <span class="string">'(\\s|$)'</span>);  </div><div class="line">                    <span class="keyword">this</span>.obj.className = <span class="keyword">this</span>.obj.className.replace(reg, <span class="string">' '</span>);  <span class="comment">//修正bug，之前右边少了一个this</span></div><div class="line">                &#125;  </div><div class="line">            &#125; ,</div><div class="line">            </div><div class="line">            <span class="attr">toggleClass</span> : <span class="function"><span class="keyword">function</span>(<span class="params">cls</span>)</span>&#123;  </div><div class="line">                <span class="keyword">if</span>(<span class="keyword">this</span>.hasClass(cls))&#123;  </div><div class="line">                    <span class="keyword">this</span>.removeClass(cls);  </div><div class="line">                &#125;<span class="keyword">else</span>&#123;  </div><div class="line">                    <span class="keyword">this</span>.addClass(cls);  </div><div class="line">                &#125;  </div><div class="line">            &#125;  ,</div><div class="line">            </div><div class="line">            </div><div class="line">            </div><div class="line">            <span class="comment">// ------------------------ 动画 相关 ---------------------------------//</span></div><div class="line">            </div><div class="line">            <span class="comment">//TODO</span></div><div class="line">            animate : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                </div><div class="line">            &#125; ,</div><div class="line">            </div><div class="line">            <span class="comment">// ------------------------ 事件相关 ---------------------------------//</span></div><div class="line">            </div><div class="line">            on : <span class="function"><span class="keyword">function</span>(<span class="params">eventName,callback</span>)</span>&#123;</div><div class="line">                <span class="keyword">var</span> $<span class="keyword">this</span> = <span class="keyword">this</span>;</div><div class="line">                <span class="keyword">this</span>.obj[<span class="string">'on'</span> + eventName] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                    callback.call($<span class="keyword">this</span>,$<span class="keyword">this</span>.obj); <span class="comment">//context指向$this，参数传入dom对象</span></div><div class="line">                &#125;;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">            &#125; ,</div><div class="line">            </div><div class="line">            <span class="comment">// ------------------------ 属性相关 ---------------------------------//</span></div><div class="line">            </div><div class="line">            attr : <span class="function"><span class="keyword">function</span>(<span class="params">attr</span>)</span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.obj.attributes[attr];</div><div class="line">            &#125; ,</div><div class="line">            </div><div class="line">            </div><div class="line">            <span class="comment">// ------------------------ ajax相关 ---------------------------------//</span></div><div class="line">            </div><div class="line">            ajax : <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">                <span class="keyword">var</span> defaults = &#123;</div><div class="line">                    <span class="attr">type</span> : <span class="string">'post'</span> ,</div><div class="line">                    <span class="attr">data</span> : &#123;&#125; ,</div><div class="line">                    <span class="attr">success</span> : <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">                        </div><div class="line">                    &#125;</div><div class="line">                &#125;;</div><div class="line">                </div><div class="line">                </div><div class="line">                <span class="comment">// 创建一个ajax对象</span></div><div class="line">                <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">                <span class="comment">//开始和后台的upload.jsp页面进行交换</span></div><div class="line">                xhr.open(<span class="string">"post"</span>, basePath+<span class="string">"/upload/file.do"</span>, <span class="literal">true</span>);</div><div class="line">                <span class="comment">//上传成功进入的毁掉函数</span></div><div class="line">                xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                    <span class="keyword">if</span>(xhr.readyState==<span class="number">4</span> &amp;&amp; xhr.status==<span class="number">200</span>)&#123;<span class="comment">//状态4和200代表和服务器端交互成功</span></div><div class="line">                        <span class="comment">//获取上传成功的返回数据</span></div><div class="line">                        <span class="keyword">var</span> data = xhr.responseText.trim();</div><div class="line">                        <span class="keyword">var</span> jdata = <span class="built_in">eval</span>(<span class="string">"("</span>+data+<span class="string">")"</span>);</div><div class="line">                        jdata[<span class="string">"target"</span>]=uploadTo;</div><div class="line">                        tz_uploadsuccess($(uploadTo),jdata);</div><div class="line">                    &#125;</div><div class="line">                &#125;;</div><div class="line">                <span class="comment">//监听文件上传的进度</span></div><div class="line">                xhr.upload.addEventListener(<span class="string">"progress"</span>, progressFunction, <span class="literal">false</span>);</div><div class="line">                <span class="comment">//发送文件上传的进度</span></div><div class="line">                xhr.send(form);</div><div class="line">            &#125; ,</div><div class="line">            </div><div class="line">            <span class="comment">// ------------------------ ui ---------------------------------//</span></div><div class="line">            </div><div class="line">            <span class="comment">/** 按钮 * */</span></div><div class="line">            linkbutton : <span class="function"><span class="keyword">function</span>(<span class="params">opts</span>)</span>&#123;</div><div class="line">                <span class="keyword">var</span> opts = opts || &#123;&#125;;</div><div class="line">                <span class="comment">/**添加基本样式* */</span></div><div class="line">                <span class="keyword">this</span>.addClass(<span class="string">'linkbutton'</span>);</div><div class="line">                <span class="keyword">this</span>.on(<span class="string">'mouseover'</span> , <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">                    <span class="comment">//console.log(e);</span></div><div class="line">                    <span class="keyword">this</span>.css(&#123;</div><div class="line">                        <span class="attr">backgroundColor</span>: <span class="string">'#d4ef50'</span></div><div class="line">                    &#125;);</div><div class="line">                &#125;).on(<span class="string">'mouseout'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">                    <span class="keyword">this</span>.css(&#123;</div><div class="line">                        <span class="attr">backgroundColor</span>: <span class="string">'#ac0'</span></div><div class="line">                    &#125;);</div><div class="line">                &#125;);</div><div class="line">                </div><div class="line">                opts.text &amp;&amp; (<span class="keyword">this</span>.obj.innerText = opts.text);</div><div class="line">                opts.click &amp;&amp; (<span class="keyword">this</span>.on(<span class="string">'click'</span> , opts.click));</div><div class="line">            &#125; ,</div><div class="line">            </div><div class="line">            <span class="comment">/** 数据列表 * */</span></div><div class="line">            dataGrid : <span class="function"><span class="keyword">function</span>(<span class="params">opts</span>)</span>&#123;</div><div class="line">                <span class="keyword">var</span> $<span class="keyword">this</span> = <span class="keyword">this</span>;</div><div class="line">                <span class="keyword">var</span> opts = opts || &#123;&#125;;</div><div class="line">                <span class="keyword">var</span> header = <span class="literal">null</span>; <span class="comment">//表头</span></div><div class="line">                <span class="keyword">var</span> id = <span class="literal">null</span>; <span class="comment">//grid的id，唯一</span></div><div class="line">                <span class="keyword">var</span> tb_id = <span class="literal">null</span>;</div><div class="line">                <span class="keyword">var</span> tbody_id = <span class="literal">null</span>;</div><div class="line">                <span class="keyword">var</span> count = <span class="number">0</span>; <span class="comment">//为了防止id重复</span></div><div class="line">                <span class="keyword">var</span> columns = []; <span class="comment">//存放field</span></div><div class="line">                <span class="keyword">var</span> types = [];</div><div class="line">                <span class="keyword">if</span>(!<span class="keyword">this</span>.obj.id) <span class="keyword">return</span>;</div><div class="line">                <span class="keyword">else</span> id = <span class="keyword">this</span>.obj.id;</div><div class="line">                </div><div class="line">                <span class="keyword">if</span>(!opts.header) <span class="keyword">return</span>;</div><div class="line">                <span class="keyword">else</span> header = opts.header;</div><div class="line">                </div><div class="line">                <span class="comment">/**添加基本样式* */</span></div><div class="line">                <span class="keyword">this</span>.addClass(<span class="string">'tableBox'</span>);</div><div class="line">                </div><div class="line">                <span class="comment">//初始化表头</span></div><div class="line">                <span class="function"><span class="keyword">function</span> <span class="title">initHeader</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                    <span class="keyword">var</span> time = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</div><div class="line">                    tb_id = <span class="string">'mui-table_'</span> + time + <span class="string">'_'</span> + count++;</div><div class="line">                    <span class="keyword">var</span> html = <span class="string">" &lt;table id='"</span>+tb_id+<span class="string">"'&gt;&lt;thead&gt;"</span> ;</div><div class="line">                    </div><div class="line">                    <span class="comment">//拼接表头</span></div><div class="line">                    html += <span class="string">'&lt;tr&gt;'</span> ;</div><div class="line">                    header.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</div><div class="line">                        columns.push(item.field); <span class="comment">//添加字段名</span></div><div class="line">                        types.push(item.type);    <span class="comment">//添加列类型</span></div><div class="line">                        <span class="keyword">var</span> width = <span class="literal">null</span>;</div><div class="line">                        <span class="keyword">if</span>(item.width) width = item.width + <span class="string">'px'</span>; <span class="comment">//设置宽度</span></div><div class="line">                        <span class="keyword">if</span>(width) width = <span class="string">"width='"</span>+width+<span class="string">"' "</span>;</div><div class="line">                        html += <span class="string">"&lt;th "</span>+width+<span class="string">"&gt;"</span> + item.name + <span class="string">'&lt;/th&gt;'</span></div><div class="line">                    &#125;);</div><div class="line">                    tbody_id = <span class="string">'mui-table-tbody_'</span> + time + <span class="string">'_'</span> + count++;</div><div class="line">                    html += <span class="string">"&lt;/tr&gt;&lt;/thread&gt;&lt;tbody id='"</span>+tbody_id+<span class="string">"'&gt;&lt;/tbody&gt;"</span> ;</div><div class="line">                    html += <span class="string">'&lt;/table&gt;'</span> ;</div><div class="line">                    </div><div class="line">                    $<span class="keyword">this</span>.obj.innerHTML = html;</div><div class="line">                &#125;</div><div class="line">                </div><div class="line">                </div><div class="line">                <span class="comment">//</span></div><div class="line">                initHeader();</div><div class="line">                </div><div class="line">                <span class="keyword">return</span> &#123;</div><div class="line">                    <span class="attr">tbody_id</span> : tbody_id ,</div><div class="line">                    <span class="attr">allData</span> : <span class="literal">null</span> ,</div><div class="line">                    <span class="attr">ids</span> : [], <span class="comment">//保存每一行的id</span></div><div class="line">                    index : <span class="number">0</span>,<span class="comment">//作为行号和id</span></div><div class="line">                    <span class="comment">//加载数据</span></div><div class="line">                    load : <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">                        <span class="keyword">this</span>.allData = data;</div><div class="line">                        <span class="keyword">var</span> html = <span class="string">''</span>;</div><div class="line">                        <span class="comment">//console.log($('#' + tbody_id));</span></div><div class="line">                        <span class="keyword">var</span> len = data.length; <span class="comment">//总行数</span></div><div class="line">                        <span class="keyword">var</span> columnSize = columns.length;<span class="comment">//总列数</span></div><div class="line">                        <span class="comment">//alert(len);</span></div><div class="line">                        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; len ; i++)&#123;</div><div class="line">                            <span class="keyword">this</span>.ids.push(<span class="string">'mui-dataGrid-tr_'</span> + ( <span class="keyword">new</span> <span class="built_in">Date</span>().getTime() ) + <span class="string">'_'</span> + <span class="keyword">this</span>.index++) ;</div><div class="line">                            <span class="comment">//console.log(this.ids[this.index - 1]);</span></div><div class="line">                            <span class="comment">//console.log(this.ids[this.index - 1].substring(this.ids[this.index - 1].length - 1 )); //获取行号</span></div><div class="line">                            html += <span class="string">"&lt;tr id='"</span>+<span class="keyword">this</span>.ids[<span class="keyword">this</span>.index - <span class="number">1</span>]+<span class="string">"'&gt;"</span>; <span class="comment">/*之前在这里少了一个单引号，最终显示的数据只有全部的一半，现在已经更正*/</span></div><div class="line">                            <span class="comment">//遍历列</span></div><div class="line">                            <span class="comment">//console.log(types);</span></div><div class="line">                            <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; columnSize ; j++)&#123;</div><div class="line">                                <span class="keyword">var</span> columnName = columns[j];</div><div class="line">                                <span class="keyword">if</span>(data[i][columnName])&#123;</div><div class="line">                                    html += <span class="string">'&lt;td&gt;'</span> + data[i][columnName] + <span class="string">'&lt;/td&gt;'</span>;</div><div class="line">                                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(types[j] == <span class="string">'checkColumn'</span>)&#123;</div><div class="line">                                    html += <span class="string">'&lt;td&gt;&lt;input type="checkbox" value=""/&gt;&lt;/td&gt;'</span>;</div><div class="line">                                &#125;<span class="keyword">else</span> &#123;</div><div class="line">                                    html += <span class="string">'&lt;td&gt;&lt;/td&gt;'</span>;</div><div class="line">                                &#125;</div><div class="line">                                </div><div class="line">                            &#125;</div><div class="line">                            <span class="comment">//列遍历完后，这一行才结束</span></div><div class="line">                            html += <span class="string">'&lt;/tr&gt;'</span></div><div class="line">                            </div><div class="line">                        &#125;</div><div class="line">                        </div><div class="line">                        <span class="comment">//展示数据</span></div><div class="line">                        win.$(<span class="string">'#'</span> + <span class="keyword">this</span>.tbody_id).obj.innerHTML = html;</div><div class="line">                        </div><div class="line">                        <span class="comment">//给每一行添加事件</span></div><div class="line">                        <span class="keyword">this</span>.ids.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">rowId</span>)</span>&#123;</div><div class="line">                            win.$(<span class="string">'#'</span> + rowId).on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                                <span class="keyword">this</span>.toggleClass(<span class="string">'selected'</span>);</div><div class="line">                                <span class="keyword">if</span>(<span class="keyword">this</span>.hasClass(<span class="string">'selected'</span>))&#123;</div><div class="line">                                    <span class="keyword">this</span>.obj.getElementsByTagName(<span class="string">'input'</span>)[<span class="number">0</span>].checked = <span class="literal">true</span>;</div><div class="line">                                &#125;<span class="keyword">else</span> &#123;</div><div class="line">                                    <span class="keyword">this</span>.obj.getElementsByTagName(<span class="string">'input'</span>)[<span class="number">0</span>].checked = <span class="literal">false</span>;</div><div class="line">                                &#125;</div><div class="line">                            &#125;);</div><div class="line">                        &#125;);</div><div class="line">                        </div><div class="line">                        </div><div class="line">                            </div><div class="line">                    &#125; ,</div><div class="line">                    </div><div class="line">                    <span class="comment">//获取所有数据</span></div><div class="line">                    getData : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                        <span class="keyword">return</span> <span class="keyword">this</span>.allData;</div><div class="line">                    &#125; ,</div><div class="line">                    </div><div class="line">                    <span class="comment">//根据行号获取某一行</span></div><div class="line">                    </div><div class="line">                    getRow : <span class="function"><span class="keyword">function</span>(<span class="params">rowIndex</span>)</span>&#123;</div><div class="line">                        <span class="keyword">return</span> <span class="keyword">this</span>.getData()[rowIndex];</div><div class="line">                    &#125; ,</div><div class="line">                    </div><div class="line">                    <span class="comment">//获取所有的行号</span></div><div class="line">                    getSize : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                        <span class="keyword">var</span> len = <span class="number">0</span>;</div><div class="line">                        <span class="keyword">this</span>.getSelected &amp;&amp; (len = <span class="keyword">this</span>.getSelected().length) ;</div><div class="line">                        <span class="keyword">return</span> len;</div><div class="line">                    &#125; ,</div><div class="line">                    </div><div class="line">                    <span class="comment">//返回选中的行，一条或者多条</span></div><div class="line">                    getSelected : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                        <span class="keyword">var</span> rows = win.$(<span class="string">'.selected'</span>).obj; <span class="comment">//获取所有选中行</span></div><div class="line">                        <span class="keyword">var</span> len = <span class="number">0</span>;</div><div class="line">                        len = rows.length;</div><div class="line">                        <span class="keyword">var</span> arr = [];</div><div class="line">                        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; len;i++)&#123;</div><div class="line">                            <span class="comment">//console.log(rows[i].id.substring(rows[i].id.length - 1));</span></div><div class="line">                            arr.push(<span class="keyword">this</span>.getRow(rows[i].id.split(<span class="string">'_'</span>)[<span class="number">2</span>])) ;</div><div class="line">                        &#125;</div><div class="line">                        </div><div class="line">                        arr.length == <span class="number">1</span> &amp;&amp; ( arr = arr[<span class="number">0</span>] );</div><div class="line">                        </div><div class="line">                        <span class="keyword">return</span> arr;</div><div class="line">                        </div><div class="line">                        <span class="comment">//this.ids[this.index - 1].substring(this.ids[this.index - 1].length - 1 )</span></div><div class="line">                    &#125;</div><div class="line">                    </div><div class="line">                    </div><div class="line">                    </div><div class="line">                    </div><div class="line">                &#125;;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    win.$ = miniQuery;</div><div class="line">    </div><div class="line">    win.mui = &#123;</div><div class="line">        <span class="attr">get</span> : <span class="function"><span class="keyword">function</span>(<span class="params">sel</span>)</span>&#123;</div><div class="line">            <span class="keyword">return</span> miniQuery(sel);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;)(<span class="built_in">window</span>);</div></pre></td></tr></table></figure>
<p>附录B mui.css</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.linkbutton</span> &#123;</div><div class="line">    <span class="attribute">padding</span>: .<span class="number">4em</span> .<span class="number">9em</span>; <span class="comment">/*em的好处就是随着父元素的字体大小而变化，当该元素的字体变化时，会自适应*/</span></div><div class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">rgba</span>(0,0,0,.1);</div><div class="line">    <span class="attribute">background-color</span>: <span class="number">#ac0</span>;</div><div class="line">    <span class="attribute">border-radius</span>: .<span class="number">2em</span>;</div><div class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">5px</span> <span class="built_in">rgba</span>(0,0,0,.5);</div><div class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</div><div class="line">    <span class="attribute">text-shadow</span>: <span class="number">0</span> -.<span class="number">06em</span> .<span class="number">24em</span> <span class="built_in">rgba</span>(0,0,0,.5); <span class="comment">/*将阴影设置为半透明，就无所谓底色了，都能很好地适应*/</span></div><div class="line">    <span class="attribute">font-size</span>: <span class="number">130%</span>; </div><div class="line">    <span class="attribute">line-height</span>: <span class="number">1.5</span>; <span class="comment">/*行高是字号的1.5倍*/</span></div><div class="line">    <span class="attribute">display</span>:inline-block;</div><div class="line">    <span class="attribute">cursor</span>:pointer;</div><div class="line">    <span class="attribute">font-family</span>: <span class="string">"微软雅黑"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.tableBox</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">1200px</span>;</div><div class="line">    <span class="attribute">background</span>:<span class="number">#f9f9f9</span>;</div><div class="line">    <span class="attribute">margin</span>:<span class="number">20px</span> auto <span class="number">0</span>;</div><div class="line">    <span class="attribute">padding</span>:<span class="number">6px</span>;</div><div class="line">    <span class="attribute">position</span>:relative;</div><div class="line">    <span class="attribute">font-family</span>: 微软雅黑;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.tableBox</span> <span class="selector-tag">table</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">100%</span>;</div><div class="line">    <span class="attribute">border</span>:<span class="number">2px</span> solid <span class="number">#fff</span>;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.tableBox</span> <span class="selector-tag">table</span> <span class="selector-tag">tr</span> &#123;</div><div class="line">    <span class="attribute">border-collapse</span>: separate;   </div><div class="line">    <span class="attribute">border-spacing</span>: <span class="number">1px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*选中行*/</span></div><div class="line"><span class="selector-class">.tableBox</span> <span class="selector-tag">table</span> <span class="selector-tag">tr</span><span class="selector-class">.selected</span> &#123;</div><div class="line">    <span class="attribute">background</span>:<span class="number">#cce4f3</span>;</div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="comment">/*表头*/</span></div><div class="line"><span class="selector-class">.tableBox</span>  <span class="selector-tag">th</span>&#123;  </div><div class="line">    <span class="attribute">background</span>: <span class="number">#eaeaea</span>;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">6px</span>;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#666</span>;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.tableBox</span>  <span class="selector-tag">td</span> &#123;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">13px</span>;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">4px</span> <span class="number">10px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>毕竟是自己DIY出来的，所以没仔细测试，肯定还有一些BUG。不过不管怎么说，都算是一次尝试吧，呵呵。</p>
<p>转自<a href="http://www.cnblogs.com/skyblue-li/p/6010625.html" target="_blank" rel="external">http://www.cnblogs.com/skyblue-li/p/6010625.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在之前的章节中，我们已经不依赖jQuery，单纯地用JavaScript封装了很多方法，这个时候，你一定会想，这些经常使用的方法能不能单独整理成一个js文件呢？&lt;/p&gt;
&lt;p&gt;当然可以，封装本来就是干这个用的。放在一个单独js文件里固然不错，其实我们也可以单独整一个js类库，一方面可以锻炼一下自己封装方法的能力，另一方面，也可以将自己学到的东西做一个整理。&lt;/p&gt;
&lt;p&gt;出于这个目的，本文将介绍如何封装一个简单的js类库。（当然，只是开一个头，熟悉一下js基础而已。实际使用的话我感觉完全没有必要，因为jQuery已经很强大了，直接使用第三方的就可以）&lt;/p&gt;
    
    </summary>
    
      <category term="码路刺客" scheme="http://c-xuan.com/categories/%E7%A0%81%E8%B7%AF%E5%88%BA%E5%AE%A2/"/>
    
    
      <category term="转载" scheme="http://c-xuan.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="JavaScript" scheme="http://c-xuan.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>为什么ETL任务困难</title>
    <link href="http://c-xuan.com/2016/10/15/WhyDifficultOnETLJob/"/>
    <id>http://c-xuan.com/2016/10/15/WhyDifficultOnETLJob/</id>
    <published>2016-10-15T15:04:05.000Z</published>
    <updated>2016-10-15T15:12:08.871Z</updated>
    
    <content type="html"><![CDATA[<h3 id="工具繁多"><a href="#工具繁多" class="headerlink" title="工具繁多"></a>工具繁多</h3><p>从 DataStage到Kettle, ETL 工具覆盖了商业化领域和开源领域, 价格从几十万到免费,起码有几十种选择。</p>
<p>有人要说了,选择多不是一件好事么?如果再早几年,我会同意这是好事,可到现在,我要说 NO!</p>
<p>前面关于决策思维的博文提到一个论点:相比于普通人做出决策,专家是会直接给一种可行方案还是罗列众多方案类比优劣?</p>
<p>答案是前者,也是我反对选择众多是好事这一论点的依据之一。</p>
<a id="more"></a>
<h4 id="那么选择多有什么坏处"><a href="#那么选择多有什么坏处" class="headerlink" title="那么选择多有什么坏处?"></a>那么选择多有什么坏处?</h4><ul>
<li>基础方案混杂。各公司方案不同,甚至一个公司 ETL 环节也采用不同工具及架构,人才无法公用,维护成本高。</li>
<li>数据项目失败案例远多于成功案例, 项目选型越复杂成功概率越低。大量公司做 BI、做大数据,甚至在没有人懂的情况下招人开工!事实上在数据领域,熟手都清楚一个现象,没有成功案例的人很难做成数据项目。很残忍的现实,但也让那些盲目投入资源跟风做项目的公司考虑冷静下来了。</li>
<li>抬高实施门槛。现在大家都想做数据,进入大数据领域,尤其是有很多不具备该领域经验的公司想要做。那么实施前首先就是选型了,如果从三个产品选一个来做还可行的话,那么要从三十个产品中选型,这个工作本身就阻碍了数据项目的开展!</li>
</ul>
<h3 id="GUI工具"><a href="#GUI工具" class="headerlink" title="GUI工具"></a>GUI工具</h3><p>说到这里反对的朋友更多了,GUI 所见即所得,降低使用门槛,好处一页都写不完,作为一名数据领域从业者,我决然反对,自己都能感觉到火药味。 为了论证我的观点,这里要罗列ETL领域那些GUI的罪证了。</p>
<h4 id="ETL工具的六大问题"><a href="#ETL工具的六大问题" class="headerlink" title="ETL工具的六大问题"></a>ETL工具的六大问题</h4><ul>
<li>工具太大了,卡卡卡!我不是说 SSIS 之类,也不是说 Kettle 相关,我说的是他们所有人……</li>
<li>好用的太贵, 便宜的不好用!</li>
<li>组件式的拖拉开发,性能真的没法起来!尤其是那些依靠组件解决数据变化提取的兄弟们,你们想多了。</li>
<li>我需要一包厕纸而已,你非要给我整个超市。在我蹲之前非得找遍整个超市!大家对比下里面的功能自己使用的比率。</li>
<li>说 GUI 简单好用的,我强烈反对。GUI 好调试么?映射过程报错了大家要怎么办?检查源检查目标也就算了,连映射环节都要排查。除了自己设定的格式类型,还要考虑工具环节自己的转换类型,这不是增加负担么?</li>
<li>部署,我都不想说部署了。一千个任务下来,ETL 工具别谈部署了!这时候有同学开始研究调度,有些关注数据质量,任务数量起来,想什么都是多的,保佑这混乱情况别出岔子就阿弥陀佛了。</li>
</ul>
<h3 id="ETL工具阻碍了设计"><a href="#ETL工具阻碍了设计" class="headerlink" title="ETL工具阻碍了设计"></a>ETL工具阻碍了设计</h3><ul>
<li>直接用工具拉数据的项目,认真找找有没有架构设计,有没有项目文档,有没有扩展性考虑,性能考虑?或者简单点,这项目换人可能接手下来么?</li>
<li>数据项目是团队项目,ETL 工具是个人化工具。如果多个成员不能无缝接替工作,对不起,我认为这不是数据项目。哦不对,不算是一个项目。</li>
<li>组件报错是工具问题,转换异常跟自己没关系。工具的 bug 和我真没关系,我项目做得好好的,ETL 工具崩溃了管我什么事?遇到这种情况不说我也知道做法,崩溃了再起来跑一跑嘛,运气好数据就跑出来了。至于数据质量管理是什么这样的问题,就别问出来了。</li>
</ul>
<p>转自<br><a href="http://www.infotrim.cn/article/5" target="_blank" rel="external">http://www.infotrim.cn/article/5</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;工具繁多&quot;&gt;&lt;a href=&quot;#工具繁多&quot; class=&quot;headerlink&quot; title=&quot;工具繁多&quot;&gt;&lt;/a&gt;工具繁多&lt;/h3&gt;&lt;p&gt;从 DataStage到Kettle, ETL 工具覆盖了商业化领域和开源领域, 价格从几十万到免费,起码有几十种选择。&lt;/p&gt;
&lt;p&gt;有人要说了,选择多不是一件好事么?如果再早几年,我会同意这是好事,可到现在,我要说 NO!&lt;/p&gt;
&lt;p&gt;前面关于决策思维的博文提到一个论点:相比于普通人做出决策,专家是会直接给一种可行方案还是罗列众多方案类比优劣?&lt;/p&gt;
&lt;p&gt;答案是前者,也是我反对选择众多是好事这一论点的依据之一。&lt;/p&gt;
    
    </summary>
    
      <category term="BI墨客" scheme="http://c-xuan.com/categories/BI%E5%A2%A8%E5%AE%A2/"/>
    
    
      <category term="BI" scheme="http://c-xuan.com/tags/BI/"/>
    
      <category term="数据仓库" scheme="http://c-xuan.com/tags/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/"/>
    
      <category term="转载" scheme="http://c-xuan.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>从大数据负责人招聘看决策思维</title>
    <link href="http://c-xuan.com/2016/10/15/DecisionThoughtOnBigdata/"/>
    <id>http://c-xuan.com/2016/10/15/DecisionThoughtOnBigdata/</id>
    <published>2016-10-15T14:45:07.000Z</published>
    <updated>2016-10-15T14:59:06.346Z</updated>
    
    <content type="html"><![CDATA[<h3 id="决策是非理性的"><a href="#决策是非理性的" class="headerlink" title="决策是非理性的"></a>决策是非理性的</h3><p>我们受到的教育是要理性思考,理性决策,信奉理性至上的思维模式。可惜的是现实并非如此,绝大多数的决策都是采用自然主义决策方式,而情景模拟又是其主流方法。对此感兴趣的朋友建议查看亚马逊近期榜单作品《如何做出正确决策:直击决策真相》了解更多。</p>
<p>简而言之,无论是紧迫条件的救火队员还是军事要务的重大决定,决策的真相都如同我们前面介绍的方式:脑海中假设一条可行道路,一步步证明它是可行的。</p>
<p>说到专家和普通决策的区别,大家还是要注意这个真相:专家决策都是迅速定下一条可行方案,而非拿出多套方案理性对比! </p>
<a id="more"></a>
<h3 id="大数据负责人的要求是什么"><a href="#大数据负责人的要求是什么" class="headerlink" title="大数据负责人的要求是什么"></a>大数据负责人的要求是什么</h3><h4 id="有成功大数据经验"><a href="#有成功大数据经验" class="headerlink" title="有成功大数据经验"></a>有成功大数据经验</h4><p>大家要注意,我举证论据,至少都是讲三点的,可我这里只给出一条。 经常查看此类招聘的朋友很容易看出来,另外两点因素是职业素养和对大数据生态的理解,我完全同意这个看法,但此处认为和我举证这一点比,其他的都完全不是问题。</p>
<h5 id="为什么要有成功大数据经验"><a href="#为什么要有成功大数据经验" class="headerlink" title="为什么要有成功大数据经验?"></a>为什么要有成功大数据经验?</h5><ul>
<li>1.因为招聘你去的地方通常是没有成功经验的,不然要你去干吗?</li>
<li>2.具备成功大数据经验的人真的很少! 这里大家应该慎重考虑下,基于这个观点,跳槽、换团队是大忌。为什么?因为如果你已经有成功经验,机会根本不是问题。而你不幸没有成功经验,跳槽、换团队都不能解决你成功经验的问题。</li>
<li>3.大数据项目的成功,不会只有一个人,但会取决于核心人物。好好珍惜现有团队,做成项目,并且不要说不懂其他同事的工作。大数据本来就是融合型工作,你永远只会自己做的一块,就不要费时间争取负责人的角色了。</li>
</ul>
<h5 id="为什么工作素养和-hadoop-等生态理解不重要"><a href="#为什么工作素养和-hadoop-等生态理解不重要" class="headerlink" title="为什么工作素养和 hadoop 等生态理解不重要?"></a>为什么工作素养和 hadoop 等生态理解不重要?</h5><p>这个问题起码要说三点:</p>
<ul>
<li>1.工作素养大部分都能做得很好,极少成为个人瓶颈不是吗?难道不是吗?</li>
<li>2.面试要求的 hadoop、spark、storm……这些不是招聘者的本质要求,招聘你去的真正需求是能将项目做出来,做成功。至于这些细节技术方案,面试者有多少人懂得?再说了,开源系统版本迭代那么快,完全依靠这些方案要踩多少坑招聘者哪里知道?不仅如此,作为负责人是要规避让企业踩坑才合格!</li>
<li>3.我看到好多人转向大数据,学 python 又学 R, 学 Java 又学 Scala, 学数据库又学数据仓库。这样的做法可行吗? 真心奉劝停下来冷静思考下!</li>
</ul>
<p>大数据是团队项目,不是单兵作战! 再说了,等你把所有学完, 企业等的花儿都谢了好么? 随便学一个感兴趣的, 找到工作再一步步深入, 各种大会、各种社区适合有经验的人、有方法的人,这些场景只要记住大家推荐的书籍回来好好学任务就完成了。</p>
<h3 id="补偿机制的使用"><a href="#补偿机制的使用" class="headerlink" title="补偿机制的使用"></a>补偿机制的使用</h3><p>我们常说:”打一个耳光给一个苹果”,是不是耳光就没那么疼了?</p>
<p>这不止是一个心理现象,在面试大数据负责人这样重要岗位时一样可以用于决策。</p>
<p>通常我们做出决策时,会在自己优势领域选定方案持续推进。要么成功达到目标,要么走不下去调转方向,可最终都是能完成任务的。</p>
<p>那么为什么就算是专家也会遇到放弃方案跳转方向的情况,一方面是我们的确会遇到各种未知的问题,另一个更重要的方面就是:我们每个人在多个维度都有优点,切记!</p>
<p>我们总看到话术中说:”同学你工作做得不好,但你在工作过程中表现出来的沟通能力还是很强的。”类似的情况数不胜数,与其说是心理补偿机制,倒不如说展示出我们每个人其实都不只有一个优势领域!</p>
<p>那么这和大数据负责人招聘又有什么关系呢?</p>
<ul>
<li>1.大数据负责人也是人,有长处也有短板。就算平时勤快对团队工作都了解, 涉及到每一块深度领域细节所知也是很有限的。</li>
<li>2.有限的人遇到无知的需求。这里用词不太合适,但其实很多企业寻找人才时对这个领域是一片空白的。那么提出的要求自然是互联网上随处能搜集到的岗位需求模板。虽然大家都理解每个公司、每个团队做数据都有些不同之处,但对于完全不了解行情的公司只能然并卵。除了网上找模板我也想不出更好的办法了。</li>
<li>3.有限的人要用优点补充缺点。招聘的时候发现你可视化不强,那应该展示自己数据仓库的优势了,如果发现你 hadoop 不熟,你是时候分享对 storm 的研究成果了。 大家要考虑清楚团队项目中的个人定位, 一味地追求个人什么都会,项目发展会很有限,企业也会很不放心啊。</li>
</ul>
<p>转自<br><a href="http://www.infotrim.cn/article/7" target="_blank" rel="external">http://www.infotrim.cn/article/7</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;决策是非理性的&quot;&gt;&lt;a href=&quot;#决策是非理性的&quot; class=&quot;headerlink&quot; title=&quot;决策是非理性的&quot;&gt;&lt;/a&gt;决策是非理性的&lt;/h3&gt;&lt;p&gt;我们受到的教育是要理性思考,理性决策,信奉理性至上的思维模式。可惜的是现实并非如此,绝大多数的决策都是采用自然主义决策方式,而情景模拟又是其主流方法。对此感兴趣的朋友建议查看亚马逊近期榜单作品《如何做出正确决策:直击决策真相》了解更多。&lt;/p&gt;
&lt;p&gt;简而言之,无论是紧迫条件的救火队员还是军事要务的重大决定,决策的真相都如同我们前面介绍的方式:脑海中假设一条可行道路,一步步证明它是可行的。&lt;/p&gt;
&lt;p&gt;说到专家和普通决策的区别,大家还是要注意这个真相:专家决策都是迅速定下一条可行方案,而非拿出多套方案理性对比! &lt;/p&gt;
    
    </summary>
    
      <category term="BI墨客" scheme="http://c-xuan.com/categories/BI%E5%A2%A8%E5%AE%A2/"/>
    
    
      <category term="转载" scheme="http://c-xuan.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="BigData" scheme="http://c-xuan.com/tags/BigData/"/>
    
  </entry>
  
  <entry>
    <title>是时候管理你的知识了</title>
    <link href="http://c-xuan.com/2016/10/08/TimeForPKM/"/>
    <id>http://c-xuan.com/2016/10/08/TimeForPKM/</id>
    <published>2016-10-08T14:47:03.000Z</published>
    <updated>2016-10-09T14:48:25.335Z</updated>
    
    <content type="html"><![CDATA[<p>今天饶有兴趣的了解了PKM，深感做好PMK还真不是件容易事。从小到大，我们都说学习知识，也就说明知识并不会简单的成为自己的东西，知识在成为自己的之前的身份是信息。从信息转化为自己的知识是有一个过程，这就是自己的思考、总结、应用以及分享。</p>
<p>所以也就不难理解，从小到大，我们在学习之后要做练习，学是我们接收信息的过程，习则是引导我们进行思考然后运用的过程。现在回想起来，这一路学习知识的过程总少了一点什么，是的，我们做了很多练习，背了很多东西，然而知识在成为了自己的之后却很快又溜走了，时间长了就遗忘了是一个因素，另一个重要的因素是没有将知识管理起来的思想，他们大多成了我们脑海里的碎片，彼此没有关联。</p>
<a id="more"></a>
<p>大学时读的专业是信息管理，毕业拿了管理学士学位，现在想起来连最起码的知识管理都不会，真是惭愧。</p>
<h3 id="PKM是什么"><a href="#PKM是什么" class="headerlink" title="PKM是什么"></a>PKM是什么</h3><blockquote>
<p>个人知识管理（Personal Knowledge Management）的概念一般指个人通过工具建立知识体系并不断完善，进行知识的收集、消化吸收和创新的过程。</p>
</blockquote>
<p>说白了，PKM就是将信息转化为自己的知识后有序的存储在自己的记忆里。</p>
<h3 id="为什么需要PKM"><a href="#为什么需要PKM" class="headerlink" title="为什么需要PKM"></a>为什么需要PKM</h3><p>德鲁克说过，没有人为你负责，除了你自己，而你唯一的资本就是知识。你唯一的能力就是应用知识创造价值的能力PKM的最终目标仍然是提升自我的核心竞争力，体现知识创造价值，因此就需要再次强调了不能脱离了某个场景或领域来单独的谈个人知识管理，否则就失去了目标和方向。</p>
<p>当然放在现在这样的社会，只要你不是富二代，官二代，不愁吃穿，希望用知识的力量改变自己的人，都需要PKM吧。</p>
<h3 id="与PIM的区别"><a href="#与PIM的区别" class="headerlink" title="与PIM的区别"></a>与PIM的区别</h3><p>PIM(Personal Information Management)即个人信息管理，与个人知识管理的区别也就是信息与知识的区别了，我们每天通过网络，新闻，他人诉说接收到了很多信息，信息大爆炸的时代，获取信息对我们来说很容易，然而我们记住了多少，总结了多少，运用了多少？简单的拿来主义不会让我们沉淀多少知识，转化需要一个过程。</p>
<h3 id="怎么做PKM"><a href="#怎么做PKM" class="headerlink" title="怎么做PKM"></a>怎么做PKM</h3><p>管理需要一套方法，概括起来：</p>
<ul>
<li>1.收集信息</li>
<li>2.吸收知识</li>
<li>3.实践应用</li>
<li>4.分享探讨</li>
</ul>
<p>信息时代的今天，在每个过程中都可以采用一些信息技术工具来帮助我们管理自己的知识。目标就是将信息分类，多回顾多思考，用管理思想让知识为我们创造财富。</p>
<p>以下简单画了一个思维导图：</p>
<center><img src="/img/posts/PKM-1.gif"></center>

<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>PKM的开始可能都不完美，这中间需要一个漫长的过程，不断的实践，借鉴，迭代调整，找到适合自己的方法。愿我们都在知识的海洋中驰骋而不迷失方向。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天饶有兴趣的了解了PKM，深感做好PMK还真不是件容易事。从小到大，我们都说学习知识，也就说明知识并不会简单的成为自己的东西，知识在成为自己的之前的身份是信息。从信息转化为自己的知识是有一个过程，这就是自己的思考、总结、应用以及分享。&lt;/p&gt;
&lt;p&gt;所以也就不难理解，从小到大，我们在学习之后要做练习，学是我们接收信息的过程，习则是引导我们进行思考然后运用的过程。现在回想起来，这一路学习知识的过程总少了一点什么，是的，我们做了很多练习，背了很多东西，然而知识在成为了自己的之后却很快又溜走了，时间长了就遗忘了是一个因素，另一个重要的因素是没有将知识管理起来的思想，他们大多成了我们脑海里的碎片，彼此没有关联。&lt;/p&gt;
    
    </summary>
    
      <category term="随笔感悟" scheme="http://c-xuan.com/categories/%E9%9A%8F%E7%AC%94%E6%84%9F%E6%82%9F/"/>
    
    
      <category term="原创" scheme="http://c-xuan.com/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="知识管理" scheme="http://c-xuan.com/tags/%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>那些年，我们没有微信</title>
    <link href="http://c-xuan.com/2016/09/21/NoWeChatBefore/"/>
    <id>http://c-xuan.com/2016/09/21/NoWeChatBefore/</id>
    <published>2016-09-21T14:41:16.000Z</published>
    <updated>2016-09-22T16:15:38.594Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/posts/NoWeChatBefore-1.jpg" alt="NoWeChatBefore-1"></p>
<p>你朋友圈的第一条状态是什么时间？<br>我的第一条状态来自2012年12月6日，我是个比较愚钝的人，那天之前我用的还是诺基亚E63，红色的全键盘手机，大学男朋友送的，上学时候超酷。</p>
<a id="more"></a>
<p>后来，这部E63和送E63给我的人，都相继离开了我。但是很久以后，我还记得摁E63全键盘时候的感觉，突兀不平的小按钮如同多年来开启记忆的键盘，生硬而又真实存在的痕迹。</p>
<p><img src="/img/posts/NoWeChatBefore-2.jpg" alt="NoWeChatBefore-2"></p>
<p>2009年的时候，我们还在热衷于互踩QQ空间，每天都要去好朋友的空间留言，证明万古长青的友谊。在空间里养花藤、偷菜、开饭馆、开牧场，花着钱在学校网吧里偷菜，一个都不放过，乐此不疲。如今，我再也没勇气点开空间的农场、牧场和饭馆。我害怕看到满屏的狼藉，就如同未曾来及认真告别的青春岁月，呼啸而过的全是兵荒马乱的伤感。偶尔翻翻以前的留言板，字里行间熟悉而又陌生的炙热让自己常常自问，忙着向前奔跑的这些年到底失去了什么。</p>
<p><img src="/img/posts/NoWeChatBefore-3.jpg" alt="NoWeChatBefore-3"></p>
<p>2008年，大江南北唱的都是《北京欢迎你》。我们是在KTV《北京欢迎你》的大合唱中毕业的。那时候年轻的我们轻而易举的承诺，信誓旦旦的诉说未来，这些后来都成为了回忆里无法承受的负重。在师大田家炳教学楼九楼，我第一次有了自己的人人网账号，那时候人人网还叫校内网。每天刷不完的分享，各种视频、各种图集、各种文章。现在手机里还有人人网的客户端，偶尔登录也不过是抱着侥幸想法去看看，不存在于微信好友，又屏蔽了QQ空间动态的当日同窗会不会在人人网上更新状态。只是想知道你过得好，记忆似乎都少了些尘土的味道。只可惜尘封不动的人人网，只有自己偶尔的自娱自乐。就如同这些年来，念念不忘只不过是自己对岁月的藕断丝连，有点孤单，有点荒芜。</p>
<p><img src="/img/posts/NoWeChatBefore-4.jpg" alt="NoWeChatBefore-4"></p>
<p>2010年，有一个软件叫飞信。用飞信互加了好友，发信息不要钱。它比QQ方便，我们曾经的塞班系统里，都有这个软件。我们用飞信一起约上课、约逛街、约吃饭。即使它会偶尔系统延缓，没有及时收到信息，我们仍然执着的使用它。远远不如现在微信便捷的飞信那头，却永远都有一个人给你回音。你哭你笑，身边都有一帮吵吵闹闹，不离不弃的伙伴。大学时候宿舍的老小，每个月包免费短信、免费语音最多的套餐，和异地的男朋友煲电话粥，一打就好几个小时。宿舍的灯都熄了很久，她才会回来，带着笑意或者泪水。现在她快结婚了，新郎不是那个愿意每日在深夜里陪着她讲好几个小时电话的男孩。我们也只能笑着去释怀，一起度过的青春，谁都不亏欠谁，因为青春就是用来怀念的。</p>
<p><img src="/img/posts/NoWeChatBefore-5.jpg" alt="NoWeChatBefore-5"></p>
<p>2016年，距离那些年已经过去很久，16岁的高中也好，19岁的大学也罢。在频频回首之间，已无当年。来时的路，一直走一直失去，在没有意识到的青春。失去的除了童年那个有很多件花裙子的洋娃娃，除了信誓旦旦说着友谊万古长青的好朋友，除了承诺陪伴你走到白头的初恋，除了朝夕相处憧憬梦想的同窗，还有那颗曾经永远不知忧愁烦恼的快乐的心。慢慢的，心里什么都没有了就像没有了痛苦。<br>我们在朋友圈写下，最近生活很糟，想了三十秒，删除。发呆五分钟后，重新打了一个微笑的表情，不到十分钟，收到几十个赞。拉出来一个曾经的好友，发送最近好吗？三十分钟后，收到回复，恩。<br>宁愿拉上窗帘躲在被子里睡一觉，因为再也感受不到曾经用着诺基亚手机，每日在空间偷菜，为了省钱发飞信，每月套餐内免费短信和语音都不够用的快乐。</p>
<p>文/凌云端<br>转自：<a href="http://www.5time.cn/show/25216.html" target="_blank" rel="external">http://www.5time.cn/show/25216.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/img/posts/NoWeChatBefore-1.jpg&quot; alt=&quot;NoWeChatBefore-1&quot;&gt;&lt;/p&gt;
&lt;p&gt;你朋友圈的第一条状态是什么时间？&lt;br&gt;我的第一条状态来自2012年12月6日，我是个比较愚钝的人，那天之前我用的还是诺基亚E63，红色的全键盘手机，大学男朋友送的，上学时候超酷。&lt;/p&gt;
    
    </summary>
    
      <category term="生活点滴" scheme="http://c-xuan.com/categories/%E7%94%9F%E6%B4%BB%E7%82%B9%E6%BB%B4/"/>
    
    
      <category term="转载" scheme="http://c-xuan.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>Play Framework 2.5 环境搭建与新建项目（二）</title>
    <link href="http://c-xuan.com/2016/09/21/PlayFrameworkInit2/"/>
    <id>http://c-xuan.com/2016/09/21/PlayFrameworkInit2/</id>
    <published>2016-09-21T13:18:31.000Z</published>
    <updated>2016-09-24T16:32:41.539Z</updated>
    
    <content type="html"><![CDATA[<h2 id="activator-ui-方式"><a href="#activator-ui-方式" class="headerlink" title="activator ui 方式"></a>activator ui 方式</h2><p>打开命令行窗口，输入以下命令：</p>
<pre><code>activator ui
</code></pre><a id="more"></a>    
<p><img src="/img/posts/PlayFrameworkInit-14.gif" alt="PlayFrameworkInit-14"></p>
<p>浏览器中打开一个页面，类似于一个IDE，实际上也是一个网页版的IDE。</p>
<p><img src="/img/posts/PlayFrameworkInit-11.gif" alt="PlayFrameworkInit-11"></p>
<p>选择 <code>Seeds-&gt;Play Java Seed</code>，在右下角选择项目创建到的文件夹路径，然后点 <code>Create app</code> 完成创建。 </p>
<p>在Build页面，可以看到初始化项目时引入依赖包等等。如果是首次创建项目，等待时间应该会很久，跟命令行创建过程差不多。</p>
<p><img src="/img/posts/PlayFrameworkInit-12.gif" alt="PlayFrameworkInit-12"></p>
<p>Code页面可以查看项目创建的文件结构以及编辑代码，虽说是一个开发环境，编辑代码的时候是没有提示的，不像Eclipse或者Intellij idea那么方便，在目录结构导航菜单中，可以看到一些新建文件夹和文件等菜单，对于 <code>Create Eclipse project</code> <code>Create Intellij project</code> 菜单，他们可以将你的项目转换成Eclipse或者Idea的目录结构，更好的导入。</p>
<p><img src="/img/posts/PlayFrameworkInit-13.gif" alt="PlayFrameworkInit-13"></p>
<p>在Run界面，可以启动项目，然后在浏览器中浏览项目页面，前提是Build完成。</p>
<h2 id="intellij-idea-方式"><a href="#intellij-idea-方式" class="headerlink" title="intellij idea 方式"></a>intellij idea 方式</h2><p>官网给出用Eclipse或者intellij idea的编程环境来创建和调试Play项目的方法，这里用idea, eclipse赶脚太麻烦了。我用的idea 2015的。进入设置看下</p>
<p><img src="/img/posts/PlayFrameworkInit-15.gif" alt="PlayFrameworkInit-15"></p>
<p>进入设置看下Scala和SBT两个插件是否安装了，如果没有，点击 <code>Browse repositories</code>安装一下。</p>
<p><img src="/img/posts/PlayFrameworkInit-16.gif" alt="PlayFrameworkInit-16"></p>
<h3 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h3><p>在新建项目面板中，<code>Scala-&gt;Activator</code> </p>
<p><img src="/img/posts/PlayFrameworkInit-17.gif" alt="PlayFrameworkInit-17"></p>
<p>然后下一步，填入项目名称，下面选择模板，键盘输入play java seed就会找到这个选项。下面的Project SDK就是本机的JDK环境。点击完成。</p>
<p><img src="/img/posts/PlayFrameworkInit-18.gif" alt="PlayFrameworkInit-18"></p>
<p>新建项目需要引入一些依赖包，所以很慢。</p>
<p><img src="/img/posts/PlayFrameworkInit-19.gif" alt="PlayFrameworkInit-19"></p>
<h3 id="导入项目"><a href="#导入项目" class="headerlink" title="导入项目"></a>导入项目</h3><p>选择导入项目所在文件夹。</p>
<p><img src="/img/posts/PlayFrameworkInit-20.gif" alt="PlayFrameworkInit-20"></p>
<p>项目模块选择SBT。</p>
<p><img src="/img/posts/PlayFrameworkInit-21.gif" alt="PlayFrameworkInit-21"></p>
<p>完成设置。</p>
<p><img src="/img/posts/PlayFrameworkInit-22.gif" alt="PlayFrameworkInit-22"></p>
<h3 id="启动调试"><a href="#启动调试" class="headerlink" title="启动调试"></a>启动调试</h3><p>官方给的是，在Edit Config菜单中，点击 <code>+</code> 选择SBT Task，然后Name里写个名称，Tasks里输个 <code>run</code> 就可以了。</p>
<p><img src="/img/posts/PlayFrameworkInit-25.gif" alt="PlayFrameworkInit-25"></p>
<p><img src="/img/posts/PlayFrameworkInit-26.gif" alt="PlayFrameworkInit-26"></p>
<p><img src="/img/posts/PlayFrameworkInit-23.gif" alt="PlayFrameworkInit-23"></p>
<p>但是几次启动调试都失败了，比如下面的错误，不知道啥原因。估计是有什么依赖包没下载全。</p>
<p><img src="/img/posts/PlayFrameworkInit-24.gif" alt="PlayFrameworkInit-24"></p>
<p>我们其实可以在项目文件中右键，然后在菜单中选择 <code>Run Play 2 App</code>菜单，就可以启动项目。</p>
<p><img src="/img/posts/PlayFrameworkInit-27.gif" alt="PlayFrameworkInit-27"></p>
<p>这时候在运行调试编辑中可以看到有一个Play 2 App的项目了。</p>
<p><img src="/img/posts/PlayFrameworkInit-28.gif" alt="PlayFrameworkInit-28"></p>
<p>如果信息窗口中出现以下提示信息：</p>
<p><strong>SBT compilation for play framework 2.x disabled by default</strong></p>
<p>进入File-&gt;Setting菜单，将下面选项勾选即可。</p>
<p><img src="/img/posts/PlayFrameworkInit-29.gif" alt="PlayFrameworkInit-29"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;activator-ui-方式&quot;&gt;&lt;a href=&quot;#activator-ui-方式&quot; class=&quot;headerlink&quot; title=&quot;activator ui 方式&quot;&gt;&lt;/a&gt;activator ui 方式&lt;/h2&gt;&lt;p&gt;打开命令行窗口，输入以下命令：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;activator ui
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="码路刺客" scheme="http://c-xuan.com/categories/%E7%A0%81%E8%B7%AF%E5%88%BA%E5%AE%A2/"/>
    
    
      <category term="原创" scheme="http://c-xuan.com/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="Play Framework" scheme="http://c-xuan.com/tags/Play-Framework/"/>
    
  </entry>
  
  <entry>
    <title>Play Framework 2.5 环境搭建与新建项目（一）</title>
    <link href="http://c-xuan.com/2016/09/20/PlayFrameworkInit/"/>
    <id>http://c-xuan.com/2016/09/20/PlayFrameworkInit/</id>
    <published>2016-09-19T16:40:51.000Z</published>
    <updated>2016-09-24T15:33:17.947Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Play Framework是啥？引用下百度百科的说法：</p>
<blockquote>
<p>Play！是一个full-stack（全栈的）Java Web应用框架，包括一个简单的无状态MVC模型，具有Hibernate的对象持续，一个基于Groovy的模板引擎，以及建立一个现代Web应用所需的所有东西。</p>
</blockquote>
<p>当然，这个介绍是比较旧的，对于老版本的Play!，这么说没毛病。进入<a href="https://www.playframework.com/" target="_blank" rel="external">Play!官网</a>看看，满眼的绿啊，有一股清新之感呐。版本都到<code>2.5.8</code>了。追溯1.0版本都是在2010.07.28发布的，到现在已经有6年时间了。</p>
<a id="more"></a>
<p><img src="/img/posts/PlayFrameworkInit-1.gif" alt="PlayFrameworkInit-1"></p>
<p>其实从Play!2.3.8版本开始变化就很大了，引入了<code>activator</code>,<code>typesafe</code>,<code>SBT</code>啥啥的各种东东，一开始都不大懂这些，只要知道跟之前版本相差很远就好了。这个号称是拯救Java程序员的神器，带着一颗好(zhe)奇(teng)的心开始探索一番。</p>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h3><p><img src="/img/posts/PlayFrameworkInit-2.gif" alt="PlayFrameworkInit-2"></p>
<p>进入到官网的下载界面，点击下载就可以了，一个名为<code>typesafe-activator-1.3.10-minimal.zip</code>的压缩文件，没错，这就是全部了。但是从名字里的minimal就可以看出这是个精简版的环境包，用这个有代价的噢，尤其在我大天朝。在新建项目的时候会下载各种依赖包，很多国外站点在国内访问是很慢的，所以新建项目的过程非常考验耐性。所以还是下载那个Offline Distrbution版本的，离线版本的600+M，本以为用这个离线版的会快很多，结果。。。。。。。。是谁谁应该都会吐槽，这TM不是离线的麽，下了几百兆的东西，你告我创建项目的时候还要更新和各种下载依赖包！！！！！</p>
<p>不过突然想到一个问题，人家是离线包，我在新建项目的时候是连着网的，莫非是要把网断开么！行，我等下试试。</p>
<h3 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h3><p>按正常步骤来，把下载的压缩包加压到一个目录里，比如:</p>
<p>F:\PlayFramework\typesafe-activator-1.3.10\activator-dist-1.3.10</p>
<p>然后进入到bin目录，复制地址栏的地址:</p>
<p>F:\PlayFramework\typesafe-activator-1.3.10\activator-dist-1.3.10\bin</p>
<p>把这个加到Windows的环境变量里，怎么添加我就不多讲了。</p>
<p>添加完以后，在你想创建项目的目录下空白处按住<code>Shit</code>键，然后点鼠标右键，弹出菜单选择“在此处打开命令行”弹出命令行窗口。输入<code>activator</code>命令，然后在浏览器中打开一个说明页面的话就说明环境变量添加的没问题了。</p>
<h3 id="小问题"><a href="#小问题" class="headerlink" title="小问题"></a>小问题</h3><p><img src="/img/posts/PlayFrameworkInit-3.gif" alt="PlayFrameworkInit-3"></p>
<p>关于那个系统找不到文件提示：</p>
<p><strong>ACTIVATOR_HOME=F:\PlayFramework\typesafe-activator-1.3.10\activator-dist-1.3.10<br>系统找不到文件 BIN_DIRECTORY..\conf\sbtconfig.txt。</strong></p>
<p>这个其实没啥影响，但是非要纠结的话，可以用文本编辑器看看</p>
<p>F:\PlayFramework\typesafe-activator-1.3.10\activator-dist-1.3.10\bin</p>
<p>目录下的 <strong>activator.bat</strong> 文件。找到</p>
<p><img src="/img/posts/PlayFrameworkInit-4.gif" alt="PlayFrameworkInit-4"></p>
<pre><code>set SBT_HOME=%BIN_DIRECTORY
</code></pre><p>这行，不知道是官方故意怎么干的还是马虎造成的错误，感觉少了个<code>%</code>，应该是</p>
<pre><code>set SBT_HOME=%BIN_DIRECTORY%
</code></pre><p>改成上述那样其实也会报错，因为</p>
<p>F:\PlayFramework\typesafe-activator-1.3.10\activator-dist-1.3.10\</p>
<p>路径下就没有conf文件夹，里面就没有sbtconfig.txt文件，要是真看着不舒服的话，就建一个conf文件夹，然后里面建一个sbtconfig.txt配置文件，然后把下面这段复制到文件里面：</p>
<pre><code># Set the java args to high

-Xmx512M

-XX:MaxPermSize=256m

-XX:ReservedCodeCacheSize=128m

# Set the extra SBT options

-Dsbt.log.format=true
</code></pre><h2 id="项目创建和启动"><a href="#项目创建和启动" class="headerlink" title="项目创建和启动"></a>项目创建和启动</h2><h3 id="命令行方式"><a href="#命令行方式" class="headerlink" title="命令行方式"></a>命令行方式</h3><p>下面就正式用命令行创建项目了。命令行输入</p>
<pre><code>activator new onlineTest
</code></pre><p>onlineTest是项目名称，然后稍等下会列出一些模板名称，根据个人喜好，用Java就输入5然后回车，用Scala语言写程序的就输入6然后回车，其他的我没试，不过就是创建一个项目结构目录嘛，大概差不多。</p>
<p><img src="/img/posts/PlayFrameworkInit-5.gif" alt="PlayFrameworkInit-5"></p>
<p>然后就看到F:\PlayFramework目录下多了一个文件夹，名称就是你输入的项目名称。<br>继续命令行输入 </p>
<pre><code>cd onlineTest 
</code></pre><p>切换到项目目录下，再输入 </p>
<pre><code>activator run 
</code></pre><p>就会编译项目然后启动运行服务了。</p>
<p><img src="/img/posts/PlayFrameworkInit-6.gif" alt="PlayFrameworkInit-6"></p>
<p>得说一下，因为我之前创建过项目了，换句话说该下载的依赖包都下载了，所以很快。就启动了，在浏览器输入</p>
<pre><code>localhost:9000
</code></pre><p>就可以看到界面了。</p>
<p><img src="/img/posts/PlayFrameworkInit-7.gif" alt="PlayFrameworkInit-7"></p>
<p>但是如果是第一次创建的话，而且还是在国内没有什么破墙手段的话，对不住了您呐，先沏壶茶，嗑袋瓜子，睡个午觉，那等的花都谢了。</p>
<p>一开始我还好奇，它下载的东西都哪去了，没往项目目录里下载，其实是往用户目录下的 <strong>.ivy2</strong> 和 <strong>.sbt</strong> 两个隐藏文件夹里下载了，如果你看到这两个文件夹的大小有变化，恭喜你，就是在下载依赖包的路上了。很有可能你一个午觉醒来发现瓦擦！中途网络下载超时启动失败了！那么同样恭喜你，换个网络或者同一个网络下再试几次。毕竟Play!框架嘛，有种被Play的赶脚。</p>
<p><img src="/img/posts/PlayFrameworkInit-8.gif" alt="PlayFrameworkInit-8"></p>
<p>其实我也试过像之前我说的把网络断掉，然后运行启动命令，可能还是因为我这之前下载过了依赖包，所以很快，不大清楚首次创建运行项目的时候咋样，你可以试试。</p>
<p>唉，本来想睡觉的，但是还是想好（zhe）奇（teng）下断网会怎样，我就把用户目录下的.ivy2和.sbt两个隐藏文件夹删了，然后断开网络，重新建一个offlineTest项目试试。</p>
<p><img src="/img/posts/PlayFrameworkInit-9.gif" alt="PlayFrameworkInit-9"></p>
<p>得，报错了，我输入过ignore，直接停止了，不行，我有试过last，然后看到命令行窗口刷刷刷的快速往上飘各种信息。感觉有希望啊。然后又来了一个停顿</p>
<p><img src="/img/posts/PlayFrameworkInit-10.gif" alt="PlayFrameworkInit-10"></p>
<p>继续输入last，回车后继续刷刷刷的。。。。。好久。。。。。好想睡觉。</p>
<p>又来了个停顿，输入last回车。。。。。等~等灯等灯~</p>
<p>后面又输入两次last，还没完事儿。。。。。算了睡觉!!</p>
<p>后续</p>
<p><a href="/2016/09/21/PlayFrameworkInit2">Play Framework 2.5 环境搭建与新建项目（二）</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;Play Framework是啥？引用下百度百科的说法：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Play！是一个full-stack（全栈的）Java Web应用框架，包括一个简单的无状态MVC模型，具有Hibernate的对象持续，一个基于Groovy的模板引擎，以及建立一个现代Web应用所需的所有东西。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当然，这个介绍是比较旧的，对于老版本的Play!，这么说没毛病。进入&lt;a href=&quot;https://www.playframework.com/&quot;&gt;Play!官网&lt;/a&gt;看看，满眼的绿啊，有一股清新之感呐。版本都到&lt;code&gt;2.5.8&lt;/code&gt;了。追溯1.0版本都是在2010.07.28发布的，到现在已经有6年时间了。&lt;/p&gt;
    
    </summary>
    
      <category term="码路刺客" scheme="http://c-xuan.com/categories/%E7%A0%81%E8%B7%AF%E5%88%BA%E5%AE%A2/"/>
    
    
      <category term="原创" scheme="http://c-xuan.com/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="Play Framework" scheme="http://c-xuan.com/tags/Play-Framework/"/>
    
  </entry>
  
  <entry>
    <title>电脑右键菜单中没有新建和在此处打开命令行选项的问题</title>
    <link href="http://c-xuan.com/2016/09/17/PCProblemRightKeyItem/"/>
    <id>http://c-xuan.com/2016/09/17/PCProblemRightKeyItem/</id>
    <published>2016-09-17T14:21:16.000Z</published>
    <updated>2016-09-22T16:15:58.082Z</updated>
    
    <content type="html"><![CDATA[<p>不知道由于什么原因，突然发现鼠标右键没有了新建选项，想新建个文件夹都不行，而且在计算机里的“新建文件夹”也不行。 </p>
<a id="more"></a>
<p><img src="/img/posts/PCProblemRightKeyItem-1.png" alt="PCProblemRightKeyItem-1"></p>
<p>网上搜了下，给出以下解决方法可行，我的系统是Windows 10 的。</p>
<p>开始菜单中搜 “cmd” 或者用 <code>Win + R</code> 快捷键打开命令行窗口，输入以下命令回车即可。</p>
<pre><code>reg add &quot;HKEY_CLASSES_ROOT\Directory\Background\shellex\ContextMenuHandlers\New&quot; /ve /d &quot;{D969A300-E7FF-11d0-A93B-00A0C90F2719}&quot; /t REG_SZ /f
</code></pre><p>对于一般正常的Windows系统，在文件夹空白部分按住shift键再单击鼠标右键会多出来一个“在此处打开命令”选项，这样命令行执行的路径就可以直接到你所在的文件夹中，不需要<code>cd</code>命令切换。今天莫名其妙发现这个“在此处打开命令”选项没了。</p>
<p>网上搜罗后虽没找到解决方法，但是有另外方法打开这个命令行：<br>在文件夹中按<code>Alt+D</code>键，此时光标聚焦到上方的地址栏，再输入<code>cmd</code>回车就可以打开命令行窗口了。</p>
<p>后来发现软媒魔方软件可以解决。打开软媒设置，在右键菜单-&gt;添加右键菜单项目中勾选“在此处打开命令窗口”就可以了。</p>
<p><img src="/img/posts/PCProblemRightKeyItem-2.png" alt="PCProblemRightKeyItem-2"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不知道由于什么原因，突然发现鼠标右键没有了新建选项，想新建个文件夹都不行，而且在计算机里的“新建文件夹”也不行。 &lt;/p&gt;
    
    </summary>
    
      <category term="生活点滴" scheme="http://c-xuan.com/categories/%E7%94%9F%E6%B4%BB%E7%82%B9%E6%BB%B4/"/>
    
    
      <category term="原创" scheme="http://c-xuan.com/tags/%E5%8E%9F%E5%88%9B/"/>
    
  </entry>
  
  <entry>
    <title>【PowerDesigner】Constraint name uniqueness问题及处理</title>
    <link href="http://c-xuan.com/2016/09/12/ConstraintNameUniquenessProblem/"/>
    <id>http://c-xuan.com/2016/09/12/ConstraintNameUniquenessProblem/</id>
    <published>2016-09-12T15:31:09.000Z</published>
    <updated>2016-09-22T16:13:27.608Z</updated>
    
    <content type="html"><![CDATA[<p>使用PowerDesigner生成数据库脚本时报 Constraint name uniqueness 错误：</p>
<p><img src="/img/posts/ConstraintNameUniquenessProblem-1.png" alt="ConstraintNameUniquenessProblem-01"></p>
<a id="more"></a>
<p>双击每行错误，发现外键引用的名字有重复的：</p>
<p><img src="/img/posts/ConstraintNameUniquenessProblem-2.png" alt="ConstraintNameUniquenessProblem-02"></p>
<p>惯性去网上找解决办法，找到的主要是两个方法：</p>
<p><strong>1.使用Automatic Correction</strong></p>
<p>右键错误行，菜单中选择Automatic Correction，自动更正错误。</p>
<p><img src="/img/posts/ConstraintNameUniquenessProblem-3.png" alt="ConstraintNameUniquenessProblem-03"></p>
<p>这样Constraint name 就会自动编号处理。</p>
<p><img src="/img/posts/ConstraintNameUniquenessProblem-4.png" alt="ConstraintNameUniquenessProblem-04"></p>
<p><strong>2.手动修改Constraint name</strong></p>
<p>在外键引用编辑页面，点击Constraint name最右面的那个头像，然后修改Constraint name名称就可以了。</p>
<p><img src="/img/posts/ConstraintNameUniquenessProblem-5.png" alt="ConstraintNameUniquenessProblem-05"></p>
<p>虽然可以解决问题，但感觉治标不治本。仔细看自动生成的Constraint name，应该是有一个模版，根据名称模板自动生成的。只要找到这个名称模板，根据自己的规则修改下不就好了。所以给出第三种处理方法。</p>
<p><strong>3.修改引用名称模板</strong></p>
<p>菜单项  数据库(Database)-&gt;Edit Current DBMS…<br>找到Scipt-&gt;Objects-&gt;Reference-&gt;ConstName节点，看到Value值就是自动生成的引用名称模板，具体含义就不解释了，对比下实际生成的引用名称就明白了，我改成 FK<em>%REFR% ，让自动生成的名称就是外键编辑窗口中自定义的Code名称加个FK</em>前缀就行了。</p>
<p><img src="/img/posts/ConstraintNameUniquenessProblem-6.png" alt="ConstraintNameUniquenessProblem-06"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用PowerDesigner生成数据库脚本时报 Constraint name uniqueness 错误：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/ConstraintNameUniquenessProblem-1.png&quot; alt=&quot;ConstraintNameUniquenessProblem-01&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="BI墨客" scheme="http://c-xuan.com/categories/BI%E5%A2%A8%E5%AE%A2/"/>
    
    
      <category term="BI" scheme="http://c-xuan.com/tags/BI/"/>
    
      <category term="数据仓库" scheme="http://c-xuan.com/tags/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/"/>
    
      <category term="原创" scheme="http://c-xuan.com/tags/%E5%8E%9F%E5%88%9B/"/>
    
  </entry>
  
  <entry>
    <title>数据仓库设计的7个步骤，7个禁忌和7种思路</title>
    <link href="http://c-xuan.com/2016/09/06/21RulesForDataWarehousing/"/>
    <id>http://c-xuan.com/2016/09/06/21RulesForDataWarehousing/</id>
    <published>2016-09-06T15:36:18.000Z</published>
    <updated>2016-09-22T16:12:25.018Z</updated>
    
    <content type="html"><![CDATA[<h3 id="高效实现数据仓库的七个步骤"><a href="#高效实现数据仓库的七个步骤" class="headerlink" title="高效实现数据仓库的七个步骤"></a>高效实现数据仓库的七个步骤</h3><p>数据仓库和我们常见的RDBMS系统有些亲缘关系，但它又有所不同。如果你没有实施过数据仓库，那么从设定目标到给出设计，从创建数据结构到编写数据分析程序，再到面对挑剔的用户的评估，整个过程都会带给你一种与以往的项目完全不同的体验。一句话，如果你试图以旧有的方式创建数据仓库，那你所面对的不是预算超支就是所建立的数据仓库无法良好运作。<br>在处理一个数据仓库项目时需要注意的问题很多，但同时也有很多有建设性的参考可以帮助你更顺利的完成任务。开放思维，不断尝试新的途径，对于找到一种可行的数据仓库实现方法来说也是必需的。</p>
<a id="more"></a>
<ul>
<li>1.配备一个全职的项目经理或你自己全面负责项目管理<br>在通常情况下，项目经理都会同时负责多个项目的实施。这么做完全是出于资金和IT资源方面的考虑。但是对于数据仓库项目的管理，绝对不能出现一人身兼数个项目的情况。由于你所处的领域是你和你的团队之前没有进入过的领域，有关数据仓库的一切－数据分析、设计、编程、测试、修改、维护－全都是崭新的，因此你或者你指派的项目经理如果能全心投入，对于项目的成功会有很大帮助。</li>
<li>2.将项目管理职责推给别的项目经理<br>由于数据仓库实现过程实在是太困难了，为了避免自虐，你可以在当前阶段的项目完成后就将项目管理职责推给别的项目经理。当然，这个新的项目经理一定要复合第一条所说的具有全职性。为什么要这么做呢？首先，从项目经理的角度看，数据仓库实施过程的任何一个阶段都足以让人身心疲惫。从物理存储设备的开发到Extract-Transform-Load的实现，从设计开发模型到OLAP，所有阶段都明显的比以前接触的项目更加困难。每个阶段不但需要新的处理方法、新的管理方法，还需要创新性的观点。所以将管理职责推给别的项目经理不但不会对项目有损害，还可以起到帮助作用。</li>
<li>3.与用户进行沟通<br>这里所讲的内容远比一篇文章本身要重要的多。你必须明白，在数据仓库的设计阶段，那些潜在用户自己也不清楚他们到底需要数据仓库为他们做什么。他们在不断的探索和发现自己的需求，而你的开发团队也在和客户的接触中做着同样的事情。更加频繁的与客户接触，多做记录，并让你的团队更关注于项目需求讨论的结果而不是讨论的过程本身。<br>既然你和客户的交流是为了了解存储的数据是何种类型以及如何有效存储数据，你也许需要（和你的用户一起）采用一种新的方法观察数据，而不是直接处理数据。你可以尝试从中找出隐藏的信息，比如在一段时期内的数字涨落等。不要试图追寻项目需求的答案，而是要让答案找上门来。</li>
<li>4.以技术/信息库作为领导<br>由于数据仓库实施的各个阶段都有很大不同，因此你需要有人能起到维持整个项目的连续进行的作用，不过这个职责并不需要那种全职性。项目实施有三个重要方面：架构、技术和业务。将架构作为重点可以保证在整个项目中，数据仓库的架构从物理层往上，都会受到良好的维护。而我们应该将技术作为重点，因为开发团队和关键用户都在使用他们以前从未用过的工具，必须有人监督开发过程以及工具使用的一致性。<br>最后，在数据仓库的应用过程中浮现出来的业务需求必须被详细分析和记录，以促机开发过程持续下去。如果用户不能很好的开发人员以及其它用户沟通，那么数据分析和度量方面的开发进程就会延期，所以必须有人关注业务方面的开发，推动开发进入更高级别。</li>
<li>5.跳出反复修改程序的陷阱<br>第一次实现的数据仓库肯定不会是最终交付的版本。为什么呢？实际上在真正见到产品前，你无法确定的知道自己的目标是什么。或者说，最终用户只有在使用数据仓库产品一段时间后，才能明确告诉你这个产品是不是他所希望的。与你以往处理的项目不同，业务智能还处于发展的初期，每个公司对业务智能都有不同的解释，因此你的项目决不会一次成功。<br>为了以正确的格式获得数据，你需要在不断变化的状况中摸索前进。BI具有很强的个性，不同的环境、不同的市场以及不同的企业都有不同的BI。这又代表什么呢？这表示你需要把数据库管理员放在一个消息相对封闭的环境中，不要让他知道数据仓库的数据结构以及ETL程序在不断的改变。对此没有别的办法。这样可以减轻你和DBA所承受的压力。</li>
<li>6.对大量的前端资源进行数据源分析<br>在数据仓库实现过程中，你不得不在旧有的数据中艰难跋涉，这些数据来自老的数据库、老的磁带机以及远程的数据。它们中的大部分都凌乱不堪，并且难以获取。你要对这些数据进行大量处理，并且还要设计ETL程序来寻找其中的有用信息。如果你希望整个项目做起来比较顺利，并且找到一种方法能够一次成功，那就需要你的开发人员必须花费足够的时间来充分研究这些旧有数据，将凌乱的数据规则化，并尽力设计和实现强壮的数据采集和转换过程。数据仓库的ETL部分会占用整个项目资源的百分之八十，所以一定要确定你的资源都用在刀刃上了。</li>
<li>7.将人际关系处理放在首位<br>在数据仓库实现过程中真正的地狱不是来自技术或者开发方面，而是来自你周围的人。你也许会遇到一个对项目并不乐观而又没时间听你陈述的领导。你也许会遇到一些开发人员将进度拖延太长时间还抱怨为什么不能用老方法实施。你也许还会遇到一些抱有不切实际的幻想的用户，他们希望轻点鼠标就能实现想象中的功能，但却不愿在他们那边多做些智力投资，更好的培训他们自己的员工。而你也已经疲惫不堪，鼓励投资，以及在开发团队和用户（甚至老板）中推广新的开发技巧。<br>总之你要保持微笑。当一切搞定，你的烦恼也就一扫而空了，笑到最后才笑得最轻松。</li>
</ul>
<h3 id="数据仓库开发过程中的七个禁忌"><a href="#数据仓库开发过程中的七个禁忌" class="headerlink" title="数据仓库开发过程中的七个禁忌"></a>数据仓库开发过程中的七个禁忌</h3><p>过去我们一直使用的OLTP技术也许隐藏着许多严重的缺陷。数据仓库的实现并不是一个简单的任务，你会发现以前积累下来的丰富经验，并不适合处理每个数据仓库的独特需求。<br>下面列出的条款是你在实现数据仓库过程中一定会面对的问题，其中一些看起来并没有想象中那么严重，但是你还是应该尽量避免出现类似问题。数据仓库并不是一个事务处理系统，它没有一定的标准也不会实现某个特定的应用，但它本质上是非常有组织性的。总之，每个公司所建立的数据仓库都是唯一的，并且每一次数据仓库的实现方法都不是一成不变的。在实现数据仓库时需要注意的不单是”应该如何作”，更要注意”不该如何做”。下面就是我们总结的七点”不该如何作”。</p>
<ul>
<li>1.不要编写自己无法快速修改的代码<br>你所要编写的程序主要用于数据分析，而不是处理事务。而你的用户也并不真正知道他们自己真正想要一个什么样的程序。因此你不得不反复修改代码好几次，才会明白用户到底需要一个什么样的程序。如果你编写的程序具有良好的结构和灵活性，就算需要修改也不会太浪费力气。反之，你会被自己累死。</li>
<li>2.不要使用无法修改的数据库访问API<br>在过去，你的数据库可以为大量的客户提供稳定的数据查询服务。而如今，你的程序必须能够应付更多的数据查询。这使得重新改写程序以使得每个查询请求能得到最大的数据量成为势在必行的工作，而一般来说这种代码修改都不会一次成功，所以只有选择合适的可以修改的API，才能使程序尽快适应新的需求。</li>
<li>3.不要设计任何无法扩展的东西<br>在联机处理过程（OLTP）应用中，数据分析并不是一个真正的应用程序。实际上，数据分析的关键是获取大量旧的数据，从中提取数据模型，并以此模型推断出新的信息。而你所编写的访问潜在信息的代码应该具有可扩展性，可以附加新的数据。千万别在支持数据分析的代码中假定数据都是固定格式的。</li>
<li>4.不要附加不必要的功能<br>一个仓库要做的是恰到好处的服务，用户走进仓库，从货架上取得自己所需得信息，仅此而已。由于业务智能、分析以及规律性的问题都有各自的处理程序，因此你的客户唯一的需要就是获取信息。他们需要一种应用环境，可以让他们快速的从数据仓库中取得分析过程所需的数据，而不论这个数据是什么样子的。也许你想帮助他们精炼一下获得的数据，但最好不要这么做。一定要记住，不要给客户的数据分析程序添加任何会影响数据访问性能的功能。</li>
<li>5.不要简化数据清除和数据源分析的步骤<br>在实现数据仓库过程中最应该注意的地方就是为Extract-Transform-Load机制分析数据源，以及为优化负载而清除数据。安全的做法是假设项目经理在这个阶段会需要整个项目资源的一半以上。相反，如果你在这方面进行了简化，稍后肯定会后悔。所以就算系统工作缓慢，也不要简化清理旧的数据的过程。</li>
<li>6.不要避免颗粒度和分区问题<br>在数据仓库设计过程中有两个最大的数据存储问题，第一是如何给转换数据定位一个恰当的颗粒度等级，第二是如何将数据绝对的分区。为什么这两点问题如此重要呢？因为整个数据仓库的响应能力受颗粒度影响，并且数据访问的效率直接与数据分区性能有关。因此这是具有关键性的工作，不要试图避免面对这些问题。</li>
<li>7.不要在没考虑业务问题前就使用OLAP<br>用户在亲眼见到程序前通常都不知道自己到底想要个什么样的程序。因此他们的观点有不少错误，比如他们希望分析结果会忠实反应性能度量，或者希望程序会使他们部门或公司的业务工作有所不同。而你必须跳出自己的职责范围，从IT管理者的角度考虑用户部门直至整个企业的运行方式，才能在开发过程中避免这类问题。在通常的OLTP开发中，你可以比较方便的理解业务流程。而在联机分析处理（OLAP）领域，任何事情都需要亲自考察，而在你周围工作的人也许并不会发现你对业务方面存在的误解。因此，不要自以为已经了解了足够的信息。不断的询问才能使你真正了解”业务智能”中的”业务”到底是什么样子的</li>
</ul>
<h3 id="顺利开发数据仓库的七种思路"><a href="#顺利开发数据仓库的七种思路" class="headerlink" title="顺利开发数据仓库的七种思路"></a>顺利开发数据仓库的七种思路</h3><p>对于大多数IT顾问来说，实现一个数据仓库的难度比以前做过的任何项目难度都要大。考虑到不同的数据结构、用途以及应用程序开发方法，以前所积累的经验和技巧大部分都无用武之地了。但是只要在你的前进道路上稍加修正，你就会发现实现一个数据仓库并不是难事，就算你是第一次实现数据仓库也没问题。<br>下面列出了数据仓库实施过程需要考虑的步骤，有一些你可能从来没有意识到，而另一些可能已经在实施过程中使用到了，但是重新思考一番也许你会有更多的领悟。开放思维，不断尝试新的途径，找到一种可行的数据仓库实现方法。</p>
<ul>
<li>1.再三考虑应用程序的实现方法<br>数据仓库并不涉及事务处理，并且在报表方面也仅占一小部分。而数据仓库应用程序的本质是分析，尤其是针对业务智能的分析。BI并不是通常所说的数据：它是一种从旧有数据中,模型化得到的新的数据。那么如何才能从旧有数据中挖出这些新数据呢？事实上，这个工作不是让你来完成的，而是你的客户所要完成的。从项目主管的角度看，应该有一个经验丰富的数据表格设计师与你合作，进而决定如何将各类程序融合在一起。其中所遇到的最主要的挑战将是如何用新的方法观察数据，这也是你的客户正在试图使用的方法。</li>
<li>2.创建抽象的、良好部署的数据库访问组件<br>在过去你接触过的数据库项目和现在的数据仓库之间，有一点绝对不同，那就是：在Online Transaction Processing （OLTP）环境中，用户数量非常大，但使用到的数据却比较少；而在Online Analytical Processing （OLAP）环境中情况却正好相反，少量的用户在使用大量的数据。而你的工作就是编写一个应用程序来优化这种不同。这里有一个线索：在你所有的分析程序中，都要能抓取连续的数据项，这样在以后建立和访问的数据结构中才能存放与原数据物理结构类似的数据。具体如何实现呢？首先不要规格化数据。第二将其放入数组中最小化读取请求数。按照这种方法，DBA会很乐意与你合作。</li>
<li>3.保持松散<br>现在回头看看第一步，你应该可以理解定义一个分析程序不是件简单事了，而且一般情况下，很难在第一次就实现符合要求的最终产品。而在你将要进行分析的数据结构上同样存在这种问题。一句话，实现过程会有很多变数，你需要不断的改动你的程序。通常我们都希望将改动次数降到最低。在一个数据仓库实现过程中，本质是要分析过程毫无差错，这也需要DBA的参与。不要死抓住你的程序设计、代码、框图，或你建立的其它什么东西不放手，要根据这种变化而不断进行调整。</li>
<li>4.将管理放在首位<br>在分析数据源方面你做的如何呢？你是否认为清理垃圾数据的工作非常困难？并不是只有你一个人这样想，做过类似工作的人都有这种看法。在一个一般规模的机构中，作为数据仓库实现过程的一部分，会有大量的旧有数据必须进行一致性处理。所以分析数据源并花费数个小时编写转换程序将旧有数据导入数据仓库是整个数据仓库实现过程中最艰难的一部分。并且这也是整个项目中最重要的一环，可以占到整个项目周期和预算的四分之三。所以一定要小心对待。</li>
<li>5.从字里行间发现问题<br>与用户交流是个很麻烦的事情，为什么这么说呢？因为很多用户在见到最终产品前都不知道自己想要什么样的产品。定义数据仓库应用程序是一个探索的过程，而且这个过程要反复进行。记住所谓的”业务智能”是用户自己定义的，他们按照自己的理解来处理业务流程。因此这些用户就是连接数据和业务处理过程间的桥梁。他们所要的并不是数据本身，而是隐藏在数据后面的智能性。你可以让他们讨论、思考并给出建设性的意见。但千万不要让他们解决或让他们任意想象和发表那些”有可能”的观点。最后，一定要随时留意用户得出的结论。</li>
<li>6.保持领先<br>数据仓库看起来没有传统的OLTP模式根深蒂固，事实如此。虽然很多人投身数据仓库的开发中，但由于其框架与以前的系统大相径庭，因此在开始的一段时间数据仓库的实现看上去相当混乱。但是坚持下去是很重要的。它具有两方面重要的作用。<br>第一，技术的领先性。它可以跟踪项目中任何阶段的软件工具的部署和正确使用，以及开发过程。如果这复合你的背景，你可以对此多加留意。<br>第二，体系结构的领先性。它使得项目在各个阶段转换时，数据仓库和它所支持的系统的物理以及逻辑架构都具有持续性，不会发生改变。这也是你能提供的。</li>
<li>7.发出警告<br>最后你要记住，你并不是唯一登上新大陆的人。你周围的每一个人都会有下面一点或几点问题：不现实的期望、对技术的误解、旧习惯或坏习惯、竞争行为，或缺乏对项目的信任度。虽然交流沟通等任务应该是项目经理负责的，但实际上你也要担负起相同的责任。那么作为技术总监你该怎么作呢？首先当然是要真诚的对待周围的人，但一定要竖立威信，适当的发出警告。当你发现项目进度缓慢、资源流失，或者员工失去目标，就要直言不讳的说出来。快速明确的给予警告在大部分情况下都是明智之举。匆忙上马的数据仓库项目也许会出轨，但不要让失败的项目把你拉下马。</li>
</ul>
<p>转自<a href="http://blogger.org.cn/blog/more.asp?name=xueflhg&amp;id=4233" target="_blank" rel="external">http://blogger.org.cn/blog/more.asp?name=xueflhg&amp;id=4233</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;高效实现数据仓库的七个步骤&quot;&gt;&lt;a href=&quot;#高效实现数据仓库的七个步骤&quot; class=&quot;headerlink&quot; title=&quot;高效实现数据仓库的七个步骤&quot;&gt;&lt;/a&gt;高效实现数据仓库的七个步骤&lt;/h3&gt;&lt;p&gt;数据仓库和我们常见的RDBMS系统有些亲缘关系，但它又有所不同。如果你没有实施过数据仓库，那么从设定目标到给出设计，从创建数据结构到编写数据分析程序，再到面对挑剔的用户的评估，整个过程都会带给你一种与以往的项目完全不同的体验。一句话，如果你试图以旧有的方式创建数据仓库，那你所面对的不是预算超支就是所建立的数据仓库无法良好运作。&lt;br&gt;在处理一个数据仓库项目时需要注意的问题很多，但同时也有很多有建设性的参考可以帮助你更顺利的完成任务。开放思维，不断尝试新的途径，对于找到一种可行的数据仓库实现方法来说也是必需的。&lt;/p&gt;
    
    </summary>
    
      <category term="BI墨客" scheme="http://c-xuan.com/categories/BI%E5%A2%A8%E5%AE%A2/"/>
    
    
      <category term="BI" scheme="http://c-xuan.com/tags/BI/"/>
    
      <category term="数据仓库" scheme="http://c-xuan.com/tags/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/"/>
    
      <category term="转载" scheme="http://c-xuan.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>SSIS中代码页(Code Page)问题</title>
    <link href="http://c-xuan.com/2016/09/06/SSISCodePageProblem/"/>
    <id>http://c-xuan.com/2016/09/06/SSISCodePageProblem/</id>
    <published>2016-09-05T16:15:54.000Z</published>
    <updated>2016-09-22T16:16:56.016Z</updated>
    
    <content type="html"><![CDATA[<p>MSDN对于Code Page的解释是：</p>
<blockquote>
<p>对于字符和 Unicode 数据，代码页是代表特定字母、数字或符号的位模式的定义（例如 0x20 代表空格，0x74 代表字符“t”）。某些数据类型为每个字符使用一个字节；每个字节的位模式可以是 256 种不同位模式之一。</p>
</blockquote>
<p>在做SSIS项目的Data Coversion时，经常会遇到类似这样的问题：</p>
<p><strong> The column “xxx” cannot be processed because more than one code page (1252 and 936) are specified… </strong></p>
<a id="more"></a>
<p>这个问题一般会提示在Destination控件上（如OLE DB Destination），既数据导入的目的地，同时也会提示在Data Flow Task控件上，意思是在转换匹配的时候，字符集定义的代码页多于一个。不过当Destination控件问题解决了，Data Flow Task控件上的问题就会随之解决，因为Destination控件存在于Data Flow Task控件中。</p>
<p>关于这个问题的解决方法，网上一般的说法是将Source控件（如OLE DB Source）的AlwaysUseDefaultCodePage属性设置为true即可。<br>但我在实验中发现，直接在Visual Studio IDE右面的属性窗口设置是不起作用的，应该右键点击OLE DB Source控件，点击Show Advanced Editor…</p>
<p><img src="/img/posts/SSISCodePageProblem-1.jpeg" alt="DataWarehouseSchemeCompare-01"></p>
<p>在弹出的窗口中选择Component Properties，然后将在这里将属性AlwaysUseDefaultCodePage设置为true，DefaultCodePage也应为936。</p>
<p><img src="/img/posts/SSISCodePageProblem-2.jpeg" alt="DataWarehouseSchemeCompare-01"></p>
<p>这样设置了之后，这个问题就解决了。</p>
<p>转自：<a href="http://www.cnblogs.com/michaelxu/archive/2009/10/14/1583111.html" target="_blank" rel="external">http://www.cnblogs.com/michaelxu/archive/2009/10/14/1583111.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MSDN对于Code Page的解释是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;对于字符和 Unicode 数据，代码页是代表特定字母、数字或符号的位模式的定义（例如 0x20 代表空格，0x74 代表字符“t”）。某些数据类型为每个字符使用一个字节；每个字节的位模式可以是 256 种不同位模式之一。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在做SSIS项目的Data Coversion时，经常会遇到类似这样的问题：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; The column “xxx” cannot be processed because more than one code page (1252 and 936) are specified… &lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="BI墨客" scheme="http://c-xuan.com/categories/BI%E5%A2%A8%E5%AE%A2/"/>
    
    
      <category term="转载" scheme="http://c-xuan.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="SSIS" scheme="http://c-xuan.com/tags/SSIS/"/>
    
      <category term="MSBI" scheme="http://c-xuan.com/tags/MSBI/"/>
    
  </entry>
  
  <entry>
    <title>深入对比数据仓库模式：Kimball vs Inmon</title>
    <link href="http://c-xuan.com/2016/08/26/DataWarehouseSchemeCompare/"/>
    <id>http://c-xuan.com/2016/08/26/DataWarehouseSchemeCompare/</id>
    <published>2016-08-26T15:21:19.000Z</published>
    <updated>2016-09-22T16:13:49.914Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote>
<p>毛主席曾经说：实践若不以革命理论为指南，就会变成盲目的实践。</p>
</blockquote>
<p>Kimball和Inmon是两种主流的数据仓库方法论，分别由 Ralph Kimbal大神 和 Bill Inmon大神提出，在实际数据仓库建设中，业界往往会相互借鉴使用两种开发模式。本文将详细介绍 Kimball 和 Inmon 理论在实际数据仓库建设中的应用与对比,通过数据仓库理论武装数据仓库实践。</p>
<a id="more"></a>
<p><img src="/img/posts/DataWarehouseSchemeCompare-01.png" alt="DataWarehouseSchemeCompare-01"></p>
<h2 id="什么是Kimball"><a href="#什么是Kimball" class="headerlink" title="什么是Kimball"></a>什么是Kimball</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>Kimball 模式从流程上看是是自底向上的，即从数据集市到数据仓库再到数据源(先有数据集市再有数据仓库)的一种敏捷开发方法。对于Kimball模式，数据源往往是给定的若干个数据库表，数据较为稳定但是数据之间的关联关系比较复杂，需要从这些OLTP中产生的事务型数据结构抽取出分析型数据结构，再放入数据集市中方便下一步的BI与决策支持。</p>
<h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><p>通常，Kimball都是以最终任务为导向。首先，在得到数据后需要先做数据的探索，尝试将数据按照目标先拆分出不同的表需求。其次，在明确数据依赖后将各个任务再通过ETL由Stage层转化到DM层。这里DM层数据则由若干个事实表和维度表组成。接着，在完成DM层的事实表维度表拆分后，数据集市一方面可以直接向BI环节输出数据了，另一方面可以先DW层输出数据，方便后续的多维分析。</p>
<p>Kimball往往意味着快速交付、敏捷迭代，不会对数据仓库架构做过多复杂的设计，在变换莫测的互联网行业，这种架构方式逐渐成为一种主流范式。</p>
<h2 id="什么是Inmon"><a href="#什么是Inmon" class="headerlink" title="什么是Inmon"></a>什么是Inmon</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p>Inmon 模式从流程上看是自顶向下的，即从数据源到数据仓库再到数据集市的（先有数据仓库再有数据市场）一种瀑布流开发方法。对于Inmon模式，数据源往往是异构的，比如从自行定义的爬虫数据就是较为典型的一种，数据源是根据最终目标自行定制的。这里主要的数据处理工作集中在对异构数据的清洗，包括数据类型检验，数据值范围检验以及其他一些复杂规则。在这种场景下，数据无法从stage层直接输出到dm层，必须先通过ETL将数据的格式清洗后放入dw层，再从dw层选择需要的数据组合输出到dm层。在Inmon模式中，并不强调事实表和维度表的概念，因为数据源变化的可能性较大，需要更加强调数据的清洗工作，从中抽取实体-关系。</p>
<h3 id="流程-1"><a href="#流程-1" class="headerlink" title="流程"></a>流程</h3><p>通常，Inmon都是以数据源头为导向。首先，需要探索性地去获取尽量符合预期的数据，尝试将数据按照预期划分为不同的表需求。其次，明确数据的清洗规则后将各个任务通过ETL由Stage层转化到DW层，这里DW层通常涉及到较多的UDF开发，将数据抽象为实体-关系模型。接着，在完成DW的数据治理之后，可以将数据输出到数据集市中做基本的数据组合。最后，将数据集市中的数据输出到BI系统中去辅助具体业务。</p>
<h2 id="特征对比"><a href="#特征对比" class="headerlink" title="特征对比"></a>特征对比</h2><p><img src="/img/posts/DataWarehouseSchemeCompare-02.jpg" alt="DataWarehouseSchemeCompare-02"></p>
<h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><table>
<thead>
<tr>
<th>特性</th>
<th>Kimball</th>
<th>Inmon</th>
</tr>
</thead>
<tbody>
<tr>
<td>数据摄取</td>
<td>yes</td>
<td>yes</td>
</tr>
<tr>
<td>stage</td>
<td>yes</td>
<td>yes</td>
</tr>
<tr>
<td>ETL</td>
<td>yes</td>
<td>yes</td>
</tr>
<tr>
<td>数据集市</td>
<td>yes</td>
<td>yes</td>
</tr>
<tr>
<td>商业需求</td>
<td>yes</td>
<td>yes</td>
</tr>
<tr>
<td>数据时间属性</td>
<td>yes</td>
<td>yes</td>
</tr>
<tr>
<td>数据仓库优先</td>
<td>no</td>
<td>yes</td>
</tr>
<tr>
<td>事实维度拆分</td>
<td>yes</td>
<td>no</td>
</tr>
<tr>
<td>关系表维护</td>
<td>no</td>
<td>yes</td>
</tr>
<tr>
<td>处理导向</td>
<td>yes</td>
<td>no</td>
</tr>
<tr>
<td>数据模型泛化</td>
<td>no</td>
<td>yes</td>
</tr>
<tr>
<td>精心设计</td>
<td>no</td>
<td>yes</td>
</tr>
<tr>
<td>缓慢变化维</td>
<td>yes</td>
<td>no</td>
</tr>
<tr>
<td>连续变化维</td>
<td>no</td>
<td>yes</td>
</tr>
</tbody>
</table>
<h3 id="优劣比较"><a href="#优劣比较" class="headerlink" title="优劣比较"></a>优劣比较</h3><table>
<thead>
<tr>
<th>特性</th>
<th>Kimball</th>
<th>Inmon</th>
</tr>
</thead>
<tbody>
<tr>
<td>时间</td>
<td>快速交付</td>
<td>路漫漫其修远兮</td>
</tr>
<tr>
<td>开发难度</td>
<td>小</td>
<td>大</td>
</tr>
<tr>
<td>维护难度</td>
<td>大</td>
<td>小</td>
</tr>
<tr>
<td>技能要求</td>
<td>入门级</td>
<td>专家级</td>
</tr>
<tr>
<td>数据要求</td>
<td>特定业务</td>
<td>企业级</td>
</tr>
</tbody>
</table>
<h2 id="具体例子"><a href="#具体例子" class="headerlink" title="具体例子"></a>具体例子</h2><p>相信一通理论之后可能还是能困惑，现在举一个具体的例子。</p>
<h3 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h3><p>股票交易为例：</p>
<p>（OLTP）原始数据包含了如下几张事务表：(真实场景字段设计更为复杂，此处已经简化)</p>
<ul>
<li>交易记录表：记录用户下单情况</li>
</ul>
<table>
<thead>
<tr>
<th>交易记录ID</th>
<th>用户ID</th>
<th>交易ID</th>
<th>交易单号</th>
<th>标的CODE</th>
<th>出价</th>
<th>现价</th>
<th>方向</th>
<th>手数</th>
<th>创建时间</th>
<th>修改时间</th>
<th>状态</th>
<th>备注</th>
<th>类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>1</td>
<td>1</td>
<td>MR123456</td>
<td>A123456</td>
<td>9.0</td>
<td>9.5</td>
<td>买</td>
<td>100</td>
<td>2016-10-10 10:58:00</td>
<td>2016-10-10 10:58:00</td>
<td>未成交</td>
<td>NULL</td>
<td>创业板</td>
<td></td>
</tr>
<tr>
<td>2</td>
<td>1</td>
<td>1</td>
<td>MR123456</td>
<td>A123456</td>
<td>9.0</td>
<td>8.9</td>
<td>买</td>
<td>200</td>
<td>2016-10-10 11:00:00</td>
<td>2016-10-10 11:00:10</td>
<td>已成交</td>
<td>NULL</td>
<td>创业板</td>
</tr>
<tr>
<td>3</td>
<td>1</td>
<td>2</td>
<td>MR123457</td>
<td>A123456</td>
<td>10.1</td>
<td>10.2</td>
<td>卖</td>
<td>200</td>
<td>2016-10-10 14:00:00</td>
<td>2016-10-10 14:00:30</td>
<td>已成交</td>
<td>NULL</td>
<td>创业板</td>
</tr>
</tbody>
</table>
<ul>
<li>成交日志表：记录用户下单且成交的情况</li>
</ul>
<table>
<thead>
<tr>
<th>成交日志ID</th>
<th>用户ID</th>
<th>外部单号</th>
<th>交易记录ID</th>
<th>标的CODE</th>
<th>方向</th>
<th>手数</th>
<th>成交价格</th>
<th>创建时间</th>
<th>修改时间</th>
<th>状态</th>
<th>备注</th>
<th>类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>1</td>
<td>MR123456</td>
<td>2</td>
<td>A123456</td>
<td>买</td>
<td>200</td>
<td>8.9</td>
<td>2016-10-10 11:00:10</td>
<td>2016-10-10 11:00:10</td>
<td>正常</td>
<td>NULL</td>
<td>创业板</td>
</tr>
<tr>
<td>2</td>
<td>1</td>
<td>MR123456</td>
<td>3</td>
<td>A123456</td>
<td>卖</td>
<td>200</td>
<td>10.1</td>
<td>2016-10-10 14:00:30</td>
<td>2016-10-10 14:00:30</td>
<td>正常</td>
<td>NULL</td>
<td>创业板</td>
</tr>
</tbody>
</table>
<ul>
<li>用户信息表</li>
</ul>
<table>
<thead>
<tr>
<th>用户ID</th>
<th>别名</th>
<th>姓名</th>
<th>联系方式</th>
<th>性别</th>
<th>身份号码</th>
<th>资产账户ID</th>
<th>是否开通创业板</th>
<th>风险评级</th>
<th>资产余额</th>
<th>创建时间</th>
<th>修改时间</th>
<th>用户类型</th>
<th>资产类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>FinanceR</td>
<td>张三</td>
<td>1234567890</td>
<td>女</td>
<td>12345567890X</td>
<td>SA123213</td>
<td>是</td>
<td>高</td>
<td>12321312.00</td>
<td>2015-10-10 14:00:00</td>
<td>2016-10-10 14:00:00</td>
<td>A</td>
<td>现金账户</td>
</tr>
</tbody>
</table>
<h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><p>如果是 Inmon 模式，我们需要将数据库拆分成 用户实体表、成交日志实体表、用户与成交日志关系表等多个子模块。<br>如果是 Kimball 模式，我们则需要将数据库拆分成 用户维度表、用户资产事实表、成交事实表。在Kimball模式中，我们不需要单独维护关系表，因为关系已经冗余在维度表和事实表中。</p>
<h3 id="Inmon-模式："><a href="#Inmon-模式：" class="headerlink" title="Inmon 模式："></a>Inmon 模式：</h3><p>用户实体表</p>
<table>
<thead>
<tr>
<th>用户ID</th>
<th>别名</th>
<th>姓名</th>
<th>联系方式</th>
<th>性别</th>
<th>身份号码</th>
<th>是否开通创业板</th>
<th>风险评级</th>
<th>资产余额</th>
<th>创建时间</th>
<th>修改时间</th>
<th>用户类型</th>
<th>资产类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>FinanceR</td>
<td>张三</td>
<td>1234567890</td>
<td>女</td>
<td>12345567890X</td>
<td>是</td>
<td>高</td>
<td>12321312.00</td>
<td>2015-10-10 14:00:00</td>
<td>2016-10-10 14:00:00</td>
<td>A</td>
<td>现金账户</td>
</tr>
</tbody>
</table>
<p>成交关系表</p>
<table>
<thead>
<tr>
<th>成交ID</th>
<th>用户ID</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>1</td>
<td></td>
</tr>
<tr>
<td>2</td>
<td>1</td>
<td></td>
</tr>
</tbody>
</table>
<p>用户资产关系表</p>
<table>
<thead>
<tr>
<th>资产ID</th>
<th>用户ID</th>
</tr>
</thead>
<tbody>
<tr>
<td>SA123213</td>
<td>1</td>
</tr>
</tbody>
</table>
<h3 id="Kimball-模式"><a href="#Kimball-模式" class="headerlink" title="Kimball 模式"></a>Kimball 模式</h3><p>用户维度表</p>
<table>
<thead>
<tr>
<th>用户ID</th>
<th>别名</th>
<th>姓名</th>
<th>联系方式</th>
<th>性别</th>
<th>身份号码</th>
<th>是否创业板</th>
<th>风险评级ID</th>
<th>创建时间</th>
<th>修改时间</th>
<th>用户类型ID</th>
<th>资产ID</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>FinanceR</td>
<td>张三</td>
<td>1234567890</td>
<td>女</td>
<td>SA123213</td>
<td>1</td>
<td>1</td>
<td>2015-10-10 14:00:00</td>
<td>2016-10-10 14:00:00</td>
<td>1</td>
<td>SA123213</td>
</tr>
</tbody>
</table>
<p>可以看到这里的用户维度表不包含业务交易信息，变化相对缓慢（静态）。<br>而风险评级、用户类型也需要由风险评级维度表、用户类型维度表来维护</p>
<p>用户资产事实表</p>
<table>
<thead>
<tr>
<th>资产ID</th>
<th>用户ID</th>
<th>账户余额</th>
<th>资产类型</th>
<th>创建时间</th>
<th>修改时间</th>
</tr>
</thead>
<tbody>
<tr>
<td>SA123213</td>
<td>1</td>
<td>12321312.00</td>
<td>现金账户</td>
<td>2016-10-10 14:00:00</td>
<td>2016-10-10 14:00:00</td>
</tr>
</tbody>
</table>
<p>这里的用户资产事实表通常数据是由用户资产交易日志产生的，因为日志存在只插入，不更新的特点（快速增加、最细粒度。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>对于大多数互联网公司由于需求的快速变化，处心积虑设计（Inmon）实体-关系的设计哲学似乎并不能满足快速迭代的业务需要。所以，更多场景下趋向于使用（Kimball）维度-事实的设计哲学反而可以更快地完成任务。<br>数据仓库建设通常以日为粒度，将OLTP数据变化的不情况增量同步到数据仓库中。<br>在数据仓库的实际工作中，80%的时间会花费在任务调度、数据清洗和业务梳理上，只有20%的时间会投入到数据挖掘上。</p>
<p>转自<a href="https://segmentfault.com/a/1190000006255954" target="_blank" rel="external">https://segmentfault.com/a/1190000006255954</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;毛主席曾经说：实践若不以革命理论为指南，就会变成盲目的实践。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Kimball和Inmon是两种主流的数据仓库方法论，分别由 Ralph Kimbal大神 和 Bill Inmon大神提出，在实际数据仓库建设中，业界往往会相互借鉴使用两种开发模式。本文将详细介绍 Kimball 和 Inmon 理论在实际数据仓库建设中的应用与对比,通过数据仓库理论武装数据仓库实践。&lt;/p&gt;
    
    </summary>
    
      <category term="BI墨客" scheme="http://c-xuan.com/categories/BI%E5%A2%A8%E5%AE%A2/"/>
    
    
      <category term="BI" scheme="http://c-xuan.com/tags/BI/"/>
    
      <category term="数据仓库" scheme="http://c-xuan.com/tags/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/"/>
    
      <category term="转载" scheme="http://c-xuan.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>数据仓库维度建模10大基本原则</title>
    <link href="http://c-xuan.com/2016/08/23/Datawarehouse-10Dimension-principle/"/>
    <id>http://c-xuan.com/2016/08/23/Datawarehouse-10Dimension-principle/</id>
    <published>2016-08-22T16:03:24.000Z</published>
    <updated>2016-09-22T16:13:39.585Z</updated>
    
    <content type="html"><![CDATA[<h3 id="原则1"><a href="#原则1" class="headerlink" title="原则1"></a>原则1</h3><p><strong>载入详细的原子数据到维度结构中</strong></p>
<blockquote>
<p>维度建模应该使用最基础的原子数据进行填充，以支持不可预知的来自用户查询的过滤和分组请求，用户通常不希望每次只看到一个单一的记录，但是你无法预测 用户想要掩盖哪些数据，想要显示哪些数据，如果只有汇总数据，那么你已经设定了数据的使用模式，当用户想要深入挖掘数据时他们就会遇到障碍。当然，原子数据也可以通过概要维度建模进行补充，但企业用户无法只在汇总数据上工作，他们需要原始数据回答不断变化的问题。</p>
</blockquote>
<a id="more"></a>
<h3 id="原则2"><a href="#原则2" class="headerlink" title="原则2"></a>原则2</h3><p><strong>围绕业务流程构建维度模型</strong></p>
<blockquote>
<p>业务流程是组织执行的活动，它们代表可测量的事件，如下一个订单或做一次结算，业务流程通常会捕获或生成唯一的与某个事件相关的性能指标，这些数据转换成事实后，每个业务流程都用一个原子事实表表示，除了单个流程事实表外，有时会从多个流程事实表合并成一个事实表，而且合并事实表是对单一流程事实表的一 个很好的补充，并不能代替它们。</p>
</blockquote>
<h3 id="原则3"><a href="#原则3" class="headerlink" title="原则3"></a>原则3</h3><p><strong>确保每个事实表都有一个与之关联的日期维度表</strong></p>
<blockquote>
<p>原则2中描述的可测量事件总有一个日期戳信息，每个事实表至少都有一个外键，关联到一个日期维度表，它的粒度就是一天，使用日历属性和非标准的关于测量事件日期的特性，如财务月和公司假日指示符，有时一个事实表中有多个日期外键。</p>
</blockquote>
<h3 id="原则4"><a href="#原则4" class="headerlink" title="原则4"></a>原则4</h3><p><strong>确保每个事实表中的事实具有相同的粒度或同级的详细程度</strong></p>
<blockquote>
<p>在组织事实表时粒度上有三个基本原则：事务，周期快照或累加快照。无论粒度类型如何，事实表中的度量单位都必须达到相同水平的详细程度，如果事实表中的事实表现的粒度不一样，企业用户会被搞晕，BI应用程序会很脆弱，或者返回的结果根本就不对。</p>
</blockquote>
<h3 id="原则5"><a href="#原则5" class="headerlink" title="原则5"></a>原则5</h3><p><strong>解决事实表中的多对多关系</strong></p>
<blockquote>
<p>由于事实表存储的 是业务流程事件的结果，因此在它们的外键之间存在多对多(M:M)的关系，如多个仓库中的多个产品在多天销售，这些外键字段不能为空，有时一个维度可以为单个测量事件赋予多个值，如一个保健对应多个诊断，或多个客户有一个银行账号，在这些情况下，它的不合理直接解决了事实表中多值维度，这可能违反了测量事件的天然粒度，因此我们使用多对多，双键桥接表连接事实表。</p>
</blockquote>
<h3 id="原则6"><a href="#原则6" class="headerlink" title="原则6"></a>原则6</h3><p><strong>解决维度表中多对一的关系</strong></p>
<blockquote>
<p>属性之间分层的、多对一(M：1)的关系通常未规范化，或者被收缩到扁平型维度表中，如果你曾经有过为事务型系统设计实体关系模型的经历，那你一定要抵抗住旧有的思维模式，要将其规范化或将M:1关系拆分成更小的子维度，维度反向规范化是维度建模中常用的词汇。在单个维度表中多对一(M:1)的关系非常常见，一对一的关系，如一个产品描述对应一个产品代码，也可以在维度表中处理，在事实表中偶尔也有多对一关系，如详细当维度表中有上百万条记录时，它推出的属性又经常发生变化。不管怎样，在事实表中要慎用M:1关系。</p>
</blockquote>
<h3 id="原则7"><a href="#原则7" class="headerlink" title="原则7"></a>原则7</h3><p><strong>存储报告标记和过滤维度表中的范围值</strong></p>
<blockquote>
<p>更重要的是，编码和关联的解码及用于标记和查询过滤的描述符应该被捕获到维度表中，避免在事实表中存储神秘的编码字段或庞大的描述符字段，同样，不要只 在维度表中存储编码，假定用户不需要描述性的解码，或它们将在BI应用程序中得到解决。如果它是一个行/列标记或下拉菜单过滤器，那么它应该当作一个维度属性处理。尽管我们在原则5中已经陈述过，事实表外键不应该为空，同时在维度表的属性字段中使用“NA”或另一个默认值替换空值来避免空值也是明智的，这样可以减少用户的困惑。</p>
</blockquote>
<h3 id="原则8"><a href="#原则8" class="headerlink" title="原则8"></a>原则8</h3><p><strong>确定维度表使用了代理键</strong></p>
<blockquote>
<p>按顺序分配代理键(除了日期维度)可以获得一系列的操作优势，包括更小的事实表、索引以及性能改善，如果你正在跟踪维度属性的变化，为每个变化使用一个 新的维度记录，那么确实需要代理键，即使你的商业用户没有初始化跟踪属性改变的设想值，使用代理也会使下游策略变化更宽松，代理也允许你使用多个业务键映射到一个普通的配置文件，有利于你缓冲意想不到的业务活动，如废弃产品编号的回收或收购另一家公司的编码方案。</p>
</blockquote>
<h3 id="原则9"><a href="#原则9" class="headerlink" title="原则9"></a>原则9</h3><p><strong>创建一致的维度集成整个企业的数据</strong></p>
<blockquote>
<p>对于企业数据仓库一致的维度(也叫做通用维度、标准或参考维度)是最基本的原则，在ETL系统中管理一次，然后在所有事实表中都可以重用，一致的维度在 整个维度模型中可以获得一致的描述属性，可以支持从多个业务流程中整合数据，企业数据仓库总线矩阵是最关键的架构蓝图，它展现了组织的核心业务流程和关联的维度，重用一致的维度可以缩短产品的上市时间，也消除了冗余设计和开发过程，但一致的维度需要在数据管理和治理方面有较大的投入。</p>
</blockquote>
<h3 id="原则10"><a href="#原则10" class="headerlink" title="原则10"></a>原则10</h3><p><strong>不断平衡需求和现实，提供用户可接受的并能够支持他们决策的DW/BI解决方案</strong></p>
<blockquote>
<p>维度建模需要不断在用户需求和数据源事实之间进行平衡，才能够提交可执行性好的设计，更重要的是，要符合业务的需要，需求和事实之间的平衡是DW/BI 从业人员必须面对的事实，无论是你集中在维度建模，还是项目策略、技术/ETL/BI架构或开发/维护规划都要面对这一事实。</p>
</blockquote>
<p>转自：<a href="http://www.cnblogs.com/hadoopdev" target="_blank" rel="external">http://www.cnblogs.com/hadoopdev</a> </p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;原则1&quot;&gt;&lt;a href=&quot;#原则1&quot; class=&quot;headerlink&quot; title=&quot;原则1&quot;&gt;&lt;/a&gt;原则1&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;载入详细的原子数据到维度结构中&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;维度建模应该使用最基础的原子数据进行填充，以支持不可预知的来自用户查询的过滤和分组请求，用户通常不希望每次只看到一个单一的记录，但是你无法预测 用户想要掩盖哪些数据，想要显示哪些数据，如果只有汇总数据，那么你已经设定了数据的使用模式，当用户想要深入挖掘数据时他们就会遇到障碍。当然，原子数据也可以通过概要维度建模进行补充，但企业用户无法只在汇总数据上工作，他们需要原始数据回答不断变化的问题。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="BI墨客" scheme="http://c-xuan.com/categories/BI%E5%A2%A8%E5%AE%A2/"/>
    
    
      <category term="BI" scheme="http://c-xuan.com/tags/BI/"/>
    
      <category term="数据仓库" scheme="http://c-xuan.com/tags/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/"/>
    
      <category term="转载" scheme="http://c-xuan.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>Markdown教程</title>
    <link href="http://c-xuan.com/2016/08/20/MarkDown%E6%95%99%E7%A8%8B/"/>
    <id>http://c-xuan.com/2016/08/20/MarkDown教程/</id>
    <published>2016-08-20T07:10:24.000Z</published>
    <updated>2016-09-22T16:15:26.506Z</updated>
    
    <content type="html"><![CDATA[<p>本Markdown编辑器使用<a href="https://github.com/benweet/stackedit" target="_blank" rel="external">StackEdit</a>修改而来，用它写博客，将会带来全新的体验哦：</p>
<ul>
<li><strong>Markdown和扩展Markdown简洁的语法</strong></li>
<li><strong>代码块高亮</strong></li>
<li><strong>图片链接和图片上传</strong></li>
<li><strong><em>LaTex</em>数学公式</strong></li>
<li><strong>UML序列图和流程图</strong></li>
<li><strong>离线写博客</strong></li>
<li><strong>导入导出Markdown文件</strong></li>
<li><strong>丰富的快捷键</strong><a id="more"></a>
</li>
</ul>
<hr>
<h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><ul>
<li>加粗    <code>Ctrl + B</code> </li>
<li>斜体    <code>Ctrl + I</code> </li>
<li>引用    <code>Ctrl + Q</code></li>
<li>插入链接    <code>Ctrl + L</code></li>
<li>插入代码    <code>Ctrl + K</code></li>
<li>插入图片    <code>Ctrl + G</code></li>
<li>提升标题    <code>Ctrl + H</code></li>
<li>有序列表    <code>Ctrl + O</code></li>
<li>无序列表    <code>Ctrl + U</code></li>
<li>横线    <code>Ctrl + R</code></li>
<li>撤销    <code>Ctrl + Z</code></li>
<li>重做    <code>Ctrl + Y</code></li>
</ul>
<h2 id="Markdown及扩展"><a href="#Markdown及扩展" class="headerlink" title="Markdown及扩展"></a>Markdown及扩展</h2><blockquote>
<p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的HTML页面。    —— <a href="https://zh.wikipedia.org/wiki/Markdown" target="_blank"> [ 维基百科 ]</a></p>
</blockquote>
<p>使用简单的符号标识不同的标题，将某些文字标记为<strong>粗体</strong>或者<em>斜体</em>，创建一个<a href="http://www.csdn.net" target="_blank" rel="external">链接</a>等，详细语法参考帮助？。</p>
<p>本编辑器支持 <strong>Markdown Extra</strong> , 　扩展了很多好用的功能。具体请参考<a href="https://github.com/jmcmanus/pagedown-extra" title="Pagedown Extra" target="_blank" rel="external">Github</a>.  </p>
<h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p><strong>Markdown　Extra</strong>　表格语法：</p>
<table>
<thead>
<tr>
<th>项目</th>
<th>价格</th>
</tr>
</thead>
<tbody>
<tr>
<td>Computer</td>
<td>$1600</td>
</tr>
<tr>
<td>Phone</td>
<td>$12</td>
</tr>
<tr>
<td>Pipe</td>
<td>$1</td>
</tr>
</tbody>
</table>
<p>可以使用冒号来定义对齐方式：</p>
<table>
<thead>
<tr>
<th style="text-align:left">项目</th>
<th style="text-align:right">价格</th>
<th style="text-align:center">数量</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Computer</td>
<td style="text-align:right">1600 元</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td style="text-align:left">Phone</td>
<td style="text-align:right">12 元</td>
<td style="text-align:center">12</td>
</tr>
<tr>
<td style="text-align:left">Pipe</td>
<td style="text-align:right">1 元</td>
<td style="text-align:center">234</td>
</tr>
</tbody>
</table>
<p>###定义列表</p>
<p><strong>Markdown　Extra</strong>　定义列表语法：<br>项目１<br>项目２<br>:   定义 A<br>:   定义 B</p>
<p>项目３<br>:   定义 C</p>
<p>:   定义 D</p>
<pre><code>&gt; 定义D内容
</code></pre><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><p>代码块语法遵循标准markdown代码，例如：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@requires_authorization</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">somefunc</span><span class="params">(param1=<span class="string">''</span>, param2=<span class="number">0</span>)</span>:</span></div><div class="line">    <span class="string">'''A docstring'''</span></div><div class="line">    <span class="keyword">if</span> param1 &gt; param2: <span class="comment"># interesting</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'Greater'</span></div><div class="line">    <span class="keyword">return</span> (param2 - param1 + <span class="number">1</span>) <span class="keyword">or</span> <span class="keyword">None</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span>:</span></div><div class="line">    <span class="keyword">pass</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>message = <span class="string">'''interpreter</span></div><div class="line"><span class="meta">... </span>prompt'''</div></pre></td></tr></table></figure></p>
<p>###脚注<br>生成一个脚注[^footnote].<br>  [^footnote]: 这里是 <strong>脚注</strong> 的 <em>内容</em>.</p>
<h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><p>用 <code>[TOC]</code>来生成目录：</p>
<p>[TOC]</p>
<h3 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h3><p>使用MathJax渲染<em>LaTex</em> 数学公式，详见<a href="http://math.stackexchange.com/" target="_blank" rel="external">math.stackexchange.com</a>.</p>
<ul>
<li>行内公式，数学公式为：$\Gamma(n) = (n-1)!\quad\forall n\in\mathbb N$。</li>
<li>块级公式：</li>
</ul>
<p>$$    x = \dfrac{-b \pm \sqrt{b^2 - 4ac}}{2a} $$</p>
<p>更多LaTex语法请参考 <a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference" target="_blank" rel="external">这儿</a>.</p>
<h3 id="UML-图"><a href="#UML-图" class="headerlink" title="UML 图:"></a>UML 图:</h3><p>可以渲染序列图：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">张三-&gt;李四: 嘿，小四儿, 写博客了没?</div><div class="line">Note right of 李四: 李四愣了一下，说：</div><div class="line">李四--&gt;张三: 忙得吐血，哪有时间写。</div></pre></td></tr></table></figure>
<p>或者流程图：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">st=&gt;start: 开始</div><div class="line">e=&gt;end: 结束</div><div class="line">op=&gt;operation: 我的操作</div><div class="line">cond=&gt;condition: 确认？</div><div class="line"></div><div class="line">st-&gt;op-&gt;cond</div><div class="line">cond(yes)-&gt;e</div><div class="line">cond(no)-&gt;op</div></pre></td></tr></table></figure>
<ul>
<li>关于 <strong>序列图</strong> 语法，参考 <a href="http://bramp.github.io/js-sequence-diagrams/" target="_blank" rel="external">这儿</a>,</li>
<li>关于 <strong>流程图</strong> 语法，参考 <a href="http://adrai.github.io/flowchart.js/" target="_blank" rel="external">这儿</a>.</li>
</ul>
<h2 id="离线写博客"><a href="#离线写博客" class="headerlink" title="离线写博客"></a>离线写博客</h2><p>即使用户在没有网络的情况下，也可以通过本编辑器离线写博客（直接在曾经使用过的浏览器中输入<a href="http://write.blog.csdn.net/mdeditor" target="_blank" rel="external">write.blog.csdn.net/mdeditor</a>即可。<strong>Markdown编辑器</strong>使用浏览器离线存储将内容保存在本地。</p>
<p>用户写博客的过程中，内容实时保存在浏览器缓存中，在用户关闭浏览器或者其它异常情况下，内容不会丢失。用户再次打开浏览器时，会显示上次用户正在编辑的没有发表的内容。</p>
<p>博客发表后，本地缓存将被删除。　</p>
<p>用户可以选择 <i class="icon-disk"></i> 把正在写的博客保存到服务器草稿箱，即使换浏览器或者清除缓存，内容也不会丢失。</p>
<blockquote>
<p><strong>注意：</strong>虽然浏览器存储大部分时候都比较可靠，但为了您的数据安全，在联网后，<strong>请务必及时发表或者保存到服务器草稿箱</strong>。</p>
</blockquote>
<p>##浏览器兼容</p>
<ol>
<li>目前，本编辑器对Chrome浏览器支持最为完整。建议大家使用较新版本的Chrome。</li>
<li>IE９以下不支持</li>
<li>IE９，１０，１１存在以下问题<ol>
<li>不支持离线功能</li>
<li>IE9不支持文件导入导出</li>
<li>IE10不支持拖拽文件导入</li>
</ol>
</li>
</ol>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本Markdown编辑器使用&lt;a href=&quot;https://github.com/benweet/stackedit&quot;&gt;StackEdit&lt;/a&gt;修改而来，用它写博客，将会带来全新的体验哦：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Markdown和扩展Markdown简洁的语法&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;代码块高亮&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;图片链接和图片上传&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;LaTex&lt;/em&gt;数学公式&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;UML序列图和流程图&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;离线写博客&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;导入导出Markdown文件&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;丰富的快捷键&lt;/strong&gt;
    
    </summary>
    
      <category term="IT看客" scheme="http://c-xuan.com/categories/IT%E7%9C%8B%E5%AE%A2/"/>
    
    
      <category term="Markdown" scheme="http://c-xuan.com/tags/Markdown/"/>
    
      <category term="Test" scheme="http://c-xuan.com/tags/Test/"/>
    
  </entry>
  
  <entry>
    <title>改变世界的公式TOP10,最后一个一看就蒙圈了</title>
    <link href="http://c-xuan.com/2016/06/29/Foumula-TOP10/"/>
    <id>http://c-xuan.com/2016/06/29/Foumula-TOP10/</id>
    <published>2016-06-28T16:00:00.000Z</published>
    <updated>2016-09-22T16:13:58.675Z</updated>
    
    <content type="html"><![CDATA[<p>很多人不喜欢数学，因为他们觉得数学伤脑筋，可是，我们有很多的发明、创造都跟数学有关。</p>
<p>英国科学期刊《物理世界》曾让读者投票评选了“最伟大的公式”，最终榜上有名的十个公式既有无人不知的1+1=2，又有著名的E=mc2；既有简单的-圆周公式，又有复杂的欧拉公式……</p>
<p>很多人不喜欢数学，因为他们觉得数学伤脑筋，可是，我们有很多的发明、创造都跟数学有关。</p>
<p>英国科学期刊《物理世界》曾让读者投票评选了“最伟大的公式”，最终榜上有名的十个公式既有无人不知的1+1=2，又有著名的E=mc2；既有简单的-圆周公式，又有复杂的欧拉公式……</p>
<p><img src="/img/posts/Foumula-TOP10-1.jpg" alt="Foumula-TOP10-1"></p>
<a id="more"></a>
<p><img src="/img/posts/Foumula-TOP10-2.jpg" alt="Foumula-TOP10-2"><br><img src="/img/posts/Foumula-TOP10-3.jpg" alt="Foumula-TOP10-3"><br><img src="/img/posts/Foumula-TOP10-4.jpg" alt="Foumula-TOP10-4"><br><img src="/img/posts/Foumula-TOP10-5.jpg" alt="Foumula-TOP10-5"><br><img src="/img/posts/Foumula-TOP10-6.jpg" alt="Foumula-TOP10-6"><br><img src="/img/posts/Foumula-TOP10-7.jpg" alt="Foumula-TOP10-7"><br><img src="/img/posts/Foumula-TOP10-8.jpg" alt="Foumula-TOP10-8"><br><img src="/img/posts/Foumula-TOP10-9.jpg" alt="Foumula-TOP10-9"><br><img src="/img/posts/Foumula-TOP10-10.jpg" alt="Foumula-TOP10-10"></p>
<p>这个公式的巧妙之处在于，它没有任何多余的内容，将数学中最基本的e、i、pie放在了同一个式子中，同时加入了数学也是哲学中最重要的0和1，再以简单的加号相连。<br>高斯曾经说：“一个人第一次看到这个公式而不感到它的魅力，他不可能成为数学家。”</p>
<p><img src="/img/posts/Foumula-TOP10-11.jpg" alt="Foumula-TOP10-11"><br><img src="/img/posts/Foumula-TOP10-12.jpg" alt="Foumula-TOP10-12"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很多人不喜欢数学，因为他们觉得数学伤脑筋，可是，我们有很多的发明、创造都跟数学有关。&lt;/p&gt;
&lt;p&gt;英国科学期刊《物理世界》曾让读者投票评选了“最伟大的公式”，最终榜上有名的十个公式既有无人不知的1+1=2，又有著名的E=mc2；既有简单的-圆周公式，又有复杂的欧拉公式……&lt;/p&gt;
&lt;p&gt;很多人不喜欢数学，因为他们觉得数学伤脑筋，可是，我们有很多的发明、创造都跟数学有关。&lt;/p&gt;
&lt;p&gt;英国科学期刊《物理世界》曾让读者投票评选了“最伟大的公式”，最终榜上有名的十个公式既有无人不知的1+1=2，又有著名的E=mc2；既有简单的-圆周公式，又有复杂的欧拉公式……&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/posts/Foumula-TOP10-1.jpg&quot; alt=&quot;Foumula-TOP10-1&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="生活点滴" scheme="http://c-xuan.com/categories/%E7%94%9F%E6%B4%BB%E7%82%B9%E6%BB%B4/"/>
    
    
      <category term="转载" scheme="http://c-xuan.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="数学" scheme="http://c-xuan.com/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>【SSIS】几个通用属性</title>
    <link href="http://c-xuan.com/2016/06/13/SSIS-GeneralAttribures/"/>
    <id>http://c-xuan.com/2016/06/13/SSIS-GeneralAttribures/</id>
    <published>2016-06-12T16:00:00.000Z</published>
    <updated>2016-09-22T16:17:02.471Z</updated>
    
    <content type="html"><![CDATA[<p>记录几个简单常用SSIS包常用属性，都是通用属性：</p>
<ul>
<li>1.<code>Disable</code> 设置属性为<code>true</code>是该任务不能执行</li>
<li>2.<code>DelayValidation</code> 设置为<code>true</code>只至运行时才验证任务中的属性，在非连接状态下和为任务包输入一个外部参数值但是直到部署时才验证这种情况下会很有用。它的默认设置为<code>false</code></li>
<li>3.<code>Description</code> 该属性描述任务包的情形。默认的值是<code>&lt;task name&gt;</code>,如果多个任务类型相同则设置为<code>&lt;task name 1&gt;</code>(数字1递增)。这个属性不是唯一的，只需要准确描述任务包项目方便其他人理解</li>
<li>4.<code>ExecValueVariable</code> 存储任务输出的用户变量，默认的值是<code>&lt;none&gt;</code>,不输出。</li>
<li>5.<code>FailPackageonFailure</code> 设置这个属性为<code>true</code>,当<code>package</code>中有一个任务失败那么他的上层的任务也将失败。它的上层任务可能是一个package或者container。 </li>
</ul>
<a id="more"></a>
<ul>
<li>6.ID 自动为每个任务产生的唯一ID,是一个GUID形式的字符串</li>
<li>7.<code>IsolationLevel</code> 如果设置了事务模式，那么可以设置事务的隔离级别。事务的隔离级别有好几种：读取提交<code>ReadCommitted</code>，重复读<code>ReapeatableRead</code>,串行化的<code>Seralizable</code>，不设置的<code>Unapecified</code>，快照<code>Snapshot</code>。默认的属性使串行化的。这些选项依据SQL Server的事务而来。</li>
<li>8.<code>LoggingMode</code> 设置任务的支持记录模式。可选值有：使用父任务设置<code>UseParentSetting</code>，可用<code>Enable</code>,不可用<code>Disabled</code>。默认值是使用父任务设置，意思是告诉任务使用上层task的日志记录模式。</li>
<li>9.<code>Name</code> 该属性和任务相关联，默认的值是<code>&lt;task name&gt;</code>，如果有多个相同类型的任务可以设置<code>&lt;task name1&gt;</code>(数字1自增)。作为一个ssis设计值，应该时常修改这个属性，使得它更具有可读性，但是它必须在这个package中必须是唯一。</li>
<li>10.<code>TransctionOption</code>:设置task的事务属性。他的值可以使不支持<code>NotSupported</code>，支持<code>Supported</code>，根据需要的<code>Required</code>。默认的设置是支持的，使得整个任务中可以使用事务。</li>
</ul>
<p>转自 指尖流淌<br><a href="http://www.cnblogs.com/zhijianliutang/archive/2012/04/25/2470546.html" target="_blank" rel="external">http://www.cnblogs.com/zhijianliutang/archive/2012/04/25/2470546.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录几个简单常用SSIS包常用属性，都是通用属性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1.&lt;code&gt;Disable&lt;/code&gt; 设置属性为&lt;code&gt;true&lt;/code&gt;是该任务不能执行&lt;/li&gt;
&lt;li&gt;2.&lt;code&gt;DelayValidation&lt;/code&gt; 设置为&lt;code&gt;true&lt;/code&gt;只至运行时才验证任务中的属性，在非连接状态下和为任务包输入一个外部参数值但是直到部署时才验证这种情况下会很有用。它的默认设置为&lt;code&gt;false&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;3.&lt;code&gt;Description&lt;/code&gt; 该属性描述任务包的情形。默认的值是&lt;code&gt;&amp;lt;task name&amp;gt;&lt;/code&gt;,如果多个任务类型相同则设置为&lt;code&gt;&amp;lt;task name 1&amp;gt;&lt;/code&gt;(数字1递增)。这个属性不是唯一的，只需要准确描述任务包项目方便其他人理解&lt;/li&gt;
&lt;li&gt;4.&lt;code&gt;ExecValueVariable&lt;/code&gt; 存储任务输出的用户变量，默认的值是&lt;code&gt;&amp;lt;none&amp;gt;&lt;/code&gt;,不输出。&lt;/li&gt;
&lt;li&gt;5.&lt;code&gt;FailPackageonFailure&lt;/code&gt; 设置这个属性为&lt;code&gt;true&lt;/code&gt;,当&lt;code&gt;package&lt;/code&gt;中有一个任务失败那么他的上层的任务也将失败。它的上层任务可能是一个package或者container。 &lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="BI墨客" scheme="http://c-xuan.com/categories/BI%E5%A2%A8%E5%AE%A2/"/>
    
    
      <category term="BI" scheme="http://c-xuan.com/tags/BI/"/>
    
      <category term="转载" scheme="http://c-xuan.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="SSIS" scheme="http://c-xuan.com/tags/SSIS/"/>
    
  </entry>
  
</feed>

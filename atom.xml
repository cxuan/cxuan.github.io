<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>靛青</title>
  <subtitle>青，取之于藍而青于藍。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://c-xuan.com/"/>
  <updated>2017-11-27T16:00:00.000Z</updated>
  <id>http://c-xuan.com/</id>
  
  <author>
    <name>c-xuan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【cmd】IF ELSE 复制(copy)文件问题</title>
    <link href="http://c-xuan.com/2017/11/28/20171128001/"/>
    <id>http://c-xuan.com/2017/11/28/20171128001/</id>
    <published>2017-11-27T16:00:00.000Z</published>
    <updated>2017-11-27T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>cmd中复制文件<code>COPY</code>命令一般都不会有问题，但是如果把<code>COPY</code>放在<code>IF ELSE</code>中可能导致批处理文件无法运行。</p>
<a id="more"></a>
<h3 id="测试场景"><a href="#测试场景" class="headerlink" title="测试场景"></a>测试场景</h3><p>文件夹结构如下：</p>
<p>test <br><br>|—folder1<br><br>|—|—a(b).txt<br><br>|—folder2</p>
<p>选择是否从folder1文件夹复制a(b).txt文件到folder2文件夹。</p>
<h3 id="测试1"><a href="#测试1" class="headerlink" title="测试1"></a>测试1</h3><p>不进行选择交互，直接复制，脚本如下：<br><figure class="highlight dos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off &amp; <span class="built_in">setlocal</span> EnableDelayedExpansion</div><div class="line"></div><div class="line"><span class="built_in">set</span> currentDir=<span class="variable">!cd!</span></div><div class="line"></div><div class="line"><span class="built_in">DEL</span> /Q <span class="variable">!currentDir!</span>\folder2\*.* </div><div class="line"></div><div class="line"><span class="built_in">copy</span> <span class="variable">!currentDir!</span>\folder1\a(b).txt <span class="variable">!currentDir!</span>\folder2</div></pre></td></tr></table></figure></p>
<p>保存为test.bat文件后执行结果：<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">已复制         <span class="number">1</span> 个文件。</div><div class="line">请按任意键继续. . .</div></pre></td></tr></table></figure></p>
<p>copy复制语句似乎没有问题。</p>
<h3 id="测试2"><a href="#测试2" class="headerlink" title="测试2"></a>测试2</h3><p>修改以上脚本，添加选择交互：<br><figure class="highlight dos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off &amp; <span class="built_in">setlocal</span> EnableDelayedExpansion</div><div class="line"></div><div class="line"><span class="built_in">set</span> /p yesno=是否复制(<span class="number">0</span>:否，<span class="number">1</span>:是): </div><div class="line"></div><div class="line"><span class="built_in">set</span> currentDir=<span class="variable">!cd!</span></div><div class="line"></div><div class="line"><span class="built_in">DEL</span> /Q <span class="variable">!currentDir!</span>\folder2\*.*</div><div class="line"></div><div class="line"><span class="keyword">if</span> <span class="variable">!yesno!</span> <span class="keyword">equ</span> <span class="number">1</span> ( </div><div class="line">    <span class="built_in">copy</span> <span class="variable">!currentDir!</span>\folder1\a(b).txt <span class="variable">!currentDir!</span>\folder2</div><div class="line">)<span class="keyword">else</span> (</div><div class="line">    <span class="built_in">echo</span> 没复制</div><div class="line">)</div><div class="line"></div><div class="line"><span class="built_in">pause</span></div></pre></td></tr></table></figure></p>
<p>保存为test.bat文件后执行,发现一闪而过，看不到什么报错。</p>
<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>经过多次测试，发现将copy中的路径用双引号(“”)包裹起来就可以了。<br><figure class="highlight dos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off &amp; <span class="built_in">setlocal</span> EnableDelayedExpansion</div><div class="line"></div><div class="line"><span class="built_in">set</span> /p yesno=是否复制(<span class="number">0</span>:否，<span class="number">1</span>:是): </div><div class="line"></div><div class="line"><span class="built_in">set</span> currentDir=<span class="variable">!cd!</span></div><div class="line"></div><div class="line"><span class="built_in">DEL</span> /Q <span class="variable">!currentDir!</span>\folder2\*.*</div><div class="line"></div><div class="line"><span class="keyword">if</span> <span class="variable">!yesno!</span> <span class="keyword">equ</span> <span class="number">1</span> ( </div><div class="line">    <span class="built_in">copy</span> "<span class="variable">!currentDir!</span>\folder1\a(b).txt" <span class="variable">!currentDir!</span>\folder2</div><div class="line">)<span class="keyword">else</span> (</div><div class="line">    <span class="built_in">echo</span> 没复制</div><div class="line">)</div><div class="line"></div><div class="line"><span class="built_in">pause</span></div></pre></td></tr></table></figure></p>
<p>由此可见，应该是路径中某些符号没有转义导致的，目测是文件名中的<code>()</code>，修改脚本，用<code>^</code>将<code>()</code>转义：<br><figure class="highlight dos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">@<span class="built_in">echo</span> off &amp; <span class="built_in">setlocal</span> EnableDelayedExpansion</div><div class="line"></div><div class="line"><span class="built_in">set</span> /p yesno=是否复制(<span class="number">0</span>:否，<span class="number">1</span>:是): </div><div class="line"></div><div class="line"><span class="built_in">set</span> currentDir=<span class="variable">!cd!</span></div><div class="line"></div><div class="line"><span class="built_in">DEL</span> /Q <span class="variable">!currentDir!</span>\folder2\*.*</div><div class="line"></div><div class="line"><span class="keyword">if</span> <span class="variable">!yesno!</span> <span class="keyword">equ</span> <span class="number">1</span> ( </div><div class="line">    <span class="built_in">copy</span> <span class="variable">!currentDir!</span>\folder1\a^(b^).txt <span class="variable">!currentDir!</span>\folder2</div><div class="line">)<span class="keyword">else</span> (</div><div class="line">    <span class="built_in">echo</span> 没复制</div><div class="line">)</div><div class="line"></div><div class="line"><span class="built_in">pause</span></div></pre></td></tr></table></figure></p>
<p>运行结果：<br><figure class="highlight erlang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">是否复制(<span class="number">0</span>:否，<span class="number">1</span>:是): <span class="number">1</span></div><div class="line">已复制         <span class="number">1</span> 个文件。</div><div class="line">请按任意键继续. . .</div></pre></td></tr></table></figure></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>虽然测试1中直接执行复制没问题，但是，将同样的语句放入IF ELSE中居然无法执行，还很难定位问题在哪里，所以解决方法是最好把路径放在双引号(“”)里面，就不用担心这个问题了，如果不这样就在IF ELSE中的路径把特殊字符转义。附上CMD中特殊字符转义说明。</p>
<table>
<thead>
<tr>
<th>Character to be escaped</th>
<th>Escape Sequence</th>
<th>Remark</th>
</tr>
</thead>
<tbody>
<tr>
<td>%</td>
<td>%%</td>
<td>May not always be required in doublequoted strings, just try</td>
</tr>
<tr>
<td>^</td>
<td>^^</td>
<td>May not always be required in doublequoted strings, but it won’t hurt</td>
</tr>
<tr>
<td>&amp;</td>
<td>^&amp;</td>
<td>May not always be required in doublequoted strings, but it won’t hurt</td>
</tr>
<tr>
<td>&lt;</td>
<td>^&lt;</td>
<td>May not always be required in doublequoted strings, but it won’t hurt</td>
</tr>
<tr>
<td>&gt;</td>
<td>^&gt;</td>
<td>May not always be required in doublequoted strings, but it won’t hurt</td>
</tr>
<tr>
<td>‘</td>
<td>^’</td>
<td>Required only in the FOR /F “subject” (i.e. between the parenthesis), unless backqis used</td>
</tr>
<tr>
<td>`</td>
<td>^`</td>
<td>Required only in the FOR /F “subject” (i.e. between the parenthesis), if backq is used</td>
</tr>
<tr>
<td>,</td>
<td>^,</td>
<td>Required only in the FOR /F “subject” (i.e. between the parenthesis), even in doublequoted strings</td>
</tr>
<tr>
<td>;</td>
<td>^;</td>
<td>Required only in the FOR /F “subject” (i.e. between the parenthesis), even in doublequoted strings</td>
</tr>
<tr>
<td>=</td>
<td>^=</td>
<td>Required only in the FOR /F “subject” (i.e. between the parenthesis), even in doublequoted strings</td>
</tr>
<tr>
<td>(</td>
<td>^(</td>
<td>Required only in the FOR /F “subject” (i.e. between the parenthesis), even in doublequoted strings</td>
</tr>
<tr>
<td>)</td>
<td>^)</td>
<td>Required only in the FOR /F “subject” (i.e. between the parenthesis), even in doublequoted strings</td>
</tr>
<tr>
<td>!</td>
<td>^^!</td>
<td>Required only when delayed variable expansion is active</td>
</tr>
<tr>
<td>“</td>
<td>“”</td>
<td>Required only inside the search pattern of FIND</td>
</tr>
<tr>
<td>\</td>
<td>\\</td>
<td>Required only inside the regex pattern of FINDSTR</td>
</tr>
<tr>
<td>[</td>
<td>\[</td>
<td>Required only inside the regex pattern of FINDSTR</td>
</tr>
<tr>
<td>]</td>
<td>\]</td>
<td>Required only inside the regex pattern of FINDSTR</td>
</tr>
<tr>
<td>\</td>
<td>\\</td>
<td>Required only inside the regex pattern of FINDSTR</td>
</tr>
<tr>
<td>.</td>
<td>\.</td>
<td>Required only inside the regex pattern of FINDSTR</td>
</tr>
<tr>
<td>*</td>
<td>\*</td>
<td>Required only inside the regex pattern of FINDSTR</td>
</tr>
<tr>
<td>?</td>
<td>\?</td>
<td>Required only inside the regex pattern of FINDSTR</td>
</tr>
</tbody>
</table>
<p>参考：<a href="http://www.robvanderwoude.com/escapechars.php" target="_blank" rel="external">http://www.robvanderwoude.com/escapechars.php</a></p>
<p>将表格快速转换为HTML,Markdown格式：<a href="http://www.tablesgenerator.com/]" target="_blank" rel="external">http://www.tablesgenerator.com/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;cmd中复制文件&lt;code&gt;COPY&lt;/code&gt;命令一般都不会有问题，但是如果把&lt;code&gt;COPY&lt;/code&gt;放在&lt;code&gt;IF ELSE&lt;/code&gt;中可能导致批处理文件无法运行。&lt;/p&gt;
    
    </summary>
    
      <category term="码路刺客" scheme="http://c-xuan.com/categories/%E7%A0%81%E8%B7%AF%E5%88%BA%E5%AE%A2/"/>
    
    
      <category term="原创" scheme="http://c-xuan.com/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="cmd" scheme="http://c-xuan.com/tags/cmd/"/>
    
  </entry>
  
  <entry>
    <title>【ORACLE】导致物化视图快速刷新变慢的原因和解决</title>
    <link href="http://c-xuan.com/2017/11/19/20171119001/"/>
    <id>http://c-xuan.com/2017/11/19/20171119001/</id>
    <published>2017-11-18T16:00:00.000Z</published>
    <updated>2017-11-28T17:07:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>ORACLE物化视图(MATERIALIZED VIEW)有自动提交刷新和手动刷新两种刷新方式，每种刷新方式下有增量刷新(FAST)、全量刷新(COMPLETE)、系统自动判断(FORCE)三种刷新方法。一般而言，增量刷新理论上是比全量刷新要快一些的，但是我发现某些情况下增量刷新将导致基表提交后延迟严重，下面将做一些测试。</p>
<a id="more"></a>
<h3 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h3><ul>
<li>操作系统：Red Hat Enterprise Linux Server release 5.8 虚拟机</li>
<li>处理器：Intel(R) Core(TM) i7-4700MQ CPU @ 2.40GHz</li>
<li>内存大小：4G</li>
<li>数据库：Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production</li>
</ul>
<h3 id="准备测试数据"><a href="#准备测试数据" class="headerlink" title="准备测试数据"></a>准备测试数据</h3><p>创建三个表结构相同的测试表，id为自增长主键，这三个表作为物化视图的基表。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> t1 (</div><div class="line">    <span class="keyword">id</span> <span class="built_in">INT</span>,</div><div class="line">    c1 <span class="built_in">INT</span>,</div><div class="line">    c2 <span class="built_in">INT</span>,</div><div class="line">    <span class="keyword">constraint</span> pk1 primary <span class="keyword">key</span>(<span class="keyword">id</span>));</div><div class="line">    </div><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> t2 (</div><div class="line">    <span class="keyword">id</span> <span class="built_in">INT</span>,</div><div class="line">    c1 <span class="built_in">INT</span>,</div><div class="line">    c2 <span class="built_in">INT</span>,</div><div class="line">    <span class="keyword">constraint</span> pk2 primary <span class="keyword">key</span>(<span class="keyword">id</span>));</div><div class="line">    </div><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> t3 (</div><div class="line">    <span class="keyword">id</span> <span class="built_in">INT</span>,</div><div class="line">    c1 <span class="built_in">INT</span>,</div><div class="line">    c2 <span class="built_in">INT</span>,</div><div class="line">    <span class="keyword">constraint</span> pk3 primary <span class="keyword">key</span>(<span class="keyword">id</span>));</div></pre></td></tr></table></figure>
<p>每个表插入30000行数据，并给三个基表创建物化视图日志(MATERIALIZED VIEW LOG)：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">MATERIALIZED</span> <span class="keyword">VIEW</span> <span class="keyword">LOG</span> <span class="keyword">ON</span> t1 <span class="keyword">WITH</span> <span class="keyword">ROWID</span>,<span class="keyword">SEQUENCE</span>(<span class="keyword">id</span>,c1,c2) <span class="keyword">INCLUDING</span> <span class="keyword">NEW</span> <span class="keyword">VALUES</span>;</div><div class="line"></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">MATERIALIZED</span> <span class="keyword">VIEW</span> <span class="keyword">LOG</span> <span class="keyword">ON</span> t2 <span class="keyword">WITH</span> <span class="keyword">ROWID</span>,<span class="keyword">SEQUENCE</span>(<span class="keyword">id</span>,c1,c2) <span class="keyword">INCLUDING</span> <span class="keyword">NEW</span> <span class="keyword">VALUES</span>;</div><div class="line"></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">MATERIALIZED</span> <span class="keyword">VIEW</span> <span class="keyword">LOG</span> <span class="keyword">ON</span> t3 <span class="keyword">WITH</span> <span class="keyword">ROWID</span>,<span class="keyword">SEQUENCE</span>(<span class="keyword">id</span>,c1,c2) <span class="keyword">INCLUDING</span> <span class="keyword">NEW</span> <span class="keyword">VALUES</span>;</div></pre></td></tr></table></figure>
<h3 id="物化视图中不包含列计算"><a href="#物化视图中不包含列计算" class="headerlink" title="物化视图中不包含列计算"></a>物化视图中不包含列计算</h3><p>首先创建的物化视图如下：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">MATERIALIZED</span> <span class="keyword">VIEW</span> mv1</div><div class="line"><span class="keyword">BUILD</span> <span class="keyword">IMMEDIATE</span></div><div class="line"><span class="keyword">REFRESH</span> <span class="keyword">FAST</span> <span class="keyword">ON</span> <span class="keyword">COMMIT</span></div><div class="line"><span class="keyword">WITH</span> <span class="keyword">ROWID</span></div><div class="line"><span class="keyword">AS</span></div><div class="line"><span class="keyword">SELECT</span> a.id aid,a.c1 ac1,a.c2 ac2,b.c1 bc1,b.c2 bc2,</div><div class="line">       a.rowid rida,b.rowid ridb</div><div class="line">  <span class="keyword">FROM</span> t1 a,t2 b</div><div class="line"> <span class="keyword">WHERE</span> a.id=b.id(+)</div><div class="line">   <span class="keyword">AND</span> a.c1=b.c1(+);</div></pre></td></tr></table></figure></p>
<p>该物化视图采用的是基表提交(commit)触发快速刷新(FAST)的方式刷新数据，物化视图为两个基表t1,t2的外联接，SELECT后面的列只是简单列出t1,t2表中的列而已。</p>
<h4 id="更新外联接主表数据"><a href="#更新外联接主表数据" class="headerlink" title="更新外联接主表数据"></a>更新外联接主表数据</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> mv1 <span class="keyword">where</span> aid = <span class="number">9</span>;</div></pre></td></tr></table></figure>
<p><img src="/img/posts/20171119001-01.png" alt="20171119001-01"></p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">update</span> t1 <span class="keyword">set</span> c2=<span class="number">3</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">9</span>;</div></pre></td></tr></table></figure>
<p><img src="/img/posts/20171119001-02.png" alt="20171119001-02"></p>
<p>可见提交耗时很短，再查看物化视图数据，已经更新。</p>
<p><img src="/img/posts/20171119001-03.png" alt="20171119001-03"></p>
<p>使用如下语句查询物化视图的刷新方式，刷新时间等信息。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> MVIEW_NAME,</div><div class="line">       REFRESH_MODE,</div><div class="line">       REFRESH_METHOD,</div><div class="line">       FAST_REFRESHABLE,</div><div class="line">       LAST_REFRESH_TYPE,</div><div class="line">       LAST_REFRESH_DATE,</div><div class="line">       STALENESS </div><div class="line">  <span class="keyword">FROM</span> USER_MVIEWS </div><div class="line"> <span class="keyword">WHERE</span> MVIEW_NAME = <span class="string">'MV1'</span>;</div></pre></td></tr></table></figure>
<p><img src="/img/posts/20171119001-04.png" alt="20171119001-04"></p>
<h4 id="更新外联接非主表数据"><a href="#更新外联接非主表数据" class="headerlink" title="更新外联接非主表数据"></a>更新外联接非主表数据</h4><p>更新非主表t2的同一行的数据，提交后耗时也很短。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">update</span> t2 <span class="keyword">set</span> c2=<span class="number">13</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">9</span>;</div></pre></td></tr></table></figure>
<p><img src="/img/posts/20171119001-05.png" alt="20171119001-05"></p>
<p><img src="/img/posts/20171119001-06.png" alt="20171119001-06"></p>
<p><img src="/img/posts/20171119001-07.png" alt="20171119001-07"></p>
<p>所以这种情况下，物化视图的增量刷新是没有多少延迟的。</p>
<h3 id="物化视图中包含列计算"><a href="#物化视图中包含列计算" class="headerlink" title="物化视图中包含列计算"></a>物化视图中包含列计算</h3><p>将MV1物化视图删除，重新创建一个。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">DROP</span> <span class="keyword">MATERIALIZED</span> <span class="keyword">VIEW</span> mv1;</div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">MATERIALIZED</span> <span class="keyword">VIEW</span> mv1</div><div class="line"><span class="keyword">BUILD</span> <span class="keyword">IMMEDIATE</span></div><div class="line"><span class="keyword">REFRESH</span> <span class="keyword">FAST</span> <span class="keyword">ON</span> <span class="keyword">COMMIT</span></div><div class="line"><span class="keyword">WITH</span> <span class="keyword">ROWID</span></div><div class="line"><span class="keyword">AS</span></div><div class="line"><span class="keyword">SELECT</span> a.id aid,a.c1 ac1,a.c2 ac2,b.c1 bc1,b.c2 bc2,</div><div class="line">       a.c2+b.c2 <span class="keyword">as</span> d,</div><div class="line">       a.rowid rida,b.rowid ridb</div><div class="line"> <span class="keyword">FROM</span> t1 a,t2 b</div><div class="line"><span class="keyword">WHERE</span> a.id=b.id(+)</div><div class="line">  <span class="keyword">AND</span> a.c1=b.c1(+);</div></pre></td></tr></table></figure></p>
<p>在之前的基础上增加了d列，这列是t1和t2基表中各一列的计算。</p>
<h4 id="更新外联接主表数据-1"><a href="#更新外联接主表数据-1" class="headerlink" title="更新外联接主表数据"></a>更新外联接主表数据</h4><p>测试更新主表数据，查看提交耗时。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> mv1 <span class="keyword">where</span> aid = <span class="number">9</span>;</div></pre></td></tr></table></figure>
<p><img src="/img/posts/20171119001-08.png" alt="20171119001-08"></p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">update</span> t1 <span class="keyword">set</span> c2=<span class="number">6</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">9</span>;</div></pre></td></tr></table></figure>
<p><img src="/img/posts/20171119001-09.png" alt="20171119001-09"></p>
<p><img src="/img/posts/20171119001-10.png" alt="20171119001-10"></p>
<p><img src="/img/posts/20171119001-11.png" alt="20171119001-11"></p>
<p>基表数据提交时延迟很小。</p>
<h4 id="更新外联接非主表数据-1"><a href="#更新外联接非主表数据-1" class="headerlink" title="更新外联接非主表数据"></a>更新外联接非主表数据</h4><p>测试更新t2表数据，查看提交耗时。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">update</span> t2 <span class="keyword">set</span> c2=<span class="number">1</span> <span class="keyword">where</span> <span class="keyword">id</span> = <span class="number">9</span>;</div></pre></td></tr></table></figure>
<p><img src="/img/posts/20171119001-12.png" alt="20171119001-12"></p>
<p><img src="/img/posts/20171119001-13.png" alt="20171119001-13"></p>
<p><img src="/img/posts/20171119001-14.png" alt="20171119001-14"></p>
<p>基表更新数据提交时，显示<strong>20多秒</strong>才完成，显然，这种情况会导致物化视图增量刷新延迟严重。</p>
<p>将MV1删除后重建为下列情况，相加的两列是同一个表的两列，这时再更新t2表的一行数据，发现提交没有延迟。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">DROP</span> <span class="keyword">MATERIALIZED</span> <span class="keyword">VIEW</span> mv1;</div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">MATERIALIZED</span> <span class="keyword">VIEW</span> mv1</div><div class="line"><span class="keyword">BUILD</span> <span class="keyword">IMMEDIATE</span></div><div class="line"><span class="keyword">REFRESH</span> <span class="keyword">FAST</span> <span class="keyword">ON</span> <span class="keyword">COMMIT</span></div><div class="line"><span class="keyword">WITH</span> <span class="keyword">ROWID</span></div><div class="line"><span class="keyword">AS</span></div><div class="line"><span class="keyword">SELECT</span> a.id aid,a.c1 ac1,a.c2 ac2,b.c1 bc1,b.c2 bc2,</div><div class="line">       b.c1+b.c2 <span class="keyword">as</span> d,</div><div class="line">       a.rowid rida,b.rowid ridb</div><div class="line">  <span class="keyword">FROM</span> t1 a,t2 b</div><div class="line"> <span class="keyword">WHERE</span> a.id=b.id;</div></pre></td></tr></table></figure>
<h3 id="一种解决方案"><a href="#一种解决方案" class="headerlink" title="一种解决方案"></a>一种解决方案</h3><p>既然含有外联接的物化视图多表列运算有问题，可以在MV1中将运算列都SELECT出来，再创建一个嵌套物化视图MV2，将MV1中的列进行运算处理。<br>物化视图MV1创建如下：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">MATERIALIZED</span> <span class="keyword">VIEW</span> mv1</div><div class="line"><span class="keyword">BUILD</span> <span class="keyword">IMMEDIATE</span></div><div class="line"><span class="keyword">REFRESH</span> <span class="keyword">FAST</span> <span class="keyword">ON</span> <span class="keyword">COMMIT</span></div><div class="line"><span class="keyword">WITH</span> <span class="keyword">ROWID</span></div><div class="line"><span class="keyword">AS</span></div><div class="line"><span class="keyword">SELECT</span> a.id aid,a.c1 ac1,a.c2 ac2,b.c1 bc1,b.c2 bc2,</div><div class="line">       a.rowid rida,b.rowid ridb</div><div class="line">  <span class="keyword">FROM</span> t1 a,t2 b</div><div class="line"> <span class="keyword">WHERE</span> a.id=b.id(+)</div><div class="line">   <span class="keyword">AND</span> a.c1=b.c1(+);</div><div class="line"><span class="comment">--因为MV1将作为MV2的基本表，所以要建物化视图日志</span></div><div class="line"><span class="keyword">create</span> <span class="keyword">materialized</span> <span class="keyword">view</span> <span class="keyword">log</span> <span class="keyword">on</span> mv1 <span class="keyword">with</span> <span class="keyword">rowid</span>,<span class="keyword">sequence</span>(aid) <span class="keyword">including</span> <span class="keyword">new</span> <span class="keyword">values</span>;</div></pre></td></tr></table></figure></p>
<p>物化视图MV2创建如下：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">materialized</span> <span class="keyword">view</span> mv2</div><div class="line"><span class="keyword">build</span> <span class="keyword">immediate</span></div><div class="line"><span class="keyword">refresh</span> <span class="keyword">fast</span> <span class="keyword">on</span> <span class="keyword">commit</span></div><div class="line"><span class="keyword">with</span> <span class="keyword">rowid</span></div><div class="line"><span class="keyword">as</span></div><div class="line"><span class="keyword">select</span> aid,ac1,ac2,bc1,bc2,</div><div class="line">       ac2+bc2 <span class="keyword">as</span> d, <span class="comment">--原本在MV1中计算的列在这里计算</span></div><div class="line">       a.rowid rida,b.rowid ridb</div><div class="line">  <span class="keyword">from</span> mv1 a,t3 b <span class="comment">--这里注意，在这个ORACLE版本中，创建嵌套物化视图必须要有表关联或者聚合计算，单独from mv1创建不了MV2.</span></div><div class="line"> <span class="keyword">where</span> a.aid=b.id(+);</div></pre></td></tr></table></figure></p>
<p>查看初始数据<code>select * from mv2 where aid = 99;</code><br><img src="/img/posts/20171119001-15.png" alt="20171119001-15"><br>更新t2表数据<code>update t2 set c2=37 where id = 99;</code>，查看提交耗时<br><img src="/img/posts/20171119001-16.png" alt="20171119001-16"><br>查看MV2结果<br><img src="/img/posts/20171119001-17.png" alt="20171119001-17"><br>查看物化视图刷新情况<br><img src="/img/posts/20171119001-18.png" alt="20171119001-18"><br>可见，两个物化视图在基表数据更新后提交不会耗时很久。用这种方式将一个运算分开两步完成，虽然可行，但是代价也很明显，要多创建嵌套物化视图，不敢保证复杂情况下，嵌套物化视图会有其他问题。</p>
<h3 id="另两种解决方案"><a href="#另两种解决方案" class="headerlink" title="另两种解决方案"></a>另两种解决方案</h3><ul>
<li>1.将含有多表列运算的外联接快速刷新物化视图改为定时全量刷新。</li>
<li>2.将外联接重写为内连接。</li>
</ul>
<h3 id="最终解决"><a href="#最终解决" class="headerlink" title="最终解决"></a>最终解决</h3><p>经测试，除以上方法外，有一个方法比较完美的解决延迟问题的方案，就是在物化视图上的ROWID列创建索引。测试如下：<br>这里做了一个相对复杂的嵌套物化视图测试。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">drop</span> <span class="keyword">MATERIALIZED</span> <span class="keyword">VIEW</span> mv1;</div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">MATERIALIZED</span> <span class="keyword">VIEW</span> mv1</div><div class="line"><span class="keyword">BUILD</span> <span class="keyword">IMMEDIATE</span></div><div class="line"><span class="keyword">REFRESH</span> <span class="keyword">FAST</span> <span class="keyword">ON</span> <span class="keyword">COMMIT</span></div><div class="line"><span class="keyword">WITH</span> <span class="keyword">ROWID</span></div><div class="line"><span class="keyword">AS</span></div><div class="line"><span class="keyword">SELECT</span> a.id aid,a.c1 ac1,a.c2 ac2,b.c1 bc1,b.c2 bc2,</div><div class="line">       a.c2+b.c2 <span class="keyword">as</span> d,</div><div class="line">       (a.c2+b.c2)*b.c1 <span class="keyword">as</span> e,</div><div class="line">       a.rowid rida,b.rowid ridb</div><div class="line"> <span class="keyword">FROM</span> t1 a,t2 b</div><div class="line"><span class="keyword">WHERE</span> a.id=b.id(+)</div><div class="line">  <span class="keyword">AND</span> a.c1=b.c1(+);</div><div class="line"><span class="comment">--在mv1上所有rowid创建索引</span></div><div class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx1 <span class="keyword">on</span> mv1(rida,ridb);</div><div class="line"><span class="comment">--创建mv1物化视图日志</span></div><div class="line"><span class="keyword">create</span> <span class="keyword">materialized</span> <span class="keyword">view</span> <span class="keyword">log</span> <span class="keyword">on</span> mv1 <span class="keyword">with</span> <span class="keyword">rowid</span>(aid,ac1,ac2,bc1,bc2) <span class="keyword">including</span> <span class="keyword">new</span> <span class="keyword">values</span>;</div><div class="line"><span class="comment">--mv2引用mv1</span></div><div class="line"><span class="keyword">CREATE</span> <span class="keyword">MATERIALIZED</span> <span class="keyword">VIEW</span> mv2</div><div class="line"><span class="keyword">BUILD</span> <span class="keyword">IMMEDIATE</span></div><div class="line"><span class="keyword">REFRESH</span> <span class="keyword">FAST</span> <span class="keyword">ON</span> <span class="keyword">COMMIT</span></div><div class="line"><span class="keyword">WITH</span> <span class="keyword">ROWID</span></div><div class="line"><span class="keyword">AS</span></div><div class="line"><span class="keyword">select</span> a.aid,a.ac1,a.ac2,b.c1 bc1,b.c2 bc2,a.e,</div><div class="line">       a.e+b.c2 <span class="keyword">as</span> d,</div><div class="line">       a.rowid rida,b.rowid ridb</div><div class="line"><span class="keyword">from</span> mv1 a,t2 b</div><div class="line"><span class="keyword">where</span> a.aid=b.id(+)</div><div class="line">  <span class="keyword">and</span> a.ac1=b.c1(+);</div><div class="line"><span class="comment">--在mv2上所有rowid创建索引</span></div><div class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx2 <span class="keyword">on</span> mv2(rida,ridb);</div></pre></td></tr></table></figure></p>
<p>以上脚本，创建了两个物化视图mv1,mv2，每个物化视图都含有外联接，且select列中含有多个表列结算，mv1嵌套在mv2中，基表t2被两个物化视图引用，且t2的字段在两个物化视图中都参与计算，这样的情况应该算比较复杂了，注意每个物化视图都建立索引。</p>
<p>查询mv2初始值:<br><code>select * from mv2 where aid = 509;</code><br><img src="/img/posts/20171119001-19.png" alt="20171119001-19"><br>修改基表t2的数据：<br><code>update t2 set c2=85 where id = 509;</code><br><img src="/img/posts/20171119001-20.png" alt="20171119001-20"><br>查看结果：<br><code>select * from mv2 where aid = 509;</code><br><img src="/img/posts/20171119001-21.png" alt="20171119001-21"><br>查看物化视图状态：<br><img src="/img/posts/20171119001-22.png" alt="20171119001-22"><br>可见物化视图为增量刷新，且没有之前发生的严重延迟的情况，需要注意的是，物化视图都要建立索引，且索引列都是包含rowid列的复合索引，如果是其他不是rowid列索引，可能没有任何效果。经测试，对基表增删改都是有效果的。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>1.创建含有外联接且刷新方式为REFRESH FAST ON COMMIT的物化视图时，如果select列里含有多个表中取某些列做运算，注意了，这时更新非主表的数据(增删改)，那么基表提交数据后将有可能导致延迟阻塞，这个时间比物化视图全量刷新还要慢。</li>
<li>2.除上述情况，例如物化视图都是内连接，有外联接但是没有多个表列做运算等，增量刷新都没问题。</li>
<li><del>3.至于多表列运算的外联接物化视图增量刷新很慢的原因，与ORACLE物化视图的刷新机制有关，官方文档也有提及这种情况会影响效率，建议最好改为内连接。</del></li>
<li><del>4.解决方法是改为定时全量刷新或者改外联接为内连接或者利用嵌套物化视图，或者还有其他方法，总之就是为了避开这种情况。</del></li>
<li>3.比较靠谱的解决方案是在多表列运算的外联接物化视图上创建包含rowid列的索引，创建与不创建索引在这个问题上显现出天壤之别。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ORACLE物化视图(MATERIALIZED VIEW)有自动提交刷新和手动刷新两种刷新方式，每种刷新方式下有增量刷新(FAST)、全量刷新(COMPLETE)、系统自动判断(FORCE)三种刷新方法。一般而言，增量刷新理论上是比全量刷新要快一些的，但是我发现某些情况下增量刷新将导致基表提交后延迟严重，下面将做一些测试。&lt;/p&gt;
    
    </summary>
    
      <category term="码路刺客" scheme="http://c-xuan.com/categories/%E7%A0%81%E8%B7%AF%E5%88%BA%E5%AE%A2/"/>
    
    
      <category term="数据库" scheme="http://c-xuan.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="ORACLE" scheme="http://c-xuan.com/tags/ORACLE/"/>
    
      <category term="物化视图" scheme="http://c-xuan.com/tags/%E7%89%A9%E5%8C%96%E8%A7%86%E5%9B%BE/"/>
    
      <category term="原创" scheme="http://c-xuan.com/tags/%E5%8E%9F%E5%88%9B/"/>
    
  </entry>
  
  <entry>
    <title>【ORACLE】物化视图快速刷新限制条件</title>
    <link href="http://c-xuan.com/2017/07/13/20170713001/"/>
    <id>http://c-xuan.com/2017/07/13/20170713001/</id>
    <published>2017-07-12T16:00:00.000Z</published>
    <updated>2017-07-12T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>快速刷新的物化视图创建比较麻烦，限制条件比较多，本文参考Oracle 11g 11.2版本官方文档，总结一般情况、含有联接、含有聚合计算、UNION ALL等情况下的限制条件。</p>
<a id="more"></a>
<h3 id="所有快速刷新的物化视图都必须满足的条件"><a href="#所有快速刷新的物化视图都必须满足的条件" class="headerlink" title="所有快速刷新的物化视图都必须满足的条件"></a><span id="here">所有快速刷新的物化视图都必须满足的条件</span></h3><p>定义物化视图的查询语句限制如下：</p>
<ul>
<li>1.物化视图中不能含有非重复表达式的引用，例如<code>SYSDATE</code>和<code>ROWNUM</code>.</li>
<li>2.物化视图中不能出现<code>RAW</code>或<code>LONG RAW</code>数据类型的引用。</li>
<li>3.查询语句的<code>SELECT</code>部分语不能出现子查询。</li>
<li>4.<code>SELECT</code>子句部分不能包含分析性质的函数，例如<code>RANK</code>。</li>
<li>5.不能含有<code>MODEL</code>子句。</li>
<li>6.子查询中不能含有<code>HAVING</code>子句。</li>
<li>7.不能出现含有<code>ANY</code>,<code>ALL</code>或<code>NOT EXISTS</code>的嵌套子查询。</li>
<li>8.不能含有<code>[START WITH …] CONNECT BY</code>子句。</li>
<li>9.不能包含不同站点的多个明细表。</li>
<li>10.<code>ON COMMIT</code>刷新方式的物化视图不能有远程明细表的引用。</li>
<li>11.嵌套物化视图必须含有表联接或者聚合计算。</li>
<li>12.物化视图包含联接和<code>GROUP BY</code>子句的聚合计算时，不能select from 一个有索引的表。</li>
</ul>
<h3 id="只包含联接的物化视图快速刷新限制条件"><a href="#只包含联接的物化视图快速刷新限制条件" class="headerlink" title="只包含联接的物化视图快速刷新限制条件"></a>只包含联接的物化视图快速刷新限制条件</h3><p>定义物化视图的查询语句只含有联接且没有聚合计算，实现快速刷新除满足<a href="#here">通用条件</a>外，还要满足条件如下：</p>
<ul>
<li>1.不能含有<code>GROUP BY</code>子句或聚合计算。</li>
<li>2.<code>FROM</code>中出现的每个基表的<code>ROWID</code>必须出现在<code>SELECT</code>子句中。</li>
<li>3.<code>FROM</code>中出现的每个基表都必须创建基于<code>ROWID</code>的物化视图日志(MATERIALIZED VIEW LOG)。</li>
<li>4.<code>SELECT</code>子句中不能含有object类型的列。</li>
</ul>
<p><font color="red"><strong>另外，以下情况将会影响快速刷新的效率：</strong></font></p>
<ul>
<li><strong><font color="red">1.定义的查询语句含有外联接，如果这样的话，请考虑重写查询语句改为内连接。</font></strong></li>
<li><strong><font color="red">2.<code>SELECT</code>子句中含有多个表的列运算。</font></strong></li>
</ul>
<h3 id="包含聚合的物化视图快速刷新限制"><a href="#包含聚合的物化视图快速刷新限制" class="headerlink" title="包含聚合的物化视图快速刷新限制"></a>包含聚合的物化视图快速刷新限制</h3><p>定义物化视图的查询语句含有聚合计算，实现快速刷新除满足<a href="#here">通用条件</a>外，还要满足条件如下：</p>
<ul>
<li>1.所有基表必须建立物化视图日志，创建日志必须满足：<ul>
<li>1.1 包含在物化视图中引用的所有列，确保这些列没有被加密。</li>
<li>1.2 需要指定<code>ROWID</code>和<code>INCLUDING NEW VAUES</code>。</li>
<li>1.3 如果基表会有插入/直接导入，删除，更新数据的混合操作，需要指定<code>SEQUENCE</code>子句。</li>
</ul>
</li>
<li>2.只有<code>SUM</code>,<code>COUNT</code>,<code>AVG</code>,<code>STDDEV</code>,<code>VARIANCE</code>,<code>MIN</code>和<code>MAX</code>才支持快速刷新。</li>
<li>3.必须有写<code>COUNT(*)</code>。</li>
<li>4.聚合函数必须出现在表达式的最外层，也就是说像<code>AVG(AVG(X))</code>或<code>AVG(x)+AVG(x)</code>都是不允许的。</li>
<li>5.对每一个聚集计算如<code>AVG(expr)</code>,相应的<code>COUNT(expr)</code>也必须要有，Oracle建议<code>SUM(expr)</code>也写上。</li>
<li>6.如果含有<code>VARIANCE(expr)</code>或<code>STDDEV(expr)</code>,<code>COUNT(expr)</code>和<code>SUM(expr)</code>都必须写，Oracle建议<code>SUM(expr*expr)</code>也写上。</li>
</ul>
<p>参考：<a href="https://docs.oracle.com/cd/E11882_01/server.112/e25554/basicmv.htm#i1007013" target="_blank" rel="external">https://docs.oracle.com/cd/E11882_01/server.112/e25554/basicmv.htm#i1007013</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;快速刷新的物化视图创建比较麻烦，限制条件比较多，本文参考Oracle 11g 11.2版本官方文档，总结一般情况、含有联接、含有聚合计算、UNION ALL等情况下的限制条件。&lt;/p&gt;
    
    </summary>
    
      <category term="码路刺客" scheme="http://c-xuan.com/categories/%E7%A0%81%E8%B7%AF%E5%88%BA%E5%AE%A2/"/>
    
    
      <category term="数据库" scheme="http://c-xuan.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="ORACLE" scheme="http://c-xuan.com/tags/ORACLE/"/>
    
      <category term="物化视图" scheme="http://c-xuan.com/tags/%E7%89%A9%E5%8C%96%E8%A7%86%E5%9B%BE/"/>
    
      <category term="翻译" scheme="http://c-xuan.com/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title>树形结构数据存储方案（五）：区间嵌套</title>
    <link href="http://c-xuan.com/2017/03/07/tree-table-store5/"/>
    <id>http://c-xuan.com/2017/03/07/tree-table-store5/</id>
    <published>2017-03-07T15:44:08.000Z</published>
    <updated>2017-03-07T16:11:16.129Z</updated>
    
    <content type="html"><![CDATA[<p>前面的一篇文章介绍了左右值编码，不知道大家注意到了没有，如果数据庞大，每次更新都需要更新差不多全表，效率较低没有更好的方式？今天我们就来研究下区间嵌套法。</p>
<p><strong>区间嵌套法原理</strong></p>
<p>如果节点区间<code>[clft, crgt]</code>与<code>[plft, prgt]</code>存在如下关系：<code>plft &lt;= clft and crgt &gt;= prgt</code>，则<code>[clft, crgt]</code>区间里的点是<code>[plft, prgt]</code>的子节点。基于此假设我们就可以通过对区间的不断的向下划来获取新的区间。举例：如果在区间<code>[plft, prgt]</code>中存在一个空白区间<code>[lft1, rgt1]</code>，如果要加入一个<code>[plft,lft1]</code>、<code>[rgt1,prgt]</code>同级的区间，只需插入节点：<code>[(2*lft1+rgt1)/3</code>,  <code>(rgt1+2*lft)/3]</code>。在添加完节点后我们还留下<code>[lft1,(2*lft1+rgt1)/3]</code>和 <code>[(rgt1+2*lft)/3,rgt1]</code>两个空余的空间用来添加更多的子节点。</p>
<a id="more"></a>
<center><img src="/img/posts/tree-table-store5-1.gif"></center>

<p>如果我们把区间放在二位平面上，把<code>rgt</code>当成是x轴，<code>lft</code>当做是y轴，纳闷嵌套的区间数差不多是这样的：</p>
<center><img src="/img/posts/tree-table-store5-2.gif"></center>

<p>每个节点<code>[lft, rgt]</code>拥有的子节点都被包含在<code>y &gt;= lft &amp; x &lt;= rgt</code>中。同时<code>y &gt;= clft &amp; x &lt;= crgt</code>所在的空间也是<code>y &gt;= plft  &amp; x &lt;= prgt</code>的子集。另外由于新增的右区间都小于已有的左区间，所以新增的节点均在y=x这条直线以下。</p>
<p><strong>区间嵌套法实现</strong></p>
<p>了解了区间嵌套法的原理后，接下来我们就要考虑如何实现他，原则上初始的区间使用任何区间都是可以的，这里我们使用的是[0,1]作为根区间。</p>
<center><img src="/img/posts/tree-table-store5-3.gif"></center>

<p>首先，我们在XY平面上定义2个点。深度优先集合点和广度有限集合点，针对点<code>&lt;x=1,y=1/2&gt;</code>的深度优先集合点为<code>&lt;x=1,y=1&gt;</code>，广度优先集合点为<code>&lt;x=1/2,y=1/2&gt;</code>。接下来我们定义第一个子节点的位置为父节点和深度优先集合点的中间点。兄弟节点则为前一个子节点到广度优先集合点的中间点，如上图所示，节点1.2的位置为<code>&lt;x=3/4, y=5/8&gt;</code>。</p>
<p>另外仔细看我们可以看到点与点之间的关系。另外如果我们知道x和y的和，我们就能反推出x,y的值（具体的逻辑是什么，我现在也还没有搞懂，有知道的朋友可以帮忙解释下）。</p>
<p>我们以节点<code>&lt;x=3/4, y=5/8&gt;</code>为例，我们可以得到他的和为11/8。</p>
<p>我们定义11为分子（numerator），8为分母（denominator），则x点的分子为：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> DEFINER = <span class="string">`root`</span>@<span class="string">`localhost`</span> <span class="keyword">FUNCTION</span> <span class="string">`x_numer`</span>(<span class="string">`numer`</span> <span class="built_in">int</span>,<span class="string">`denom`</span> <span class="built_in">int</span>)</div><div class="line"><span class="keyword">RETURNS</span> <span class="built_in">int</span>(<span class="number">11</span>)</div><div class="line"><span class="keyword">BEGIN</span></div><div class="line"><span class="keyword">DECLARE</span> ret_num <span class="built_in">INT</span>;</div><div class="line"><span class="keyword">DECLARE</span> ret_den <span class="built_in">INT</span>;</div><div class="line"><span class="keyword">SET</span> ret_num := numer+<span class="number">1</span>;</div><div class="line"><span class="keyword">SET</span> ret_den := denom*<span class="number">2</span>;</div><div class="line">WHILE floor(ret_num/2) = ret_num/2 <span class="keyword">DO</span></div><div class="line"><span class="keyword">SET</span> ret_num := ret_num/<span class="number">2</span>;</div><div class="line"><span class="keyword">SET</span> ret_den := ret_den/<span class="number">2</span>;</div><div class="line"><span class="keyword">END</span> <span class="keyword">WHILE</span>;</div><div class="line">RETURN ret_num;</div><div class="line"><span class="keyword">END</span>;</div></pre></td></tr></table></figure>
<p>x点的分母为：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> DEFINER = <span class="string">`root`</span>@<span class="string">`localhost`</span> <span class="keyword">FUNCTION</span> <span class="string">`x_ denom`</span>(<span class="string">`numer`</span> <span class="built_in">int</span>,<span class="string">`denom`</span> <span class="built_in">int</span>)</div><div class="line"><span class="keyword">RETURNS</span> <span class="built_in">int</span>(<span class="number">11</span>)</div><div class="line"><span class="keyword">BEGIN</span></div><div class="line"><span class="keyword">DECLARE</span> ret_num <span class="built_in">INT</span>;</div><div class="line"><span class="keyword">DECLARE</span> ret_den <span class="built_in">INT</span>;</div><div class="line"><span class="keyword">SET</span> ret_num := numer+<span class="number">1</span>;</div><div class="line"><span class="keyword">SET</span> ret_den := denom*<span class="number">2</span>;</div><div class="line">WHILE floor(ret_num/2) = ret_num/2 <span class="keyword">DO</span></div><div class="line"><span class="keyword">SET</span> ret_num := ret_num/<span class="number">2</span>;</div><div class="line"><span class="keyword">SET</span> ret_den := ret_den/<span class="number">2</span>;</div><div class="line"><span class="keyword">END</span> <span class="keyword">WHILE</span>;</div><div class="line">RETURN ret_den;</div><div class="line"><span class="keyword">END</span>;</div></pre></td></tr></table></figure>
<p>Y点的分子:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">CREATE DEFINER = `root`@`localhost` FUNCTION `y_numer`(`numer` int,`denom` int)</div><div class="line">RETURNS int(11)</div><div class="line">BEGIN</div><div class="line">DECLARE num INT;</div><div class="line">DECLARE den INT;</div><div class="line">SET num := x_numer(numer, denom);</div><div class="line">SET den := x_denom(numer, denom);</div><div class="line">WHILE den &lt; denom DO</div><div class="line">SET num := num*2;</div><div class="line">SET den := den*2;</div><div class="line">END WHILE;</div><div class="line">SET num := (numer - num);</div><div class="line">WHILE floor(num/2) = num/2 DO</div><div class="line">SET num := num/2;</div><div class="line">SET den := den/2;</div><div class="line">END WHILE;</div><div class="line">RETURN num;</div><div class="line">END;</div></pre></td></tr></table></figure>
<p>Y 的分母：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">CREATE DEFINER = `root`@`localhost` FUNCTION `y_denom`(`numer` int,`denom` int)</div><div class="line">RETURNS int(11)</div><div class="line">BEGIN</div><div class="line">DECLARE num INT;</div><div class="line">DECLARE den INT;</div><div class="line">SET num := x_numer(numer, denom);</div><div class="line">SET den := x_denom(numer, denom);</div><div class="line">WHILE den &lt; denom DO</div><div class="line">SET num := num*2;</div><div class="line">SET den := den*2;</div><div class="line">END WHILE;</div><div class="line">SET num := (numer - num);</div><div class="line">WHILE floor(num/2) = num/2 DO</div><div class="line">SET num := num/2;</div><div class="line">SET den := den/2;</div><div class="line">END WHILE;</div><div class="line">RETURN den;</div><div class="line">END;</div></pre></td></tr></table></figure>
<p>接下来我们来测试下，X与Y是否能解码出来：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span></div><div class="line"><span class="keyword">CONCAT</span>(x_numer (<span class="number">11</span>, <span class="number">8</span>),<span class="string">'/'</span>,x_denom (<span class="number">11</span>, <span class="number">8</span>)) <span class="keyword">AS</span> X,</div><div class="line"><span class="keyword">CONCAT</span>(y_numer (<span class="number">11</span>, <span class="number">8</span>),<span class="string">'/'</span>,y_denom (<span class="number">11</span>, <span class="number">8</span>)) <span class="keyword">AS</span> Y</div></pre></td></tr></table></figure>
<center><img src="/img/posts/tree-table-store5-4.gif"></center>

<p>结果与节点1.2的位置为<code>&lt;x=3/4, y=5/8&gt;</code>完全一致。现在我们知道只需要一个分数即可表示平面上的一个点。</p>
<p>如有已经有分数11/8如何获取该节点的父节点？(如果分子为3，则代表其为根节点)</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> DEFINER = <span class="string">`root`</span>@<span class="string">`localhost`</span> <span class="keyword">FUNCTION</span> <span class="string">`parent_numer`</span>(<span class="string">`numer`</span> <span class="built_in">int</span>,<span class="string">`denom`</span> <span class="built_in">int</span>)</div><div class="line"><span class="keyword">RETURNS</span> <span class="built_in">int</span>(<span class="number">11</span>)</div><div class="line"><span class="keyword">BEGIN</span></div><div class="line"><span class="keyword">DECLARE</span> ret_num <span class="built_in">INT</span>;</div><div class="line"><span class="keyword">DECLARE</span> ret_den <span class="built_in">INT</span>;</div><div class="line">IF numer=3 THEN</div><div class="line">RETURN denom/2;</div><div class="line"><span class="keyword">END</span> <span class="keyword">IF</span>;</div><div class="line"><span class="keyword">SET</span> ret_num := (numer<span class="number">-1</span>)/<span class="number">2</span>;</div><div class="line"><span class="keyword">SET</span> ret_den := denom/<span class="number">2</span>;</div><div class="line">WHILE floor((ret_num-1)/4) = (ret_num-1)/4 <span class="keyword">DO</span></div><div class="line"><span class="keyword">SET</span> ret_num := (ret_num+<span class="number">1</span>)/<span class="number">2</span>;</div><div class="line"><span class="keyword">SET</span> ret_den := ret_den/<span class="number">2</span>;</div><div class="line"><span class="keyword">END</span> <span class="keyword">WHILE</span>;</div><div class="line">RETURN ret_num;</div><div class="line"><span class="keyword">END</span>;</div><div class="line"></div><div class="line"><span class="keyword">SELECT</span> <span class="keyword">CONCAT</span>(parent_numer(<span class="number">11</span>,<span class="number">8</span>),<span class="string">'/'</span>,parent_denom(<span class="number">11</span>,<span class="number">8</span>)) <span class="keyword">AS</span> <span class="keyword">parent</span></div></pre></td></tr></table></figure>
<p>计算当前节点在同级所在的位置：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> DEFINER = <span class="string">`root`</span>@<span class="string">`localhost`</span> <span class="keyword">FUNCTION</span> <span class="string">`parent_denom`</span>(<span class="string">`numer`</span> <span class="built_in">int</span>,<span class="string">`denom`</span> <span class="built_in">int</span>)</div><div class="line"><span class="keyword">RETURNS</span> <span class="built_in">int</span>(<span class="number">11</span>)</div><div class="line"><span class="keyword">BEGIN</span></div><div class="line"><span class="keyword">DECLARE</span> ret_num <span class="built_in">INT</span>;</div><div class="line"><span class="keyword">DECLARE</span> ret_den <span class="built_in">INT</span>;</div><div class="line">IF numer=3 THEN</div><div class="line">RETURN NULL;</div><div class="line"><span class="keyword">END</span> <span class="keyword">IF</span>;</div><div class="line"><span class="keyword">SET</span> ret_num := (numer<span class="number">-1</span>)/<span class="number">2</span>;</div><div class="line"><span class="keyword">SET</span> ret_den := denom/<span class="number">2</span>;</div><div class="line">WHILE floor((ret_num-1)/4) = (ret_num-1)/4 <span class="keyword">DO</span></div><div class="line"><span class="keyword">SET</span> ret_num := (ret_num+<span class="number">1</span>)/<span class="number">2</span>;</div><div class="line"><span class="keyword">SET</span> ret_den := ret_den/<span class="number">2</span>;</div><div class="line"><span class="keyword">END</span> <span class="keyword">WHILE</span>;</div><div class="line">RETURN ret_den;</div><div class="line"><span class="keyword">END</span>;</div></pre></td></tr></table></figure>
<p>有了查询父节点的方法及当前节点所在同级中的位置的方法，即可通过这两个的组合，将节点的路径给计算出来。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> DEFINER = <span class="string">`root`</span>@<span class="string">`localhost`</span> <span class="keyword">FUNCTION</span> <span class="string">`path`</span>(<span class="string">`numer`</span> <span class="built_in">int</span>,<span class="string">`denom`</span> <span class="built_in">int</span>)</div><div class="line"><span class="keyword">RETURNS</span> <span class="built_in">varchar</span>(<span class="number">255</span>)</div><div class="line"><span class="keyword">BEGIN</span></div><div class="line"><span class="keyword">IF</span> numer <span class="keyword">is</span> <span class="literal">NULL</span> <span class="keyword">THEN</span></div><div class="line"><span class="keyword">RETURN</span> <span class="string">''</span>;</div><div class="line"><span class="keyword">END</span> <span class="keyword">IF</span>;</div><div class="line">RETURN path(parent_numer(numer, denom),parent_denom(numer, denom))|| ‘.’ || sibling_number(numer, denom);</div><div class="line"><span class="keyword">END</span>;</div></pre></td></tr></table></figure>
<p>按照以上方法添加后进行测试，返回<br><strong>[Err] 1424 – Recursive stored functions and triggers are not allowed.</strong>即MySQL的自定义函数不支持递归查询。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> DEFINER = <span class="string">`root`</span>@<span class="string">`localhost`</span> <span class="keyword">FUNCTION</span> <span class="string">`path`</span>(<span class="string">`numer`</span> <span class="built_in">int</span>,<span class="string">`denom`</span> <span class="built_in">int</span>)</div><div class="line"><span class="keyword">RETURNS</span> <span class="built_in">varchar</span>(<span class="number">255</span>)</div><div class="line"><span class="keyword">BEGIN</span></div><div class="line"><span class="keyword">DECLARE</span> numer_temp <span class="built_in">INT</span>;</div><div class="line"><span class="keyword">DECLARE</span> denom_temp <span class="built_in">INT</span>;</div><div class="line"><span class="keyword">DECLARE</span> path_result <span class="built_in">VARCHAR</span>(<span class="number">255</span>);</div><div class="line"><span class="keyword">DECLARE</span> path_temp <span class="built_in">VARCHAR</span>(<span class="number">255</span>);</div><div class="line"><span class="keyword">DECLARE</span> sn <span class="built_in">VARCHAR</span>(<span class="number">255</span>);</div><div class="line"><span class="keyword">SET</span> path_temp := <span class="string">''</span>;</div><div class="line">WHILE numer IS NOT NULL <span class="keyword">DO</span></div><div class="line"><span class="keyword">IF</span> path_temp = <span class="string">''</span></div><div class="line"><span class="keyword">THEN</span></div><div class="line"><span class="keyword">SET</span> path_result := sibling_number(numer, denom);</div><div class="line">ELSE</div><div class="line"><span class="keyword">SET</span> path_result := <span class="keyword">CONCAT</span>(sibling_number(numer, denom),<span class="string">'.'</span>,path_temp);</div><div class="line"><span class="keyword">END</span> <span class="keyword">IF</span>;</div><div class="line"><span class="keyword">SET</span> path_temp := path_result;</div><div class="line"><span class="keyword">SET</span> numer_temp := parent_numer(numer, denom);</div><div class="line"><span class="keyword">SET</span> denom_temp := parent_denom(numer, denom);</div><div class="line"><span class="keyword">SET</span> numer := numer_temp;</div><div class="line"><span class="keyword">SET</span> denom := denom_temp;</div><div class="line"><span class="keyword">END</span> <span class="keyword">WHILE</span>;</div><div class="line">RETURN path_result;</div><div class="line"><span class="keyword">END</span>;</div></pre></td></tr></table></figure>
<p><code>SELECT path (11, 8)</code>的结果为 1.2</p>
<p>计算节点层级的方法：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> DEFINER = <span class="string">`root`</span>@<span class="string">`localhost`</span> <span class="keyword">FUNCTION</span> <span class="string">`node_level`</span>(<span class="string">`numer`</span> <span class="built_in">int</span>,<span class="string">`denom`</span> <span class="built_in">int</span>)</div><div class="line"><span class="keyword">RETURNS</span> <span class="built_in">int</span>(<span class="number">11</span>)</div><div class="line"><span class="keyword">BEGIN</span></div><div class="line"><span class="keyword">DECLARE</span> ret_num <span class="built_in">INT</span>;</div><div class="line"><span class="keyword">DECLARE</span> ret_den <span class="built_in">INT</span>;</div><div class="line"><span class="keyword">DECLARE</span> ret <span class="built_in">INT</span>;</div><div class="line"><span class="keyword">SET</span> ret =<span class="number">1</span>;</div><div class="line">IF numer=3 THEN</div><div class="line">return 1;</div><div class="line"><span class="keyword">END</span> <span class="keyword">IF</span>;</div><div class="line">WHILE numer!=3 <span class="keyword">DO</span></div><div class="line"><span class="keyword">SET</span> ret_num := parent_numer(numer, denom);</div><div class="line"><span class="keyword">SET</span> ret_den := parent_denom(numer, denom);</div><div class="line"><span class="keyword">SET</span> numer := ret_num;</div><div class="line"><span class="keyword">SET</span> denom := ret_den;</div><div class="line"><span class="keyword">SET</span> ret := ret + <span class="number">1</span>;</div><div class="line"><span class="keyword">END</span> <span class="keyword">WHILE</span>;</div><div class="line">RETURN ret;</div><div class="line"><span class="keyword">END</span>;</div></pre></td></tr></table></figure>
<p>我们知道了如何将编码过的节点转成目录形式，如何逆转呢？以下是方法：</p>
<p>先添加2个辅助函数：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> DEFINER = <span class="string">`root`</span>@<span class="string">`localhost`</span> <span class="keyword">FUNCTION</span> <span class="string">`child_numer`</span>(<span class="string">`num`</span> <span class="built_in">int</span>,<span class="string">`den`</span> <span class="built_in">int</span>,<span class="string">`child`</span> <span class="built_in">int</span>)</div><div class="line"><span class="keyword">RETURNS</span> <span class="built_in">int</span>(<span class="number">11</span>)</div><div class="line"><span class="keyword">BEGIN</span></div><div class="line"><span class="keyword">RETURN</span> <span class="keyword">num</span> * <span class="keyword">power</span>(<span class="number">2</span>, <span class="keyword">child</span>) + <span class="number">3</span> - <span class="keyword">power</span>(<span class="number">2</span>, <span class="keyword">child</span>);</div><div class="line"><span class="keyword">END</span>;</div></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> DEFINER = <span class="string">`root`</span>@<span class="string">`localhost`</span> <span class="keyword">FUNCTION</span> <span class="string">`child_denom`</span>(<span class="string">`num`</span> <span class="built_in">int</span>,<span class="string">`den`</span> <span class="built_in">int</span>,<span class="string">`child`</span> <span class="built_in">int</span>)</div><div class="line"><span class="keyword">RETURNS</span> <span class="built_in">int</span>(<span class="number">11</span>)</div><div class="line"><span class="keyword">BEGIN</span></div><div class="line"><span class="keyword">RETURN</span> den*<span class="keyword">power</span>(<span class="number">2</span>, <span class="keyword">child</span>);</div><div class="line"><span class="keyword">END</span>;</div></pre></td></tr></table></figure>
<p>再来编写逆转函数：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">CREATE DEFINER = `root`@`localhost` FUNCTION `path_numer`(`path` varchar(255))</div><div class="line">RETURNS int(11)</div><div class="line">BEGIN</div><div class="line">DECLARE num INT;</div><div class="line">DECLARE den INT;</div><div class="line">DECLARE postfix VARCHAR(255);</div><div class="line">DECLARE sibling VARCHAR(255);</div><div class="line">SET num := 1;</div><div class="line">SET den := 1;</div><div class="line">SET postfix := CONCAT(path,'.');</div><div class="line">WHILE length(postfix) &gt; 1 DO</div><div class="line">SET sibling := SUBSTR(postfix, 1, instr(postfix,'.')-1);</div><div class="line">SET postfix := SUBSTR(postfix, instr(postfix,'.')+1);</div><div class="line">SET num := child_numer(num,den,sibling+0);</div><div class="line">SET den := child_denom(num,den,sibling+0);</div><div class="line">END WHILE;</div><div class="line">RETURN num;</div><div class="line">END;</div></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">CREATE DEFINER = `root`@`localhost` FUNCTION `path_denom`(`path` varchar(255))</div><div class="line">RETURNS int(11)</div><div class="line">BEGIN</div><div class="line">DECLARE num INT;</div><div class="line">DECLARE den INT;</div><div class="line">DECLARE postfix VARCHAR(255);</div><div class="line">DECLARE sibling VARCHAR(255);</div><div class="line">SET num := 1;</div><div class="line">SET den := 1;</div><div class="line">SET postfix := CONCAT(path,'.');</div><div class="line">WHILE length(postfix) &gt; 1 DO</div><div class="line">SET sibling := SUBSTR(postfix, 1, instr(postfix,'.')-1);</div><div class="line">SET postfix := SUBSTR(postfix, instr(postfix,'.')+1);</div><div class="line">SET num := child_numer(num,den,sibling+0);</div><div class="line">SET den := child_denom(num,den,sibling+0);</div><div class="line">END WHILE;</div><div class="line">RETURN den;</div><div class="line">END;</div></pre></td></tr></table></figure>
<p><code>select CONCAT(path_numer(‘2.1.3′),’/’,path_denom(‘2.1.3’))</code>结果为51/64</p>
<p>参考资料：<br>  ● <a href="http://www.rampant-books.com/art_vadim_nested_sets_sql_trees.htm" target="_blank" rel="external">http://www.rampant-books.com/art_vadim_nested_sets_sql_trees.htm</a></p>
<p>转自<a href="https://www.biaodianfu.com/nested-intervals.html" target="_blank" rel="external">https://www.biaodianfu.com/nested-intervals.html</a></p>
<p>作者：标点符</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前面的一篇文章介绍了左右值编码，不知道大家注意到了没有，如果数据庞大，每次更新都需要更新差不多全表，效率较低没有更好的方式？今天我们就来研究下区间嵌套法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;区间嵌套法原理&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果节点区间&lt;code&gt;[clft, crgt]&lt;/code&gt;与&lt;code&gt;[plft, prgt]&lt;/code&gt;存在如下关系：&lt;code&gt;plft &amp;lt;= clft and crgt &amp;gt;= prgt&lt;/code&gt;，则&lt;code&gt;[clft, crgt]&lt;/code&gt;区间里的点是&lt;code&gt;[plft, prgt]&lt;/code&gt;的子节点。基于此假设我们就可以通过对区间的不断的向下划来获取新的区间。举例：如果在区间&lt;code&gt;[plft, prgt]&lt;/code&gt;中存在一个空白区间&lt;code&gt;[lft1, rgt1]&lt;/code&gt;，如果要加入一个&lt;code&gt;[plft,lft1]&lt;/code&gt;、&lt;code&gt;[rgt1,prgt]&lt;/code&gt;同级的区间，只需插入节点：&lt;code&gt;[(2*lft1+rgt1)/3&lt;/code&gt;,  &lt;code&gt;(rgt1+2*lft)/3]&lt;/code&gt;。在添加完节点后我们还留下&lt;code&gt;[lft1,(2*lft1+rgt1)/3]&lt;/code&gt;和 &lt;code&gt;[(rgt1+2*lft)/3,rgt1]&lt;/code&gt;两个空余的空间用来添加更多的子节点。&lt;/p&gt;
    
    </summary>
    
      <category term="码路刺客" scheme="http://c-xuan.com/categories/%E7%A0%81%E8%B7%AF%E5%88%BA%E5%AE%A2/"/>
    
    
      <category term="转载" scheme="http://c-xuan.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="数据库" scheme="http://c-xuan.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>树形结构数据存储方案（四）：左右值编码</title>
    <link href="http://c-xuan.com/2017/03/07/tree-table-store4/"/>
    <id>http://c-xuan.com/2017/03/07/tree-table-store4/</id>
    <published>2017-03-07T15:34:08.000Z</published>
    <updated>2017-03-07T16:12:54.036Z</updated>
    
    <content type="html"><![CDATA[<p>在基于数据库的一般应用中，查询的需求总要大于删除和修改。为了避免对于树形结构查询时的“递归”过程，基于Tree的前序遍历设计一种全新的无递归查询、无限分组的左右值编码方案，来保存该树的数据。</p>
<center><img src="/img/posts/tree-table-store4-1.gif"></center>

<a id="more"></a>
<p>第一次看见这种表结构，相信大部分人都不清楚左值（Lft）和右值（Rgt）是如何计算出来的，而且这种表设计似乎并没有保存父子节点的继承关系。但当你用手指指着表中的数字从1数到18，你应该会发现点什么吧。对，你手指移动的顺序就是对这棵树进行前序遍历的顺序，如下图所示。当我们从根节点Food左侧开始，标记为1，并沿前序遍历的方向，依次在遍历的路径上标注数字，最后我们回到了根节点Food，并在右边写上了18。</p>
<center><img src="/img/posts/tree-table-store4-2.gif"></center>

<p>依据此设计，我们可以推断出所有左值大于2，并且右值小于11的节点都是Fruit的后续节点，整棵树的结构通过左值和右值存储了下来。然而，这还不够，我们的目的是能够对树进行CRUD操作，即需要构造出与之配套的相关算法。按照深度优先，由左到右的原则遍历整个树，从1开始给每个节点标注上left值和right值，并将这两个值存入对应的name之中。</p>
<p>如何查询？</p>
<p>1、获取某个节点下的所有子孙节点，以Fruit为例：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> Tree <span class="keyword">WHERE</span> Lft &gt; <span class="number">2</span> <span class="keyword">AND</span> Lft &lt; <span class="number">11</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> Lft <span class="keyword">ASC</span></div></pre></td></tr></table></figure>
<p>2、获取子孙节点总数<br>子孙总数 = (右值–左值–1)/2，以Fruit为例，其子孙总数为：(11–2–1)/2 = 4</p>
<p>3、 获取节点在树中所处的层数，以Fruit为例：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">FROM</span> Tree <span class="keyword">WHERE</span> Lft &lt;= <span class="number">2</span> <span class="keyword">AND</span> Rgt &gt;=<span class="number">11</span></div></pre></td></tr></table></figure>
<p>4、 获取当前节点所在路径，以Fruit为例：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> Tree <span class="keyword">WHERE</span> Lft &lt;= <span class="number">2</span> <span class="keyword">AND</span> Rgt &gt;=<span class="number">11</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> Lft <span class="keyword">ASC</span></div></pre></td></tr></table></figure>
<p>在日常的处理中我们经常还会遇到的需要获取某一个节点的直属上级、同级、直属下级。为了更好的描述层级关系，我们可以为Tree建立一个视图，添加一个层次列，该列数值可以编写一个自定义函数来计算：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> <span class="string">`CountLayer`</span>(<span class="string">`_node_id`</span> <span class="built_in">int</span>)</div><div class="line"><span class="keyword">RETURNS</span> <span class="built_in">int</span>(<span class="number">11</span>)</div><div class="line"><span class="keyword">BEGIN</span></div><div class="line"><span class="keyword">DECLARE</span> _result <span class="built_in">INT</span>;</div><div class="line"><span class="keyword">DECLARE</span> _lft <span class="built_in">INT</span>;</div><div class="line"><span class="keyword">DECLARE</span> _rgt <span class="built_in">INT</span>;</div><div class="line">IF EXISTS(<span class="keyword">SELECT</span> Node_id <span class="keyword">FROM</span> Tree <span class="keyword">WHERE</span> Node_id = _node_id)</div><div class="line"><span class="keyword">THEN</span></div><div class="line"><span class="keyword">SELECT</span> Lft,Rgt <span class="keyword">FROM</span> Tree <span class="keyword">WHERE</span> Node_id = _node_id <span class="keyword">INTO</span> _lft,_rgt;</div><div class="line"><span class="keyword">SET</span> _result = (<span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(<span class="number">1</span>) <span class="keyword">FROM</span> Tree <span class="keyword">WHERE</span> Lft &lt;= _lft <span class="keyword">AND</span> Rgt &gt;= _rgt); </div><div class="line">RETURN _result;</div><div class="line">ELSE</div><div class="line">RETURN 0;</div><div class="line"><span class="keyword">END</span> <span class="keyword">IF</span>;</div><div class="line"><span class="keyword">END</span>;</div></pre></td></tr></table></figure>
<p>在添加完函数以后，我们创建一个a视图，添加新的层次列：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> <span class="string">`NewView`</span><span class="keyword">AS</span> </div><div class="line"><span class="keyword">SELECT</span> Node_id, <span class="keyword">Name</span>, Lft, Rgt, CountLayer(Node_id) <span class="keyword">AS</span> Layer <span class="keyword">FROM</span> Tree <span class="keyword">ORDER</span> <span class="keyword">BY</span> Lft ;</div></pre></td></tr></table></figure>
<p>5、 获取当前节点父节点,以Fruit为例：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> treeview <span class="keyword">WHERE</span> Lft &lt;= <span class="number">2</span> <span class="keyword">AND</span> Rgt &gt;=<span class="number">11</span> <span class="keyword">AND</span> Layer=<span class="number">1</span></div></pre></td></tr></table></figure>
<p>6、 获取所有直属子节点，以Fruit为例：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> treeview <span class="keyword">WHERE</span> Lft <span class="keyword">BETWEEN</span> <span class="number">2</span> <span class="keyword">AND</span> <span class="number">11</span> <span class="keyword">AND</span> Layer=<span class="number">3</span></div></pre></td></tr></table></figure>
<p>7、 获取所有兄弟节点，以Fruit为例：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> treeview <span class="keyword">WHERE</span> Rgt &gt; <span class="number">11</span> <span class="keyword">AND</span> Rgt &lt; (<span class="keyword">SELECT</span> Rgt <span class="keyword">FROM</span> treeview <span class="keyword">WHERE</span> Lft &lt;= <span class="number">2</span> <span class="keyword">AND</span> Rgt &gt;=<span class="number">11</span> <span class="keyword">AND</span> Layer=<span class="number">1</span>) <span class="keyword">AND</span> Layer=<span class="number">2</span></div></pre></td></tr></table></figure>
<p>8、 返回所有叶子节点</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> Tree <span class="keyword">WHERE</span> Rgt = Lft + <span class="number">1</span></div></pre></td></tr></table></figure>
<p><strong>如何创建树？如何新增数据？</strong></p>
<p>上面已经介绍了如何检索结果，那么如何才能增加新的节点呢？Nested set 最重要是一定要有一个根节点作为所有节点的起点，而且通常这个节点是不被使用的。为了便于控制查询级别，在建表的时候建议添加parent_id配合之联结列表方式一起使用。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">`Tree`</span> (</div><div class="line"><span class="string">`node_id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</div><div class="line"><span class="string">`parent_id`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">UNSIGNED</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span>,</div><div class="line"><span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line"><span class="string">`lft`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span>,</div><div class="line"><span class="string">`rgt`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'0'</span>,</div><div class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`node_id`</span>),</div><div class="line"><span class="keyword">KEY</span> <span class="string">`idx_left_right`</span> (<span class="string">`lft`</span>,<span class="string">`rgt`</span>)</div><div class="line">) <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</div></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`Tree`</span> (parent_id,<span class="keyword">name</span>,lft,rgt) <span class="keyword">VALUES</span> ( <span class="number">0</span>,<span class="string">'Food'</span>,<span class="number">1</span>,<span class="number">2</span>)</div></pre></td></tr></table></figure>
<p>添加子节点（子节点起始处），以在Food下添加子节点Fruit为例：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">LOCK</span> <span class="keyword">TABLE</span> Tree WRITE;</div><div class="line"><span class="keyword">SELECT</span> @parent_id := node_id, @myLeft := lft <span class="keyword">FROM</span> Tree <span class="keyword">WHERE</span> <span class="keyword">name</span> = <span class="string">'Food'</span>;</div><div class="line"><span class="keyword">UPDATE</span> Tree <span class="keyword">SET</span> rgt = rgt + <span class="number">2</span> <span class="keyword">WHERE</span> rgt &gt; @myLeft;</div><div class="line"><span class="keyword">UPDATE</span> Tree <span class="keyword">SET</span> lft = lft + <span class="number">2</span> <span class="keyword">WHERE</span> lft &gt; @myLeft;</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Tree(parent_id, <span class="keyword">name</span>, lft, rgt) <span class="keyword">VALUES</span>(@parent_id, <span class="string">'Fruit'</span>, @myLeft + <span class="number">1</span>, @myLeft + <span class="number">2</span>);</div><div class="line"><span class="keyword">UNLOCK</span> <span class="keyword">TABLES</span>;</div></pre></td></tr></table></figure>
<p>如需在末尾追加就需要以下方式进行（以在Red下添加Apple为例）：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">LOCK</span> <span class="keyword">TABLE</span> Tree WRITE;</div><div class="line"><span class="keyword">SELECT</span> @parent_id := node_id , @myRight := rgt <span class="keyword">FROM</span> Tree <span class="keyword">WHERE</span> <span class="keyword">name</span> = <span class="string">'Red'</span>;</div><div class="line"><span class="keyword">UPDATE</span> Tree <span class="keyword">SET</span> rgt = rgt + <span class="number">2</span> <span class="keyword">WHERE</span> rgt &gt;= @myRight;</div><div class="line"><span class="keyword">UPDATE</span> Tree <span class="keyword">SET</span> lft = lft + <span class="number">2</span> <span class="keyword">WHERE</span> lft &gt; @myRight;</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Tree(parent_id, <span class="keyword">name</span>, lft, rgt) <span class="keyword">VALUES</span>(@parent_id, <span class="string">'Apple'</span>, @myRight, @myRight + <span class="number">1</span>);</div><div class="line"><span class="keyword">UNLOCK</span> <span class="keyword">TABLES</span>;</div></pre></td></tr></table></figure>
<p>在节点A后面添加同级节点（以在Yellow后面添加Green为例）</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">LOCK</span> <span class="keyword">TABLE</span> Tree WRITE;</div><div class="line"><span class="keyword">SELECT</span> @parent_id := parent_id , @myRight := rgt <span class="keyword">FROM</span> Tree <span class="keyword">WHERE</span> <span class="keyword">name</span> = <span class="string">'Yellow'</span>;</div><div class="line"><span class="keyword">UPDATE</span> Tree <span class="keyword">SET</span> rgt = rgt + <span class="number">2</span> <span class="keyword">WHERE</span> rgt &gt; @myRight;</div><div class="line"><span class="keyword">UPDATE</span> Tree <span class="keyword">SET</span> lft = lft + <span class="number">2</span> <span class="keyword">WHERE</span> lft &gt; @myRight;</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Tree(parent_id, <span class="keyword">name</span>, lft, rgt) <span class="keyword">VALUES</span>(@parent_id, <span class="string">'Green'</span>, @myRight+<span class="number">1</span>, @myRight+<span class="number">2</span>);</div><div class="line"><span class="keyword">UNLOCK</span> <span class="keyword">TABLES</span>;</div></pre></td></tr></table></figure>
<p>以上讨论的添加节点指的都是添加末端节点，即插入的这个节点不是当前已存在节点的父节点。如果需要插入非末端节点要怎么办呢？<br>这个过程可以将流程分为2步，首先新增节点，接下里再将需要的节点移到新增的节点下级。节点移动方法(以将Apple移到Yellow中为例)：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">LOCK</span> <span class="keyword">TABLE</span> Tree WRITE;</div><div class="line"><span class="keyword">SELECT</span> @nodeId := node_id , @myLeft := lft , @myRight := rgt <span class="keyword">FROM</span> Tree <span class="keyword">WHERE</span> <span class="keyword">name</span> = <span class="string">'Apple'</span>;</div><div class="line"><span class="keyword">UPDATE</span> Tree <span class="keyword">SET</span> lft = lft - (@myRight - @myLeft) - <span class="number">1</span> <span class="keyword">WHERE</span> lft &gt; @myRight;</div><div class="line"><span class="keyword">UPDATE</span> Tree <span class="keyword">SET</span> rgt = rgt - (@myRight - @myLeft) - <span class="number">1</span> <span class="keyword">WHERE</span> rgt &gt; @myRight;</div><div class="line"><span class="keyword">SELECT</span> @parent_id := node_id , @<span class="keyword">Left</span> := lft , @<span class="keyword">Right</span> := rgt <span class="keyword">FROM</span> Tree <span class="keyword">WHERE</span> <span class="keyword">name</span> = <span class="string">'Yellow'</span>;</div><div class="line"><span class="keyword">UPDATE</span> Tree <span class="keyword">SET</span> lft = lft + (@myRight - @myLeft) + <span class="number">1</span> <span class="keyword">WHERE</span> lft &gt; @<span class="keyword">Left</span>;</div><div class="line"><span class="keyword">UPDATE</span> Tree <span class="keyword">SET</span> rgt = rgt + (@myRight - @myLeft) + <span class="number">1</span> <span class="keyword">WHERE</span> lft &gt; @<span class="keyword">Left</span>;</div><div class="line"><span class="keyword">UPDATE</span> Tree <span class="keyword">SET</span> parent_id = @parent_id <span class="keyword">WHERE</span> <span class="keyword">name</span> = node_id = @nodeId;</div><div class="line"><span class="keyword">UPDATE</span> Tree <span class="keyword">SET</span> lft = @<span class="keyword">Left</span> + lft - @myLeft + <span class="number">1</span>, rgt = @<span class="keyword">Left</span> + lft - @myLeft + <span class="number">1</span> + (@myRight - @myLeft) <span class="keyword">WHERE</span> lft &gt;= @myLeft <span class="keyword">AND</span> rgt &lt;= @myRight;</div><div class="line"><span class="keyword">UNLOCK</span> <span class="keyword">TABLES</span>;</div></pre></td></tr></table></figure>
<p><strong>删除节点（包含子节点）</strong></p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">LOCK</span> <span class="keyword">TABLE</span> Tree WRITE;</div><div class="line"><span class="keyword">SELECT</span> @myLeft := lft , @myRight := rgt <span class="keyword">FROM</span> Tree <span class="keyword">WHERE</span> <span class="keyword">name</span> = <span class="string">'Apple'</span>;</div><div class="line"><span class="keyword">DELETE</span> Tree <span class="keyword">WHERE</span> lft &gt;= @myLeft <span class="keyword">AND</span> rgt &lt;= @myRight;</div><div class="line"><span class="keyword">UPDATE</span> Tree <span class="keyword">SET</span> lft = lft - (@myRight - @myLeft) - <span class="number">1</span> <span class="keyword">WHERE</span> lft &gt; @myRight;</div><div class="line"><span class="keyword">UPDATE</span> Tree <span class="keyword">SET</span> rgt = rgt - (@myRight - @myLeft) - <span class="number">1</span> <span class="keyword">WHERE</span> rgt &gt; @myRight;</div><div class="line"><span class="keyword">UNLOCK</span> <span class="keyword">TABLES</span>;</div></pre></td></tr></table></figure>
<p>如果需要只删除该节点，子节点自动上移一级如何处理？</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">LOCK</span> <span class="keyword">TABLE</span> Tree WRITE;</div><div class="line"><span class="keyword">SELECT</span> @parent_id := parent_id , @node_id :=node_id , @myLeft := lft , @myRight := rgt <span class="keyword">FROM</span> Tree <span class="keyword">WHERE</span> <span class="keyword">name</span> = <span class="string">'Red'</span>;</div><div class="line"><span class="keyword">UPDATE</span> Tree <span class="keyword">SET</span> parent_id = @parent_id <span class="keyword">WHERE</span> parent_id = @node_id</div><div class="line"><span class="keyword">DELETE</span> Tree <span class="keyword">WHERE</span> lft = @myLeft;</div><div class="line"><span class="keyword">UPDATE</span> Tree <span class="keyword">SET</span> lft = lft - <span class="number">1</span>,rgt = rgt<span class="number">-1</span> <span class="keyword">Where</span> lft &gt; @myLeft <span class="keyword">AND</span> @rgt &lt; @myRight</div><div class="line"><span class="keyword">UPDATE</span> Tree <span class="keyword">SET</span> lft = lft - <span class="number">2</span>,rgt = rgt<span class="number">-2</span> <span class="keyword">Where</span> lft &gt; @rgt &gt; @myRight</div><div class="line"><span class="keyword">UNLOCK</span> <span class="keyword">TABLES</span>;</div></pre></td></tr></table></figure>
<p>以上为Nested Set的CURD操作，具体在使用时建议结合事务和存储过程一起使用。本方案的优点时查询非常的方便，缺点就是每次插入删除数据涉及到的更新内容太多，如果树非常大，插入一条数据可能花很长的时间。</p>
<p>参考链接：<br>  ● <a href="https://www.sitepoint.com/hierarchical-data-database/" target="_blank" rel="external">https://www.sitepoint.com/hierarchical-data-database/</a><br>  ● <a href="https://packagist.org/search/?q=Nested+Set" target="_blank" rel="external">https://packagist.org/search/?q=Nested+Set</a></p>
<p>转自<a href="https://www.biaodianfu.com/the-nested-set-model.html" target="_blank" rel="external">https://www.biaodianfu.com/the-nested-set-model.html</a></p>
<p>作者：标点符</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在基于数据库的一般应用中，查询的需求总要大于删除和修改。为了避免对于树形结构查询时的“递归”过程，基于Tree的前序遍历设计一种全新的无递归查询、无限分组的左右值编码方案，来保存该树的数据。&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;/img/posts/tree-table-store4-1.gif&quot;&gt;&lt;/img&gt;&lt;/center&gt;
    
    </summary>
    
      <category term="码路刺客" scheme="http://c-xuan.com/categories/%E7%A0%81%E8%B7%AF%E5%88%BA%E5%AE%A2/"/>
    
    
      <category term="转载" scheme="http://c-xuan.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="数据库" scheme="http://c-xuan.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>树形结构数据存储方案（三）：闭包表</title>
    <link href="http://c-xuan.com/2017/03/06/tree-table-store3/"/>
    <id>http://c-xuan.com/2017/03/06/tree-table-store3/</id>
    <published>2017-03-06T15:50:20.000Z</published>
    <updated>2017-03-06T16:05:44.650Z</updated>
    
    <content type="html"><![CDATA[<p>将Closure Table翻译成闭包表不知道是否合适，闭包表的思路和物化路径差不多，都是空间换时间，Closure Table，一种更为彻底的全路径结构，分别记录路径上相关结点的全展开形式。能明晰任意两结点关系而无须多余查询，级联删除和结点移动也很方便。但是它的存储开销会大一些，除了表示结点的Meta信息，还需要一张专用的关系表。</p>
<a id="more"></a>
<p>以下图举例数据举例：</p>
<center><img src="/img/posts/tree-table-store3-1.gif"></center>

<p>创建主表：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> nodeInfo (</div><div class="line">node_id <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</div><div class="line">node_name <span class="built_in">VARCHAR</span> (<span class="number">255</span>),</div><div class="line">PRIMARY <span class="keyword">KEY</span> (<span class="string">`node_id`</span>)</div><div class="line">) <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span> = utf8;</div></pre></td></tr></table></figure>
<p>创建关系表：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> nodeRelationship (</div><div class="line">ancestor <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">descendant <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">distance <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</div><div class="line">PRIMARY <span class="keyword">KEY</span> (ancestor, descendant)</div><div class="line">) <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span> = utf8;</div></pre></td></tr></table></figure>
<p>其中</p>
<ul>
<li>Ancestor代表祖先节点</li>
<li>Descendant代表后代节点</li>
<li>Distance 祖先距离后代的距离</li>
</ul>
<p>添加数据（创建存储过程）</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> DEFINER = <span class="string">`root`</span>@<span class="string">`localhost`</span> <span class="keyword">PROCEDURE</span> <span class="string">`AddNode`</span>(<span class="string">`_parent_name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>),<span class="string">`_node_name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>))</div><div class="line"><span class="keyword">BEGIN</span></div><div class="line"><span class="keyword">DECLARE</span> _ancestor <span class="built_in">INT</span>;</div><div class="line"><span class="keyword">DECLARE</span> _descendant <span class="built_in">INT</span>;</div><div class="line"><span class="keyword">DECLARE</span> _parent <span class="built_in">INT</span>;</div><div class="line">IF NOT EXISTS(<span class="keyword">SELECT</span> node_id <span class="keyword">From</span> nodeinfo <span class="keyword">WHERE</span> node_name = _node_name)</div><div class="line"><span class="keyword">THEN</span></div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> nodeinfo (node_name) <span class="keyword">VALUES</span>(_node_name);</div><div class="line"><span class="keyword">SET</span> _descendant = (<span class="keyword">SELECT</span> node_id <span class="keyword">FROM</span> nodeinfo <span class="keyword">WHERE</span> node_name = _node_name);</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> noderelationship (ancestor,descendant,distance) <span class="keyword">VALUES</span>(_descendant,_descendant,<span class="number">0</span>);</div><div class="line">IF EXISTS (<span class="keyword">SELECT</span> node_id <span class="keyword">FROM</span> nodeinfo <span class="keyword">WHERE</span> node_name = _parent_name)</div><div class="line"><span class="keyword">THEN</span></div><div class="line"><span class="keyword">SET</span> _parent = (<span class="keyword">SELECT</span> node_id <span class="keyword">FROM</span> nodeinfo <span class="keyword">WHERE</span> node_name = _parent_name);</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> noderelationship (ancestor,descendant,distance) <span class="keyword">SELECT</span> ancestor,_descendant,distance+<span class="number">1</span> <span class="keyword">from</span> noderelationship <span class="keyword">where</span> descendant = _parent;</div><div class="line"><span class="keyword">END</span> <span class="keyword">IF</span>;</div><div class="line"><span class="keyword">END</span> <span class="keyword">IF</span>;</div><div class="line"><span class="keyword">END</span>;</div></pre></td></tr></table></figure>
<p>完成后2张表的数据大致是这样的：（注意：每个节点都有一条到其本身的记录。）</p>
<center><img src="/img/posts/tree-table-store3-2.gif"></center>

<p>查询Fruit下所有的子节点：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span></div><div class="line">n3.node_name</div><div class="line"><span class="keyword">FROM</span></div><div class="line">nodeinfo n1</div><div class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> noderelationship n2 <span class="keyword">ON</span> n1.node_id = n2.ancestor</div><div class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> nodeinfo n3 <span class="keyword">ON</span> n2.descendant = n3.node_id</div><div class="line"><span class="keyword">WHERE</span></div><div class="line">n1.node_name = <span class="string">'Fruit'</span></div><div class="line"><span class="keyword">AND</span> n2.distance != <span class="number">0</span></div></pre></td></tr></table></figure>
<p>查询Fruit下直属子节点</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span></div><div class="line">n3.node_name</div><div class="line"><span class="keyword">FROM</span></div><div class="line">nodeinfo n1</div><div class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> noderelationship n2 <span class="keyword">ON</span> n1.node_id = n2.ancestor</div><div class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> nodeinfo n3 <span class="keyword">ON</span> n2.descendant = n3.node_id</div><div class="line"><span class="keyword">WHERE</span></div><div class="line">n1.node_name = <span class="string">'Fruit'</span></div><div class="line"><span class="keyword">AND</span> n2.distance = <span class="number">1</span></div></pre></td></tr></table></figure>
<p>查询Fruit所处的层级：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SELECT</span></div><div class="line">n2.*, n3.node_name</div><div class="line"><span class="keyword">FROM</span></div><div class="line">nodeinfo n1</div><div class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> noderelationship n2 <span class="keyword">ON</span> n1.node_id = n2.descendant</div><div class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> nodeinfo n3 <span class="keyword">ON</span> n2.ancestor = n3.node_id</div><div class="line"><span class="keyword">WHERE</span></div><div class="line">n1.node_name = <span class="string">'Fruit'</span></div><div class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></div><div class="line">n2.distance <span class="keyword">DESC</span></div></pre></td></tr></table></figure>
<p>另外要删除节点也非常的简单，这里就不再做过多的阐述。<br>参考链接：</p>
<p>  ● <a href="https://coderwall.com/p/lixing/closure-tables-for-browsing-trees-in-sql" target="_blank" rel="external">https://coderwall.com/p/lixing/closure-tables-for-browsing-trees-in-sql</a></p>
<p>转自<a href="https://www.biaodianfu.com/closure-table.html" target="_blank" rel="external">https://www.biaodianfu.com/closure-table.html</a></p>
<p>作者：标点符</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;将Closure Table翻译成闭包表不知道是否合适，闭包表的思路和物化路径差不多，都是空间换时间，Closure Table，一种更为彻底的全路径结构，分别记录路径上相关结点的全展开形式。能明晰任意两结点关系而无须多余查询，级联删除和结点移动也很方便。但是它的存储开销会大一些，除了表示结点的Meta信息，还需要一张专用的关系表。&lt;/p&gt;
    
    </summary>
    
      <category term="码路刺客" scheme="http://c-xuan.com/categories/%E7%A0%81%E8%B7%AF%E5%88%BA%E5%AE%A2/"/>
    
    
      <category term="转载" scheme="http://c-xuan.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="数据库" scheme="http://c-xuan.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>树形结构数据存储方案（二）： 物化路径</title>
    <link href="http://c-xuan.com/2017/03/06/tree-table-store2/"/>
    <id>http://c-xuan.com/2017/03/06/tree-table-store2/</id>
    <published>2017-03-06T15:40:20.000Z</published>
    <updated>2017-03-06T15:58:06.312Z</updated>
    
    <content type="html"><![CDATA[<p>前一篇文章介绍了比较简单的邻接列表模式，物化路径其实更加容易理解，其实就是在创建节点时，将节点的完整路径进行记录。以下图为例：</p>
<center><img src="/img/posts/tree-table-store2-1.gif"></center>

<a id="more"></a>
<p>按照Path Enumeration 进行存储后的结果如下：</p>
<center><img src="/img/posts/tree-table-store2-2.gif"></center>

<p>此种方案借助了unix文件目录的思想，主要时以空间换时间。<br>查询某一节点下的所有子节点:（以Fruit为例）</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SET</span> @<span class="keyword">path</span> = (<span class="keyword">SELECT</span> <span class="keyword">path</span> <span class="keyword">FROM</span> pathTree <span class="keyword">WHERE</span> node_name = <span class="string">'Fruit'</span>);</div><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> pathTree <span class="keyword">WHERE</span> <span class="keyword">path</span> <span class="keyword">like</span> <span class="keyword">CONCAT</span>(@<span class="keyword">path</span>,<span class="string">'/%'</span>);</div></pre></td></tr></table></figure>
<p>如何查询直属子节点？需要采用MySQL的正则表达式查询：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SET</span> @<span class="keyword">path</span> = (<span class="keyword">SELECT</span> <span class="keyword">path</span> <span class="keyword">FROM</span> pathTree <span class="keyword">WHERE</span> node_name = <span class="string">'Fruit'</span>);</div><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> pathTree <span class="keyword">WHERE</span> <span class="keyword">path</span> REGEXP <span class="keyword">CONCAT</span>(@<span class="keyword">path</span>,<span class="string">'/'</span>,<span class="string">'[0-9]$'</span>);</div></pre></td></tr></table></figure>
<p>查询任意节点的所有上级：（以Yellow为例）：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SET</span> @<span class="keyword">path</span> = (<span class="keyword">SELECT</span> <span class="keyword">path</span> <span class="keyword">FROM</span> pathTree <span class="keyword">WHERE</span> node_name = <span class="string">'Yellow'</span>);</div><div class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> pathTree <span class="keyword">WHERE</span> @<span class="keyword">path</span> <span class="keyword">LIKE</span> <span class="keyword">CONCAT</span>(<span class="keyword">path</span>, <span class="string">'%'</span>) <span class="keyword">AND</span> <span class="keyword">path</span> &lt;&gt; @<span class="keyword">path</span>;</div></pre></td></tr></table></figure>
<p>插入新增数据：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">SET</span> @parent_path = ( <span class="keyword">SELECT</span> <span class="keyword">path</span> <span class="keyword">FROM</span> pathTree <span class="keyword">WHERE</span> node_name = <span class="string">'Fruit'</span>);</div><div class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> pathtree (<span class="keyword">path</span>,node_name) <span class="keyword">VALUES</span> (<span class="keyword">CONCAT</span>(@parent_path,<span class="string">'/'</span>,<span class="keyword">LAST_INSERT_ID</span>()+<span class="number">1</span>),<span class="string">'White'</span>)</div></pre></td></tr></table></figure>
<p>此方案的缺点是树的层级太深有可能会超过PATH字段的长度，所以其能支持的最大深度并非无限的。</p>
<p>如果层级数量是确定的，可以再将所有的列都展开，如下图，比较试用于类似行政区划、生物分类法（界、门、纲、目、科、属、种）这些层级确定的内容。</p>
<center><img src="/img/posts/tree-table-store2-3.gif"></center>

<p>转自<a href="https://www.biaodianfu.com/path-enumeration.html" target="_blank" rel="external">https://www.biaodianfu.com/path-enumeration.html</a></p>
<p>作者：标点符</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前一篇文章介绍了比较简单的邻接列表模式，物化路径其实更加容易理解，其实就是在创建节点时，将节点的完整路径进行记录。以下图为例：&lt;/p&gt;
&lt;center&gt;&lt;img src=&quot;/img/posts/tree-table-store2-1.gif&quot;&gt;&lt;/img&gt;&lt;/center&gt;
    
    </summary>
    
      <category term="码路刺客" scheme="http://c-xuan.com/categories/%E7%A0%81%E8%B7%AF%E5%88%BA%E5%AE%A2/"/>
    
    
      <category term="转载" scheme="http://c-xuan.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="数据库" scheme="http://c-xuan.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>树型结构数据存储方案（一）：邻接列表模式</title>
    <link href="http://c-xuan.com/2017/03/06/tree-table-store1/"/>
    <id>http://c-xuan.com/2017/03/06/tree-table-store1/</id>
    <published>2017-03-06T15:31:20.000Z</published>
    <updated>2017-03-06T15:43:21.565Z</updated>
    
    <content type="html"><![CDATA[<p>在程序开发中，我们常遇到用树型结构来表示某些数据间的关系，如企业的组织架构、商品的分类、操作栏目等，目前的关系型数据库都是以二维表的形式记录存储数据，而树型结构的数据如需存入二维表就必须进行Schema设计。</p>
<a id="more"></a>
<p>最近对此方面比较感兴趣，专门做下梳理，如下为常见的树型结构的数据：</p>
<center><img src="/img/posts/tree-table-store1-1.gif"></center>

<p>其中最简单的方法是：Adjacency List（邻接列表模式）。简单的说是根据节点之间的继承关系，显现的描述某一节点的父节点，从而建立二位的关系表。表结构通常设计为{Node_id,Parent_id}，如下图：</p>
<center><img src="/img/posts/tree-table-store1-2.gif"></center>

<p>使用连接表的大致代码：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">// $parent is the parent of the children we want to see</span></div><div class="line"><span class="comment">// $level is increased when we go deeper into the tree,</span></div><div class="line"><span class="comment">// used to display a nice indented tree</span></div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">display_children</span><span class="params">($parent, $level)</span> </span></div><div class="line">&#123;</div><div class="line"> <span class="comment">// 获得一个 父节点 $parent 的所有子节点</span></div><div class="line"> $result = mysql_query(<span class="string">'SELECT name FROM tree WHERE parent="'</span>.$parent.<span class="string">'";'</span>);</div><div class="line"> </div><div class="line"> <span class="comment">// 显示每个子节点</span></div><div class="line"> <span class="keyword">while</span> ($row = mysql_fetch_array($result)) </div><div class="line"> &#123;</div><div class="line"> <span class="comment">// 缩进显示节点名称</span></div><div class="line"> <span class="keyword">echo</span> str_repeat(<span class="string">' '</span>,$level).$row[<span class="string">'name'</span>].<span class="string">"\n"</span>;</div><div class="line"> </div><div class="line"> <span class="comment">//再次调用这个函数显示子节点的子节点</span></div><div class="line"> </div><div class="line"> display_children($row[<span class="string">'name'</span>], $level+<span class="number">1</span>);</div><div class="line"> &#125;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>对整个结构的根节点（Food）使用这个函数就可以打印出整个多级树结构，由于Food是根节点它的父节点是空的，所以这样调用: display_children(”,0)。将显示整个树的内容。如果你只想显示整个结构中的一部分，比如说水果部分，就可以这样调用：</p>
<p>display_children(‘Fruit’,0);</p>
<p>几乎使用同样的方法我们可以知道从根节点到任意节点的路径。比如 Cherry 的路径是　”Food &gt;; Fruit &gt;; Red”。 为了得到这样的一个路径我们需要从最深的一级”Cherry”开始， 查询得到它的父节点”Red”把它添加到路径中， 然后我们再查询Red的父节点并把它也添加到路径中，以此类推直到最高层的”Food”<br>以下是代码：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line"><span class="comment">// $node 是那个最深的节点</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_path</span><span class="params">($node)</span> </span></div><div class="line">&#123;</div><div class="line"> <span class="comment">// 查询这个节点的父节点</span></div><div class="line"> $result = mysql_query(<span class="string">'SELECT parent FROM tree '</span>.</div><div class="line"> <span class="string">'WHERE name="'</span>.$node.<span class="string">'";'</span>);</div><div class="line"> $row = mysql_fetch_array($result);</div><div class="line"> </div><div class="line"> <span class="comment">// 用一个数组保存路径</span></div><div class="line"> $path = <span class="keyword">array</span>();</div><div class="line"> </div><div class="line"> <span class="comment">// 如果不是根节点则继续向上查询</span></div><div class="line"> <span class="comment">// (根节点没有父节点)</span></div><div class="line"> <span class="keyword">if</span> ($row[<span class="string">'parent'</span>]!=<span class="string">''</span>) </div><div class="line"> &#123;</div><div class="line"> <span class="comment">// the last part of the path to $node, is the name</span></div><div class="line"> <span class="comment">// of the parent of $node</span></div><div class="line"> $path[] = $row[<span class="string">'parent'</span>];</div><div class="line"> </div><div class="line"> <span class="comment">// we should add the path to the parent of this node</span></div><div class="line"> <span class="comment">// to the path</span></div><div class="line"> $path = array_merge(get_path($row[<span class="string">'parent'</span>]), $path);</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> <span class="comment">// return the path</span></div><div class="line"> <span class="keyword">return</span> $path;</div><div class="line">&#125;</div><div class="line"><span class="meta">?&gt;</span></div></pre></td></tr></table></figure>
<p>如果对”Cherry”使用这个函数：print_r(get_path(‘Cherry’))，就会得到这样的一个数组了：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">Array</span> </div><div class="line">( </div><div class="line"> [<span class="number">0</span>] =&gt;; Food </div><div class="line"> [<span class="number">1</span>] =&gt;; Fruit </div><div class="line"> [<span class="number">2</span>] =&gt;; Red </div><div class="line">)</div></pre></td></tr></table></figure>
<p>这种方案的优点很明显：结构简单易懂，由于互相之间的关系只由一个parent_id维护，所以增删改都是非常容易，只需要改动和他直接相关的记录就可以。缺点当然也是非常的突出：由于直接地记录了节点之间的继承关系，因此对Tree的任何CRUD操作都将是低效的，这主要归根于频繁的“递归”操作，递归过程不断地访问数据库，每次数据库IO都会有时间开销。举个例子，如果想要返回所有水果，也就是水果的所有子孙节点，看似很简单的操作，就需要用到一堆递归。当然，这种方案并非没有用武之地，在树的层级比较少的时候就非常实用，在邻接列表模式的基础上还可以拓展的是平面表，区别是将节点的level和当前节点的顺序也放入表中，比较适合类似评论等场景，具体的表结构类似这样，这里就不再深入阐述。</p>
<center><img src="/img/posts/tree-table-store1-3.gif"></center>

<p>参考链接：<br>  ● <a href="http://salman-w.blogspot.com/2012/08/php-adjacency-list-hierarchy-tree-traversal.html" target="_blank" rel="external">http://salman-w.blogspot.com/2012/08/php-adjacency-list-hierarchy-tree-traversal.html</a><br>  ● <a href="https://packagist.org/search/?tags=adjacency%20list" target="_blank" rel="external">https://packagist.org/search/?tags=adjacency%20list</a></p>
<p>转自<a href="https://www.biaodianfu.com/adjacency-list.html" target="_blank" rel="external">https://www.biaodianfu.com/adjacency-list.html</a></p>
<p>作者：标点符</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在程序开发中，我们常遇到用树型结构来表示某些数据间的关系，如企业的组织架构、商品的分类、操作栏目等，目前的关系型数据库都是以二维表的形式记录存储数据，而树型结构的数据如需存入二维表就必须进行Schema设计。&lt;/p&gt;
    
    </summary>
    
      <category term="码路刺客" scheme="http://c-xuan.com/categories/%E7%A0%81%E8%B7%AF%E5%88%BA%E5%AE%A2/"/>
    
    
      <category term="转载" scheme="http://c-xuan.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="数据库" scheme="http://c-xuan.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Kimball维度建模技术总结</title>
    <link href="http://c-xuan.com/2017/02/05/KimballDimModing/"/>
    <id>http://c-xuan.com/2017/02/05/KimballDimModing/</id>
    <published>2017-02-04T16:00:00.000Z</published>
    <updated>2017-03-12T15:06:59.497Z</updated>
    
    <content type="html"><![CDATA[<p>Kimball维度建模技术几乎已经成为数据仓库建模的最佳实践。维度建模的基本概念总结。</p>
<a id="more"></a>
<center><img src="/img/posts/KimballDimModing.gif"></center>

<h2 id="收集业务需求"><a href="#收集业务需求" class="headerlink" title="收集业务需求"></a>收集业务需求</h2><p>在建模工作前，项目组需要跟使用数据的业务人员进行沟通调研，理解业务过程的KPI，数据分析的目标，利用数据进行哪些决策制定。可以收集业务人员，高层决策者经常看的报表，了解他们观察数据的维度跟指标。</p>
<h2 id="协作维度建模研讨"><a href="#协作维度建模研讨" class="headerlink" title="协作维度建模研讨"></a>协作维度建模研讨</h2><p>维度建模不应该只由那些不懂业务以及业务需求的技术人员来负责，还需要企业数据管理者与使用者的参与共同制定数据分析主题。与业务代表开展一系列高级别交流讨论可以帮助技术人员和需求分析人员对数据有更深入的了解，寻找不同部门使用数据的分析维度与指标的异同。</p>
<h2 id="维度建模的设计过程"><a href="#维度建模的设计过程" class="headerlink" title="维度建模的设计过程"></a>维度建模的设计过程</h2><p>维度模型设计主要设计四个步骤：</p>
<h3 id="选择业务过程"><a href="#选择业务过程" class="headerlink" title="选择业务过程"></a>选择业务过程</h3><p>业务过程是组织完成的操作型活动，例如：获得订单，处理保险索赔、学生课程注册或每个月每个账单的快照等等。过程的选择很重要，因为我们要从业务过程中得出事实的指标度量，以及事实表的粒度选取，维度划分等等。</p>
<h3 id="声明粒度"><a href="#声明粒度" class="headerlink" title="声明粒度"></a>声明粒度</h3><p>声明粒度是维度设计的重要步骤。粒度用于确定某一事实表中的行表示什么。选择维度或事实前必须声明粒度，因为每个候选维度或事实必须与定义的粒度保持一致。在所有维度设计中强制实行一致性是保证BI应用性能和易用性能的关键。在从给定的业务过程获取数据时，原子粒度是最低级别的粒度。粒度越小，描述的业务过程越详细。建议从设计最小粒度的数据开始，这样可以保证比较大的灵活性，满足无法预期的业务用户的查询需求。这对不同的事实表粒度要建立不同的物理表，在同一事实表中不要混用多种不同的粒度。</p>
<h3 id="确认维度"><a href="#确认维度" class="headerlink" title="确认维度"></a>确认维度</h3><p>维度表又是被称为数据仓库的“灵魂”，因为维度包含确保DW/BI系统能够被用作业务分析的入口和描述性标识。维度提供围绕某一业务过程事件所涉及的“谁、什么、何处、何时、为什么、如何”等背景。维度表包含BI应用所需要的用于过滤及分类事实的描述性属性。牢牢掌握事实表的粒度，就能够将所有可能存在的维度区分开。当与给定事实表行关联是，任何情况下都应使维度保持但一值。</p>
<h3 id="确认事实"><a href="#确认事实" class="headerlink" title="确认事实"></a>确认事实</h3><p>事实基本上都是以数量值表示，涉及来自业务过程事件的度量，例如销售量，销售额等。一个事实表行与按照事实表粒度描述的度量事件之间存在一对一关系，因此事实表对应一个物理可观察的事件。</p>
<h2 id="星型模型与OLAP多维数据库"><a href="#星型模型与OLAP多维数据库" class="headerlink" title="星型模型与OLAP多维数据库"></a>星型模型与OLAP多维数据库</h2><p>星型模式是部署在关系数据库管理系统(RDBMS)之上的多维结构。典型地，主要包含事实表，以及通过主键/外键关系与之关联的维度表。联机分析处理(OLAP)多维数据库是实现在多维数据库之上的数据结构，它来源于关系型星型模式。OLAP多维数据库包含维度属性和事实表，但它能够比SQL语言具有更强的分析能力和访问，比如XMLA和MDX等。</p>
<h2 id="灵活扩展"><a href="#灵活扩展" class="headerlink" title="灵活扩展"></a>灵活扩展</h2><p>维度模型对数据关系发生变化具有灵活的适用性。当发生如下变化时，不需要改变现存的BI查询或应用，就可以方便的适应。</p>
<ul>
<li>当事实与存在的事实表粒度一致时，可以创建新列。</li>
<li>通过建立新的外键列，可以将维度关联到已经存在的事实表上，前提是维度列与事实表粒度保持一致。</li>
<li>可以在维度表上通过建立新列添加属性。</li>
<li>可以使事实表的烈度更原子化，方法是在维度表上增加属性。然后以更细的烈度重置事实表，小心保存事实表及维度表的列名。</li>
</ul>
<p><em>参考</em></p>
<p><em>《The Data Warehouse Toolkit:The Definitive Guide to Dimensional Modeling》,Ralph Kimball &amp; Margy Ross</em></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Kimball维度建模技术几乎已经成为数据仓库建模的最佳实践。维度建模的基本概念总结。&lt;/p&gt;
    
    </summary>
    
      <category term="BI墨客" scheme="http://c-xuan.com/categories/BI%E5%A2%A8%E5%AE%A2/"/>
    
    
      <category term="数据仓库" scheme="http://c-xuan.com/tags/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/"/>
    
      <category term="原创" scheme="http://c-xuan.com/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="维度建模" scheme="http://c-xuan.com/tags/%E7%BB%B4%E5%BA%A6%E5%BB%BA%E6%A8%A1/"/>
    
  </entry>
  
  <entry>
    <title>宽表和窄表的建设该如何选择？</title>
    <link href="http://c-xuan.com/2017/01/03/wide-table-thinking/"/>
    <id>http://c-xuan.com/2017/01/03/wide-table-thinking/</id>
    <published>2017-01-02T16:00:00.000Z</published>
    <updated>2017-02-26T10:14:26.853Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>宽表从字面意义上讲就是字段比较多的数据库表。通常是指业务主题相关的指标、维度、属性关联在一起的一张数据库表。由于把不同的内容都放在同一张表存储，宽表已经不符合三范式的模型设计规范，随之带来的主要坏处就是数据的大量冗余，与之相对应的好处就是查询性能的提高与便捷。这种宽表的设计广泛应用于数据挖掘模型训练前的数据准备，通过把相关字段放在同一张表中，可以大大提高数据挖掘模型训练过程中迭代计算时的效率问题。<br>————百度百科</p>
</blockquote>
<a id="more"></a>
<h3 id="宽表和窄表的建设该如何选择？"><a href="#宽表和窄表的建设该如何选择？" class="headerlink" title="宽表和窄表的建设该如何选择？"></a>宽表和窄表的建设该如何选择？</h3><p>这个问题相信纠结了很多从是数据库开发、数据仓库开发和后台开发人员；单单考虑这个问题，难给出一个绝对的答案；本人从事数据仓库开发工作到现在已经有一年半时间了，对于这个问题，我也曾经纠结过，但是是否有绝对的答案呢？事实上任何东西都没有绝对的说法。</p>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>考虑这样的一个问题，一个公司有这样的一个需求：</p>
<p>设计销售领域的订单事实表，该事实表应该包含哪些维度和度量？事实表和维表该分别如何去设计？</p>
<p>好了，我们把关键信息拿出来，首先我们要有维度包括：销售员、销售员所属部门、下订单的时间；度量：销售量；</p>
<p>那么，订单事实表，其实就是一个商品销售的清单。</p>
<h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><p>依照这个思路，我们建立的第一个模型可能是以下这样的：</p>
<center><img src="/img/posts/wide-table-thinking-1.gif"></center>

<p>单单看上去，貌似是符合我们的问题的需要，而且符合数据库的范式设计：没有冗余字段；但是情况真的就是这样吗？</p>
<p>答案是否定的，确实对于一般的OLTP系统而言这样的表设计确实减少了冗余和，增删改查等操作也很方便，但是往往对于我们的统计系统、OLAP、数据挖掘而言，情况却并非如此，举个例子：我们要统计每个部门各自的销售量为多少？那么对于上表,sql是这样的：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> a.*,b.sid <span class="keyword">into</span> #dep_saleser <span class="keyword">from</span> department a,saleser_dim b <span class="keyword">on</span> a.dep_id = b.dep_id;</div><div class="line"><span class="keyword">select</span> <span class="keyword">count</span>(<span class="number">1</span>),a.dep_name <span class="keyword">from</span> #dep_saleser a,order_fact b <span class="keyword">on</span> a.sid=b.sid <span class="keyword">group</span> <span class="keyword">by</span> a.dep_name;</div></pre></td></tr></table></figure>
<p>对于这么一个简单的需求已经要写两了sql去实现了，其实数据库表模型的的设计是灵活的，我们完全可以根据我们的业务去设计我们的数据表；考虑到部门和销售员可以是同属于销售者这个维度，只是他们是有上下级别关系的。</p>
<h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><p>那么依照这个思路，我们的模型可以建立为下面这样：</p>
<center><img src="/img/posts/wide-table-thinking-2.gif"></center>

<p>那么统计每个部门各自的销售量，可以用如下sql去实现：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> <span class="keyword">count</span>(<span class="number">1</span>),a.dep_name <span class="keyword">from</span> saleser_dim a,order_fact b</div><div class="line"><span class="keyword">on</span> a.sid=b.sid <span class="keyword">group</span> <span class="keyword">by</span> a.dep_name;</div></pre></td></tr></table></figure>
<p>确实对于这个模型而言，有些情况下会出现冗余（填写用户，没有填写部门，填写部门没填写用户），但是对于提取数统计的逻辑又相对来说要简单了好多。</p>
<h3 id="方案三"><a href="#方案三" class="headerlink" title="方案三"></a>方案三</h3><p>考虑到要实现取数简单，我们还可以想出另外一种方法：</p>
<center><img src="/img/posts/wide-table-thinking-3.gif"></center>

<p>看上去好像不错哦~~，取数据也就一句sql就搞掂了，但是却是最最槽糕的情况，有可能一个销售员，前几天登记的部门是a，但是其实他的所属于的部门为b，那么对于上面这个模型，我们得改动销售员和订单表；而对于上面的其他两个模型都仅仅需要改动一张表就行了，造成查询数据部一致往往也就是这种数据模型所造成的。</p>
<p>所谓的宽表就是字段比较多的表，包含的维度层次比较多，造成冗余也比较多，毁范式设计，但是利于取数统计，而窄表往往对于OLTP比较合适，符合范式设计原则。</p>
<p>转自<a href="http://www.cnblogs.com/super-d2/p/3384938.html" target="_blank" rel="external">http://www.cnblogs.com/super-d2/p/3384938.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;宽表从字面意义上讲就是字段比较多的数据库表。通常是指业务主题相关的指标、维度、属性关联在一起的一张数据库表。由于把不同的内容都放在同一张表存储，宽表已经不符合三范式的模型设计规范，随之带来的主要坏处就是数据的大量冗余，与之相对应的好处就是查询性能的提高与便捷。这种宽表的设计广泛应用于数据挖掘模型训练前的数据准备，通过把相关字段放在同一张表中，可以大大提高数据挖掘模型训练过程中迭代计算时的效率问题。&lt;br&gt;————百度百科&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="BI墨客" scheme="http://c-xuan.com/categories/BI%E5%A2%A8%E5%AE%A2/"/>
    
    
      <category term="转载" scheme="http://c-xuan.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="数据仓库" scheme="http://c-xuan.com/tags/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>【SQL Server】编辑、修改字段说明（备注）</title>
    <link href="http://c-xuan.com/2016/12/02/SQLAddColumnNote/"/>
    <id>http://c-xuan.com/2016/12/02/SQLAddColumnNote/</id>
    <published>2016-12-01T16:01:43.000Z</published>
    <updated>2016-12-01T16:13:05.593Z</updated>
    
    <content type="html"><![CDATA[<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">sp_addextendedproperty</div><div class="line">    [ @name = ] &#123; <span class="string">'property_name'</span> &#125;</div><div class="line">    [ , [ @value = ] &#123; <span class="string">'value'</span> &#125; </div><div class="line">        [ , [ @level0type = ] &#123; <span class="string">'level0_object_type'</span> &#125; </div><div class="line">                    , [ @level0name = ] &#123; <span class="string">'level0_object_name'</span> &#125; </div><div class="line">                [ , [ @level1type = ] &#123; <span class="string">'level1_object_type'</span> &#125; </div><div class="line">                                    , [ @level1name = ] &#123; <span class="string">'level1_object_name'</span> &#125; </div><div class="line">                        [ , [ @level2type = ] &#123; <span class="string">'level2_object_type'</span> &#125; </div><div class="line">                                                    , [ @level2name = ] &#123; <span class="string">'level2_object_name'</span> &#125; </div><div class="line">                        ] </div><div class="line">                ]</div><div class="line">        ] </div><div class="line">    ]</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h3><p>为了指定扩展属性，SQL Server 数据库中的对象分为三个级别（0、1 和 2）。级别 0 是最高级别，定义为包含在数据库作用域中的对象。级别 1 的对象包含在架构作用域或用户作用域中，而级别 ２ 的对象包含在级别 1 对象中。可以为这些级别中任一级别的对象定义扩展属性。</p>
<p>引用某个级别中的对象必须用拥有或包含它们的更高级别对象的名称进行限制。例如，当将扩展属性添加到表列（级别 2）时，还必须指定包含该列的表名（级别 1）以及包含该表的架构（级别 0）。</p>
<p>有关对象及其有效的级别 0、1 和 2 类型的完整列表，请参阅对数据库对象使用扩展属性。如果所有对象类型和名称都为空，则属性属于当前数据库本身。对于系统对象、用户定义数据库的作用域以外的对象或者未在 Arguments 中作为有效输入列出的对象，不允许使用扩展属性。</p>
<h3 id="架构与用户"><a href="#架构与用户" class="headerlink" title="架构与用户"></a>架构与用户</h3><p>在 SQL Server 的早期版本中，用户拥有表、视图和触发器之类的数据库对象。因此，允许将扩展属性添加到这些对象之一以及将用户名指定为级别 0 类型。但在 SQL Server 2005 中，数据库对象包含在架构中。它们独立于拥有架构的用户。在 SQL Server 2005 中，我们建议不要在将扩展属性应用于数据库对象时指定 USER 作为级别 0 类型，因为这会导致名称解析不明确。例如，假定用户 Mary 拥有两个架构（Mary 和 MySchema），并且这两个架构都包含名为 MyTable 的表。如果 Mary 将扩展属性添加到表 MyTable 并指定 @level0type = N’USER’、@level0name = Mary，则扩展属性应用于哪个表并不明确。为了保持向后兼容，SQL Server 将属性应用于名为 Mary 的架构所包含的表。有关用户与架构的详细信息，请参阅用户架构分离。</p>
<h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p><code>[ @name ] = { &#39;property_name&#39; }</code></p>
<p>要添加的属性的名称。property_name 的数据类型为 sysname，不能为 NULL。名称还可以包括空格或非字母数字字符串以及二进制值。</p>
<p><code>[ @value = ] { &#39;value&#39; }</code></p>
<p>要与属性关联的值。value 的数据类型为 sql_variant，默认值为 NULL。value 的大小不能超过 7,500 个字节。</p>
<p><code>[ @level0type = ] { &#39;level0_object_type&#39; }</code></p>
<p>级别 0 对象的类型。level0_object_type 的数据类型为 varchar(128)，默认值为 NULL。<br>有效的输入包括：ASSEMBLY、CONTRACT、EVENT NOTIFICATION、FILEGROUP、MESSAGE TYPE、PARTITION FUNCTION、PARTITION SCHEME、REMOTE SERVICE BINDING、ROUTE、SCHEMA、SERVICE、USER、TRIGGER、TYPE 和 NULL。<br>重要事项：</p>
<p>作为级别 0 类型的 USER 和 TYPE 将在 SQL Server 的未来版本中删除。请避免在新的开发工作中使用这些功能，并考虑修改当前使用这些功能的应用程序。改用 SCHEMA 代替 USER 作为级别 0 类型。对于 TYPE，请使用 SCHEMA 作为级别 0 类型，使用 TYPE 作为级别 1 类型。</p>
<p><code>[ @level0name = ] { &#39;level0_object_name&#39; }</code></p>
<p>所指定的级别 0 对象类型的名称。level0_object_name 的数据类型为 sysname，默认值为 NULL。</p>
<p><code>[ @level1type = ] { &#39;level1_object_type&#39; }</code></p>
<p>级别 1 对象的类型。level1_object_type 的数据类型为 varchar(128)，默认值为 NULL。有效的输入包括：AGGREGATE、DEFAULT、FUNCTION、LOGICAL FILE NAME、PROCEDURE、QUEUE、RULE、SYNONYM、TABLE、TYPE、VIEW、XML SCHEMA COLLECTION 和 NULL。</p>
<p><code>[ @level1name = ] { &#39;level1_object_name&#39; }</code></p>
<p>所指定的级别 1 对象类型的名称。level1_object_name 的数据类型为 sysname，默认值为 NULL。</p>
<p><code>[ @level2type = ] { &#39;level2_object_type&#39; }</code></p>
<p>级别 2 对象的类型。level2_object_type 的数据类型为 varchar(128)，默认值为 NULL。有效的输入包括：COLUMN、CONSTRAINT、EVENT NOTIFICATION、INDEX、PARAMETER、TRIGGER 和 NULL。</p>
<p><code>[ @level2name = ] { &#39;level2_object_name&#39; }</code></p>
<p>所指定的级别 2 对象类型的名称。level2_object_name 的数据类型为 sysname，默认值为 NULL。</p>
<h3 id="返回代码值"><a href="#返回代码值" class="headerlink" title="返回代码值"></a>返回代码值</h3><p>0（成功）或 1（失败）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">EXEC sys.sp_addextendedproperty @name=N&apos;MS_Description&apos;, @value=N&apos;0:取消,1:已到,2:未到,3:预订违约&apos; ,@level0type=N&apos;SCHEMA&apos;, @level0name=N&apos;dbo&apos;, @level1type=N&apos;TABLE&apos;, @level1name=N&apos;Tab_Passenger&apos;, @level2type=N&apos;COLUMN&apos;, @level2name=N&apos;PassengerState&apos;</div><div class="line">-表及字段描述信息处理示例</div><div class="line"></div><div class="line">--创建表</div><div class="line">create table 表(a1 varchar(10),a2 char(2))</div><div class="line"></div><div class="line">--为表添加描述信息</div><div class="line">EXECUTE sp_addextendedproperty N&apos;MS_Description&apos;, &apos;人员信息表&apos;, N&apos;user&apos;, N&apos;dbo&apos;, N&apos;table&apos;, N&apos;表&apos;, NULL, NULL</div><div class="line"></div><div class="line">--为字段a1添加描述信息</div><div class="line">EXECUTE sp_addextendedproperty N&apos;MS_Description&apos;, &apos;姓名&apos;, N&apos;user&apos;, N&apos;dbo&apos;, N&apos;table&apos;, N&apos;表&apos;, N&apos;column&apos;, N&apos;a1&apos;</div><div class="line"></div><div class="line">--为字段a2添加描述信息</div><div class="line">EXECUTE sp_addextendedproperty N&apos;MS_Description&apos;, &apos;性别&apos;, N&apos;user&apos;, N&apos;dbo&apos;, N&apos;table&apos;, N&apos;表&apos;, N&apos;column&apos;, N&apos;a2&apos;</div><div class="line"></div><div class="line">--更新表中列a1的描述属性：</div><div class="line">EXEC sp_updateextendedproperty &apos;MS_Description&apos;,&apos;字段1&apos;,&apos;user&apos;,dbo,&apos;table&apos;,&apos;表&apos;,&apos;column&apos;,a1</div><div class="line"></div><div class="line">--删除表中列a1的描述属性：</div><div class="line">EXEC sp_dropextendedproperty &apos;MS_Description&apos;,&apos;user&apos;,dbo,&apos;table&apos;,&apos;表&apos;,&apos;column&apos;,a1</div><div class="line"></div><div class="line">--删除测试</div><div class="line">drop table 表</div></pre></td></tr></table></figure>
<p>转自:<a href="http://blog.csdn.net/zanychou/article/details/7403336" target="_blank" rel="external">http://blog.csdn.net/zanychou/article/details/7403336</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;语法&quot;&gt;&lt;a href=&quot;#语法&quot; class=&quot;headerlink&quot; title=&quot;语法&quot;&gt;&lt;/a&gt;语法&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;sp_addextendedproperty&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    [ @name = ] &amp;#123; &lt;span class=&quot;string&quot;&gt;&#39;property_name&#39;&lt;/span&gt; &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    [ , [ @value = ] &amp;#123; &lt;span class=&quot;string&quot;&gt;&#39;value&#39;&lt;/span&gt; &amp;#125; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        [ , [ @level0type = ] &amp;#123; &lt;span class=&quot;string&quot;&gt;&#39;level0_object_type&#39;&lt;/span&gt; &amp;#125; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    , [ @level0name = ] &amp;#123; &lt;span class=&quot;string&quot;&gt;&#39;level0_object_name&#39;&lt;/span&gt; &amp;#125; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                [ , [ @level1type = ] &amp;#123; &lt;span class=&quot;string&quot;&gt;&#39;level1_object_type&#39;&lt;/span&gt; &amp;#125; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                                    , [ @level1name = ] &amp;#123; &lt;span class=&quot;string&quot;&gt;&#39;level1_object_name&#39;&lt;/span&gt; &amp;#125; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        [ , [ @level2type = ] &amp;#123; &lt;span class=&quot;string&quot;&gt;&#39;level2_object_type&#39;&lt;/span&gt; &amp;#125; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                                                    , [ @level2name = ] &amp;#123; &lt;span class=&quot;string&quot;&gt;&#39;level2_object_name&#39;&lt;/span&gt; &amp;#125; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        ] &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                ]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        ] &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ]&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="码路刺客" scheme="http://c-xuan.com/categories/%E7%A0%81%E8%B7%AF%E5%88%BA%E5%AE%A2/"/>
    
    
      <category term="转载" scheme="http://c-xuan.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="数据库" scheme="http://c-xuan.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="SQL Server" scheme="http://c-xuan.com/tags/SQL-Server/"/>
    
  </entry>
  
  <entry>
    <title>从事技术，坚持写博客的好处？</title>
    <link href="http://c-xuan.com/2016/12/01/BenifitOfWritingBlog/"/>
    <id>http://c-xuan.com/2016/12/01/BenifitOfWritingBlog/</id>
    <published>2016-12-01T15:38:04.000Z</published>
    <updated>2016-12-01T15:55:20.677Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><ul>
<li>1.写博客的担心</li>
</ul>
<p>今天来谈谈,写博客对我的益处,说起写博客,其实我写博客的时间不长,也就10来个月时间;之前工作的时候,看到同事每天晚上写博客,当时觉得很奇怪,就觉得写这个东西,非常浪费时间,自己知道的好的技术或者是好的技术解决思路,如果分享出去,不是被别人学去了吗等等一系列问题.</p>
<ul>
<li>2.自己的经历</li>
</ul>
<p>等写了一段时间博客时,慢慢发现,其实之前的担心的完全没必要,你会的东西,精通的知识,即使分享出去,别人也未必能学的会,即时要学会学透,也是要花费时间和精力的,所以这种担心我们大可不必.人还是要有点分享和谦虚精神的,仅仅是这种只进不出的思想,我想你也很难有的发展!那么写博客10来个时间里,通过写博客给自己带来了哪些方面的提升呢?下面我就结合自己经力来给大家做个详细的总结. </p>
<a id="more"></a>
<h2 id="写博客的好处"><a href="#写博客的好处" class="headerlink" title="写博客的好处"></a>写博客的好处</h2><p>下面我就大家来做一个详细的分析.以思维导图的形式给大家列举一下,写博客这10来个月时间里,给我带来了哪些变化.</p>
<ul>
<li>1.没写博客的原因</li>
</ul>
<center><img src="/img/posts/BenifitOfWritingBlog-1.jpg"></center>

<p>下面也对当初写博客时担心,给大家一一分析.</p>
<ul>
<li>1.1 浪费时间</li>
</ul>
<p>如果你刚开始写博客,你可能会有这样的担心,觉得他很浪费时间,需要花时间去思考,去总结,去整理成章,这一系列过程都是要花费很多时间.当你渐渐养成写博客习惯时,就会慢慢意识到这是花费时间,而不是所谓的浪费时间!</p>
<ul>
<li>1.2. 工作太忙,没时间去写</li>
</ul>
<p>这是最无能为力的，有热情的程序员是不会总以这个理由推脱的。习惯成自然!</p>
<ul>
<li>1.3.怕自己的技术被别人学去</li>
</ul>
<p>这个完全没必要去担心,你会的别人也未必会,即使你分享出去,别人也未必学的会!人还是要有点分享精神的!</p>
<ul>
<li>1.4.懒于思考,疏于总结</li>
</ul>
<p>这个是最致命的,事情的成败在于此!吃一堑长一智,能力都是在思考和总结中得带长足进步的!</p>
<ul>
<li>1.5.想写,但不知道该写些什么?</li>
</ul>
<p>这其实是一种思考总结能力的欠缺。大胆迈出第一步,慢慢来,就把它当做每天发微信动态一样,把它变成一种常态。</p>
<ul>
<li>1.6.技术含量低,写出来没意义</li>
</ul>
<p>写博客不一定要写出多么牛逼的文章,只要是自己所悟所思所想就行,记录自己知识点滴的不足,例如,今天我一个变量用错了,我也可以把它写出来,自己的博客无关他人怎么看.事实上，除了你的挚友和亲人，没有人会那么在意你，这些担心都是庸人自扰。知识是自己的事,我总结我进步!</p>
<ul>
<li>2.最初的想法</li>
</ul>
<p>我为什么要写博客呢?其实当时的想法非常简单,仅仅是想把自己当天工作中学到的知识及解决问题的思路,整理记录下来,方便自己日后工作用到的时候能够翻翻,快速的找到.原因就这么简单.</p>
<ul>
<li>3.最后的好处</li>
</ul>
<center><img src="/img/posts/BenifitOfWritingBlog-2.jpg"></center>

<p>那么问题来了,写博客有什么好处呢,能让一个人坚持这么久?下面我就给大家一一做个解释.</p>
<ul>
<li>3.1.加深对技术点的理解</li>
</ul>
<p>每天写博客,可以加深对技术点的理解,假如工作中,对某个技术点运用的不熟,当你通过博客的形式写出来,这个过程中,遇到不懂的知识点,你就会查阅相关的资料,弄明白他.</p>
<ul>
<li>3.2.自己日后用到</li>
</ul>
<p>就相当于笔记本一样,把重要的东西都记录下来,等哪天在遇到同样的问题,我们可以翻阅他.确实偶尔会用到，但频率不会那么高；因为你遇到过一次，解决了之后记忆能保存很长时间，除非又过了一段时间后又遇到这个问题；或者问题解决方案比较复杂，不是简单一次就能记住的。</p>
<ul>
<li>3.3.获得阅读量,得到认可</li>
</ul>
<p>当一篇文章,获得更多人阅读时或者是被各大网站转发时,往往就会有一种喜悦感,一种得到认可的感觉,写文章的动力就随之而来了.</p>
<ul>
<li>3.4.成就感</li>
</ul>
<p>当你的文章被大量阅读时,是不是很有成就感?当别人对你的文章称赞的时,是不是有某种成就感,继续写下去的<br>冲动?当你的文章被大量转发,被收录,是不是也有成就感?</p>
<ul>
<li>3.5.一点小虚荣</li>
</ul>
<p>当你遇到一个问题，搜索结果是自己的博客文章；当你的同事遇到问题，搜索结果是你的文章；当你的名称出现在全球最大中文IT社区的博客首页上；每个月博客网给你送书,是否感到一种无比的欣喜?你是不是有那么一点小小的虚荣心和自豪感呢？</p>
<ul>
<li>3.6.提高自己思维能力</li>
</ul>
<p>博客写多了,你的逻辑思维是不是很强了;解决问题的思路更加清晰了;技术文档是不是轻易的就写出来了.可以时刻保持思考的习惯,不至于思想比较僵化.可以提高解决问题的思维角度,有利于我们作为程序员的长远发展!</p>
<ul>
<li>3.7.提高自己的写作水平</li>
</ul>
<p>这个，确实有一定的帮助；但对于程序方面的文档来说，文字是一方面，画图是另一方面（思维导图，关系图，架构图之类的）。不过目前也就普通的文档还行，招投标文档感觉写起来还是有难度。</p>
<ul>
<li>3.8.为自己的人生留下只言片语</li>
</ul>
<p>就像日志一样,人生总有回味的地方吧.你不能说你做了10来年的技术,10年来的技术积累在哪,总要留下点只言片语.人生需要回味!<br>这同时也是是一个知识积累的过程，但更重的是为自己的人生留下一点痕迹。你也可以把它当成写日志，只不过是程序员体的语言,在IT圈子里，如果有人问起我关于某个技术，文字是不容易撒谎的。翻阅自己以前写的博客，很容易找到自己的成长轨迹.</p>
<ul>
<li>3.9.提高自己的知名度</li>
</ul>
<p>现在自己只是个无名的程序员,对这个倒没啥感觉</p>
<ul>
<li>3.10.养成有始有终的好习惯</li>
</ul>
<p>每天写日志,私密的东西,始终是自己一个人看,对我而言很难坚持下去,;而技术就不一样了,一篇博客人人都可以去看,好就点个赞,就评论一下,分享给大家!</p>
<ul>
<li>3.11.结交志同道合的朋友</li>
</ul>
<p>这个可以有,看你文章的人,大部分都是跟你从事同一领域的人,交流多了,进步也快了!</p>
<ul>
<li>3.12.碎片化学习</li>
</ul>
<p>你是否有这样的困惑？通过网络确实能够学习到很多东西，但从网上学到的东西大都是零零散散的，不系统，好像学了很多东西，又好像什么都没学到，或者学过之后又忘了，这该怎么办？有个博客就很简单了，我们可以把学习的知识按自己的结构整理记录下来，方便日后查阅巩固。</p>
<ul>
<li>3.13.使自己成为技术大牛</li>
</ul>
<p>这个真的可以做到,写博客,在相同的时间里, 带给自己能力的提升要比别人要快很多,不过这也是个循序渐进的过程,非一日之寒!</p>
<ul>
<li>3.14.分享与学习</li>
</ul>
<p>什么意思呢？也就是随着你的分享越来越多， 可能会出现一批技术的追随者、崇拜者。当然，我的技术还远远没达到那个层次，这也就是为什么是分享与学习；也就是说，你分享的内容如果有说的不对的地方，考虑的不周的地方，角度不全面的地方，热心的小伙伴会帮你指出来！这样就通过你的分享，产生沟通与交流的介质，从而学习更多的知识。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总之写博客,对一个技术人员来讲,益处很大,最自己能力,技能,知识的提升都有很大的帮助,在这里大家要记住写博客是非常花费时间的,注意这里说的是花费时间而不是浪费时间,我觉得花费时间去写博客是值得的!</p>
<p>最后希望那些想想写博客而没有坚持写下去的人,继续坚持写下去,坚持了就有收获.而那些没有写博客的人.给自己找个自己写博客的理由不需要太复杂太充分，正如我的简简单单就可以.</p>
<p>坚持下去!</p>
<p>转自:<a href="http://www.toutiao.com/a6308960007249559810/" target="_blank" rel="external">http://www.toutiao.com/a6308960007249559810/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;1.写博客的担心&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;今天来谈谈,写博客对我的益处,说起写博客,其实我写博客的时间不长,也就10来个月时间;之前工作的时候,看到同事每天晚上写博客,当时觉得很奇怪,就觉得写这个东西,非常浪费时间,自己知道的好的技术或者是好的技术解决思路,如果分享出去,不是被别人学去了吗等等一系列问题.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2.自己的经历&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;等写了一段时间博客时,慢慢发现,其实之前的担心的完全没必要,你会的东西,精通的知识,即使分享出去,别人也未必能学的会,即时要学会学透,也是要花费时间和精力的,所以这种担心我们大可不必.人还是要有点分享和谦虚精神的,仅仅是这种只进不出的思想,我想你也很难有的发展!那么写博客10来个时间里,通过写博客给自己带来了哪些方面的提升呢?下面我就结合自己经力来给大家做个详细的总结. &lt;/p&gt;
    
    </summary>
    
      <category term="随笔感悟" scheme="http://c-xuan.com/categories/%E9%9A%8F%E7%AC%94%E6%84%9F%E6%82%9F/"/>
    
    
      <category term="转载" scheme="http://c-xuan.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="知识管理" scheme="http://c-xuan.com/tags/%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>再见Solo，谢谢!</title>
    <link href="http://c-xuan.com/2016/11/28/HardSayGoodby/"/>
    <id>http://c-xuan.com/2016/11/28/HardSayGoodby/</id>
    <published>2016-11-27T16:00:00.000Z</published>
    <updated>2017-02-26T10:30:45.708Z</updated>
    
    <content type="html"><![CDATA[<center><img src="/img/posts/HardSayGoodbye-1.jpeg"></center>

<p>还有一天，购买的服务器就要到期了，并没有续期的打算，意味着在服务器上运行的这个Solo博客就停掉了。其实也没有什么大不了的事情，只是想来这一路没有为自己能够坚持而愧疚。</p>
<a id="more"></a>
<p>购买服务器的初衷就是想有一个自己部署的博客，当然有CSDN这些非常优秀的博客平台，上面的大牛资源很多，在上面写东西分享东西会更好些，自己搞个服务器运行个博客，还没什么人去看，无外乎为了装个X罢了。没错，是这样的，但是坦白讲这个X装的并不好。每当在网上搜索解决问题的方法的时候，链接到一些不错的个人博客，看到那随着时光而留下的一篇篇印记，就很是羡慕，看得出那一路的积累、总结与成长。</p>
<center><img src="/img/posts/HardSayGoodbye-2.jpeg"></center>

<p>记得服务器是去年双十一优惠买的阿里云服务器，单核1G内存。买之前还买了域名。那时候刚知道有WP(Wordpress)不久，这个相信很多人都知道，一个很不错的开源的博客与内容展示平台，用PHP写的，在互联网世界还是很流行的(还记得嘛，PHP是世界上最好的语言)。所以起初是部署的WP的博客，所以就要搞一个MySql+PHP的运行环境，自然不用说，用集成的XAMPP就好了。</p>
<p>但是后来让我换成了现在用的Solo，并不是因为Wordpress不好，Wordpress还是很不错的，功能很完善，还有各种插件皮肤可以用，由于买的服务器配置比较低，1G的内存，本身运行了Win Server 2012在运行其他的显得比较勉强，经常出现PHP运行环境不稳定崩溃的现象。所以想到有没有一些比较轻量级的博客平台，也不记得怎么找到的Solo，觉着挺好，按个JAVA环境，就可以独立启动运行。功能上也够用，还可以将博客同步到黑客派。当然也折腾了一下皮肤，修改了默认皮肤的一些样式。</p>
<center><img src="/img/posts/HardSayGoodbye-3.jpeg"></center>

<p>其实大部分文章都是转来的，平时搜东西的时候觉得挺好就转载一下，偶尔也把自己遇到的一些问题整理记录下来放出去。必须得承认，自己整理的东西会让自己更加印象深刻，在整理成博客的时候会让你理清思路，还可以练习你的表达。我还得承认我的写作能力巅峰时期应该在高中，高考后再没那时的水准。大学里论文什么的虽然字数多，但怎么出来的你懂得。</p>
<p>大概是在8月份，开始比较深入了解Git，自然就少不了GitHub，后来了解到在Github上可以发布静态网页的博客，遂折腾了一段时间，觉得还是蛮神奇的，用nodejs生成静态网页在同步到Github，还可以练习Git命令，所以就用Hexo搭了一个github静态博客<a href="http://c-xuan.com">c-xuan.com</a>。当然它并没有B3log那么方便，每次更新博客都要push。而且还得想办法解决多个地方发布的同步问题。但好处也显而易见，不需要独立的服务器，注册一个Github账号即可。有没有即功能齐全又不需要独立服务器的？有，像博客园、CSDN、简书等等都不错。</p>
<center><img src="/img/posts/HardSayGoodbye-4.jpeg"></center>

<p>最后我想说的是，选择什么样的平台发布自己的博客并不需要太过在意，适合自己的就是最好的，无论什么工具，目的都是总结自己的经历，分享自己的历程。我们庆幸自己生活在一个互联网的时代，这是一个最好的时代，我们可以随心所欲在浩瀚的网络中学到自己想要的东西。另外，就是坚持，其实坚持并不是胜利，坚持到底才是胜利，坚持着去写些东西，让岁月在互联网上留下点痕迹。诚然，网络是一个虚拟的世界，想必我们都已离不开这个世界，学着在这个世界里让自己更快成长。看到过这样一句话：有些人你可能忘了，但输入法还记得。就像很多事情你也忘了，但可能会有这样一个地方会让你回忆起什么(我说的不是朋友圈)。愿你迷茫时都可以找回来时的路。</p>
<p>PS:感谢Solo开源博客平台，感谢B3log团队。</p>
]]></content>
    
    <summary type="html">
    
      &lt;center&gt;&lt;img src=&quot;/img/posts/HardSayGoodbye-1.jpeg&quot;&gt;&lt;/img&gt;&lt;/center&gt;

&lt;p&gt;还有一天，购买的服务器就要到期了，并没有续期的打算，意味着在服务器上运行的这个Solo博客就停掉了。其实也没有什么大不了的事情，只是想来这一路没有为自己能够坚持而愧疚。&lt;/p&gt;
    
    </summary>
    
      <category term="随笔感悟" scheme="http://c-xuan.com/categories/%E9%9A%8F%E7%AC%94%E6%84%9F%E6%82%9F/"/>
    
    
      <category term="原创" scheme="http://c-xuan.com/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="知识管理" scheme="http://c-xuan.com/tags/%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript :零基础打造自己的类库</title>
    <link href="http://c-xuan.com/2016/10/29/JS-BuildBaseClassLib/"/>
    <id>http://c-xuan.com/2016/10/29/JS-BuildBaseClassLib/</id>
    <published>2016-10-29T05:31:39.000Z</published>
    <updated>2016-10-29T14:22:45.059Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在之前的章节中，我们已经不依赖jQuery，单纯地用JavaScript封装了很多方法，这个时候，你一定会想，这些经常使用的方法能不能单独整理成一个js文件呢？</p>
<p>当然可以，封装本来就是干这个用的。放在一个单独js文件里固然不错，其实我们也可以单独整一个js类库，一方面可以锻炼一下自己封装方法的能力，另一方面，也可以将自己学到的东西做一个整理。</p>
<p>出于这个目的，本文将介绍如何封装一个简单的js类库。（当然，只是开一个头，熟悉一下js基础而已。实际使用的话我感觉完全没有必要，因为jQuery已经很强大了，直接使用第三方的就可以）</p>
<a id="more"></a>
<h3 id="总体设计"><a href="#总体设计" class="headerlink" title="总体设计"></a>总体设计</h3><p>所谓的js库，其实也就是一个js文件，我思前想后，决定取个名字叫“miniQuery”,是不是山寨的味道十足呢？哈，请不要在意这些小细节。</p>
<p>大概的设计如下：</p>
<ul>
<li>1.扩展方法的兼容（主要写一些兼容的扩展方法，比如 forEach 方法等）</li>
<li>2.工具包定义 （就是之前封装的utils.js，我们的miniQuery需要依赖这个工具包，为了方便，就干脆写在一个文件里面了。）</li>
<li>3.miniQuery定义</li>
</ul>
<h3 id="扩展方法的兼容"><a href="#扩展方法的兼容" class="headerlink" title="扩展方法的兼容"></a>扩展方法的兼容</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ------------------------ 基本扩展, 字符串,数组等-------------------------------//</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">extend_base</span> (<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span>(!<span class="built_in">String</span>.prototype.format )&#123;</div><div class="line">        <span class="built_in">String</span>.prototype.format = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> e = <span class="built_in">arguments</span>;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.replace(<span class="regexp">/&#123;(\d+)&#125;/g</span>,<span class="function"><span class="keyword">function</span>(<span class="params">t, n</span>) </span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">typeof</span> e[n] != <span class="string">"undefined"</span> ? e[n] : t</div><div class="line">            &#125;)</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (!<span class="built_in">Array</span>.prototype.forEach &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">Array</span>.prototype.forEach !== <span class="string">"function"</span>) &#123;</div><div class="line">        <span class="built_in">Array</span>.prototype.forEach = <span class="function"><span class="keyword">function</span>(<span class="params">callback, context</span>) </span>&#123;</div><div class="line">           <span class="comment">// 遍历数组,在每一项上调用回调函数，这里使用原生方法验证数组。</span></div><div class="line">           <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.toString.call(<span class="keyword">this</span>) === <span class="string">"[object Array]"</span>) &#123;</div><div class="line">               <span class="keyword">var</span> i,len;</div><div class="line">               <span class="comment">//遍历该数组所有的元素</span></div><div class="line">               <span class="keyword">for</span> (i = <span class="number">0</span>, len = <span class="keyword">this</span>.length; i &lt; len; i++) &#123;</div><div class="line">                   <span class="keyword">if</span> (<span class="keyword">typeof</span> callback === <span class="string">"function"</span>  &amp;&amp; <span class="built_in">Object</span>.prototype.hasOwnProperty.call(<span class="keyword">this</span>, i)) &#123;</div><div class="line">                       <span class="keyword">if</span> (callback.call(context, <span class="keyword">this</span>[i], i, <span class="keyword">this</span>) === <span class="literal">false</span>) &#123;</div><div class="line">                           <span class="keyword">break</span>; <span class="comment">// or return;</span></div><div class="line">                       &#125;</div><div class="line">                   &#125;</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span>(!<span class="built_in">String</span>.prototype.format )&#123;</div><div class="line">        <span class="built_in">Array</span>.isArray = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">            <span class="keyword">return</span> obj.constructor.toString().indexOf(<span class="string">'Array'</span>) != <span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">//待补充 ...</span></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们定义一个extend_base方法，里面主要对js内置对象的api做了一些兼容性补充，目前还不完善，只有寥寥几个方法。当然，如果你不考虑IE678的话，那么基本上不需要这一部分了。</p>
<p>定义完成后立即调用。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">extend_base();</div></pre></td></tr></table></figure>
<h3 id="工具包整合"><a href="#工具包整合" class="headerlink" title="工具包整合"></a>工具包整合</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ------------------------ 工具包---------------------------------//</span></div><div class="line"><span class="keyword">var</span> utils = &#123;</div><div class="line">            <span class="attr">center</span> : <span class="function"><span class="keyword">function</span>(<span class="params">dom</span>)</span>&#123;</div><div class="line">                dom.style.position = <span class="string">'absolute'</span>;</div><div class="line">                dom.style.top = <span class="string">'50%'</span>;</div><div class="line">                dom.style.left = <span class="string">'50%'</span>;</div><div class="line">                dom.style[<span class="string">'margin-top'</span>] = - dom.offsetHeight / <span class="number">2</span> + <span class="string">'px'</span>;</div><div class="line">                dom.style[<span class="string">'margin-left'</span>] = - dom.offsetWidth / <span class="number">2</span> + <span class="string">'px'</span>;</div><div class="line">            &#125;,</div><div class="line">        </div><div class="line">            <span class="comment">/** dom相关 * */</span></div><div class="line">            isDom : ( <span class="keyword">typeof</span> HTMLElement === <span class="string">'object'</span> ) ?</div><div class="line">                <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">                    <span class="keyword">return</span> obj <span class="keyword">instanceof</span> HTMLElement;</div><div class="line">                &#125; :</div><div class="line">                <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">                    <span class="keyword">return</span> obj &amp;&amp; <span class="keyword">typeof</span> obj === <span class="string">'object'</span> &amp;&amp; obj.nodeType === <span class="number">1</span> &amp;&amp; <span class="keyword">typeof</span> obj.nodeName === <span class="string">'string'</span>;</div><div class="line">                &#125; ,</div><div class="line">             </div><div class="line">            <span class="comment">/** 数组相关 * */</span></div><div class="line">            isArray : <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">                <span class="keyword">return</span> obj.constructor.toString().indexOf(<span class="string">'Array'</span>) != <span class="number">-1</span>;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<ul>
<li>center ：控制dom元素相对于父盒子居中</li>
<li>isDom ：判断是否为dom元素</li>
<li>isArray ：判断是否为数组</li>
</ul>
<h3 id="miniQuery总体设计"><a href="#miniQuery总体设计" class="headerlink" title="miniQuery总体设计"></a>miniQuery总体设计</h3><p>终于到miniQuery了，在写代码之前，先简单说一下自执行函数。<br>可能你在很多书上，或者下载的源码里面，经常会看到这样的代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    </div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<p>这样子你或许觉得很奇怪，没事，我们一起来分析。</p>
<p>在js中，你如果把函数看作一个数据类型，和其他语言中的 Integer， Float ， String等等一样，就会理解很多事情了。当然，其实在js中，函数本身就是一个对象，不然的话就不会出现call方法了。因为只有对象才可以调用方法嘛。不过，大部分情况下，你把函数理解为数据类型就可以了。</p>
<p>匿名函数：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>不过，因为js语法的关系，这样子是不能执行的，你需要用一对圆括号来包一下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(  </div><div class="line">    <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    alert(<span class="string">"你好！"</span>);</div><div class="line">    &#125;()  </div><div class="line">) ;</div></pre></td></tr></table></figure>
<p>这样就可以了，下面是另一种写法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(  </div><div class="line">    <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    alert(<span class="string">"你好！"</span>);</div><div class="line">    &#125;  </div><div class="line">)();</div></pre></td></tr></table></figure>
<p>这样也可以，这种写法会更多一点。它的意思就是说，我不关心你这个函数叫什么名字，反正你在被定义的时候就要给我执行，这就是所谓的自执行函数。</p>
<p>好，问题来了，怎么加参数呢？</p>
<p>以前我们习惯于这么写：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params">str</span>)</span>&#123;</div><div class="line">    alert(str);</div><div class="line"> &#125; </div><div class="line"></div><div class="line">say(<span class="string">"你好！"</span>);</div></pre></td></tr></table></figure>
<p>依葫芦画瓢</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(  </div><div class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">str</span>)</span>&#123;</div><div class="line">       alert(str);</div><div class="line">    &#125;  </div><div class="line">)(<span class="string">"你好！"</span>);</div></pre></td></tr></table></figure>
<p>OK了。</p>
<p>是不是一样的意思呢？</p>
<p>没啥区别，以前怎么做，现在还怎么做，无非就是一个函数传参的事情罢了。</p>
<p>我们将圆括号的位置调整一下</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">( <span class="function"><span class="keyword">function</span>(<span class="params">str</span>)</span>&#123;</div><div class="line">    alert(str);</div><div class="line">&#125; )(<span class="string">"你好！"</span>);</div></pre></td></tr></table></figure>
<p>这样差不多就是最终的版本了，我记得初学js的时候，看这种代码很吃力，好像在看外星语言一样，后来看多了也就习惯了。</p>
<p>自执行函数就是这么一回事，没什么大不了的。</p>
<p>有了上面的解释，以后如果你再遇到这种写法，就 so easy 啦。</p>
<p>所以，不要再恐惧了，它就是这么回事，没什么大不了的，我这么后知后觉的人都能写，你也可以。我花了半年的时间才看明白，我相信你现在只需要几分钟。我的意思是，如果你之前不知道这些的话。</p>
<p>那么，什么时候用自执行函数呢？</p>
<p><strong>当你觉得某个函数只需要执行一次，而且不需要在其他地方调用的时候，就用。</strong></p>
<p>你可能会问了，我干嘛要这样写啊，反正就执行一次，我直接把实现代码写在外面不就行了？</p>
<p><strong>原因很简单，因为那样的话，你定义的变量就会是全局的，而一般来说我们设计的原则是尽量不要使用全局变量。</strong></p>
<p>而采用这种方式，我们就形成了一个匿名函数，函数的定义又会形成闭包，所以比较安全和简洁。</p>
<p>你可能还会觉得疑惑，我干嘛要这些写，如果我非要给函数取一个名字，然后马上调用呢？</p>
<p>额，其实我个人认为这也是没有问题的，但是你得费一番心思去给函数取名字，取 a,b,c,d 这样的名字肯定是不好的。那么，我私以为，还不如干脆就用匿名函数算了，省得麻烦。</p>
<p>如果这部分知识你以前就不知道，那么我建议你把这篇文章多看几遍，反正就是那么回事，没什么大不了的。我当初就是走了很多弯路，也没有人教我，只有靠自己在那瞎摸索和各种百度，当然，现在想想很简单了。</p>
<p>我们的miniQuery的定义就放在这个自执行函数里面，这样一来，只要有人调用了这个js文件，就能调用miniQuery函数了。</p>
<p>当然，你直接放在外面其实也没事，因为反正就一个方法，而且这个方法本来就是要暴露出去的。</p>
<p>这边为了说明自执行函数，就硬加进来了。</p>
<p>我们把miniQuery的定义丢进去。</p>
<p>比如，像这样子的：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">   </div><div class="line">   <span class="keyword">var</span> miniQuery = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    alert(<span class="string">'Hello miniQuery!'</span>);</div><div class="line">   &#125;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<p>我们尝试在外面调用：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">miniQuery();</div></pre></td></tr></table></figure>
<p>很遗憾，调不到。</p>
<p>我们再回顾一下代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">   </div><div class="line">   <span class="keyword">var</span> miniQuery = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        alert(<span class="string">'Hello miniQuery!'</span>);</div><div class="line">   &#125;</div><div class="line">   </div><div class="line">&#125;)();</div><div class="line"></div><div class="line">miniQuery();</div></pre></td></tr></table></figure>
<p>原来，miniQuery是存在于一个闭包中的，它可以访问到父级作用域的变量，但是反过来就不行，除非函数自己用 return 的方式将私有数据暴露出去。这些在之前的关于闭包的文章里面已经解释过了，这里不再赘述。</p>
<p>解决方法有很多，比如，最简单的，我们直接把var去掉，这样就会发生一次变量提升，miniQuery被升级为全局变量，挂在window对象上面。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">   </div><div class="line">   miniQuery = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    alert(<span class="string">'Hello miniQuery!'</span>);</div><div class="line">   &#125;</div><div class="line">   </div><div class="line">&#125;)();</div><div class="line"></div><div class="line">miniQuery();</div></pre></td></tr></table></figure>
<p>成了，简单明了，干干净净。</p>
<p>虽然我觉得很有道理，但是我看别人的代码，他们封装自己的js库的时候，几乎没有这样做的，因此我们也采用一种大众的做法。</p>
<p>即，我们把window作为参数传进去，然后手动将miniQuery挂上去。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">win</span>)</span>&#123;</div><div class="line">   </div><div class="line">   <span class="keyword">var</span> miniQuery = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    alert(<span class="string">'Hello miniQuery!'</span>);</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   win.miniQuery = miniQuery;</div><div class="line">   </div><div class="line">&#125;)(<span class="built_in">window</span>);</div><div class="line"></div><div class="line">miniQuery();</div></pre></td></tr></table></figure>
<p>是不是也可以呢？</p>
<p>如果你觉得每次写miniQuery太麻烦，那么我们可以给它换一个名字，比如 $</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">win</span>)</span>&#123;</div><div class="line">   </div><div class="line">   <span class="keyword">var</span> miniQuery = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    alert(<span class="string">'Hello miniQuery!'</span>);</div><div class="line">   &#125;</div><div class="line">   </div><div class="line">   </div><div class="line">   win.$ = miniQuery;</div><div class="line">   </div><div class="line">&#125;)(<span class="built_in">window</span>);</div><div class="line"></div><div class="line">$();</div></pre></td></tr></table></figure>
<p>这样就差不多了。</p>
<h3 id="miniQuery-包裹对象"><a href="#miniQuery-包裹对象" class="headerlink" title="miniQuery 包裹对象"></a>miniQuery 包裹对象</h3><p>我们先弄来一个测试用的网页：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.wrap</span> &#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">80px</span>;</div><div class="line">    <span class="attribute">height</span>:<span class="number">80px</span>;</div><div class="line">    <span class="attribute">background</span>:darkslateblue;</div><div class="line">    <span class="attribute">margin</span>:<span class="number">20px</span>;</div><div class="line">    <span class="attribute">border-radius</span>: <span class="number">2px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'boxes'</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'box1'</span> <span class="attr">class</span>=<span class="string">'wrap'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'box2'</span> <span class="attr">class</span>=<span class="string">'wrap'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'box3'</span> <span class="attr">class</span>=<span class="string">'wrap'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
<p>举一个例子，现在我们要获取id为box1的盒子，并把它的背景色改为红色。</p>
<p>用js代码，我们会这样做：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> box2 = <span class="built_in">document</span>.getElementById(<span class="string">'box2'</span>);</div><div class="line">box2.style.backgroundColor = <span class="string">'red'</span>;</div></pre></td></tr></table></figure>
<p>思路很清晰，分为简单的两步：</p>
<p>第一步：获取dom对象。<br>第二部：设置其背景色为红色。</p>
<p>同样的，我们的 miniQuery 也要这么做，首先得获取对象，然后进行操作。就好像你做饭，首先得有米面吧。所谓巧妇难为，无米之炊。</p>
<p>于是，我们有了下面的代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> miniQuery = <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>)</span>&#123;</div><div class="line">   <span class="keyword">var</span> miniQuery = <span class="built_in">document</span>.getElementById(selector);</div><div class="line">   <span class="built_in">console</span>.log(miniQuery);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>selector 代表选择器，它只是一个参数名字，参数列表的名称是可以自己定义的。你写 aaa , bbb , ccc 都没问题，只要你愿意的话。</p>
<p>我以前经常看别人写的代码，参数里面有callback，现在我知道是回调函数的意思。可是我以前不知道，然后就觉得很困惑，作为一个英语比日语还差的js玩家，我感到很那个啥。</p>
<p>其实无所谓，只是一个名字而已，你写什么都行，只要符合标识符的命名规范就成。</p>
<p>总有人觉得，看到参数里边写了context（上下文），callback（回调函数）这样的词汇，就觉得很困惑。</p>
<p>不要困惑啦，不要再惊恐啦，它就是一个名称罢了！</p>
<p>。。。</p>
<p>额，扯远了，继续回来。</p>
<p>我们在外面调用miniQuery ~</p>
<p>window 上面挂的是 $ , 其实就是 miniQuery</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'box1'</span>);</div></pre></td></tr></table></figure>
<p>接下里，我们给dom元素变更背景色为红色。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> miniQuery = <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>)</span>&#123;</div><div class="line">   <span class="keyword">var</span> miniQuery = <span class="built_in">document</span>.getElementById(selector);</div><div class="line">   miniQuery.style.backgroundColor = <span class="string">'red'</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>效果确实出来了。</p>
<p>可是呢，如果用户过几天又来个需求，说我要把box1的宽度变为之前的两倍，你怎么办？</p>
<p>总不可能去修改源码吧！</p>
<p>这时候，我们就可以考虑能不能通过一个什么办法，我先用miniQuery把你传进来的东西包装成dom元素，保存起来返回给你，同时再给你返回一大堆方法，比如改变高度啊，添加背景色啊等等。那么，操作的就是之前保存的元素了。也就是你一开始希望操作的元素。</p>
<p>这是一个很好的想法，我们经过代码的重写，最终产生了这样的一个miniQuery函数：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> miniQuery = <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> miniQuery = <span class="built_in">document</span>.getElementById(selector);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">obj</span> : miniQuery , <span class="comment">//将dom元素保存起来，再返回给你</span></div><div class="line">        </div><div class="line">        <span class="comment">// ------------------------ css 相关 ------------------------//</span></div><div class="line">        backgroundColor : <span class="function"><span class="keyword">function</span>(<span class="params">color</span>)</span>&#123;</div><div class="line">            <span class="keyword">this</span>.obj.style.backgroundColor = color;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">   </div><div class="line">   win.$ = miniQuery;</div><div class="line">   </div><div class="line">&#125;)(<span class="built_in">window</span>);</div></pre></td></tr></table></figure>
<p>我们再调用一次，看看这回它给我们返回的是什么东东？</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> $box = $(<span class="string">'box1'</span>);</div><div class="line"><span class="built_in">console</span>.log($box);</div></pre></td></tr></table></figure>
<center><img src="/img/posts/JS-BuildBaseClassLib-1.gif"></center>

<p>可见，它给我们返回的是一个json对象，里面有 obj 变量和 backgroundColor 函数。这样的好处就是极大的扩展了我们的miniQuery，你给我一个选择器，我就包起来，然后不仅把它返回给你，而且还给你各种api方法！</p>
<p>于是我们就可以直接调用 backgroundColor 函数了。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> $box = $(<span class="string">'box1'</span>);</div><div class="line">$box.backgroundColor(<span class="string">'red'</span>);</div></pre></td></tr></table></figure>
<center><img src="/img/posts/JS-BuildBaseClassLib-2.gif"></center>

<p>成了。</p>
<p>我们现在返回的，不是一个单纯的dom元素，dom元素只是它的一部分。可以说，我们返回给用户的是一个miniQuery对象！</p>
<p>经过改进，我已经陆陆续续地给miniQuery添加了很多方法，大部分是模拟的jQuery：</p>
<center><img src="/img/posts/JS-BuildBaseClassLib-3.gif"></center>

<p>顺便弄了两个小型的组件，一个是按钮，另一个是简单的数据列表。</p>
<p>按钮使用：</p>
<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;link rel=<span class="string">"stylesheet"</span> type=<span class="string">"text/css"</span> href=<span class="string">"css/mui.css"</span>/&gt;</div><div class="line">&lt;<span class="built-in">div</span> class=<span class="string">'box'</span>&gt;&lt;/<span class="built-in">div</span>&gt;</div><div class="line">var <span class="symbol">$</span>box = <span class="symbol">$</span>(<span class="string">'.box'</span>).<span class="keyword">eq</span>(<span class="number">0</span>);</div><div class="line"><span class="meta"><span class="meta-keyword">$box</span>.linkbutton();</span></div></pre></td></tr></table></figure>
<p>按钮的样式就出来了，然后我们来设置按钮的属性。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> $box = $(<span class="string">'.box'</span>).eq(<span class="number">0</span>);</div><div class="line">$box.linkbutton(&#123;</div><div class="line">    <span class="attr">text</span> : <span class="string">'保存'</span> ,</div><div class="line">    <span class="attr">click</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        alert(<span class="string">'保存成功！'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>按钮的大小也自动变大了。</p>
<p>对应的css：</p>
<p>mui.css</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.linkbutton</span> &#123;</div><div class="line">    <span class="attribute">padding</span>: .<span class="number">4em</span> .<span class="number">9em</span>; <span class="comment">/*em的好处就是随着父元素的字体大小而变化，当该元素的字体变化时，会自适应*/</span></div><div class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">rgba</span>(0,0,0,.1);</div><div class="line">    <span class="attribute">background-color</span>: <span class="number">#ac0</span>;</div><div class="line">    <span class="attribute">border-radius</span>: .<span class="number">2em</span>;</div><div class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">5px</span> <span class="built_in">rgba</span>(0,0,0,.5);</div><div class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</div><div class="line">    <span class="attribute">text-shadow</span>: <span class="number">0</span> -.<span class="number">06em</span> .<span class="number">24em</span> <span class="built_in">rgba</span>(0,0,0,.5); <span class="comment">/*将阴影设置为半透明，就无所谓底色了，都能很好地适应*/</span></div><div class="line">    <span class="attribute">font-size</span>: <span class="number">130%</span>; </div><div class="line">    <span class="attribute">line-height</span>: <span class="number">1.5</span>; <span class="comment">/*行高是字号的1.5倍*/</span></div><div class="line">    <span class="attribute">display</span>:inline-block;</div><div class="line">    <span class="attribute">cursor</span>:pointer;</div><div class="line">    <span class="attribute">font-family</span>: <span class="string">"微软雅黑"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>数据列表简单演示：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"css/mui.css"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"js/miniQuery.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">'btn0'</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">        </div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'grid0'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">        $(<span class="string">'#btn0'</span>).linkbutton(&#123;</div><div class="line">            <span class="attr">text</span> : <span class="string">'测试'</span> ,</div><div class="line">            <span class="attr">click</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="keyword">if</span>(grid0.getSize() &lt; <span class="number">1</span>)&#123;</div><div class="line">                    alert(<span class="string">'请选择一条数据！'</span>);</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line">                alert(<span class="string">'您选择的是'</span> + <span class="built_in">JSON</span>.stringify(grid0.getSelected()));</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">var</span> grid0 = mui.get(<span class="string">'#grid0'</span>).dataGrid(&#123;</div><div class="line">            <span class="attr">header</span> : [</div><div class="line">                &#123;<span class="attr">name</span>:<span class="string">'ID'</span> ,  <span class="attr">width</span>:<span class="number">10</span> , <span class="attr">type</span> : <span class="string">'checkColumn'</span> &#125; ,</div><div class="line">                &#123;<span class="attr">name</span>:<span class="string">'标题'</span> , <span class="attr">type</span> : <span class="string">'column'</span> , <span class="attr">field</span> : <span class="string">'title'</span>&#125; ,</div><div class="line">                &#123;<span class="attr">name</span>:<span class="string">'分类'</span> , <span class="attr">type</span> : <span class="string">'column'</span> , <span class="attr">field</span> : <span class="string">'type'</span>&#125; ,</div><div class="line">                &#123;<span class="attr">name</span>:<span class="string">'作者'</span> ,  <span class="attr">type</span> : <span class="string">'column'</span> , <span class="attr">field</span> : <span class="string">'author'</span>&#125; ,</div><div class="line">                &#123;<span class="attr">name</span>:<span class="string">'时间'</span> ,  <span class="attr">type</span> : <span class="string">'column'</span> , <span class="attr">field</span> : <span class="string">'time'</span>&#125; ,</div><div class="line">            ] ,</div><div class="line">            </div><div class="line">        &#125;);</div><div class="line">        </div><div class="line">        </div><div class="line">        grid0.load([</div><div class="line">            &#123;<span class="attr">title</span> : <span class="string">'111'</span> , <span class="attr">type</span> : <span class="string">'A'</span> , <span class="attr">author</span> : <span class="string">'张三'</span> , <span class="attr">time</span> : <span class="string">'2015'</span>&#125; ,</div><div class="line">            &#123;<span class="attr">title</span> : <span class="string">'222'</span> , <span class="attr">type</span> : <span class="string">'B'</span> , <span class="attr">author</span> : <span class="string">'李四'</span> , <span class="attr">time</span> : <span class="string">'2015'</span>&#125; ,</div><div class="line">            &#123;<span class="attr">title</span> : <span class="string">'333'</span> , <span class="attr">type</span> : <span class="string">'C'</span> , <span class="attr">author</span> : <span class="string">'王五'</span> , <span class="attr">time</span> : <span class="string">'2015'</span>&#125; ,</div><div class="line">            &#123;<span class="attr">title</span> : <span class="string">'444'</span> , <span class="attr">type</span> : <span class="string">'D'</span> , <span class="attr">author</span> : <span class="string">'赵六'</span> , <span class="attr">time</span> : <span class="string">'2015'</span>&#125; ,</div><div class="line">        ]);</div><div class="line">        </div><div class="line">        </div><div class="line">        </div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>当然，好多组件都还不够完善，我主要也是自己尝试一下，不过并不打算再拓展了。</p>
<p>自己做个小类库主要用于学习，以后还是用jQuery吧。</p>
<p>附录A</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div><div class="line">376</div><div class="line">377</div><div class="line">378</div><div class="line">379</div><div class="line">380</div><div class="line">381</div><div class="line">382</div><div class="line">383</div><div class="line">384</div><div class="line">385</div><div class="line">386</div><div class="line">387</div><div class="line">388</div><div class="line">389</div><div class="line">390</div><div class="line">391</div><div class="line">392</div><div class="line">393</div><div class="line">394</div><div class="line">395</div><div class="line">396</div><div class="line">397</div><div class="line">398</div><div class="line">399</div><div class="line">400</div><div class="line">401</div><div class="line">402</div><div class="line">403</div><div class="line">404</div><div class="line">405</div><div class="line">406</div><div class="line">407</div><div class="line">408</div><div class="line">409</div><div class="line">410</div><div class="line">411</div><div class="line">412</div><div class="line">413</div><div class="line">414</div><div class="line">415</div><div class="line">416</div><div class="line">417</div><div class="line">418</div><div class="line">419</div><div class="line">420</div><div class="line">421</div><div class="line">422</div><div class="line">423</div><div class="line">424</div><div class="line">425</div><div class="line">426</div><div class="line">427</div><div class="line">428</div><div class="line">429</div><div class="line">430</div><div class="line">431</div><div class="line">432</div><div class="line">433</div><div class="line">434</div><div class="line">435</div><div class="line">436</div><div class="line">437</div><div class="line">438</div><div class="line">439</div><div class="line">440</div><div class="line">441</div><div class="line">442</div><div class="line">443</div><div class="line">444</div><div class="line">445</div><div class="line">446</div><div class="line">447</div><div class="line">448</div><div class="line">449</div><div class="line">450</div><div class="line">451</div><div class="line">452</div><div class="line">453</div><div class="line">454</div><div class="line">455</div><div class="line">456</div><div class="line">457</div><div class="line">458</div><div class="line">459</div><div class="line">460</div><div class="line">461</div><div class="line">462</div><div class="line">463</div><div class="line">464</div><div class="line">465</div><div class="line">466</div><div class="line">467</div><div class="line">468</div><div class="line">469</div><div class="line">470</div><div class="line">471</div><div class="line">472</div><div class="line">473</div><div class="line">474</div><div class="line">475</div><div class="line">476</div><div class="line">477</div><div class="line">478</div><div class="line">479</div><div class="line">480</div><div class="line">481</div><div class="line">482</div><div class="line">483</div><div class="line">484</div><div class="line">485</div><div class="line">486</div><div class="line">487</div><div class="line">488</div><div class="line">489</div><div class="line">490</div><div class="line">491</div><div class="line">492</div><div class="line">493</div><div class="line">494</div><div class="line">495</div><div class="line">496</div><div class="line">497</div><div class="line">498</div><div class="line">499</div><div class="line">500</div><div class="line">501</div><div class="line">502</div><div class="line">503</div><div class="line">504</div><div class="line">505</div><div class="line">506</div><div class="line">507</div><div class="line">508</div><div class="line">509</div><div class="line">510</div><div class="line">511</div><div class="line">512</div><div class="line">513</div><div class="line">514</div><div class="line">515</div><div class="line">516</div><div class="line">517</div><div class="line">518</div><div class="line">519</div><div class="line">520</div><div class="line">521</div><div class="line">522</div><div class="line">523</div><div class="line">524</div><div class="line">525</div><div class="line">526</div><div class="line">527</div><div class="line">528</div><div class="line">529</div><div class="line">530</div><div class="line">531</div></pre></td><td class="code"><pre><div class="line"><span class="meta">"use strict"</span>;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * miniQuery 和 工具类库</div><div class="line"> * 版本 1.1 (修正了一部分Bug，增加了一些方法)</div><div class="line"> * 作者：剽悍一小兔</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="comment">// ------------------------ 基本扩展, 字符串,数组等---------------------------------//</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">extend_base</span> (<span class="params"></span>)</span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span>(!<span class="built_in">String</span>.prototype.format )&#123;</div><div class="line">        <span class="built_in">String</span>.prototype.format = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> e = <span class="built_in">arguments</span>;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.replace(<span class="regexp">/&#123;(\d+)&#125;/g</span>,<span class="function"><span class="keyword">function</span>(<span class="params">t, n</span>) </span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">typeof</span> e[n] != <span class="string">"undefined"</span> ? e[n] : t</div><div class="line">            &#125;)</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (!<span class="built_in">Array</span>.prototype.forEach &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">Array</span>.prototype.forEach !== <span class="string">"function"</span>) &#123;</div><div class="line">        <span class="built_in">Array</span>.prototype.forEach = <span class="function"><span class="keyword">function</span>(<span class="params">callback, context</span>) </span>&#123;</div><div class="line">           <span class="comment">// 遍历数组,在每一项上调用回调函数，这里使用原生方法验证数组。</span></div><div class="line">           <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.toString.call(<span class="keyword">this</span>) === <span class="string">"[object Array]"</span>) &#123;</div><div class="line">               <span class="keyword">var</span> i,len;</div><div class="line">               <span class="comment">//遍历该数组所有的元素</span></div><div class="line">               <span class="keyword">for</span> (i = <span class="number">0</span>, len = <span class="keyword">this</span>.length; i &lt; len; i++) &#123;</div><div class="line">                   <span class="keyword">if</span> (<span class="keyword">typeof</span> callback === <span class="string">"function"</span>  &amp;&amp; <span class="built_in">Object</span>.prototype.hasOwnProperty.call(<span class="keyword">this</span>, i)) &#123;</div><div class="line">                       <span class="keyword">if</span> (callback.call(context, <span class="keyword">this</span>[i], i, <span class="keyword">this</span>) === <span class="literal">false</span>) &#123;</div><div class="line">                           <span class="keyword">break</span>; <span class="comment">// or return;</span></div><div class="line">                       &#125;</div><div class="line">                   &#125;</div><div class="line">               &#125;</div><div class="line">           &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span>(!<span class="built_in">String</span>.prototype.format )&#123;</div><div class="line">        <span class="built_in">Array</span>.isArray = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">            <span class="keyword">return</span> obj.constructor.toString().indexOf(<span class="string">'Array'</span>) != <span class="number">-1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">extend_base(); </div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// ------------------------ 工具包---------------------------------//</span></div><div class="line"><span class="keyword">var</span> utils = &#123;</div><div class="line">            <span class="attr">center</span> : <span class="function"><span class="keyword">function</span>(<span class="params">dom</span>)</span>&#123;</div><div class="line">                dom.style.position = <span class="string">'absolute'</span>;</div><div class="line">                dom.style.top = <span class="string">'50%'</span>;</div><div class="line">                dom.style.left = <span class="string">'50%'</span>;</div><div class="line">                dom.style[<span class="string">'margin-top'</span>] = - dom.offsetHeight / <span class="number">2</span> + <span class="string">'px'</span>;</div><div class="line">                dom.style[<span class="string">'margin-left'</span>] = - dom.offsetWidth / <span class="number">2</span> + <span class="string">'px'</span>;</div><div class="line">            &#125;,</div><div class="line">        </div><div class="line">            <span class="comment">/** dom相关 * */</span></div><div class="line">            isDom : ( <span class="keyword">typeof</span> HTMLElement === <span class="string">'object'</span> ) ?</div><div class="line">                <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">                    <span class="keyword">return</span> obj <span class="keyword">instanceof</span> HTMLElement;</div><div class="line">                &#125; :</div><div class="line">                <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">                    <span class="keyword">return</span> obj &amp;&amp; <span class="keyword">typeof</span> obj === <span class="string">'object'</span> &amp;&amp; obj.nodeType === <span class="number">1</span> &amp;&amp; <span class="keyword">typeof</span> obj.nodeName === <span class="string">'string'</span>;</div><div class="line">                &#125; ,</div><div class="line">             </div><div class="line">            <span class="comment">/** 数组相关 * */</span></div><div class="line">            isArray : <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">                <span class="keyword">return</span> obj.constructor.toString().indexOf(<span class="string">'Array'</span>) != <span class="number">-1</span>;</div><div class="line">            &#125;</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">        </div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// ------------------------ miniQuery.js ---------------------------------//</span></div><div class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params">win</span>)</span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> miniQuery = <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> miniQuery = <span class="literal">null</span>;</div><div class="line">        <span class="keyword">var</span> length = <span class="number">0</span>;</div><div class="line">        <span class="keyword">var</span> children = [];</div><div class="line">        <span class="keyword">if</span>(!selector) <span class="keyword">return</span>;</div><div class="line">        </div><div class="line">        <span class="comment">/** 1. 传入的是id * */</span></div><div class="line">        <span class="keyword">if</span>(selector.toString().indexOf(<span class="string">'#'</span>) != <span class="number">-1</span>) &#123;</div><div class="line">            selector = selector.replace(<span class="string">'#'</span>,<span class="string">''</span>);</div><div class="line">            miniQuery = <span class="built_in">document</span>.getElementById(selector);</div><div class="line">        &#125; </div><div class="line">        </div><div class="line">        <span class="comment">/** 2. 传入的是class * */</span></div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(selector.toString().indexOf(<span class="string">'.'</span>) != <span class="number">-1</span>)&#123;</div><div class="line">            selector = selector.replace(<span class="string">'.'</span>,<span class="string">''</span>);</div><div class="line">            miniQuery = <span class="built_in">document</span>.getElementsByClassName(selector);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        </div><div class="line">        <span class="comment">/** 3. 传入的是dom元素 * */</span></div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(utils.isDom(selector))&#123;</div><div class="line">            miniQuery = selector;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">         <span class="comment">/** 4. 传入的是标签 * */</span></div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> selector === <span class="string">'string'</span>)&#123;</div><div class="line">            miniQuery = <span class="built_in">document</span>.getElementsByTagName(selector);</div><div class="line">            <span class="keyword">return</span> miniQuery;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(!miniQuery) <span class="keyword">return</span>; <span class="comment">//如果本类库包装不了，就返回</span></div><div class="line">        </div><div class="line">        <span class="keyword">if</span>(miniQuery.length)&#123;   <span class="comment">//如果是一个类数组元素的话，就获取他的长度</span></div><div class="line">            length = miniQuery.length; </div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            length = <span class="number">1</span>; <span class="comment">//这种情况，说明成功包裹了元素，但是该元素还是存在的，就将长度设定为1</span></div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        children = miniQuery.children; <span class="comment">//取得所有的孩子节点</span></div><div class="line">        </div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            </div><div class="line">            <span class="comment">/** 属性区 */</span></div><div class="line">            obj : miniQuery,    <span class="comment">//返回的dom元素</span></div><div class="line">            index : <span class="number">0</span> ,         <span class="comment">//默认的角标（假如 miniquery 是一个类数组的话）</span></div><div class="line">            length : length,    <span class="comment">//元素的个数（假如 miniquery 是一个类数组的话）</span></div><div class="line">            children : children,<span class="comment">//所有孩子节点</span></div><div class="line">            </div><div class="line">            </div><div class="line">            <span class="comment">/** 方法区 */</span></div><div class="line">            </div><div class="line">            <span class="comment">// ------------------------ dom 相关 ---------------------------------//</span></div><div class="line">            </div><div class="line">            <span class="comment">/**获取dom对象本身,返回纯粹的dom元素，而非miniQuery元素*/</span></div><div class="line">            getObj : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.obj;</div><div class="line">            &#125; ,</div><div class="line">            </div><div class="line">            <span class="comment">/**获取元素的长度*/</span></div><div class="line">            size : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.length;</div><div class="line">            &#125; ,</div><div class="line">            </div><div class="line">            <span class="comment">/** 假如 miniquery 是一个类数组的话，用于返回其中一个元素 */</span></div><div class="line">            eq : <span class="function"><span class="keyword">function</span>(<span class="params">index</span>)</span>&#123;</div><div class="line">                <span class="keyword">if</span>(length &gt; <span class="number">0</span>) &#123;</div><div class="line">                    <span class="keyword">return</span> $(<span class="keyword">this</span>.obj[index]); <span class="comment">//eq返回的还是miniQuery对象</span></div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">                &#125;</div><div class="line">            &#125; ,</div><div class="line">            </div><div class="line">            <span class="comment">/** 获得第一个匹配元素 */</span></div><div class="line">            first : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="keyword">return</span> $(<span class="keyword">this</span>.obj[<span class="number">0</span>]);</div><div class="line">            &#125; ,</div><div class="line">            </div><div class="line">            <span class="comment">/** 获得最后一个匹配元素 */</span></div><div class="line">            last : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="keyword">return</span> $(<span class="keyword">this</span>.obj[<span class="keyword">this</span>.length - <span class="number">1</span>]);</div><div class="line">            &#125; ,</div><div class="line">            </div><div class="line">            <span class="comment">/** 获得最后一个匹配元素 */</span></div><div class="line">            getChildren : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.obj.children;</div><div class="line">            &#125; ,</div><div class="line">            </div><div class="line">            <span class="comment">/** 获得某一个孩子节点 */</span></div><div class="line">            getChild : <span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</div><div class="line">                <span class="keyword">return</span> $(<span class="keyword">this</span>.children[i]);</div><div class="line">            &#125; ,</div><div class="line">            </div><div class="line">            <span class="comment">/** 获得父节点 */</span></div><div class="line">            getParent : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="keyword">return</span> $(<span class="keyword">this</span>.obj.parentElement);</div><div class="line">            &#125; ,</div><div class="line">            </div><div class="line">            <span class="comment">/** 获得上一个节点 */</span></div><div class="line">            previous : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="keyword">var</span> parent = <span class="keyword">this</span>.getParent();</div><div class="line">                <span class="keyword">var</span> children = parent.children;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; children.length; i++)&#123;</div><div class="line">                    <span class="keyword">if</span>(<span class="keyword">this</span>.obj == children[i]) &#123;</div><div class="line">                        <span class="keyword">return</span> $(children[i - <span class="number">1</span>]);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">            &#125; ,</div><div class="line">            </div><div class="line">            <span class="comment">/** 获得下一个节点 */</span></div><div class="line">            next : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="keyword">var</span> parent = <span class="keyword">this</span>.getParent();</div><div class="line">                <span class="keyword">var</span> children = parent.children;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; children.length; i++)&#123;</div><div class="line">                    <span class="keyword">if</span>(<span class="keyword">this</span>.obj == children[i]) &#123;</div><div class="line">                        <span class="keyword">return</span> $(children[i + <span class="number">1</span>]);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">            &#125; ,</div><div class="line">            </div><div class="line">            <span class="attr">findClassDom</span> : <span class="function"><span class="keyword">function</span>(<span class="params">className</span>)</span>&#123;</div><div class="line">                 <span class="keyword">this</span>.obj = <span class="keyword">this</span>.obj.getElementsByClassName(className) ;</div><div class="line">                 <span class="keyword">return</span> <span class="keyword">this</span> ;</div><div class="line">            &#125; ,</div><div class="line">            </div><div class="line">            <span class="attr">findIdDom</span> : <span class="function"><span class="keyword">function</span>(<span class="params">id</span>)</span>&#123;</div><div class="line">                 <span class="keyword">var</span> $<span class="keyword">this</span> = <span class="keyword">this</span>; </div><div class="line">                 <span class="keyword">var</span> children = <span class="keyword">this</span>.getChildren();</div><div class="line">                 children = <span class="built_in">Array</span>.prototype.slice.call(children); <span class="comment">//obj 转  []</span></div><div class="line">                 children.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</div><div class="line">                    <span class="comment">//console.log(item.id);</span></div><div class="line">                    (id === item.id) &amp;&amp; ($<span class="keyword">this</span> = item) ;</div><div class="line">                 &#125;);</div><div class="line">                 <span class="keyword">return</span> <span class="keyword">this</span> ;</div><div class="line">            &#125; ,</div><div class="line">            </div><div class="line">            <span class="comment">// ------------------------ css 相关 ---------------------------------//</span></div><div class="line">            <span class="comment">/** 添加背景色 */</span></div><div class="line">            backgroundColor : <span class="function"><span class="keyword">function</span>(<span class="params">color</span>)</span>&#123;</div><div class="line">                <span class="keyword">this</span>.obj.style.backgroundColor = color;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">            &#125; ,</div><div class="line">            </div><div class="line">            <span class="comment">/** 获取style */</span></div><div class="line">            getStyle : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                <span class="keyword">var</span> styleEle = <span class="literal">null</span>;</div><div class="line">                <span class="keyword">if</span>(<span class="built_in">window</span>.getComputedStyle)&#123;</div><div class="line">                    styleEle = <span class="built_in">window</span>.getComputedStyle(<span class="keyword">this</span>.obj,<span class="literal">null</span>);</div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    styleEle = ht.currentStyle;</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> styleEle;</div><div class="line">             &#125; ,</div><div class="line">            </div><div class="line">            <span class="comment">/** 设置或者拿到高度 */</span> </div><div class="line">            height : <span class="function"><span class="keyword">function</span>(<span class="params">h</span>)</span>&#123;</div><div class="line">                <span class="keyword">if</span>(!h) <span class="keyword">return</span> <span class="keyword">this</span>.getStyle().getPropertyValue(<span class="string">'height'</span>);</div><div class="line">                (<span class="keyword">typeof</span> h == <span class="string">'number'</span>) &amp;&amp; (h = h + <span class="string">'px'</span>);</div><div class="line">                <span class="keyword">this</span>.obj.style.height = h;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">            &#125; ,</div><div class="line">            </div><div class="line">            <span class="comment">/** 设置或者拿到宽度 */</span> </div><div class="line">            width : <span class="function"><span class="keyword">function</span>(<span class="params">w</span>)</span>&#123;</div><div class="line">                <span class="keyword">if</span>(!w) <span class="keyword">return</span> <span class="keyword">this</span>.getStyle().getPropertyValue(<span class="string">'width'</span>);</div><div class="line">                (<span class="keyword">typeof</span> w == <span class="string">'number'</span>) &amp;&amp; (w = w + <span class="string">'px'</span>);</div><div class="line">                <span class="keyword">this</span>.obj.style.width = w;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">            &#125; ,</div><div class="line">            </div><div class="line">            <span class="comment">/** 设置自定义样式 */</span></div><div class="line">            css : <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">                <span class="keyword">if</span>(!obj) <span class="keyword">return</span>;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> obj)&#123;</div><div class="line">                    <span class="comment">//console.log(key + '=========' + obj[key]);</span></div><div class="line">                    <span class="keyword">this</span>.obj.style[key] = <span class="keyword">typeof</span> obj[key] === <span class="string">'number'</span> ? obj[key] + <span class="string">'px'</span> : obj[key];</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">            &#125; ,</div><div class="line">            </div><div class="line">            <span class="comment">/** 设置放大 倍数*/</span></div><div class="line">            scale : <span class="function"><span class="keyword">function</span>(<span class="params">scaleNumber</span>)</span>&#123;</div><div class="line">                <span class="keyword">this</span>.css(&#123;</div><div class="line">                    <span class="attr">scale</span> : scaleNumber</div><div class="line">                &#125;);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">            &#125; ,</div><div class="line">            </div><div class="line">            </div><div class="line">            <span class="attr">hasClass</span> : <span class="function"><span class="keyword">function</span>(<span class="params">cls</span>) </span>&#123;  </div><div class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.obj.className.match(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'(\\s|^)'</span> + cls + <span class="string">'(\\s|$)'</span>));  </div><div class="line">            &#125;  ,</div><div class="line">            </div><div class="line">            <span class="attr">addClass</span> : <span class="function"><span class="keyword">function</span>(<span class="params">cls</span>)</span>&#123;</div><div class="line">                <span class="keyword">if</span> (!<span class="keyword">this</span>.hasClass(cls)) <span class="keyword">this</span>.obj.className += <span class="string">" "</span> + cls;  </div><div class="line">            &#125; ,</div><div class="line">            </div><div class="line">            <span class="attr">removeClass</span> : <span class="function"><span class="keyword">function</span>(<span class="params">cls</span>) </span>&#123;  </div><div class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.hasClass(cls)) &#123;  </div><div class="line">                    <span class="comment">//console.log(this.obj);</span></div><div class="line">                    <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'(\\s|^)'</span> + cls + <span class="string">'(\\s|$)'</span>);  </div><div class="line">                    <span class="keyword">this</span>.obj.className = <span class="keyword">this</span>.obj.className.replace(reg, <span class="string">' '</span>);  <span class="comment">//修正bug，之前右边少了一个this</span></div><div class="line">                &#125;  </div><div class="line">            &#125; ,</div><div class="line">            </div><div class="line">            <span class="attr">toggleClass</span> : <span class="function"><span class="keyword">function</span>(<span class="params">cls</span>)</span>&#123;  </div><div class="line">                <span class="keyword">if</span>(<span class="keyword">this</span>.hasClass(cls))&#123;  </div><div class="line">                    <span class="keyword">this</span>.removeClass(cls);  </div><div class="line">                &#125;<span class="keyword">else</span>&#123;  </div><div class="line">                    <span class="keyword">this</span>.addClass(cls);  </div><div class="line">                &#125;  </div><div class="line">            &#125;  ,</div><div class="line">            </div><div class="line">            </div><div class="line">            </div><div class="line">            <span class="comment">// ------------------------ 动画 相关 ---------------------------------//</span></div><div class="line">            </div><div class="line">            <span class="comment">//TODO</span></div><div class="line">            animate : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                </div><div class="line">            &#125; ,</div><div class="line">            </div><div class="line">            <span class="comment">// ------------------------ 事件相关 ---------------------------------//</span></div><div class="line">            </div><div class="line">            on : <span class="function"><span class="keyword">function</span>(<span class="params">eventName,callback</span>)</span>&#123;</div><div class="line">                <span class="keyword">var</span> $<span class="keyword">this</span> = <span class="keyword">this</span>;</div><div class="line">                <span class="keyword">this</span>.obj[<span class="string">'on'</span> + eventName] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                    callback.call($<span class="keyword">this</span>,$<span class="keyword">this</span>.obj); <span class="comment">//context指向$this，参数传入dom对象</span></div><div class="line">                &#125;;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">            &#125; ,</div><div class="line">            </div><div class="line">            <span class="comment">// ------------------------ 属性相关 ---------------------------------//</span></div><div class="line">            </div><div class="line">            attr : <span class="function"><span class="keyword">function</span>(<span class="params">attr</span>)</span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.obj.attributes[attr];</div><div class="line">            &#125; ,</div><div class="line">            </div><div class="line">            </div><div class="line">            <span class="comment">// ------------------------ ajax相关 ---------------------------------//</span></div><div class="line">            </div><div class="line">            ajax : <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">                <span class="keyword">var</span> defaults = &#123;</div><div class="line">                    <span class="attr">type</span> : <span class="string">'post'</span> ,</div><div class="line">                    <span class="attr">data</span> : &#123;&#125; ,</div><div class="line">                    <span class="attr">success</span> : <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">                        </div><div class="line">                    &#125;</div><div class="line">                &#125;;</div><div class="line">                </div><div class="line">                </div><div class="line">                <span class="comment">// 创建一个ajax对象</span></div><div class="line">                <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">                <span class="comment">//开始和后台的upload.jsp页面进行交换</span></div><div class="line">                xhr.open(<span class="string">"post"</span>, basePath+<span class="string">"/upload/file.do"</span>, <span class="literal">true</span>);</div><div class="line">                <span class="comment">//上传成功进入的毁掉函数</span></div><div class="line">                xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                    <span class="keyword">if</span>(xhr.readyState==<span class="number">4</span> &amp;&amp; xhr.status==<span class="number">200</span>)&#123;<span class="comment">//状态4和200代表和服务器端交互成功</span></div><div class="line">                        <span class="comment">//获取上传成功的返回数据</span></div><div class="line">                        <span class="keyword">var</span> data = xhr.responseText.trim();</div><div class="line">                        <span class="keyword">var</span> jdata = <span class="built_in">eval</span>(<span class="string">"("</span>+data+<span class="string">")"</span>);</div><div class="line">                        jdata[<span class="string">"target"</span>]=uploadTo;</div><div class="line">                        tz_uploadsuccess($(uploadTo),jdata);</div><div class="line">                    &#125;</div><div class="line">                &#125;;</div><div class="line">                <span class="comment">//监听文件上传的进度</span></div><div class="line">                xhr.upload.addEventListener(<span class="string">"progress"</span>, progressFunction, <span class="literal">false</span>);</div><div class="line">                <span class="comment">//发送文件上传的进度</span></div><div class="line">                xhr.send(form);</div><div class="line">            &#125; ,</div><div class="line">            </div><div class="line">            <span class="comment">// ------------------------ ui ---------------------------------//</span></div><div class="line">            </div><div class="line">            <span class="comment">/** 按钮 * */</span></div><div class="line">            linkbutton : <span class="function"><span class="keyword">function</span>(<span class="params">opts</span>)</span>&#123;</div><div class="line">                <span class="keyword">var</span> opts = opts || &#123;&#125;;</div><div class="line">                <span class="comment">/**添加基本样式* */</span></div><div class="line">                <span class="keyword">this</span>.addClass(<span class="string">'linkbutton'</span>);</div><div class="line">                <span class="keyword">this</span>.on(<span class="string">'mouseover'</span> , <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">                    <span class="comment">//console.log(e);</span></div><div class="line">                    <span class="keyword">this</span>.css(&#123;</div><div class="line">                        <span class="attr">backgroundColor</span>: <span class="string">'#d4ef50'</span></div><div class="line">                    &#125;);</div><div class="line">                &#125;).on(<span class="string">'mouseout'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">                    <span class="keyword">this</span>.css(&#123;</div><div class="line">                        <span class="attr">backgroundColor</span>: <span class="string">'#ac0'</span></div><div class="line">                    &#125;);</div><div class="line">                &#125;);</div><div class="line">                </div><div class="line">                opts.text &amp;&amp; (<span class="keyword">this</span>.obj.innerText = opts.text);</div><div class="line">                opts.click &amp;&amp; (<span class="keyword">this</span>.on(<span class="string">'click'</span> , opts.click));</div><div class="line">            &#125; ,</div><div class="line">            </div><div class="line">            <span class="comment">/** 数据列表 * */</span></div><div class="line">            dataGrid : <span class="function"><span class="keyword">function</span>(<span class="params">opts</span>)</span>&#123;</div><div class="line">                <span class="keyword">var</span> $<span class="keyword">this</span> = <span class="keyword">this</span>;</div><div class="line">                <span class="keyword">var</span> opts = opts || &#123;&#125;;</div><div class="line">                <span class="keyword">var</span> header = <span class="literal">null</span>; <span class="comment">//表头</span></div><div class="line">                <span class="keyword">var</span> id = <span class="literal">null</span>; <span class="comment">//grid的id，唯一</span></div><div class="line">                <span class="keyword">var</span> tb_id = <span class="literal">null</span>;</div><div class="line">                <span class="keyword">var</span> tbody_id = <span class="literal">null</span>;</div><div class="line">                <span class="keyword">var</span> count = <span class="number">0</span>; <span class="comment">//为了防止id重复</span></div><div class="line">                <span class="keyword">var</span> columns = []; <span class="comment">//存放field</span></div><div class="line">                <span class="keyword">var</span> types = [];</div><div class="line">                <span class="keyword">if</span>(!<span class="keyword">this</span>.obj.id) <span class="keyword">return</span>;</div><div class="line">                <span class="keyword">else</span> id = <span class="keyword">this</span>.obj.id;</div><div class="line">                </div><div class="line">                <span class="keyword">if</span>(!opts.header) <span class="keyword">return</span>;</div><div class="line">                <span class="keyword">else</span> header = opts.header;</div><div class="line">                </div><div class="line">                <span class="comment">/**添加基本样式* */</span></div><div class="line">                <span class="keyword">this</span>.addClass(<span class="string">'tableBox'</span>);</div><div class="line">                </div><div class="line">                <span class="comment">//初始化表头</span></div><div class="line">                <span class="function"><span class="keyword">function</span> <span class="title">initHeader</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                    <span class="keyword">var</span> time = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</div><div class="line">                    tb_id = <span class="string">'mui-table_'</span> + time + <span class="string">'_'</span> + count++;</div><div class="line">                    <span class="keyword">var</span> html = <span class="string">" &lt;table id='"</span>+tb_id+<span class="string">"'&gt;&lt;thead&gt;"</span> ;</div><div class="line">                    </div><div class="line">                    <span class="comment">//拼接表头</span></div><div class="line">                    html += <span class="string">'&lt;tr&gt;'</span> ;</div><div class="line">                    header.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</div><div class="line">                        columns.push(item.field); <span class="comment">//添加字段名</span></div><div class="line">                        types.push(item.type);    <span class="comment">//添加列类型</span></div><div class="line">                        <span class="keyword">var</span> width = <span class="literal">null</span>;</div><div class="line">                        <span class="keyword">if</span>(item.width) width = item.width + <span class="string">'px'</span>; <span class="comment">//设置宽度</span></div><div class="line">                        <span class="keyword">if</span>(width) width = <span class="string">"width='"</span>+width+<span class="string">"' "</span>;</div><div class="line">                        html += <span class="string">"&lt;th "</span>+width+<span class="string">"&gt;"</span> + item.name + <span class="string">'&lt;/th&gt;'</span></div><div class="line">                    &#125;);</div><div class="line">                    tbody_id = <span class="string">'mui-table-tbody_'</span> + time + <span class="string">'_'</span> + count++;</div><div class="line">                    html += <span class="string">"&lt;/tr&gt;&lt;/thread&gt;&lt;tbody id='"</span>+tbody_id+<span class="string">"'&gt;&lt;/tbody&gt;"</span> ;</div><div class="line">                    html += <span class="string">'&lt;/table&gt;'</span> ;</div><div class="line">                    </div><div class="line">                    $<span class="keyword">this</span>.obj.innerHTML = html;</div><div class="line">                &#125;</div><div class="line">                </div><div class="line">                </div><div class="line">                <span class="comment">//</span></div><div class="line">                initHeader();</div><div class="line">                </div><div class="line">                <span class="keyword">return</span> &#123;</div><div class="line">                    <span class="attr">tbody_id</span> : tbody_id ,</div><div class="line">                    <span class="attr">allData</span> : <span class="literal">null</span> ,</div><div class="line">                    <span class="attr">ids</span> : [], <span class="comment">//保存每一行的id</span></div><div class="line">                    index : <span class="number">0</span>,<span class="comment">//作为行号和id</span></div><div class="line">                    <span class="comment">//加载数据</span></div><div class="line">                    load : <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">                        <span class="keyword">this</span>.allData = data;</div><div class="line">                        <span class="keyword">var</span> html = <span class="string">''</span>;</div><div class="line">                        <span class="comment">//console.log($('#' + tbody_id));</span></div><div class="line">                        <span class="keyword">var</span> len = data.length; <span class="comment">//总行数</span></div><div class="line">                        <span class="keyword">var</span> columnSize = columns.length;<span class="comment">//总列数</span></div><div class="line">                        <span class="comment">//alert(len);</span></div><div class="line">                        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; len ; i++)&#123;</div><div class="line">                            <span class="keyword">this</span>.ids.push(<span class="string">'mui-dataGrid-tr_'</span> + ( <span class="keyword">new</span> <span class="built_in">Date</span>().getTime() ) + <span class="string">'_'</span> + <span class="keyword">this</span>.index++) ;</div><div class="line">                            <span class="comment">//console.log(this.ids[this.index - 1]);</span></div><div class="line">                            <span class="comment">//console.log(this.ids[this.index - 1].substring(this.ids[this.index - 1].length - 1 )); //获取行号</span></div><div class="line">                            html += <span class="string">"&lt;tr id='"</span>+<span class="keyword">this</span>.ids[<span class="keyword">this</span>.index - <span class="number">1</span>]+<span class="string">"'&gt;"</span>; <span class="comment">/*之前在这里少了一个单引号，最终显示的数据只有全部的一半，现在已经更正*/</span></div><div class="line">                            <span class="comment">//遍历列</span></div><div class="line">                            <span class="comment">//console.log(types);</span></div><div class="line">                            <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; columnSize ; j++)&#123;</div><div class="line">                                <span class="keyword">var</span> columnName = columns[j];</div><div class="line">                                <span class="keyword">if</span>(data[i][columnName])&#123;</div><div class="line">                                    html += <span class="string">'&lt;td&gt;'</span> + data[i][columnName] + <span class="string">'&lt;/td&gt;'</span>;</div><div class="line">                                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(types[j] == <span class="string">'checkColumn'</span>)&#123;</div><div class="line">                                    html += <span class="string">'&lt;td&gt;&lt;input type="checkbox" value=""/&gt;&lt;/td&gt;'</span>;</div><div class="line">                                &#125;<span class="keyword">else</span> &#123;</div><div class="line">                                    html += <span class="string">'&lt;td&gt;&lt;/td&gt;'</span>;</div><div class="line">                                &#125;</div><div class="line">                                </div><div class="line">                            &#125;</div><div class="line">                            <span class="comment">//列遍历完后，这一行才结束</span></div><div class="line">                            html += <span class="string">'&lt;/tr&gt;'</span></div><div class="line">                            </div><div class="line">                        &#125;</div><div class="line">                        </div><div class="line">                        <span class="comment">//展示数据</span></div><div class="line">                        win.$(<span class="string">'#'</span> + <span class="keyword">this</span>.tbody_id).obj.innerHTML = html;</div><div class="line">                        </div><div class="line">                        <span class="comment">//给每一行添加事件</span></div><div class="line">                        <span class="keyword">this</span>.ids.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">rowId</span>)</span>&#123;</div><div class="line">                            win.$(<span class="string">'#'</span> + rowId).on(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                                <span class="keyword">this</span>.toggleClass(<span class="string">'selected'</span>);</div><div class="line">                                <span class="keyword">if</span>(<span class="keyword">this</span>.hasClass(<span class="string">'selected'</span>))&#123;</div><div class="line">                                    <span class="keyword">this</span>.obj.getElementsByTagName(<span class="string">'input'</span>)[<span class="number">0</span>].checked = <span class="literal">true</span>;</div><div class="line">                                &#125;<span class="keyword">else</span> &#123;</div><div class="line">                                    <span class="keyword">this</span>.obj.getElementsByTagName(<span class="string">'input'</span>)[<span class="number">0</span>].checked = <span class="literal">false</span>;</div><div class="line">                                &#125;</div><div class="line">                            &#125;);</div><div class="line">                        &#125;);</div><div class="line">                        </div><div class="line">                        </div><div class="line">                            </div><div class="line">                    &#125; ,</div><div class="line">                    </div><div class="line">                    <span class="comment">//获取所有数据</span></div><div class="line">                    getData : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                        <span class="keyword">return</span> <span class="keyword">this</span>.allData;</div><div class="line">                    &#125; ,</div><div class="line">                    </div><div class="line">                    <span class="comment">//根据行号获取某一行</span></div><div class="line">                    </div><div class="line">                    getRow : <span class="function"><span class="keyword">function</span>(<span class="params">rowIndex</span>)</span>&#123;</div><div class="line">                        <span class="keyword">return</span> <span class="keyword">this</span>.getData()[rowIndex];</div><div class="line">                    &#125; ,</div><div class="line">                    </div><div class="line">                    <span class="comment">//获取所有的行号</span></div><div class="line">                    getSize : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                        <span class="keyword">var</span> len = <span class="number">0</span>;</div><div class="line">                        <span class="keyword">this</span>.getSelected &amp;&amp; (len = <span class="keyword">this</span>.getSelected().length) ;</div><div class="line">                        <span class="keyword">return</span> len;</div><div class="line">                    &#125; ,</div><div class="line">                    </div><div class="line">                    <span class="comment">//返回选中的行，一条或者多条</span></div><div class="line">                    getSelected : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">                        <span class="keyword">var</span> rows = win.$(<span class="string">'.selected'</span>).obj; <span class="comment">//获取所有选中行</span></div><div class="line">                        <span class="keyword">var</span> len = <span class="number">0</span>;</div><div class="line">                        len = rows.length;</div><div class="line">                        <span class="keyword">var</span> arr = [];</div><div class="line">                        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; len;i++)&#123;</div><div class="line">                            <span class="comment">//console.log(rows[i].id.substring(rows[i].id.length - 1));</span></div><div class="line">                            arr.push(<span class="keyword">this</span>.getRow(rows[i].id.split(<span class="string">'_'</span>)[<span class="number">2</span>])) ;</div><div class="line">                        &#125;</div><div class="line">                        </div><div class="line">                        arr.length == <span class="number">1</span> &amp;&amp; ( arr = arr[<span class="number">0</span>] );</div><div class="line">                        </div><div class="line">                        <span class="keyword">return</span> arr;</div><div class="line">                        </div><div class="line">                        <span class="comment">//this.ids[this.index - 1].substring(this.ids[this.index - 1].length - 1 )</span></div><div class="line">                    &#125;</div><div class="line">                    </div><div class="line">                    </div><div class="line">                    </div><div class="line">                    </div><div class="line">                &#125;;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">            </div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    win.$ = miniQuery;</div><div class="line">    </div><div class="line">    win.mui = &#123;</div><div class="line">        <span class="attr">get</span> : <span class="function"><span class="keyword">function</span>(<span class="params">sel</span>)</span>&#123;</div><div class="line">            <span class="keyword">return</span> miniQuery(sel);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;)(<span class="built_in">window</span>);</div></pre></td></tr></table></figure>
<p>附录B mui.css</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.linkbutton</span> &#123;</div><div class="line">    <span class="attribute">padding</span>: .<span class="number">4em</span> .<span class="number">9em</span>; <span class="comment">/*em的好处就是随着父元素的字体大小而变化，当该元素的字体变化时，会自适应*/</span></div><div class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">rgba</span>(0,0,0,.1);</div><div class="line">    <span class="attribute">background-color</span>: <span class="number">#ac0</span>;</div><div class="line">    <span class="attribute">border-radius</span>: .<span class="number">2em</span>;</div><div class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">5px</span> <span class="built_in">rgba</span>(0,0,0,.5);</div><div class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</div><div class="line">    <span class="attribute">text-shadow</span>: <span class="number">0</span> -.<span class="number">06em</span> .<span class="number">24em</span> <span class="built_in">rgba</span>(0,0,0,.5); <span class="comment">/*将阴影设置为半透明，就无所谓底色了，都能很好地适应*/</span></div><div class="line">    <span class="attribute">font-size</span>: <span class="number">130%</span>; </div><div class="line">    <span class="attribute">line-height</span>: <span class="number">1.5</span>; <span class="comment">/*行高是字号的1.5倍*/</span></div><div class="line">    <span class="attribute">display</span>:inline-block;</div><div class="line">    <span class="attribute">cursor</span>:pointer;</div><div class="line">    <span class="attribute">font-family</span>: <span class="string">"微软雅黑"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.tableBox</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">1200px</span>;</div><div class="line">    <span class="attribute">background</span>:<span class="number">#f9f9f9</span>;</div><div class="line">    <span class="attribute">margin</span>:<span class="number">20px</span> auto <span class="number">0</span>;</div><div class="line">    <span class="attribute">padding</span>:<span class="number">6px</span>;</div><div class="line">    <span class="attribute">position</span>:relative;</div><div class="line">    <span class="attribute">font-family</span>: 微软雅黑;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.tableBox</span> <span class="selector-tag">table</span>&#123;</div><div class="line">    <span class="attribute">width</span>:<span class="number">100%</span>;</div><div class="line">    <span class="attribute">border</span>:<span class="number">2px</span> solid <span class="number">#fff</span>;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.tableBox</span> <span class="selector-tag">table</span> <span class="selector-tag">tr</span> &#123;</div><div class="line">    <span class="attribute">border-collapse</span>: separate;   </div><div class="line">    <span class="attribute">border-spacing</span>: <span class="number">1px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*选中行*/</span></div><div class="line"><span class="selector-class">.tableBox</span> <span class="selector-tag">table</span> <span class="selector-tag">tr</span><span class="selector-class">.selected</span> &#123;</div><div class="line">    <span class="attribute">background</span>:<span class="number">#cce4f3</span>;</div><div class="line">&#125; </div><div class="line"></div><div class="line"><span class="comment">/*表头*/</span></div><div class="line"><span class="selector-class">.tableBox</span>  <span class="selector-tag">th</span>&#123;  </div><div class="line">    <span class="attribute">background</span>: <span class="number">#eaeaea</span>;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">6px</span>;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#666</span>;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.tableBox</span>  <span class="selector-tag">td</span> &#123;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">13px</span>;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">4px</span> <span class="number">10px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>毕竟是自己DIY出来的，所以没仔细测试，肯定还有一些BUG。不过不管怎么说，都算是一次尝试吧，呵呵。</p>
<p>转自<a href="http://www.cnblogs.com/skyblue-li/p/6010625.html" target="_blank" rel="external">http://www.cnblogs.com/skyblue-li/p/6010625.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;在之前的章节中，我们已经不依赖jQuery，单纯地用JavaScript封装了很多方法，这个时候，你一定会想，这些经常使用的方法能不能单独整理成一个js文件呢？&lt;/p&gt;
&lt;p&gt;当然可以，封装本来就是干这个用的。放在一个单独js文件里固然不错，其实我们也可以单独整一个js类库，一方面可以锻炼一下自己封装方法的能力，另一方面，也可以将自己学到的东西做一个整理。&lt;/p&gt;
&lt;p&gt;出于这个目的，本文将介绍如何封装一个简单的js类库。（当然，只是开一个头，熟悉一下js基础而已。实际使用的话我感觉完全没有必要，因为jQuery已经很强大了，直接使用第三方的就可以）&lt;/p&gt;
    
    </summary>
    
      <category term="码路刺客" scheme="http://c-xuan.com/categories/%E7%A0%81%E8%B7%AF%E5%88%BA%E5%AE%A2/"/>
    
    
      <category term="转载" scheme="http://c-xuan.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="JavaScript" scheme="http://c-xuan.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>为什么ETL任务困难</title>
    <link href="http://c-xuan.com/2016/10/15/WhyDifficultOnETLJob/"/>
    <id>http://c-xuan.com/2016/10/15/WhyDifficultOnETLJob/</id>
    <published>2016-10-15T15:04:05.000Z</published>
    <updated>2016-10-15T15:12:08.871Z</updated>
    
    <content type="html"><![CDATA[<h3 id="工具繁多"><a href="#工具繁多" class="headerlink" title="工具繁多"></a>工具繁多</h3><p>从 DataStage到Kettle, ETL 工具覆盖了商业化领域和开源领域, 价格从几十万到免费,起码有几十种选择。</p>
<p>有人要说了,选择多不是一件好事么?如果再早几年,我会同意这是好事,可到现在,我要说 NO!</p>
<p>前面关于决策思维的博文提到一个论点:相比于普通人做出决策,专家是会直接给一种可行方案还是罗列众多方案类比优劣?</p>
<p>答案是前者,也是我反对选择众多是好事这一论点的依据之一。</p>
<a id="more"></a>
<h4 id="那么选择多有什么坏处"><a href="#那么选择多有什么坏处" class="headerlink" title="那么选择多有什么坏处?"></a>那么选择多有什么坏处?</h4><ul>
<li>基础方案混杂。各公司方案不同,甚至一个公司 ETL 环节也采用不同工具及架构,人才无法公用,维护成本高。</li>
<li>数据项目失败案例远多于成功案例, 项目选型越复杂成功概率越低。大量公司做 BI、做大数据,甚至在没有人懂的情况下招人开工!事实上在数据领域,熟手都清楚一个现象,没有成功案例的人很难做成数据项目。很残忍的现实,但也让那些盲目投入资源跟风做项目的公司考虑冷静下来了。</li>
<li>抬高实施门槛。现在大家都想做数据,进入大数据领域,尤其是有很多不具备该领域经验的公司想要做。那么实施前首先就是选型了,如果从三个产品选一个来做还可行的话,那么要从三十个产品中选型,这个工作本身就阻碍了数据项目的开展!</li>
</ul>
<h3 id="GUI工具"><a href="#GUI工具" class="headerlink" title="GUI工具"></a>GUI工具</h3><p>说到这里反对的朋友更多了,GUI 所见即所得,降低使用门槛,好处一页都写不完,作为一名数据领域从业者,我决然反对,自己都能感觉到火药味。 为了论证我的观点,这里要罗列ETL领域那些GUI的罪证了。</p>
<h4 id="ETL工具的六大问题"><a href="#ETL工具的六大问题" class="headerlink" title="ETL工具的六大问题"></a>ETL工具的六大问题</h4><ul>
<li>工具太大了,卡卡卡!我不是说 SSIS 之类,也不是说 Kettle 相关,我说的是他们所有人……</li>
<li>好用的太贵, 便宜的不好用!</li>
<li>组件式的拖拉开发,性能真的没法起来!尤其是那些依靠组件解决数据变化提取的兄弟们,你们想多了。</li>
<li>我需要一包厕纸而已,你非要给我整个超市。在我蹲之前非得找遍整个超市!大家对比下里面的功能自己使用的比率。</li>
<li>说 GUI 简单好用的,我强烈反对。GUI 好调试么?映射过程报错了大家要怎么办?检查源检查目标也就算了,连映射环节都要排查。除了自己设定的格式类型,还要考虑工具环节自己的转换类型,这不是增加负担么?</li>
<li>部署,我都不想说部署了。一千个任务下来,ETL 工具别谈部署了!这时候有同学开始研究调度,有些关注数据质量,任务数量起来,想什么都是多的,保佑这混乱情况别出岔子就阿弥陀佛了。</li>
</ul>
<h3 id="ETL工具阻碍了设计"><a href="#ETL工具阻碍了设计" class="headerlink" title="ETL工具阻碍了设计"></a>ETL工具阻碍了设计</h3><ul>
<li>直接用工具拉数据的项目,认真找找有没有架构设计,有没有项目文档,有没有扩展性考虑,性能考虑?或者简单点,这项目换人可能接手下来么?</li>
<li>数据项目是团队项目,ETL 工具是个人化工具。如果多个成员不能无缝接替工作,对不起,我认为这不是数据项目。哦不对,不算是一个项目。</li>
<li>组件报错是工具问题,转换异常跟自己没关系。工具的 bug 和我真没关系,我项目做得好好的,ETL 工具崩溃了管我什么事?遇到这种情况不说我也知道做法,崩溃了再起来跑一跑嘛,运气好数据就跑出来了。至于数据质量管理是什么这样的问题,就别问出来了。</li>
</ul>
<p>转自<br><a href="http://www.infotrim.cn/article/5" target="_blank" rel="external">http://www.infotrim.cn/article/5</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;工具繁多&quot;&gt;&lt;a href=&quot;#工具繁多&quot; class=&quot;headerlink&quot; title=&quot;工具繁多&quot;&gt;&lt;/a&gt;工具繁多&lt;/h3&gt;&lt;p&gt;从 DataStage到Kettle, ETL 工具覆盖了商业化领域和开源领域, 价格从几十万到免费,起码有几十种选择。&lt;/p&gt;
&lt;p&gt;有人要说了,选择多不是一件好事么?如果再早几年,我会同意这是好事,可到现在,我要说 NO!&lt;/p&gt;
&lt;p&gt;前面关于决策思维的博文提到一个论点:相比于普通人做出决策,专家是会直接给一种可行方案还是罗列众多方案类比优劣?&lt;/p&gt;
&lt;p&gt;答案是前者,也是我反对选择众多是好事这一论点的依据之一。&lt;/p&gt;
    
    </summary>
    
      <category term="BI墨客" scheme="http://c-xuan.com/categories/BI%E5%A2%A8%E5%AE%A2/"/>
    
    
      <category term="转载" scheme="http://c-xuan.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="BI" scheme="http://c-xuan.com/tags/BI/"/>
    
      <category term="数据仓库" scheme="http://c-xuan.com/tags/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>从大数据负责人招聘看决策思维</title>
    <link href="http://c-xuan.com/2016/10/15/DecisionThoughtOnBigdata/"/>
    <id>http://c-xuan.com/2016/10/15/DecisionThoughtOnBigdata/</id>
    <published>2016-10-15T14:45:07.000Z</published>
    <updated>2016-10-15T14:59:06.346Z</updated>
    
    <content type="html"><![CDATA[<h3 id="决策是非理性的"><a href="#决策是非理性的" class="headerlink" title="决策是非理性的"></a>决策是非理性的</h3><p>我们受到的教育是要理性思考,理性决策,信奉理性至上的思维模式。可惜的是现实并非如此,绝大多数的决策都是采用自然主义决策方式,而情景模拟又是其主流方法。对此感兴趣的朋友建议查看亚马逊近期榜单作品《如何做出正确决策:直击决策真相》了解更多。</p>
<p>简而言之,无论是紧迫条件的救火队员还是军事要务的重大决定,决策的真相都如同我们前面介绍的方式:脑海中假设一条可行道路,一步步证明它是可行的。</p>
<p>说到专家和普通决策的区别,大家还是要注意这个真相:专家决策都是迅速定下一条可行方案,而非拿出多套方案理性对比! </p>
<a id="more"></a>
<h3 id="大数据负责人的要求是什么"><a href="#大数据负责人的要求是什么" class="headerlink" title="大数据负责人的要求是什么"></a>大数据负责人的要求是什么</h3><h4 id="有成功大数据经验"><a href="#有成功大数据经验" class="headerlink" title="有成功大数据经验"></a>有成功大数据经验</h4><p>大家要注意,我举证论据,至少都是讲三点的,可我这里只给出一条。 经常查看此类招聘的朋友很容易看出来,另外两点因素是职业素养和对大数据生态的理解,我完全同意这个看法,但此处认为和我举证这一点比,其他的都完全不是问题。</p>
<h5 id="为什么要有成功大数据经验"><a href="#为什么要有成功大数据经验" class="headerlink" title="为什么要有成功大数据经验?"></a>为什么要有成功大数据经验?</h5><ul>
<li>1.因为招聘你去的地方通常是没有成功经验的,不然要你去干吗?</li>
<li>2.具备成功大数据经验的人真的很少! 这里大家应该慎重考虑下,基于这个观点,跳槽、换团队是大忌。为什么?因为如果你已经有成功经验,机会根本不是问题。而你不幸没有成功经验,跳槽、换团队都不能解决你成功经验的问题。</li>
<li>3.大数据项目的成功,不会只有一个人,但会取决于核心人物。好好珍惜现有团队,做成项目,并且不要说不懂其他同事的工作。大数据本来就是融合型工作,你永远只会自己做的一块,就不要费时间争取负责人的角色了。</li>
</ul>
<h5 id="为什么工作素养和-hadoop-等生态理解不重要"><a href="#为什么工作素养和-hadoop-等生态理解不重要" class="headerlink" title="为什么工作素养和 hadoop 等生态理解不重要?"></a>为什么工作素养和 hadoop 等生态理解不重要?</h5><p>这个问题起码要说三点:</p>
<ul>
<li>1.工作素养大部分都能做得很好,极少成为个人瓶颈不是吗?难道不是吗?</li>
<li>2.面试要求的 hadoop、spark、storm……这些不是招聘者的本质要求,招聘你去的真正需求是能将项目做出来,做成功。至于这些细节技术方案,面试者有多少人懂得?再说了,开源系统版本迭代那么快,完全依靠这些方案要踩多少坑招聘者哪里知道?不仅如此,作为负责人是要规避让企业踩坑才合格!</li>
<li>3.我看到好多人转向大数据,学 python 又学 R, 学 Java 又学 Scala, 学数据库又学数据仓库。这样的做法可行吗? 真心奉劝停下来冷静思考下!</li>
</ul>
<p>大数据是团队项目,不是单兵作战! 再说了,等你把所有学完, 企业等的花儿都谢了好么? 随便学一个感兴趣的, 找到工作再一步步深入, 各种大会、各种社区适合有经验的人、有方法的人,这些场景只要记住大家推荐的书籍回来好好学任务就完成了。</p>
<h3 id="补偿机制的使用"><a href="#补偿机制的使用" class="headerlink" title="补偿机制的使用"></a>补偿机制的使用</h3><p>我们常说:”打一个耳光给一个苹果”,是不是耳光就没那么疼了?</p>
<p>这不止是一个心理现象,在面试大数据负责人这样重要岗位时一样可以用于决策。</p>
<p>通常我们做出决策时,会在自己优势领域选定方案持续推进。要么成功达到目标,要么走不下去调转方向,可最终都是能完成任务的。</p>
<p>那么为什么就算是专家也会遇到放弃方案跳转方向的情况,一方面是我们的确会遇到各种未知的问题,另一个更重要的方面就是:我们每个人在多个维度都有优点,切记!</p>
<p>我们总看到话术中说:”同学你工作做得不好,但你在工作过程中表现出来的沟通能力还是很强的。”类似的情况数不胜数,与其说是心理补偿机制,倒不如说展示出我们每个人其实都不只有一个优势领域!</p>
<p>那么这和大数据负责人招聘又有什么关系呢?</p>
<ul>
<li>1.大数据负责人也是人,有长处也有短板。就算平时勤快对团队工作都了解, 涉及到每一块深度领域细节所知也是很有限的。</li>
<li>2.有限的人遇到无知的需求。这里用词不太合适,但其实很多企业寻找人才时对这个领域是一片空白的。那么提出的要求自然是互联网上随处能搜集到的岗位需求模板。虽然大家都理解每个公司、每个团队做数据都有些不同之处,但对于完全不了解行情的公司只能然并卵。除了网上找模板我也想不出更好的办法了。</li>
<li>3.有限的人要用优点补充缺点。招聘的时候发现你可视化不强,那应该展示自己数据仓库的优势了,如果发现你 hadoop 不熟,你是时候分享对 storm 的研究成果了。 大家要考虑清楚团队项目中的个人定位, 一味地追求个人什么都会,项目发展会很有限,企业也会很不放心啊。</li>
</ul>
<p>转自<br><a href="http://www.infotrim.cn/article/7" target="_blank" rel="external">http://www.infotrim.cn/article/7</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;决策是非理性的&quot;&gt;&lt;a href=&quot;#决策是非理性的&quot; class=&quot;headerlink&quot; title=&quot;决策是非理性的&quot;&gt;&lt;/a&gt;决策是非理性的&lt;/h3&gt;&lt;p&gt;我们受到的教育是要理性思考,理性决策,信奉理性至上的思维模式。可惜的是现实并非如此,绝大多数的决策都是采用自然主义决策方式,而情景模拟又是其主流方法。对此感兴趣的朋友建议查看亚马逊近期榜单作品《如何做出正确决策:直击决策真相》了解更多。&lt;/p&gt;
&lt;p&gt;简而言之,无论是紧迫条件的救火队员还是军事要务的重大决定,决策的真相都如同我们前面介绍的方式:脑海中假设一条可行道路,一步步证明它是可行的。&lt;/p&gt;
&lt;p&gt;说到专家和普通决策的区别,大家还是要注意这个真相:专家决策都是迅速定下一条可行方案,而非拿出多套方案理性对比! &lt;/p&gt;
    
    </summary>
    
      <category term="BI墨客" scheme="http://c-xuan.com/categories/BI%E5%A2%A8%E5%AE%A2/"/>
    
    
      <category term="转载" scheme="http://c-xuan.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
      <category term="BigData" scheme="http://c-xuan.com/tags/BigData/"/>
    
  </entry>
  
  <entry>
    <title>是时候管理你的知识了</title>
    <link href="http://c-xuan.com/2016/10/08/TimeForPKM/"/>
    <id>http://c-xuan.com/2016/10/08/TimeForPKM/</id>
    <published>2016-10-08T14:47:03.000Z</published>
    <updated>2016-10-09T14:48:25.335Z</updated>
    
    <content type="html"><![CDATA[<p>今天饶有兴趣的了解了PKM，深感做好PMK还真不是件容易事。从小到大，我们都说学习知识，也就说明知识并不会简单的成为自己的东西，知识在成为自己的之前的身份是信息。从信息转化为自己的知识是有一个过程，这就是自己的思考、总结、应用以及分享。</p>
<p>所以也就不难理解，从小到大，我们在学习之后要做练习，学是我们接收信息的过程，习则是引导我们进行思考然后运用的过程。现在回想起来，这一路学习知识的过程总少了一点什么，是的，我们做了很多练习，背了很多东西，然而知识在成为了自己的之后却很快又溜走了，时间长了就遗忘了是一个因素，另一个重要的因素是没有将知识管理起来的思想，他们大多成了我们脑海里的碎片，彼此没有关联。</p>
<a id="more"></a>
<p>大学时读的专业是信息管理，毕业拿了管理学士学位，现在想起来连最起码的知识管理都不会，真是惭愧。</p>
<h3 id="PKM是什么"><a href="#PKM是什么" class="headerlink" title="PKM是什么"></a>PKM是什么</h3><blockquote>
<p>个人知识管理（Personal Knowledge Management）的概念一般指个人通过工具建立知识体系并不断完善，进行知识的收集、消化吸收和创新的过程。</p>
</blockquote>
<p>说白了，PKM就是将信息转化为自己的知识后有序的存储在自己的记忆里。</p>
<h3 id="为什么需要PKM"><a href="#为什么需要PKM" class="headerlink" title="为什么需要PKM"></a>为什么需要PKM</h3><p>德鲁克说过，没有人为你负责，除了你自己，而你唯一的资本就是知识。你唯一的能力就是应用知识创造价值的能力PKM的最终目标仍然是提升自我的核心竞争力，体现知识创造价值，因此就需要再次强调了不能脱离了某个场景或领域来单独的谈个人知识管理，否则就失去了目标和方向。</p>
<p>当然放在现在这样的社会，只要你不是富二代，官二代，不愁吃穿，希望用知识的力量改变自己的人，都需要PKM吧。</p>
<h3 id="与PIM的区别"><a href="#与PIM的区别" class="headerlink" title="与PIM的区别"></a>与PIM的区别</h3><p>PIM(Personal Information Management)即个人信息管理，与个人知识管理的区别也就是信息与知识的区别了，我们每天通过网络，新闻，他人诉说接收到了很多信息，信息大爆炸的时代，获取信息对我们来说很容易，然而我们记住了多少，总结了多少，运用了多少？简单的拿来主义不会让我们沉淀多少知识，转化需要一个过程。</p>
<h3 id="怎么做PKM"><a href="#怎么做PKM" class="headerlink" title="怎么做PKM"></a>怎么做PKM</h3><p>管理需要一套方法，概括起来：</p>
<ul>
<li>1.收集信息</li>
<li>2.吸收知识</li>
<li>3.实践应用</li>
<li>4.分享探讨</li>
</ul>
<p>信息时代的今天，在每个过程中都可以采用一些信息技术工具来帮助我们管理自己的知识。目标就是将信息分类，多回顾多思考，用管理思想让知识为我们创造财富。</p>
<p>以下简单画了一个思维导图：</p>
<center><img src="/img/posts/PKM-1.gif"></center>

<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>PKM的开始可能都不完美，这中间需要一个漫长的过程，不断的实践，借鉴，迭代调整，找到适合自己的方法。愿我们都在知识的海洋中驰骋而不迷失方向。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天饶有兴趣的了解了PKM，深感做好PMK还真不是件容易事。从小到大，我们都说学习知识，也就说明知识并不会简单的成为自己的东西，知识在成为自己的之前的身份是信息。从信息转化为自己的知识是有一个过程，这就是自己的思考、总结、应用以及分享。&lt;/p&gt;
&lt;p&gt;所以也就不难理解，从小到大，我们在学习之后要做练习，学是我们接收信息的过程，习则是引导我们进行思考然后运用的过程。现在回想起来，这一路学习知识的过程总少了一点什么，是的，我们做了很多练习，背了很多东西，然而知识在成为了自己的之后却很快又溜走了，时间长了就遗忘了是一个因素，另一个重要的因素是没有将知识管理起来的思想，他们大多成了我们脑海里的碎片，彼此没有关联。&lt;/p&gt;
    
    </summary>
    
      <category term="随笔感悟" scheme="http://c-xuan.com/categories/%E9%9A%8F%E7%AC%94%E6%84%9F%E6%82%9F/"/>
    
    
      <category term="原创" scheme="http://c-xuan.com/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="知识管理" scheme="http://c-xuan.com/tags/%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>那些年，我们没有微信</title>
    <link href="http://c-xuan.com/2016/09/21/NoWeChatBefore/"/>
    <id>http://c-xuan.com/2016/09/21/NoWeChatBefore/</id>
    <published>2016-09-21T14:41:16.000Z</published>
    <updated>2016-09-22T16:15:38.594Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/posts/NoWeChatBefore-1.jpg" alt="NoWeChatBefore-1"></p>
<p>你朋友圈的第一条状态是什么时间？<br>我的第一条状态来自2012年12月6日，我是个比较愚钝的人，那天之前我用的还是诺基亚E63，红色的全键盘手机，大学男朋友送的，上学时候超酷。</p>
<a id="more"></a>
<p>后来，这部E63和送E63给我的人，都相继离开了我。但是很久以后，我还记得摁E63全键盘时候的感觉，突兀不平的小按钮如同多年来开启记忆的键盘，生硬而又真实存在的痕迹。</p>
<p><img src="/img/posts/NoWeChatBefore-2.jpg" alt="NoWeChatBefore-2"></p>
<p>2009年的时候，我们还在热衷于互踩QQ空间，每天都要去好朋友的空间留言，证明万古长青的友谊。在空间里养花藤、偷菜、开饭馆、开牧场，花着钱在学校网吧里偷菜，一个都不放过，乐此不疲。如今，我再也没勇气点开空间的农场、牧场和饭馆。我害怕看到满屏的狼藉，就如同未曾来及认真告别的青春岁月，呼啸而过的全是兵荒马乱的伤感。偶尔翻翻以前的留言板，字里行间熟悉而又陌生的炙热让自己常常自问，忙着向前奔跑的这些年到底失去了什么。</p>
<p><img src="/img/posts/NoWeChatBefore-3.jpg" alt="NoWeChatBefore-3"></p>
<p>2008年，大江南北唱的都是《北京欢迎你》。我们是在KTV《北京欢迎你》的大合唱中毕业的。那时候年轻的我们轻而易举的承诺，信誓旦旦的诉说未来，这些后来都成为了回忆里无法承受的负重。在师大田家炳教学楼九楼，我第一次有了自己的人人网账号，那时候人人网还叫校内网。每天刷不完的分享，各种视频、各种图集、各种文章。现在手机里还有人人网的客户端，偶尔登录也不过是抱着侥幸想法去看看，不存在于微信好友，又屏蔽了QQ空间动态的当日同窗会不会在人人网上更新状态。只是想知道你过得好，记忆似乎都少了些尘土的味道。只可惜尘封不动的人人网，只有自己偶尔的自娱自乐。就如同这些年来，念念不忘只不过是自己对岁月的藕断丝连，有点孤单，有点荒芜。</p>
<p><img src="/img/posts/NoWeChatBefore-4.jpg" alt="NoWeChatBefore-4"></p>
<p>2010年，有一个软件叫飞信。用飞信互加了好友，发信息不要钱。它比QQ方便，我们曾经的塞班系统里，都有这个软件。我们用飞信一起约上课、约逛街、约吃饭。即使它会偶尔系统延缓，没有及时收到信息，我们仍然执着的使用它。远远不如现在微信便捷的飞信那头，却永远都有一个人给你回音。你哭你笑，身边都有一帮吵吵闹闹，不离不弃的伙伴。大学时候宿舍的老小，每个月包免费短信、免费语音最多的套餐，和异地的男朋友煲电话粥，一打就好几个小时。宿舍的灯都熄了很久，她才会回来，带着笑意或者泪水。现在她快结婚了，新郎不是那个愿意每日在深夜里陪着她讲好几个小时电话的男孩。我们也只能笑着去释怀，一起度过的青春，谁都不亏欠谁，因为青春就是用来怀念的。</p>
<p><img src="/img/posts/NoWeChatBefore-5.jpg" alt="NoWeChatBefore-5"></p>
<p>2016年，距离那些年已经过去很久，16岁的高中也好，19岁的大学也罢。在频频回首之间，已无当年。来时的路，一直走一直失去，在没有意识到的青春。失去的除了童年那个有很多件花裙子的洋娃娃，除了信誓旦旦说着友谊万古长青的好朋友，除了承诺陪伴你走到白头的初恋，除了朝夕相处憧憬梦想的同窗，还有那颗曾经永远不知忧愁烦恼的快乐的心。慢慢的，心里什么都没有了就像没有了痛苦。<br>我们在朋友圈写下，最近生活很糟，想了三十秒，删除。发呆五分钟后，重新打了一个微笑的表情，不到十分钟，收到几十个赞。拉出来一个曾经的好友，发送最近好吗？三十分钟后，收到回复，恩。<br>宁愿拉上窗帘躲在被子里睡一觉，因为再也感受不到曾经用着诺基亚手机，每日在空间偷菜，为了省钱发飞信，每月套餐内免费短信和语音都不够用的快乐。</p>
<p>文/凌云端<br>转自：<a href="http://www.5time.cn/show/25216.html" target="_blank" rel="external">http://www.5time.cn/show/25216.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/img/posts/NoWeChatBefore-1.jpg&quot; alt=&quot;NoWeChatBefore-1&quot;&gt;&lt;/p&gt;
&lt;p&gt;你朋友圈的第一条状态是什么时间？&lt;br&gt;我的第一条状态来自2012年12月6日，我是个比较愚钝的人，那天之前我用的还是诺基亚E63，红色的全键盘手机，大学男朋友送的，上学时候超酷。&lt;/p&gt;
    
    </summary>
    
      <category term="生活点滴" scheme="http://c-xuan.com/categories/%E7%94%9F%E6%B4%BB%E7%82%B9%E6%BB%B4/"/>
    
    
      <category term="转载" scheme="http://c-xuan.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>Play Framework 2.5 环境搭建与新建项目（二）</title>
    <link href="http://c-xuan.com/2016/09/21/PlayFrameworkInit2/"/>
    <id>http://c-xuan.com/2016/09/21/PlayFrameworkInit2/</id>
    <published>2016-09-21T13:18:31.000Z</published>
    <updated>2016-09-24T16:32:41.539Z</updated>
    
    <content type="html"><![CDATA[<h2 id="activator-ui-方式"><a href="#activator-ui-方式" class="headerlink" title="activator ui 方式"></a>activator ui 方式</h2><p>打开命令行窗口，输入以下命令：</p>
<pre><code>activator ui
</code></pre><a id="more"></a>    
<p><img src="/img/posts/PlayFrameworkInit-14.gif" alt="PlayFrameworkInit-14"></p>
<p>浏览器中打开一个页面，类似于一个IDE，实际上也是一个网页版的IDE。</p>
<p><img src="/img/posts/PlayFrameworkInit-11.gif" alt="PlayFrameworkInit-11"></p>
<p>选择 <code>Seeds-&gt;Play Java Seed</code>，在右下角选择项目创建到的文件夹路径，然后点 <code>Create app</code> 完成创建。 </p>
<p>在Build页面，可以看到初始化项目时引入依赖包等等。如果是首次创建项目，等待时间应该会很久，跟命令行创建过程差不多。</p>
<p><img src="/img/posts/PlayFrameworkInit-12.gif" alt="PlayFrameworkInit-12"></p>
<p>Code页面可以查看项目创建的文件结构以及编辑代码，虽说是一个开发环境，编辑代码的时候是没有提示的，不像Eclipse或者Intellij idea那么方便，在目录结构导航菜单中，可以看到一些新建文件夹和文件等菜单，对于 <code>Create Eclipse project</code> <code>Create Intellij project</code> 菜单，他们可以将你的项目转换成Eclipse或者Idea的目录结构，更好的导入。</p>
<p><img src="/img/posts/PlayFrameworkInit-13.gif" alt="PlayFrameworkInit-13"></p>
<p>在Run界面，可以启动项目，然后在浏览器中浏览项目页面，前提是Build完成。</p>
<h2 id="intellij-idea-方式"><a href="#intellij-idea-方式" class="headerlink" title="intellij idea 方式"></a>intellij idea 方式</h2><p>官网给出用Eclipse或者intellij idea的编程环境来创建和调试Play项目的方法，这里用idea, eclipse赶脚太麻烦了。我用的idea 2015的。进入设置看下</p>
<p><img src="/img/posts/PlayFrameworkInit-15.gif" alt="PlayFrameworkInit-15"></p>
<p>进入设置看下Scala和SBT两个插件是否安装了，如果没有，点击 <code>Browse repositories</code>安装一下。</p>
<p><img src="/img/posts/PlayFrameworkInit-16.gif" alt="PlayFrameworkInit-16"></p>
<h3 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h3><p>在新建项目面板中，<code>Scala-&gt;Activator</code> </p>
<p><img src="/img/posts/PlayFrameworkInit-17.gif" alt="PlayFrameworkInit-17"></p>
<p>然后下一步，填入项目名称，下面选择模板，键盘输入play java seed就会找到这个选项。下面的Project SDK就是本机的JDK环境。点击完成。</p>
<p><img src="/img/posts/PlayFrameworkInit-18.gif" alt="PlayFrameworkInit-18"></p>
<p>新建项目需要引入一些依赖包，所以很慢。</p>
<p><img src="/img/posts/PlayFrameworkInit-19.gif" alt="PlayFrameworkInit-19"></p>
<h3 id="导入项目"><a href="#导入项目" class="headerlink" title="导入项目"></a>导入项目</h3><p>选择导入项目所在文件夹。</p>
<p><img src="/img/posts/PlayFrameworkInit-20.gif" alt="PlayFrameworkInit-20"></p>
<p>项目模块选择SBT。</p>
<p><img src="/img/posts/PlayFrameworkInit-21.gif" alt="PlayFrameworkInit-21"></p>
<p>完成设置。</p>
<p><img src="/img/posts/PlayFrameworkInit-22.gif" alt="PlayFrameworkInit-22"></p>
<h3 id="启动调试"><a href="#启动调试" class="headerlink" title="启动调试"></a>启动调试</h3><p>官方给的是，在Edit Config菜单中，点击 <code>+</code> 选择SBT Task，然后Name里写个名称，Tasks里输个 <code>run</code> 就可以了。</p>
<p><img src="/img/posts/PlayFrameworkInit-25.gif" alt="PlayFrameworkInit-25"></p>
<p><img src="/img/posts/PlayFrameworkInit-26.gif" alt="PlayFrameworkInit-26"></p>
<p><img src="/img/posts/PlayFrameworkInit-23.gif" alt="PlayFrameworkInit-23"></p>
<p>但是几次启动调试都失败了，比如下面的错误，不知道啥原因。估计是有什么依赖包没下载全。</p>
<p><img src="/img/posts/PlayFrameworkInit-24.gif" alt="PlayFrameworkInit-24"></p>
<p>我们其实可以在项目文件中右键，然后在菜单中选择 <code>Run Play 2 App</code>菜单，就可以启动项目。</p>
<p><img src="/img/posts/PlayFrameworkInit-27.gif" alt="PlayFrameworkInit-27"></p>
<p>这时候在运行调试编辑中可以看到有一个Play 2 App的项目了。</p>
<p><img src="/img/posts/PlayFrameworkInit-28.gif" alt="PlayFrameworkInit-28"></p>
<p>如果信息窗口中出现以下提示信息：</p>
<p><strong>SBT compilation for play framework 2.x disabled by default</strong></p>
<p>进入File-&gt;Setting菜单，将下面选项勾选即可。</p>
<p><img src="/img/posts/PlayFrameworkInit-29.gif" alt="PlayFrameworkInit-29"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;activator-ui-方式&quot;&gt;&lt;a href=&quot;#activator-ui-方式&quot; class=&quot;headerlink&quot; title=&quot;activator ui 方式&quot;&gt;&lt;/a&gt;activator ui 方式&lt;/h2&gt;&lt;p&gt;打开命令行窗口，输入以下命令：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;activator ui
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="码路刺客" scheme="http://c-xuan.com/categories/%E7%A0%81%E8%B7%AF%E5%88%BA%E5%AE%A2/"/>
    
    
      <category term="原创" scheme="http://c-xuan.com/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="Play Framework" scheme="http://c-xuan.com/tags/Play-Framework/"/>
    
  </entry>
  
  <entry>
    <title>Play Framework 2.5 环境搭建与新建项目（一）</title>
    <link href="http://c-xuan.com/2016/09/20/PlayFrameworkInit/"/>
    <id>http://c-xuan.com/2016/09/20/PlayFrameworkInit/</id>
    <published>2016-09-19T16:40:51.000Z</published>
    <updated>2016-09-24T15:33:17.947Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Play Framework是啥？引用下百度百科的说法：</p>
<blockquote>
<p>Play！是一个full-stack（全栈的）Java Web应用框架，包括一个简单的无状态MVC模型，具有Hibernate的对象持续，一个基于Groovy的模板引擎，以及建立一个现代Web应用所需的所有东西。</p>
</blockquote>
<p>当然，这个介绍是比较旧的，对于老版本的Play!，这么说没毛病。进入<a href="https://www.playframework.com/" target="_blank" rel="external">Play!官网</a>看看，满眼的绿啊，有一股清新之感呐。版本都到<code>2.5.8</code>了。追溯1.0版本都是在2010.07.28发布的，到现在已经有6年时间了。</p>
<a id="more"></a>
<p><img src="/img/posts/PlayFrameworkInit-1.gif" alt="PlayFrameworkInit-1"></p>
<p>其实从Play!2.3.8版本开始变化就很大了，引入了<code>activator</code>,<code>typesafe</code>,<code>SBT</code>啥啥的各种东东，一开始都不大懂这些，只要知道跟之前版本相差很远就好了。这个号称是拯救Java程序员的神器，带着一颗好(zhe)奇(teng)的心开始探索一番。</p>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h3><p><img src="/img/posts/PlayFrameworkInit-2.gif" alt="PlayFrameworkInit-2"></p>
<p>进入到官网的下载界面，点击下载就可以了，一个名为<code>typesafe-activator-1.3.10-minimal.zip</code>的压缩文件，没错，这就是全部了。但是从名字里的minimal就可以看出这是个精简版的环境包，用这个有代价的噢，尤其在我大天朝。在新建项目的时候会下载各种依赖包，很多国外站点在国内访问是很慢的，所以新建项目的过程非常考验耐性。所以还是下载那个Offline Distrbution版本的，离线版本的600+M，本以为用这个离线版的会快很多，结果。。。。。。。。是谁谁应该都会吐槽，这TM不是离线的麽，下了几百兆的东西，你告我创建项目的时候还要更新和各种下载依赖包！！！！！</p>
<p>不过突然想到一个问题，人家是离线包，我在新建项目的时候是连着网的，莫非是要把网断开么！行，我等下试试。</p>
<h3 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h3><p>按正常步骤来，把下载的压缩包加压到一个目录里，比如:</p>
<p>F:\PlayFramework\typesafe-activator-1.3.10\activator-dist-1.3.10</p>
<p>然后进入到bin目录，复制地址栏的地址:</p>
<p>F:\PlayFramework\typesafe-activator-1.3.10\activator-dist-1.3.10\bin</p>
<p>把这个加到Windows的环境变量里，怎么添加我就不多讲了。</p>
<p>添加完以后，在你想创建项目的目录下空白处按住<code>Shit</code>键，然后点鼠标右键，弹出菜单选择“在此处打开命令行”弹出命令行窗口。输入<code>activator</code>命令，然后在浏览器中打开一个说明页面的话就说明环境变量添加的没问题了。</p>
<h3 id="小问题"><a href="#小问题" class="headerlink" title="小问题"></a>小问题</h3><p><img src="/img/posts/PlayFrameworkInit-3.gif" alt="PlayFrameworkInit-3"></p>
<p>关于那个系统找不到文件提示：</p>
<p><strong>ACTIVATOR_HOME=F:\PlayFramework\typesafe-activator-1.3.10\activator-dist-1.3.10<br>系统找不到文件 BIN_DIRECTORY..\conf\sbtconfig.txt。</strong></p>
<p>这个其实没啥影响，但是非要纠结的话，可以用文本编辑器看看</p>
<p>F:\PlayFramework\typesafe-activator-1.3.10\activator-dist-1.3.10\bin</p>
<p>目录下的 <strong>activator.bat</strong> 文件。找到</p>
<p><img src="/img/posts/PlayFrameworkInit-4.gif" alt="PlayFrameworkInit-4"></p>
<pre><code>set SBT_HOME=%BIN_DIRECTORY
</code></pre><p>这行，不知道是官方故意怎么干的还是马虎造成的错误，感觉少了个<code>%</code>，应该是</p>
<pre><code>set SBT_HOME=%BIN_DIRECTORY%
</code></pre><p>改成上述那样其实也会报错，因为</p>
<p>F:\PlayFramework\typesafe-activator-1.3.10\activator-dist-1.3.10\</p>
<p>路径下就没有conf文件夹，里面就没有sbtconfig.txt文件，要是真看着不舒服的话，就建一个conf文件夹，然后里面建一个sbtconfig.txt配置文件，然后把下面这段复制到文件里面：</p>
<pre><code># Set the java args to high

-Xmx512M

-XX:MaxPermSize=256m

-XX:ReservedCodeCacheSize=128m

# Set the extra SBT options

-Dsbt.log.format=true
</code></pre><h2 id="项目创建和启动"><a href="#项目创建和启动" class="headerlink" title="项目创建和启动"></a>项目创建和启动</h2><h3 id="命令行方式"><a href="#命令行方式" class="headerlink" title="命令行方式"></a>命令行方式</h3><p>下面就正式用命令行创建项目了。命令行输入</p>
<pre><code>activator new onlineTest
</code></pre><p>onlineTest是项目名称，然后稍等下会列出一些模板名称，根据个人喜好，用Java就输入5然后回车，用Scala语言写程序的就输入6然后回车，其他的我没试，不过就是创建一个项目结构目录嘛，大概差不多。</p>
<p><img src="/img/posts/PlayFrameworkInit-5.gif" alt="PlayFrameworkInit-5"></p>
<p>然后就看到F:\PlayFramework目录下多了一个文件夹，名称就是你输入的项目名称。<br>继续命令行输入 </p>
<pre><code>cd onlineTest 
</code></pre><p>切换到项目目录下，再输入 </p>
<pre><code>activator run 
</code></pre><p>就会编译项目然后启动运行服务了。</p>
<p><img src="/img/posts/PlayFrameworkInit-6.gif" alt="PlayFrameworkInit-6"></p>
<p>得说一下，因为我之前创建过项目了，换句话说该下载的依赖包都下载了，所以很快。就启动了，在浏览器输入</p>
<pre><code>localhost:9000
</code></pre><p>就可以看到界面了。</p>
<p><img src="/img/posts/PlayFrameworkInit-7.gif" alt="PlayFrameworkInit-7"></p>
<p>但是如果是第一次创建的话，而且还是在国内没有什么破墙手段的话，对不住了您呐，先沏壶茶，嗑袋瓜子，睡个午觉，那等的花都谢了。</p>
<p>一开始我还好奇，它下载的东西都哪去了，没往项目目录里下载，其实是往用户目录下的 <strong>.ivy2</strong> 和 <strong>.sbt</strong> 两个隐藏文件夹里下载了，如果你看到这两个文件夹的大小有变化，恭喜你，就是在下载依赖包的路上了。很有可能你一个午觉醒来发现瓦擦！中途网络下载超时启动失败了！那么同样恭喜你，换个网络或者同一个网络下再试几次。毕竟Play!框架嘛，有种被Play的赶脚。</p>
<p><img src="/img/posts/PlayFrameworkInit-8.gif" alt="PlayFrameworkInit-8"></p>
<p>其实我也试过像之前我说的把网络断掉，然后运行启动命令，可能还是因为我这之前下载过了依赖包，所以很快，不大清楚首次创建运行项目的时候咋样，你可以试试。</p>
<p>唉，本来想睡觉的，但是还是想好（zhe）奇（teng）下断网会怎样，我就把用户目录下的.ivy2和.sbt两个隐藏文件夹删了，然后断开网络，重新建一个offlineTest项目试试。</p>
<p><img src="/img/posts/PlayFrameworkInit-9.gif" alt="PlayFrameworkInit-9"></p>
<p>得，报错了，我输入过ignore，直接停止了，不行，我有试过last，然后看到命令行窗口刷刷刷的快速往上飘各种信息。感觉有希望啊。然后又来了一个停顿</p>
<p><img src="/img/posts/PlayFrameworkInit-10.gif" alt="PlayFrameworkInit-10"></p>
<p>继续输入last，回车后继续刷刷刷的。。。。。好久。。。。。好想睡觉。</p>
<p>又来了个停顿，输入last回车。。。。。等~等灯等灯~</p>
<p>后面又输入两次last，还没完事儿。。。。。算了睡觉!!</p>
<p>后续</p>
<p><a href="/2016/09/21/PlayFrameworkInit2">Play Framework 2.5 环境搭建与新建项目（二）</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;Play Framework是啥？引用下百度百科的说法：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Play！是一个full-stack（全栈的）Java Web应用框架，包括一个简单的无状态MVC模型，具有Hibernate的对象持续，一个基于Groovy的模板引擎，以及建立一个现代Web应用所需的所有东西。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当然，这个介绍是比较旧的，对于老版本的Play!，这么说没毛病。进入&lt;a href=&quot;https://www.playframework.com/&quot;&gt;Play!官网&lt;/a&gt;看看，满眼的绿啊，有一股清新之感呐。版本都到&lt;code&gt;2.5.8&lt;/code&gt;了。追溯1.0版本都是在2010.07.28发布的，到现在已经有6年时间了。&lt;/p&gt;
    
    </summary>
    
      <category term="码路刺客" scheme="http://c-xuan.com/categories/%E7%A0%81%E8%B7%AF%E5%88%BA%E5%AE%A2/"/>
    
    
      <category term="原创" scheme="http://c-xuan.com/tags/%E5%8E%9F%E5%88%9B/"/>
    
      <category term="Play Framework" scheme="http://c-xuan.com/tags/Play-Framework/"/>
    
  </entry>
  
</feed>

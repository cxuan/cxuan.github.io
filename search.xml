<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Jupyter notebook/nteract/Atom中配置scala交互式编程环境</title>
      <link href="2019/04/05/20190405001_atom_scala/"/>
      <url>2019/04/05/20190405001_atom_scala/</url>
      
        <content type="html"><![CDATA[<p>Jupyter notebook是一款学习和科研的神奇，相信很多小伙伴已经利用它在学术科研、研究开发的道路上收获了便捷易用、可视直观的优点。大部分时候我们都是Jupyter notebook中编写python脚本，其实，可以额外安装相关语言的Kernel，让Jupyter notebook支持交互式执行相关语言代码，本文中介绍配置运行Scala代码的过程。</p><span id="more"></span><h3 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h3><ul><li>安装<a href="https://www.scala-lang.org/download/">Scala</a>,找到<code>Other ways to install Scala</code>，选择<code>Download the Scala binaries for windows</code>，因为我是Windows 10环境，安装<code>scala-2.12.8.msi</code></li><li>安装有<a href="https://www.anaconda.com/">Anaconda</a></li><li>安装有<a href="https://atom.io/">Atom</a>,Atom中安装了<a href="https://nteract.gitbooks.io/hydrogen/">Hydrogen</a>插件</li></ul><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><h4 id="安装scala-kernel"><a href="#安装scala-kernel" class="headerlink" title="安装scala kernel"></a>安装scala kernel</h4><p>在电脑硬盘根目录创建文件夹<code>almond</code>,比如我的是<code>G:\almond</code>，进入文件夹。</p><p>按住<code>shift</code>单击鼠标右键，选择<code>在此处打开Powershell窗口</code>。</p><p>在命令行中依次执行如下命令</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">set SCALA_VERSION=<span class="number">2.12</span>.<span class="number">8</span></span><br><span class="line">set ALMOND_VERSION=0.<span class="number">4.0</span></span><br><span class="line">　　　</span><br><span class="line">bitsadmin /transfer downloadCoursierCli <span class="symbol">https:</span>/<span class="regexp">/git.io/coursier</span>-cli <span class="string">&quot;%cd%\coursier&quot;</span></span><br><span class="line">bitsadmin /transfer downloadCoursierBat <span class="symbol">https:</span>/<span class="regexp">/git.io/coursier</span>-bat <span class="string">&quot;%cd%\coursier.bat&quot;</span></span><br><span class="line">　　　</span><br><span class="line">.\coursier bootstrap -r jitpack -i user -I <span class="symbol">user:</span><span class="symbol">sh.almond:</span>scala-kernel-api_%SCALA_VERSION%<span class="symbol">:%ALMOND_VERSION%</span> <span class="symbol">sh.almond:</span>scala-kernel_%SCALA_VERSION%<span class="symbol">:%ALMOND_VERSION%</span> -o almond</span><br><span class="line">　　　</span><br><span class="line">.\almond --install</span><br></pre></td></tr></table></figure><p>上述命令会在文件夹中下载这样几个文件：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">almond</span><br><span class="line">almond.<span class="keyword">bat</span></span><br><span class="line"><span class="keyword">coursier</span></span><br><span class="line"><span class="keyword">coursier.bat</span></span><br></pre></td></tr></table></figure><p>最后提示scala-kernel成功就可以。</p><p>打开Anaconda Prompt,输入<code>jupyter kernelspec list</code>，看到已经出现scala内核了。</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(base) C:<span class="symbol">\U</span>sers<span class="symbol">\A</span>dministrator&gt;jupyter kernelspec list</span><br><span class="line">Available kernels:</span><br><span class="line">  scala       C:<span class="symbol">\U</span>sers<span class="symbol">\A</span>dministrator<span class="symbol">\A</span>ppData<span class="symbol">\R</span>oaming<span class="symbol">\j</span>upyter<span class="symbol">\k</span>ernels<span class="symbol">\s</span>cala</span><br><span class="line">  python3     E:<span class="symbol">\P</span>rogramData<span class="symbol">\A</span>naconda3<span class="symbol">\s</span>hare<span class="symbol">\j</span>upyter<span class="symbol">\k</span>ernels<span class="symbol">\p</span>ython3</span><br><span class="line">  anaconda    C:<span class="symbol">\P</span>rogramData<span class="symbol">\j</span>upyter<span class="symbol">\k</span>ernels<span class="symbol">\a</span>naconda</span><br></pre></td></tr></table></figure><h4 id="安装language-scala"><a href="#安装language-scala" class="headerlink" title="安装language-scala"></a>安装language-scala</h4><p>Atom中，进入设置界面，在安装插件界面中搜索<code>scala</code>，选择安装<code>language-scala</code>.</p><h4 id="运行代码"><a href="#运行代码" class="headerlink" title="运行代码"></a>运行代码</h4><p>创建scala为扩展名的文件，在每一行代码上按<code>shift+回车</code>键执行代码，可以看到代码后面有运行结果了。</p><center><img src="/img/posts/20190405001-01.png" alt="scala"></img></center><p>如果打开Jupyter Notebook,可以看到新建中出现Scala选项。</p><center><img src="/img/posts/20190405001-02.png" alt="scala"></img></center><p>在Notebook中就可以像写Python一样进行交互运行代码了。</p><center><img src="/img/posts/20190405001-03.png" alt="scala"></img></center><p>如果使用<a href="https://nteract.io/">nteract</a>,也是可以执行的，<a href="/2019/02/21/20190221001_nteract/">类Jupyter notebook编辑器桌面版nteract</a></p><center><img src="/img/posts/20190405001-04.png" alt="scala"></img></center><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://almond.sh/docs/quick-start-install">https://almond.sh/docs/quick-start-install</a></p>]]></content>
      
      
      <categories>
          
          <category> 码路刺客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> Atom </tag>
            
            <tag> Scala </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PDI设计转换任务</title>
      <link href="2019/03/27/20190327001_pdi_case/"/>
      <url>2019/03/27/20190327001_pdi_case/</url>
      
        <content type="html"><![CDATA[<p>Pentaho Data Integration(PDI),Kettle是PDI以前的名称.在2006年Kettle加入了开源的BI组织Pentaho,正式命名为PDI, 加入Pentaho后Kettle的发展越来越快了，并有越来越多的人开始关注它了.PDI(Kettle)是一款开源的、元数据驱动的ETL (数据的抽取、转换、加载)工具,是开源 ETL 工具里功能比较强大的一个.PDI<a href="https://community.hitachivantara.com/docs/DOC-1009855">官网</a>,最新版本为8.2.</p><p>本例用到的组件：生成随机数，增加常量，计算器，过滤记录，分组，记录关联，Excel输出。</p><span id="more"></span><h3 id="实现功能"><a href="#实现功能" class="headerlink" title="实现功能"></a>实现功能</h3><p>随机生成100个随机数，随机数取值于[0，100）之间，计算小于等于50的随机数个数和大于50的随机数个数。并把这两个统计数字放在数据库表的一行的两列中，即输出的结果有一行，一行包括两列，每列是一个统计值。</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>我使用的PDI版本为7.1.</p><h4 id="新建转换"><a href="#新建转换" class="headerlink" title="新建转换"></a>新建转换</h4><p>打开PDI中的<code>Spoon.bat</code>进入转换设计器。<code>文件-&gt;新建-&gt;转换</code>新建空白的抓换任务。<code>Ctrl+s</code>先保存名为<code>test.ktr</code>的文件。</p><h4 id="生成随机数"><a href="#生成随机数" class="headerlink" title="生成随机数"></a>生成随机数</h4><p><code>步骤-&gt;输入</code>中拖入<code>生成随机数</code>组件，双击组件，添加一行，名称为<code>rand_num</code>，类型为<code>随机数字</code>。</p><center><img src="/img/posts/20190327001-01.png" alt="PDI设计任务"></img></center><p>在组件上右键，选择<code>改变开始复制的数量</code>，因为生成100个随机数，所以输入100，但是没看到确定之类的按钮(坑爹)，直接回车就可以了。之后在组件左上角出现<code>x100</code>的标志。</p><center><img src="/img/posts/20190327001-02.png" alt="PDI设计任务"></img></center><h4 id="增加常量"><a href="#增加常量" class="headerlink" title="增加常量"></a>增加常量</h4><p><code>步骤-&gt;转换</code>中拖入<code>增加常量</code>组件，双击组件，增加两个常量。multi值设置为100，因为生成的随机数是0-1范围的，后面会将随机数x100得到一个0-100的随机整数。standard设置为50，我们将随机数分开计数是以50为分界点。</p><p>鼠标放在<code>随机数</code>组件上，按住<code>Shift</code>键，按下鼠标左键拉出一根连线到<code>增加常量</code>组件上。</p><center><img src="/img/posts/20190327001-03.png" alt="PDI设计任务"></img></center><h4 id="计算器"><a href="#计算器" class="headerlink" title="计算器"></a>计算器</h4><p><code>步骤-&gt;转换</code>中拖入<code>计算器</code>组件，双击组件，增加一个新字段，计算方式为<code>A * B</code>，分别用生成的随机数乘上multi值。</p><center><img src="/img/posts/20190327001-04.png" alt="PDI设计任务"></img></center><h4 id="分组记录"><a href="#分组记录" class="headerlink" title="分组记录"></a>分组记录</h4><p><code>步骤-&gt;流程</code>中拖入<code>过滤记录</code>组件，<code>步骤-&gt;统计</code>中拖入两个<code>分组</code>组件，过滤记录连接到分组上，连接的时候回弹出<code>Result is true</code>和<code>Result is false</code>选项。</p><center><img src="/img/posts/20190327001-05.png" alt="PDI设计任务"></img></center><p>双击过滤记录组件，添加条件。</p><center><img src="/img/posts/20190327001-06.png" alt="PDI设计任务"></img></center><p>双击设置第一个分组，计算大于等于50的个数。</p><center><img src="/img/posts/20190327001-07.png" alt="PDI设计任务"></img></center><p>双击设置第二个分组，计算小于50的个数。</p><center><img src="/img/posts/20190327001-08.png" alt="PDI设计任务"></img></center><h4 id="结果输出"><a href="#结果输出" class="headerlink" title="结果输出"></a>结果输出</h4><p><code>步骤-&gt;连接</code>中拖入<code>记录关联(笛卡尔输出)</code>组件，因为我们直接将分组结果放在一行输出，直接笛卡尔连接即可。</p><p><code>步骤-&gt;输出</code>中拖入<code>Excel输出</code>组件，记录关联组件指向Excel输出。双击<code>Excel输出</code>组件，文件名中设置为<code>$&#123;output_dir&#125;/result</code>,其中，<code>$&#123;output_dir&#125;</code>是个变量，稍后设置。result是输出文件名。</p><center><img src="/img/posts/20190327001-09.png" alt="PDI设计任务"></img></center><p>字段页中可以获取要输出的字段，也可以不设置，默认输出所有字段。</p><center><img src="/img/posts/20190327001-10.png" alt="PDI设计任务"></img></center><p>Spoon设计器中<code>编辑-&gt;设置环境变量</code>，会出现我们在Excel中用到的变量，值设置为<code>../mywork</code>,因为默认的输出目录是Spoon.bat所在目录，我们在上层目录中新建一个mywork文件夹。</p><center><img src="/img/posts/20190327001-11.png" alt="PDI设计任务"></img></center><p>再拖入一个<code>Excel输出</code>组件，从<code>计算器</code>组件指向该组件，添加连线时会弹出选项，选择<code>复制</code>。这步的目的是将计算器计算出的结果保存一个。</p><center><img src="/img/posts/20190327001-12.png" alt="PDI设计任务"></img></center><p>双击该组件，文件名中设置为<code>$&#123;output_dir&#125;/data</code>.</p><center><img src="/img/posts/20190327001-13.png" alt="PDI设计任务"></img></center><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>至此，所有步骤已完成。</p><center><img src="/img/posts/20190327001-14.png" alt="PDI设计任务"></img></center><p>点击上部按钮中第一个<code>运行这个转换</code>，弹出执行转换对话框，直接点击启动，可以看到下部面板中的运行日志，运行完成后查看结果Excel中已经输出相应结果。</p><center><img src="/img/posts/20190327001-15.png" alt="PDI设计任务"></img></center>]]></content>
      
      
      <categories>
          
          <category> 码路刺客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 数据仓库 </tag>
            
            <tag> PDI </tag>
            
            <tag> kettle </tag>
            
            <tag> ETL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python日期时间操作总结</title>
      <link href="2019/03/26/20190326001_python_datetime/"/>
      <url>2019/03/26/20190326001_python_datetime/</url>
      
        <content type="html"><![CDATA[<p>本文主要介绍Ptyhon 3中datetime, time模块相关函数用法及常用操作。datetime模块主要是用来表示日期的，就是我们常说的年月日时分秒，time模块主要侧重点在时分秒。</p><span id="more"></span><h3 id="时间相关概念"><a href="#时间相关概念" class="headerlink" title="时间相关概念"></a>时间相关概念</h3><h4 id="epoch"><a href="#epoch" class="headerlink" title="epoch"></a>epoch</h4><p>假设我们要将时间表示成毫秒数，比方说1000000毫秒，那有一个问题必须解决，这个1000000毫秒的起点是什么时间，也就是我们的时间基准点是什么时间？好比我说你身高1.8米，那这个身高是指相对于你站立的地面说的。这个时间基准点就是epoch，在Unix系统中，这个基准点就是1970年1月1日0点整那个时间点。</p><h4 id="GMT-UTC"><a href="#GMT-UTC" class="headerlink" title="GMT, UTC"></a>GMT, UTC</h4><p>上面我们说epoch表示1970年的起始点，那这个1970年又是相对于哪个基准时间呢？一般来说，就是相对于格林尼治时间，也叫做GMT(Greenwich Mean Time)时间，还叫做UTC(Coordinated Universal Time)，为啥一个时间基准有两个名字？历史上，先有的GMT,后有的UTC.UTC是我们现在用的时间标准，GMT是老的时间计量标准。UTC是根据原子钟来计算时间，而GMT是根据地球的自转和公转来计算时间。所以，可以认为UTC是真正的基准时间，GMT相对UTC的偏差为0。在实际中，我们的计算机中有一个硬件模块RCT，里面会实时记录UTC 时间，该模块有单独的电池供电，即使关机也不影响。有了epoch这个时间基准，又有了UTC这个基准的基准，我们就可以精确地表示一个时间了。</p><h4 id="DST-tzoneDST-tzone"><a href="#DST-tzoneDST-tzone" class="headerlink" title="DST, tzoneDST, tzone"></a>DST, tzoneDST, tzone</h4><p>尽管我们已经可以精确地表示一个时间，很多情况下，我们还是要根据地区实际情况对时间进行一个调整，最常见的就是时区，tzone，相信大家都比较熟悉。此时，当我们说5点5分这个时间时，还需加上是哪个时区的5点5分才能精确说明一个时间。另外一个对时间做出调整的就是DST.DST 全称是Daylight Saving Time，是说，为了充分利用日光，减少用电，人为地对时间做出一个调整，这取决于不同国家和地区的政策法规。比如说，假设你冬天7点天亮起床，但夏天6点天亮，那么在夏天到来时人为将时间加1个小时，这样就可以让你还是觉得7点起床，但实际上是提前一个小时了。</p><h3 id="time模块"><a href="#time模块" class="headerlink" title="time模块"></a>time模块</h3><h4 id="获取时间"><a href="#获取时间" class="headerlink" title="获取时间"></a>获取时间</h4><p><code>time()</code>方法获取当前时间距离epoch的秒数，用的是UTC时间，这个函数没有参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">t = time.time()</span><br><span class="line"><span class="comment">#结果：1553614051.5006864</span></span><br></pre></td></tr></table></figure><h4 id="时间转换"><a href="#时间转换" class="headerlink" title="时间转换"></a>时间转换</h4><p>将上面的秒数转换为年月日时分秒的形式，可以用<code>time. gmtime()</code>，<code>time.localtime()</code>方法。两个函数返回的都是struct_time类的实例。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">time.gmtime()</span><br><span class="line"><span class="comment">#结果：time.struct_time(tm_year=2019, tm_mon=3, tm_mday=26, tm_hour=15, tm_min=35, tm_sec=9, tm_wday=1, tm_yday=85, tm_isdst=0)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">time.localtime()</span><br><span class="line"><span class="comment">#结果：time.struct_time(tm_year=2019, tm_mon=3, tm_mday=26, tm_hour=23, tm_min=37, tm_sec=15, tm_wday=1, tm_yday=85, tm_isdst=0)</span></span><br></pre></td></tr></table></figure><p>如果要将上述元组形式的时间转换成秒数，可以用<code>time.mktime()</code>方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">now_struct = time.localtime()</span><br><span class="line">time.mktime(now_struct)</span><br><span class="line"><span class="comment">#结果：1553615106.0</span></span><br></pre></td></tr></table></figure><p>将时间的元组转换为字符串形式，可以用<code>time.strftime()</code>,将特定格式的时间转成时间元组格式用<code>time.strptime()</code>方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, time.localtime()) </span><br><span class="line">time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>) <span class="comment">#等效，默认是当前时间</span></span><br><span class="line"><span class="comment">#结果：&#x27;2019-03-26 23:52:32&#x27;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">time.strptime(<span class="string">&#x27;2019-03-26 11:56:21&#x27;</span>,<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)</span><br><span class="line"><span class="comment">#结果：time.struct_time(tm_year=2019, tm_mon=3, tm_mday=26, tm_hour=11, tm_min=56, tm_sec=21, tm_wday=1, tm_yday=85, tm_isdst=-1)</span></span><br></pre></td></tr></table></figure><p><code>time.asctime()</code>、<code>time.ctime()</code>方法则会将时间转换为标准24字符的字符串，前者参数是时间元组，后者参数是秒数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">now_struct = time.localtime()</span><br><span class="line">time.asctime(now_struct)</span><br><span class="line"><span class="comment">#结果：&#x27;Wed Mar 27 00:03:07 2019&#x27;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">time.ctime(time.time())</span><br><span class="line"><span class="comment">#结果：&#x27;Wed Mar 27 00:03:07 2019&#x27;</span></span><br></pre></td></tr></table></figure><p>下图可以比较清楚的描述时间秒数、时间元组、字符串之间的转换关系。</p><center><img src="/img/posts/20190326001-01.png" alt="time时间转换"></img></center><h3 id="datetime模块"><a href="#datetime模块" class="headerlink" title="datetime模块"></a>datetime模块</h3><p><code>time</code>模块解决了时间的获取和表示，<code>datetime</code>模块则进一步解决了快速获取并操作时间中的年月日时分秒信息的能力。<br>简单说，该模块核心的类就三个，date类表示年月日，time类表示时分秒毫秒，这里不要和time模块搞混淆了。请记住一点，date中是没有时区信息的。</p><h4 id="对象创建"><a href="#对象创建" class="headerlink" title="对象创建"></a>对象创建</h4><p>常用<code>datetime.today()</code>、<code>datetime.now()</code>方法创建当前时区的对象。<code>datetime.fromtimestamp()</code>方法接收秒数参数。如果要获得utc的datetime对象，使用datetime. utcfromtimestamp()、datetime. utcnow()方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">datetime.datetime.fromtimestamp(time.time())</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">datetime.datetime.today()</span><br><span class="line">datetime.datetime.now()</span><br><span class="line"><span class="comment">#结果：datetime.datetime(2019, 3, 27, 0, 9, 18, 312810)</span></span><br><span class="line"></span><br><span class="line">datetime.datetime. utcnow()</span><br><span class="line"><span class="comment">#结果：datetime.datetime(2019, 3, 26, 16, 12, 22, 71628)</span></span><br></pre></td></tr></table></figure><p>以特定格式字符串创建，使用<code>datetime.strptime()</code>方法。给定时间元组也可以创建datetime对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">datetime.datetime.strptime(<span class="string">&#x27;2015-6-1 18:19:59&#x27;</span>,<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)</span><br><span class="line"><span class="comment">#结果：datetime.datetime(2015, 6, 1, 18, 19, 59)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">datetime.datetime(<span class="number">2015</span>, <span class="number">4</span>, <span class="number">19</span>, <span class="number">12</span>, <span class="number">20</span>)</span><br><span class="line"><span class="comment">#结果：datetime.datetime(2015, 4, 19, 12, 20)</span></span><br></pre></td></tr></table></figure><h4 id="格式转换"><a href="#格式转换" class="headerlink" title="格式转换"></a>格式转换</h4><p>datetime对象转换为时间戳。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dt = datetime.datetime.now()</span><br><span class="line">dt.timestamp()</span><br><span class="line"><span class="comment">#结果：1553617278.690061</span></span><br></pre></td></tr></table></figure><p>datetime对象转换为字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dt = datetime.datetime.now()</span><br><span class="line">datetime.datetime.strftime(dt,<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)</span><br><span class="line"><span class="comment">#结果：&#x27;2019-03-27 00:24:01&#x27;</span></span><br></pre></td></tr></table></figure><p>datetime对象转换为time时间元组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dt = datetime.datetime.now()</span><br><span class="line">time.localtime(dt.timestamp())</span><br><span class="line"><span class="comment">#结果：time.struct_time(tm_year=2019, tm_mon=3, tm_mday=27, tm_hour=0, tm_min=28, tm_sec=51, tm_wday=2, tm_yday=86, tm_isdst=0)</span></span><br></pre></td></tr></table></figure><h3 id="日期计算"><a href="#日期计算" class="headerlink" title="日期计算"></a>日期计算</h3><p>基于某日期，向前或向后计算某段时间后的日期。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">dt</span> = datetime<span class="selector-class">.datetime</span><span class="selector-class">.now</span>() #当前日期</span><br><span class="line"><span class="selector-tag">dt</span> = datetime<span class="selector-class">.datetime</span><span class="selector-class">.now</span>()</span><br><span class="line"><span class="selector-tag">dt</span> - datetime<span class="selector-class">.timedelta</span>(days=<span class="number">1</span>) #当前日期向前减一天</span><br><span class="line"><span class="selector-tag">dt</span> + datetime<span class="selector-class">.timedelta</span>(days=<span class="number">1</span>) #当前日期向后加一天</span><br><span class="line"><span class="selector-tag">dt</span> + datetime<span class="selector-class">.timedelta</span>(days=<span class="number">11</span>,hours=<span class="number">3</span>,minutes=<span class="number">20</span>) #当前日期向后推<span class="number">11</span>天<span class="number">3</span>小时<span class="number">20</span>分</span><br></pre></td></tr></table></figure><p>计算两个日期的时间差</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">start</span> = datetime.datetime.strptime(<span class="string">&#x27;2015-6-1 18:19:59&#x27;</span>,<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)</span><br><span class="line"><span class="function"><span class="keyword">end</span> = <span class="title">datetime</span>.<span class="title">datetime</span>.<span class="title">now</span>()</span></span><br><span class="line">dlt = <span class="keyword">end</span>-<span class="built_in">start</span></span><br><span class="line">dlt.days <span class="comment">#相差天数</span></span><br><span class="line">dlt.<span class="built_in">seconds</span> <span class="comment">#相差秒数</span></span><br></pre></td></tr></table></figure><p>以下函数实现计算自从某一时间到当前时间经过了多少年，多少天，多少秒。</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">def cal_time_past(start_time = <span class="string">&#x27;2016-08-12 05:10:45&#x27;</span>):</span><br><span class="line">    now_str = time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>) <span class="comment">#当前时间字符串</span></span><br><span class="line">    now_obj = datetime.datetime.now() <span class="comment">#当前时间datetime对象</span></span><br><span class="line">    years_end = now_str[:<span class="number">4</span>]+start_time[<span class="number">4</span>:] <span class="comment">#开始时间年份替换为当年</span></span><br><span class="line">    <span class="keyword">if</span> now_str &gt;= years_end:</span><br><span class="line">        ynum = <span class="keyword">int</span>(years_end[:<span class="number">4</span>])-<span class="keyword">int</span>(start_time[<span class="number">0</span>:<span class="number">4</span>]) <span class="comment">#过了几个整年</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        ynum = <span class="keyword">int</span>(years_end[:<span class="number">4</span>])-<span class="keyword">int</span>(start_time[<span class="number">0</span>:<span class="number">4</span>])-<span class="number">1</span> <span class="comment">#最后不满一年</span></span><br><span class="line">        years_end = str(<span class="keyword">int</span>(years_end[:<span class="number">4</span>])-<span class="number">1</span>)+years_end[<span class="number">4</span>:]</span><br><span class="line">    years_end_obj = datetime.datetime.strptime(years_end,<span class="string">&#x27;%Y-%m-%d %H:%M:%S&#x27;</span>)</span><br><span class="line">    delta = now_obj-years_end_obj</span><br><span class="line">    dnum = delta.days <span class="comment">#去掉整年后过去的天数 </span></span><br><span class="line">    hnum = <span class="keyword">int</span>(delta.seconds/<span class="number">3600</span>) <span class="comment">#过去的小时数</span></span><br><span class="line">    mnum = <span class="keyword">int</span>((delta.seconds-<span class="number">3600</span>*hnum)/<span class="number">60</span>) <span class="comment">#过去的分钟数</span></span><br><span class="line">    snum = delta.seconds-<span class="number">3600</span>*hnum-<span class="number">60</span>*mnum <span class="comment">#过去的描述</span></span><br><span class="line">    <span class="keyword">print</span>(<span class="string">&quot;%d年%d天%d小时%d分%d秒&quot;</span> % (ynum,dnum,hnum,mnum,snum))</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">cal_time_past(<span class="string">&#x27;1990-04-18 04:18:00&#x27;</span>)</span><br><span class="line"><span class="comment">#结果：28年342天20小时38分21秒</span></span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://www.jianshu.com/p/a035a564b248">https://www.jianshu.com/p/a035a564b248</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 码路刺客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Python 3 基础】字典dict创建方法及常用操作</title>
      <link href="2019/03/13/20190313001_python_dict/"/>
      <url>2019/03/13/20190313001_python_dict/</url>
      
        <content type="html"><![CDATA[<p>本文主要介绍Ptyhon 3中字典创建方法，以及字典排序，合并等常用操作。</p><span id="more"></span><h3 id="创建字典方法"><a href="#创建字典方法" class="headerlink" title="创建字典方法"></a>创建字典方法</h3><h4 id="方式"><a href="#方式" class="headerlink" title="{} 方式"></a>{} 方式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;&#125; <span class="comment">#创建空字典</span></span><br><span class="line">dict2 = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">11</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">12</span>&#125; <span class="comment">#创建含有值得字典</span></span><br></pre></td></tr></table></figure><h4 id="dict-函数-方式"><a href="#dict-函数-方式" class="headerlink" title="dict()函数 方式"></a>dict()函数 方式</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dict3 = <span class="built_in">dict</span>() <span class="comment">#创建空字典</span></span><br><span class="line">dict4 = <span class="built_in">dict</span>(a=<span class="string">&#x27;11&#x27;</span>,b=<span class="string">&#x27;ddd&#x27;</span>,c=<span class="string">&#x27;ssss&#x27;</span>) <span class="comment">#创建含有值的字典，注意键值如果加引号会报错</span></span><br><span class="line"><span class="comment">#dict5 = dict(&#x27;a&#x27;=&#x27;11&#x27;,b=&#x27;ddd&#x27;,c=&#x27;ssss&#x27;) # SyntaxError: keyword can&#x27;t be an expression</span></span><br><span class="line"></span><br><span class="line">keys = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>]</span><br><span class="line">values = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">dict6 = <span class="built_in">dict</span>(<span class="built_in">zip</span>(keys,values)) <span class="comment">#键或值的列表元素个数不必相同，以少的为准</span></span><br><span class="line"><span class="comment"># &#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2, &#x27;c&#x27;: 3, &#x27;d&#x27;: 4&#125;</span></span><br></pre></td></tr></table></figure><h3 id="字典排序"><a href="#字典排序" class="headerlink" title="字典排序"></a>字典排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> operator</span><br><span class="line">test = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;c&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">7</span>,<span class="string">&#x27;f&#x27;</span>:<span class="number">5</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="根据键排序"><a href="#根据键排序" class="headerlink" title="根据键排序"></a>根据键排序</h4><h5 id="sorted-方式"><a href="#sorted-方式" class="headerlink" title="sorted() 方式"></a>sorted() 方式</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(test.items())) <span class="comment">#升序</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(test.items(),reverse=<span class="literal">True</span>)) <span class="comment">#降序</span></span><br></pre></td></tr></table></figure><h5 id="sorted-operator-方式"><a href="#sorted-operator-方式" class="headerlink" title="sorted + operator 方式"></a>sorted + operator 方式</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(test.items(),key=operator.itemgetter(<span class="number">0</span>))) <span class="comment">#升序</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(test.items(),key=operator.itemgetter(<span class="number">0</span>),reverse=<span class="literal">True</span>)) <span class="comment">#降序</span></span><br></pre></td></tr></table></figure><h5 id="sorted-lambda-方式"><a href="#sorted-lambda-方式" class="headerlink" title="sorted + lambda 方式"></a>sorted + lambda 方式</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(test.items(),key=<span class="keyword">lambda</span> x : x[<span class="number">0</span>])) <span class="comment">#升序</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(test.items(),key=<span class="keyword">lambda</span> x : x[<span class="number">0</span>],reverse=<span class="literal">True</span>)) <span class="comment">#降序</span></span><br></pre></td></tr></table></figure><h4 id="根据值排序"><a href="#根据值排序" class="headerlink" title="根据值排序"></a>根据值排序</h4><h5 id="sorted-operator-方式-1"><a href="#sorted-operator-方式-1" class="headerlink" title="sorted + operator 方式"></a>sorted + operator 方式</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(test.items(),key=operator.itemgetter(<span class="number">1</span>))) <span class="comment">#升序</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(test.items(),key=operator.itemgetter(<span class="number">1</span>),reverse=<span class="literal">True</span>)) <span class="comment">#降序</span></span><br></pre></td></tr></table></figure><h5 id="sorted-lambda-方式-1"><a href="#sorted-lambda-方式-1" class="headerlink" title="sorted + lambda 方式"></a>sorted + lambda 方式</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(test.items(),key=<span class="keyword">lambda</span> x : x[<span class="number">1</span>])) <span class="comment">#升序</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(test.items(),key=<span class="keyword">lambda</span> x : x[<span class="number">1</span>],reverse=<span class="literal">True</span>)) <span class="comment">#降序</span></span><br></pre></td></tr></table></figure><p>** 注意，如果值的数据类型不一样，以上根据值排序会报错，例如一下字典，值有int和str类型,lambda中要进行类型转换 **</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">test2 = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;c&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">7</span>,<span class="string">&#x27;f&#x27;</span>:<span class="string">&#x27;5&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sorted</span>(test2.items(),key=<span class="keyword">lambda</span> x : <span class="built_in">str</span>(x[<span class="number">1</span>]))) <span class="comment">#升序</span></span><br><span class="line"><span class="comment">#输出 [(&#x27;a&#x27;, 1), (&#x27;c&#x27;, 2), (&#x27;f&#x27;, &#x27;5&#x27;), (&#x27;b&#x27;, 7)]</span></span><br></pre></td></tr></table></figure><h3 id="字典合并"><a href="#字典合并" class="headerlink" title="字典合并"></a>字典合并</h3><h4 id="update方法"><a href="#update方法" class="headerlink" title="update方法"></a>update方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dictA = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">3</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">7</span>,<span class="string">&#x27;c&#x27;</span>:<span class="string">&#x27;2&#x27;</span>&#125;</span><br><span class="line">dictB = &#123;<span class="string">&#x27;d&#x27;</span>:<span class="number">12</span>,<span class="string">&#x27;f&#x27;</span>:<span class="string">&#x27;44&#x27;</span>&#125;</span><br><span class="line">dictA.update(dictB)</span><br><span class="line"><span class="built_in">print</span>(dictA) <span class="comment">#输出 &#123;&#x27;a&#x27;: 3, &#x27;b&#x27;: 7, &#x27;c&#x27;: &#x27;2&#x27;, &#x27;d&#x27;: 12, &#x27;f&#x27;: &#x27;44&#x27;&#125;</span></span><br></pre></td></tr></table></figure><h4 id="方法"><a href="#方法" class="headerlink" title="**方法"></a>**方法</h4><p>** 高版本python中可用 **</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dictC = &#123;**dictA,**dictB&#125;</span><br><span class="line"><span class="built_in">print</span>(dictC) <span class="comment">#输出 &#123;&#x27;a&#x27;: 3, &#x27;b&#x27;: 7, &#x27;c&#x27;: &#x27;2&#x27;, &#x27;d&#x27;: 12, &#x27;f&#x27;: &#x27;44&#x27;&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 码路刺客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS视差效果设计</title>
      <link href="2019/03/05/20190305001_css_parallax_effects/"/>
      <url>2019/03/05/20190305001_css_parallax_effects/</url>
      
        <content type="html"><![CDATA[<p>codepen上不错的视差效果设计。</p><span id="more"></span><center><img src="/img/posts/20190305001-01.gif" alt="parallax effects"></img></center><ul><li>作者：oscicen</li><li>使用技术：HTML / CSS / JavaScript</li><li>依赖库：-</li><li>浏览器兼容：Chrome, Edge, Firefox, Opera, Safari</li><li>响应式：否</li><li>源码链接：<a href="https://codepen.io/oscicen/pen/zyJeJw">https://codepen.io/oscicen/pen/zyJeJw</a></li></ul><center><img src="/img/posts/20190305001-02.gif" alt="parallax effects"></img></center><ul><li>作者：Guilmain Dorian</li><li>使用技术：HTML (Pug) / CSS (Less) / JavaScript</li><li>依赖库：-</li><li>浏览器兼容：Chrome, Edge, Firefox (partial), Opera, Safari</li><li>响应式：否</li><li>源码链接：<a href="https://codepen.io/Craaftx/pen/yQGpwa">https://codepen.io/Craaftx/pen/yQGpwa</a></li></ul><center><img src="/img/posts/20190305001-03.gif" alt="parallax effects"></img></center><ul><li>作者：Adrian Payne</li><li>使用技术：HTML / CSS (SCSS) / JavaScript (Babel)</li><li>依赖库：-</li><li>浏览器兼容：Chrome, Edge, Firefox, Opera, Safari</li><li>响应式：是</li><li>源码链接：<a href="https://codepen.io/dazulu/pen/VVZrQv">https://codepen.io/dazulu/pen/VVZrQv</a></li></ul><center><img src="/img/posts/20190305001-04.gif" alt="parallax effects"></img></center><ul><li>作者：Alex O’Neal</li><li>使用技术：HTML / CSS</li><li>依赖库：-</li><li>浏览器兼容：Chrome, Edge, Firefox, Opera, Safari</li><li>响应式：是</li><li>源码链接：<a href="https://codepen.io/alexoneal/pen/OBqaoe">https://codepen.io/alexoneal/pen/OBqaoe</a></li></ul><center><img src="/img/posts/20190305001-05.gif" alt="parallax effects"></img></center><ul><li>作者：Sil van Diepen</li><li>使用技术：HTML (Pug) / CSS (SCSS)</li><li>依赖库：-</li><li>浏览器兼容：Chrome, Edge, Firefox, Opera, Safari</li><li>响应式：是</li><li>源码链接：<a href="https://codepen.io/silvandiepen/full/NOboze">https://codepen.io/silvandiepen/full/NOboze</a></li></ul><center><img src="/img/posts/20190305001-06.gif" alt="parallax effects"></img></center><ul><li>作者：Yago Estévez</li><li>使用技术：HTML (Pug) / CSS</li><li>依赖库：-</li><li>浏览器兼容：Chrome, Edge, Firefox, Opera, Safari</li><li>响应式：是</li><li>源码链接：<a href="https://codepen.io/yagoestevez/full/EdgRMX">https://codepen.io/yagoestevez/full/EdgRMX</a></li></ul><center><img src="/img/posts/20190305001-07.gif" alt="parallax effects"></img></center><ul><li>作者：jakob-e</li><li>使用技术：HTML / CSS (SCSS) / JavaScript</li><li>依赖库：</li><li>浏览器兼容：Chrome, Firefox, Opera, Safari</li><li>响应式：是</li><li>源码链接：<a href="https://codepen.io/jakob-e/pen/ELqeRM">https://codepen.io/jakob-e/pen/ELqeRM</a></li></ul><center><img src="/img/posts/20190305001-08.gif" alt="parallax effects"></img></center><ul><li>作者：Casey Callis</li><li>使用技术：HTML / CSS / JavaScript</li><li>依赖库：jquery.js, parallax.js</li><li>浏览器兼容：Chrome, Edge, Firefox, Opera, Safari</li><li>响应式：是</li><li>源码链接：<a href="https://codepen.io/caseycallis/full/pwEWxo">https://codepen.io/caseycallis/full/pwEWxo</a></li></ul><center><img src="/img/posts/20190305001-09.gif" alt="parallax effects"></img></center><ul><li>作者：Ravi Dhiman</li><li>使用技术：HTML (Pug) / CSS (SCSS)</li><li>依赖库：-</li><li>浏览器兼容：Chrome, Firefox, Opera, Safari</li><li>响应式：是</li><li>源码链接：<a href="https://codepen.io/ravid7000/pen/LREEzv">https://codepen.io/ravid7000/pen/LREEzv</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 码路刺客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 前端 </tag>
            
            <tag> CSS </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>类Jupyter notebook编辑器桌面版nteract</title>
      <link href="2019/02/21/20190221001_nteract/"/>
      <url>2019/02/21/20190221001_nteract/</url>
      
        <content type="html"><![CDATA[<p>Jupyter notebook是一款学习和科研的神奇，相信很多小伙伴已经利用它在学术科研、研究开发的道路上收获了便捷易用、可视直观的优点。我们使用的Jupyter notebook都是网页形式的，在浏览器中进行操作，保存的文件格式是<code>.ipynb</code>的。似乎在其他编辑器工具中打不开这种格式。有没有不想在网页中的Jupyter notebook编写代码，也可以直接编辑<code>.ipynb</code>格式的文件的方法呢？</p><span id="more"></span><p>有这样一个软件似乎可以：<a href="https://nteract.io/">nteract</a>，这个软件我理解为桌面版的Jupyter notebook，下面是nteract的官网.</p><center><img src="/img/posts/20190221001-02.gif" alt="pyvenv"></img></center><h3 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h3><p>官网上可以下载安装文件，支持跨平台，有windows,linux,mac版本，免费的。软件安装好后，启动进入，界面比较简洁。</p><center><img src="/img/posts/20190221001-03.png" alt="pyvenv"></img></center><p>可以看到，系统中<code>.ipynb</code>格式的文件打开方式变成了nteract，直接双击文件就能打开进行编辑，保存，跟在Jupyter notebook一样。</p><center><img src="/img/posts/20190221001-04.png" alt="pyvenv"></img></center><h3 id="执行代码"><a href="#执行代码" class="headerlink" title="执行代码"></a>执行代码</h3><p>软件安装前确保本机有Python执行环境，推荐安装Anaconda，nteract需要连接Jupyter内核才能执行代码，如果已安装有Anaconda，打开nteract后可以看到左下角连接的Jupyter内核名称。</p><center><img src="/img/posts/20190221001-06.png" alt="pyvenv"></img></center><p>如果需要切换python虚拟环境，就需要安装多个python内核，如何安装参考<a href="/2019/02/18/20190218001_hydrogen_venv">Atom编辑器中使用Hydrogen切换Python虚拟环境</a>，安装好后在nteract中切换方法如下</p><center><img src="/img/posts/20190221001-07.gif" alt="pyvenv"></img></center><p>和在Jupyter notebook一样，执行单元格的代码可用<code>Shift+Enter</code>等快捷键，或者单元格靠右侧有个执行程序的小按钮。</p><center><img src="/img/posts/20190221001-05.gif" alt="pyvenv"></img></center><p>敲代码时可以看到是支持代码自动提示与补全的。</p><h3 id="终止代码执行"><a href="#终止代码执行" class="headerlink" title="终止代码执行"></a>终止代码执行</h3><p>如果不小心写了死循环或者想临时终止代码的运行，可以在<code>Runtime</code>菜单下进行操作。</p><center><img src="/img/posts/20190221001-09.gif" alt="pyvenv"></img></center><h3 id="Markdown和Code切换"><a href="#Markdown和Code切换" class="headerlink" title="Markdown和Code切换"></a>Markdown和Code切换</h3><p>单元格右侧下拉菜单中可以切换单元格内容是Markdown文本还是代码，如果是MD文本，双击单元格即可显示原始内容。其他单元格操作及相关快捷键看下<code>Edit</code>或者<code>Cell</code>菜单就明白了。</p><center><img src="/img/posts/20190221001-08.gif" alt="pyvenv"></img></center><h3 id="暗色主题"><a href="#暗色主题" class="headerlink" title="暗色主题"></a>暗色主题</h3><p>软件可以切换亮色与暗色主题。</p><center><img src="/img/posts/20190221001-10.gif" alt="pyvenv"></img></center><h3 id="小问题"><a href="#小问题" class="headerlink" title="小问题"></a>小问题</h3><p>如果是直接启动软件，第一次保存文件按<code>Ctrl+s</code>保存会报错，得用另存为。</p><center><img src="/img/posts/20190221001-11.gif" alt="pyvenv"></img></center><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>相比于Jupyter notebook，nteract显得简洁很多，平时开发作为替代也是可以的。单元格操作上，nteract没有Jupyter notebook那么丰富。Jupyter notebook可以额外安装插件进行功能扩展，虽然nteract也可以安装插件，官网上有介绍，但功能似乎没那么强大。</p>]]></content>
      
      
      <categories>
          
          <category> 码路刺客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python多个数组合并</title>
      <link href="2019/02/20/20190220001_py_list_merge/"/>
      <url>2019/02/20/20190220001_py_list_merge/</url>
      
        <content type="html"><![CDATA[<p>Python中多个数组合并为一个数组的方法整理。</p><span id="more"></span><h3 id="extend方法"><a href="#extend方法" class="headerlink" title="extend方法"></a>extend方法</h3><p>该方法可以扩展数组，会改变原始数组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">b = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>]</span><br><span class="line">c = [<span class="string">&#x27;h&#x27;</span>,<span class="number">12</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">a.extend(b)</span><br><span class="line">a.extend(c)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="comment">#结果：[1, 2, 3, 4, 7, 5, 6, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;h&#x27;, 12, &#x27;c&#x27;]</span></span><br></pre></td></tr></table></figure><h3 id="直接相加"><a href="#直接相加" class="headerlink" title="直接相加"></a>直接相加</h3><p>用<code>+</code>将各数组连接起来。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">b = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>]</span><br><span class="line">c = [<span class="string">&#x27;h&#x27;</span>,<span class="number">12</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"></span><br><span class="line">d = a + b +c</span><br><span class="line"><span class="built_in">print</span>(d)</span><br><span class="line"></span><br><span class="line"><span class="comment">#结果：[1, 2, 3, 4, 7, 5, 6, &#x27;a&#x27;, &#x27;b&#x27;, &#x27;h&#x27;, 12, &#x27;c&#x27;]</span></span><br></pre></td></tr></table></figure><h3 id="flatten方法"><a href="#flatten方法" class="headerlink" title="flatten方法"></a>flatten方法</h3><p><code>flatten()</code>方法是numpy中array数组的方法，使用时要导入包和类型转换。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> numpy <span class="keyword">import</span> array</span><br><span class="line"></span><br><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">b = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">c = [<span class="string">&#x27;h&#x27;</span>,<span class="number">12</span>,<span class="string">&#x27;k&#x27;</span>]</span><br><span class="line">e = [a,b,c]</span><br><span class="line">e = array(e)</span><br><span class="line"><span class="built_in">print</span>(e.flatten())</span><br><span class="line"></span><br><span class="line"><span class="comment">#结果：[&#x27;1&#x27; &#x27;2&#x27; &#x27;3&#x27; &#x27;a&#x27; &#x27;b&#x27; &#x27;c&#x27; &#x27;h&#x27; &#x27;12&#x27; &#x27;k&#x27;]</span></span><br></pre></td></tr></table></figure><p>值得注意的是该方法不适用各数组中元素个数不同的情况。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]  <span class="comment">#元素个数不同</span></span><br><span class="line">b = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">c = [<span class="string">&#x27;h&#x27;</span>,<span class="number">12</span>,<span class="string">&#x27;k&#x27;</span>]</span><br><span class="line">e = [a,b,c]</span><br><span class="line">e = array(e)</span><br><span class="line"><span class="built_in">print</span>(e.flatten())</span><br><span class="line"></span><br><span class="line"><span class="comment">#结果：[list([1, 2, 3, 4]) list([&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]) list([&#x27;h&#x27;, 12, &#x27;k&#x27;])]</span></span><br></pre></td></tr></table></figure><h3 id="列表表达式"><a href="#列表表达式" class="headerlink" title="列表表达式"></a>列表表达式</h3><p>使用前得把多个数组放在一个数组中，应用在一个二维数组上。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>] </span><br><span class="line">b = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">c = [<span class="string">&#x27;h&#x27;</span>,<span class="number">12</span>,<span class="string">&#x27;k&#x27;</span>]</span><br><span class="line">e = [a,b,c]</span><br><span class="line">e = [y <span class="keyword">for</span> x <span class="keyword">in</span> e <span class="keyword">for</span> y <span class="keyword">in</span> x]</span><br><span class="line"><span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line">结果：[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="number">12</span>, <span class="string">&#x27;k&#x27;</span>]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 码路刺客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Atom】autocomplete-python插件报乱码异常问题</title>
      <link href="2019/02/20/20190220002_atom_atuo_err/"/>
      <url>2019/02/20/20190220002_atom_atuo_err/</url>
      
        <content type="html"><![CDATA[<p><a href="https://atom.io/packages/autocomplete-python">autocomplete-python</a>插件可以帮助在写python代码时给出丰富的提示并且自动补全代码，换电脑重装该插件后发现按下键盘后，atom右上角总弹出<code>autocomplete-python traceback output:</code>的提示，提示信息还是乱码。</p><span id="more"></span><center><img src="/img/posts/20190220002-01.png" alt="pyvenv"></img></center><p>解决方式是设置<code>Python Executable Paths</code></p><p>进入Atom设置<code>Packages</code>,找到该插件，进入<code>Settings</code></p><center><img src="/img/posts/20190220002-02.png" alt="pyvenv"></img></center><p>在<code>Python Executable Paths</code>中设置python的执行路径，因为本机是安装的Anaconda，环境变量中没有python执行路径。</p><center><img src="/img/posts/20190220002-03.png" alt="pyvenv"></img></center><p>重启Atom后就可以了。</p>]]></content>
      
      
      <categories>
          
          <category> 码路刺客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 工具 </tag>
            
            <tag> atom </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Atom编辑器中使用Hydrogen切换Python虚拟环境</title>
      <link href="2019/02/18/20190218001_hydrogen_venv/"/>
      <url>2019/02/18/20190218001_hydrogen_venv/</url>
      
        <content type="html"><![CDATA[<p>使用Anaconda的集成Python环境，自带的Jupyter代码编辑器很不错，可以进行代码交互运行。后来折腾Atom编辑器，在Atom中安装Hydrogen插件也可以达到交互运行目的，而且在Atom中编写代码体验稍微好点。有时候我们会在自己的项目中创建Python虚拟环境，Hydrogen连接Anaconda中的python内核，如何增加python虚拟环境的内核给Hydrogen使用呢？</p><span id="more"></span><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>配置前先确认电脑上安装了<a href="https://www.anaconda.com/">Anaconda</a>,代码编辑器<a href="http://www.atom.io/">Atom</a>,Atom中安装了<a href="https://nteract.gitbooks.io/hydrogen/">Hydrogen</a>插件.</p><p>开始菜单中打开<code>Anaconda Prompt</code>命令行窗口。</p><p>查看当前可用的kernel</p><p><code>jupyter kernelspec list</code></p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(base) C:<span class="symbol">\W</span>indows<span class="symbol">\s</span>ystem32&gt;jupyter kernelspec list</span><br><span class="line">Available kernels:</span><br><span class="line">  python3    C:<span class="symbol">\U</span>sers<span class="symbol">\c</span>xuan<span class="symbol">\A</span>ppData<span class="symbol">\R</span>oaming<span class="symbol">\j</span>upyter<span class="symbol">\k</span>ernels<span class="symbol">\p</span>ython3</span><br><span class="line">  venv       C:<span class="symbol">\P</span>rogramData<span class="symbol">\j</span>upyter<span class="symbol">\k</span>ernels<span class="symbol">\v</span>env</span><br></pre></td></tr></table></figure><p>默认只有第一个，第二个是后加的，在Atom中运行Python启动kernel默认只有第一个。</p><center><img src="/img/posts/20190220001-01.png" alt="pyvenv"></img></center><h3 id="创建python虚拟环境"><a href="#创建python虚拟环境" class="headerlink" title="创建python虚拟环境"></a>创建python虚拟环境</h3><p><code>python -m venv E:\PythonProject\test\pyvenv</code></p><p>创建后文件夹下出现这些文件目录</p><center><img src="/img/posts/20190220001-02.png" alt="pyvenv"></img></center><h3 id="安装python内核"><a href="#安装python内核" class="headerlink" title="安装python内核"></a>安装python内核</h3><p>激活新的虚拟环境</p><p><code>E:\PythonProject\test\pyvenv\Scripts\activate</code></p><center><img src="/img/posts/20190220001-03.png" alt="pyvenv"></img></center><p>安装python kernel (ipykernel)到虚拟环境里</p><p><code>python -m pip install ipykernel</code></p><center><img src="/img/posts/20190220001-04.png" alt="pyvenv"></img></center><p>安装python kernel到可用的kernel列表中,<code>--name</code>是自定义名称参数。</p><p><code>python -m ipykernel install --name pyvenv</code></p><center><img src="/img/posts/20190220001-05.png" alt="pyvenv"></img></center><p>重启Atom编辑器，启动python内核时多出了一个选项，就是刚刚我们配置的虚拟环境内核。</p><center><img src="/img/posts/20190220001-06.png" alt="pyvenv"></img></center><h3 id="删除python内核"><a href="#删除python内核" class="headerlink" title="删除python内核"></a>删除python内核</h3><p>删除python keernel</p><p>remove后指定要删除的kernel名称</p><p><code>jupyter kernelspec remove pyvenv</code></p><center><img src="/img/posts/20190220001-07.png" alt="pyvenv"></img></center><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://nteract.io/kernels">https://nteract.io/kernels</a></p>]]></content>
      
      
      <categories>
          
          <category> 码路刺客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> Python </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Web前端】11个使用CSS制作产品展示卡片样例</title>
      <link href="2019/02/14/20190214001_product_card/"/>
      <url>2019/02/14/20190214001_product_card/</url>
      
        <content type="html"><![CDATA[<p>　　</p><span id="more"></span><center><img src="/img/posts/20190214001-01.png" alt="product card"></img></center><ul><li>作者：John Mantas</li><li>使用技术：HTML / CSS (SCSS)</li><li>是否自适应：否</li><li>依赖库：-</li><li>浏览器兼容：Chrome, Edge, Firefox, Opera, Safari</li><li>源码链接：<a href="https://codepen.io/john-mantas/full/bxmrBq">https://codepen.io/john-mantas/full/bxmrBq</a></li></ul><center><img src="/img/posts/20190214001-02.png" alt="product card"></img></center><ul><li>作者：George Gedox</li><li>使用技术：HTML / CSS (SCSS)</li><li>是否自适应：否</li><li>依赖库：font-awesome.css</li><li>浏览器兼容：Chrome, Edge, Firefox, Opera, Safari</li><li>源码链接：<a href="https://codepen.io/GeorgeGedox/pen/yEwoqP">https://codepen.io/GeorgeGedox/pen/yEwoqP</a></li></ul><center><img src="/img/posts/20190214001-03.png" alt="product card"></img></center><ul><li>作者：Julie Park</li><li>使用技术：HTML / CSS (SCSS)</li><li>是否自适应：否</li><li>依赖库：-</li><li>浏览器兼容：Chrome, Edge, Firefox, Opera, Safari</li><li>源码链接：<a href="https://codepen.io/juliepark/pen/aKbYVp">https://codepen.io/juliepark/pen/aKbYVp</a></li></ul><center><img src="/img/posts/20190214001-04.png" alt="product card"></img></center><ul><li>作者：Fatih Takey</li><li>使用技术：HTML / CSS</li><li>是否自适应：否</li><li>依赖库：font-awesome.css</li><li>浏览器兼容：Chrome, Edge, Firefox, Opera, Safari</li><li>源码链接：<a href="https://codepen.io/fatihtakey/pen/eyyWVr">https://codepen.io/fatihtakey/pen/eyyWVr</a></li></ul><center><img src="/img/posts/20190214001-05.gif" alt="product card"></img></center><ul><li>作者：Omar Dsoky</li><li>使用技术：HTML / CSS</li><li>是否自适应：否</li><li>依赖库：font-awesome.css</li><li>浏览器兼容：Chrome, Edge, Firefox, Opera, Safari</li><li>源码链接：<a href="https://codepen.io/linux/pen/LjWrPZ">https://codepen.io/linux/pen/LjWrPZ</a></li></ul><center><img src="/img/posts/20190214001-06.gif" alt="product card"></img></center><ul><li>作者：SliceCrowd</li><li>使用技术：HTML / CSS</li><li>是否自适应：否</li><li>依赖库：bootstrap.css, swiper.css</li><li>浏览器兼容：Chrome, Edge, Firefox, Opera, Safari</li><li>源码链接：<a href="https://codepen.io/slicecrowd/pen/GWJEZB">https://codepen.io/slicecrowd/pen/GWJEZB</a></li></ul><center><img src="/img/posts/20190214001-07.jpg" alt="product card"></img></center><ul><li>作者：Tobi Balogun</li><li>使用技术：HTML / CSS</li><li>是否自适应：否</li><li>依赖库：ionicons.css, animate.css</li><li>浏览器兼容：Chrome, Edge, Firefox, Opera, Safari</li><li>源码链接：<a href="https://codepen.io/cupofmint/pen/wgyrRX">https://codepen.io/cupofmint/pen/wgyrRX</a></li></ul><center><img src="/img/posts/20190214001-08.png" alt="product card"></img></center><ul><li>作者：CodeFrog</li><li>使用技术：HTML / CSS</li><li>是否自适应：否</li><li>依赖库：font-awesome.css</li><li>浏览器兼容：Chrome, Edge, Firefox, Opera, Safari</li><li>源码链接：<a href="https://codepen.io/CodeFrogShow/pen/rWjYrP">https://codepen.io/CodeFrogShow/pen/rWjYrP</a></li></ul><center><img src="/img/posts/20190214001-09.gif" alt="product card"></img></center><ul><li>作者：Oscar</li><li>使用技术：HTML / CSS (SCSS) / JavaScript</li><li>是否自适应：否</li><li>依赖库：jquery.js</li><li>浏览器兼容：Chrome, Edge, Firefox, Opera, Safari</li><li>源码链接：<a href="https://codepen.io/olhilton/pen/dXaqxE">https://codepen.io/olhilton/pen/dXaqxE</a></li></ul><center><img src="/img/posts/20190214001-10.png" alt="product card"></img></center><ul><li>作者：Alexandra K</li><li>使用技术：HTML / CSS</li><li>是否自适应：否</li><li>依赖库：-</li><li>浏览器兼容：Chrome, Edge, Firefox, Opera, Safari</li><li>源码链接：<a href="https://codepen.io/ff0004-red/pen/WxJEJZ">https://codepen.io/ff0004-red/pen/WxJEJZ</a></li></ul><center><img src="/img/posts/20190214001-11.png" alt="product card"></img></center><ul><li>作者：Jacob Sauerhoefer</li><li>使用技术：HTML / CSS (SCSS)</li><li>是否自适应：否</li><li>依赖库：-</li><li>浏览器兼容：Chrome, Edge, Firefox, Opera, Safari</li><li>源码链接：<a href="https://codepen.io/jacobsauerhoefer/pen/mVZwLB">https://codepen.io/jacobsauerhoefer/pen/mVZwLB</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 码路刺客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 前端 </tag>
            
            <tag> CSS </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS制作水滴效果</title>
      <link href="2019/02/07/20190207001_css_water_effects/"/>
      <url>2019/02/07/20190207001_css_water_effects/</url>
      
        <content type="html"><![CDATA[<p>　　</p><span id="more"></span><center><img src="/img/posts/20190207001-01.gif" alt="css fire"></img></center><ul><li>作者：Nicholas Gratton</li><li>使用技术：HTML / CSS</li><li>依赖库：-</li><li>浏览器兼容：Chrome, Edge, Firefox, Opera, Safari</li><li>源码链接：<a href="https://codepen.io/ngratton/pen/MZKJvr">https://codepen.io/ngratton/pen/MZKJvr</a></li></ul><center><img src="/img/posts/20190207001-02.gif" alt="css fire"></img></center><ul><li>作者：Jhey</li><li>使用技术：HTML (Pug) / CSS (Stylus)</li><li>依赖库：-</li><li>浏览器兼容：Chrome, Firefox, Opera, Safari</li><li>源码链接：<a href="https://codepen.io/jh3y/full/WyNdMG">https://codepen.io/jh3y/full/WyNdMG</a></li></ul><center><img src="/img/posts/20190207001-03.gif" alt="css fire"></img></center><ul><li>作者：Danny</li><li>使用技术：HTML (Haml) / CSS (SCSS)</li><li>依赖库：-</li><li>浏览器兼容：Chrome, Edge, Firefox, Opera, Safari</li><li>源码链接：<a href="https://codepen.io/edanny/full/JXwgdK">https://codepen.io/edanny/full/JXwgdK</a></li></ul><center><img src="/img/posts/20190207001-04.gif" alt="css fire"></img></center><ul><li>作者：Jaron White</li><li>使用技术：HTML / CSS</li><li>依赖库：-</li><li>浏览器兼容：Chrome, Edge, Firefox, Opera, Safari</li><li>源码链接：<a href="https://codepen.io/jaronwhite/full/zrmozE">https://codepen.io/jaronwhite/full/zrmozE</a></li></ul><center><img src="/img/posts/20190207001-05.gif" alt="css fire"></img></center><ul><li>作者：Adib Behjat</li><li>使用技术：HTML / CSS</li><li>依赖库：-</li><li>浏览器兼容：Chrome, Edge, Firefox, Opera, Safari</li><li>源码链接：<a href="https://codepen.io/abehjat/full/oXMENv">https://codepen.io/abehjat/full/oXMENv</a></li></ul><center><img src="/img/posts/20190207001-06.gif" alt="css fire"></img></center><ul><li>作者：Jér?me Beau</li><li>使用技术：HTML / CSS (SCSS)</li><li>依赖库：-</li><li>浏览器兼容：Chrome, Edge, Firefox, Opera, Safari</li><li>源码链接：<a href="https://codepen.io/Javarome/pen/ogEoJM">https://codepen.io/Javarome/pen/ogEoJM</a></li></ul><center><img src="/img/posts/20190207001-07.gif" alt="css fire"></img></center><ul><li>作者：Lucas Bebber</li><li>使用技术：HTML / CSS (SCSS)</li><li>依赖库：-</li><li>浏览器兼容：Chrome, Edge, Firefox, Opera, Safari</li><li>源码链接：<a href="https://codepen.io/lbebber/full/xrwja">https://codepen.io/lbebber/full/xrwja</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 码路刺客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 前端 </tag>
            
            <tag> CSS </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python连接数据库将查询结果转换为DataFrame(列名和表字段一致)</title>
      <link href="2019/01/15/20190115001_python_db_select_to_df/"/>
      <url>2019/01/15/20190115001_python_db_select_to_df/</url>
      
        <content type="html"><![CDATA[<p>很多时候，我们用Python处理数据，需要连接到Mysql、Postgresql等数据库，获取表数据，再构建pandas的DataFrame进行进一步处理。但是查询数据库结果集是没有表字段名称的，我们希望构建的DataFrame的列名和表字段一样。</p><span id="more"></span><h3 id="直接上代码"><a href="#直接上代码" class="headerlink" title="直接上代码"></a>直接上代码</h3><p>这里以Postgresql数据库为例，Mysql数据库差不多，其他的自行改造。</p><p>先封装一个查询类，查询返回的结果是一个字典，<code>head</code>是表列名,<code>data</code>是表数据，再用DataFrame构造数据结构。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> psycopg2</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">db_pg</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, host, db, user, pwd, port</span>):</span></span><br><span class="line">        self.host = host</span><br><span class="line">        self.db = db</span><br><span class="line">        self.user = user</span><br><span class="line">        self.pwd = pwd</span><br><span class="line">        self.port = port</span><br><span class="line">        self._conn = self._connect()</span><br><span class="line">        self._cursor = self._conn.cursor()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_connect</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> psycopg2.connect(</span><br><span class="line">            database=self.db,</span><br><span class="line">            user=self.user,</span><br><span class="line">            password=self.pwd,</span><br><span class="line">            host=self.host,</span><br><span class="line">            port=self.port)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">select</span>(<span class="params">self, sqlCode</span>):</span></span><br><span class="line">        self.common(sqlCode)</span><br><span class="line">        col_names = []</span><br><span class="line">        result = &#123;&#125;</span><br><span class="line">        column_count = <span class="built_in">len</span>(self._cursor.description)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(column_count):</span><br><span class="line">            desc = self._cursor.description[i]</span><br><span class="line">            col_names.append(desc[<span class="number">0</span>])</span><br><span class="line">        data = self._cursor.fetchall()</span><br><span class="line">        result[<span class="string">&#x27;head&#x27;</span>] = col_names</span><br><span class="line">        result[<span class="string">&#x27;data&#x27;</span>] = data</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close</span>(<span class="params">self</span>):</span></span><br><span class="line">        self._cursor.close()</span><br><span class="line">        self._conn.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">common</span>(<span class="params">self, sqlCode</span>):</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self._cursor.execute(sqlCode)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(e)</span><br><span class="line">            self._conn.rollback()</span><br><span class="line">            self._cursor.execute(sqlCode)</span><br><span class="line">        self._conn.commit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">db_conn = &#123;</span><br><span class="line">        <span class="string">&#x27;host&#x27;</span>: <span class="string">&quot;******&quot;</span>,</span><br><span class="line">        <span class="string">&#x27;db&#x27;</span>  : <span class="string">&quot;******&quot;</span>,</span><br><span class="line">        <span class="string">&#x27;user&#x27;</span>: <span class="string">&quot;******&quot;</span>,</span><br><span class="line">        <span class="string">&#x27;pwd&#x27;</span> :<span class="string">&quot;******&quot;</span>,</span><br><span class="line">        <span class="string">&#x27;port&#x27;</span>: <span class="string">&quot;******&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">pg_conn = db_pg(host=db_conn[<span class="string">&#x27;host&#x27;</span>],db=db_conn[<span class="string">&#x27;db&#x27;</span>],user=db_conn[<span class="string">&#x27;user&#x27;</span>],pwd=db_conn[<span class="string">&#x27;pwd&#x27;</span>],port=db_conn[<span class="string">&#x27;port&#x27;</span>])</span><br><span class="line">rs            = pg_conn.select(<span class="string">&quot;select * from test&quot;</span>)</span><br><span class="line">rs_df       = pd.DataFrame(<span class="built_in">list</span>(rs.get(<span class="string">&#x27;data&#x27;</span>)),columns=rs.get(<span class="string">&#x27;head&#x27;</span>))</span><br></pre></td></tr></table></figure><p>运行示例</p><center><img src="/img/posts/20190115001-01.png" alt="运行结果"></img></center>]]></content>
      
      
      <categories>
          
          <category> 码路刺客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> 原创 </tag>
            
            <tag> Python </tag>
            
            <tag> PostgreSQL </tag>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL如何实现查找节点依赖</title>
      <link href="2019/01/04/20190104001_graph_sql/"/>
      <url>2019/01/04/20190104001_graph_sql/</url>
      
        <content type="html"><![CDATA[<p>SQL如何运用递归查找有向无环图的节点依赖呢？</p><span id="more"></span><center><img src="/img/posts/20190104001-01.png" alt="有向无环图"></img></center><h3 id="问题是这样的"><a href="#问题是这样的" class="headerlink" title="问题是这样的"></a>问题是这样的</h3><p>例如我有以上的两个图，节点<code>b</code>的前置节点是<code>a</code>,节点<code>c</code>的前置节点是<code>b</code>和<code>d</code>，以此类推。给出一个节点，需要找出以此节点为前置节点的所有链条节点。比如给出<code>a</code>，那出来的结果就是<code>a,b,c,d,e</code>,给出<code>f</code>,那出来的结果就是<code>f,g,h,i,j,k</code>。</p><h3 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h3><p>创建表以及插入数据，多个前置节点用<code>,</code>隔开，注意，使用的是PostgreSQL数据库。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for mytest</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> &quot;public&quot;.&quot;mytest&quot;;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> &quot;public&quot;.&quot;mytest&quot; (</span><br><span class="line">&quot;node&quot; <span class="type">varchar</span>(<span class="number">256</span>) <span class="keyword">COLLATE</span> &quot;default&quot;,</span><br><span class="line">&quot;pre_nodes&quot; <span class="type">varchar</span>(<span class="number">10240</span>) <span class="keyword">COLLATE</span> &quot;default&quot;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of mytest</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> &quot;public&quot;.&quot;mytest&quot; <span class="keyword">VALUES</span> (<span class="string">&#x27;a&#x27;</span>, <span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> &quot;public&quot;.&quot;mytest&quot; <span class="keyword">VALUES</span> (<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> &quot;public&quot;.&quot;mytest&quot; <span class="keyword">VALUES</span> (<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;b,d&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> &quot;public&quot;.&quot;mytest&quot; <span class="keyword">VALUES</span> (<span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;b&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> &quot;public&quot;.&quot;mytest&quot; <span class="keyword">VALUES</span> (<span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;c&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> &quot;public&quot;.&quot;mytest&quot; <span class="keyword">VALUES</span> (<span class="string">&#x27;f&#x27;</span>, <span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> &quot;public&quot;.&quot;mytest&quot; <span class="keyword">VALUES</span> (<span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;f&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> &quot;public&quot;.&quot;mytest&quot; <span class="keyword">VALUES</span> (<span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;g&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> &quot;public&quot;.&quot;mytest&quot; <span class="keyword">VALUES</span> (<span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;g&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> &quot;public&quot;.&quot;mytest&quot; <span class="keyword">VALUES</span> (<span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;g&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> &quot;public&quot;.&quot;mytest&quot; <span class="keyword">VALUES</span> (<span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;h,i,j&#x27;</span>);</span><br></pre></td></tr></table></figure><center><img src="/img/posts/20190104001-02.png" alt="数据表"></img></center><h3 id="SQL创建"><a href="#SQL创建" class="headerlink" title="SQL创建"></a>SQL创建</h3><p>方法有多种，用函数或者存储过程也可以，这里使用<code>WITH</code>递归，相关信息可以百度:<code>postgresql 递归</code>。第一个<code>select</code>语句中要给出起始节点。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> <span class="keyword">RECURSIVE</span> graph_depds <span class="keyword">AS</span> (</span><br><span class="line">  <span class="keyword">SELECT</span> node,pre_nodes <span class="keyword">FROM</span> mytest a <span class="keyword">WHERE</span> node <span class="operator">=</span> <span class="string">&#x27;f&#x27;</span></span><br><span class="line">  <span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line">  <span class="keyword">SELECT</span> a.node,a.pre_nodes <span class="keyword">FROM</span> mytest a, graph_depds b <span class="keyword">WHERE</span> strpos(a.pre_nodes, b.node) <span class="operator">&gt;</span> <span class="number">0</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> node,pre_nodes <span class="keyword">FROM</span> graph_depds <span class="keyword">ORDER</span> <span class="keyword">BY</span> node;</span><br></pre></td></tr></table></figure><center><img src="/img/posts/20190104001-03.png" alt="查询结果"></img></center><h3 id="如果想向前查找呢"><a href="#如果想向前查找呢" class="headerlink" title="如果想向前查找呢"></a>如果想<code>向前</code>查找呢</h3><p>上面的查找相当于找出一个节点所有<code>影响</code>到的节点，其实就是向下递归，如果给出一个节点，想从这个节点往前追溯有关的节点呢？例如给出<code>c</code>节点，结果是<code>a,b,c,d</code>,其实就是向上递归，可以像下面这样写。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">WITH</span> <span class="keyword">RECURSIVE</span> graph_depds <span class="keyword">AS</span> (</span><br><span class="line">  <span class="keyword">SELECT</span> node,pre_nodes <span class="keyword">FROM</span> mytest a <span class="keyword">WHERE</span> node <span class="operator">=</span> <span class="string">&#x27;i&#x27;</span></span><br><span class="line">  <span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line">  <span class="keyword">SELECT</span> a.node,a.pre_nodes <span class="keyword">FROM</span> mytest a, graph_depds b <span class="keyword">WHERE</span> strpos(b.pre_nodes,a.node) <span class="operator">&gt;</span> <span class="number">0</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> node,pre_nodes <span class="keyword">FROM</span> graph_depds <span class="keyword">ORDER</span> <span class="keyword">BY</span> node;</span><br></pre></td></tr></table></figure><center><img src="/img/posts/20190104001-04.png" alt="查询结果"></img></center><h3 id="其他数据库"><a href="#其他数据库" class="headerlink" title="其他数据库"></a>其他数据库</h3><p>如果像<code>Sql Server</code>等支持<code>WITH</code>语法的数据，以上写法可以移植，稍作修改就好。但是<code>mysql</code>等数据库中的实现方式不一样，百度mysql 递归相关的内容都能找到方法。</p>]]></content>
      
      
      <categories>
          
          <category> 码路刺客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> 原创 </tag>
            
            <tag> PostgreSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask服务本机之外不能访问</title>
      <link href="2018/12/23/20181223001_flask_intranet_visit/"/>
      <url>2018/12/23/20181223001_flask_intranet_visit/</url>
      
        <content type="html"><![CDATA[<p>Flask 开启服务后，默认是本机访问的，使用<code>localhost:5000</code>可以访问Web服务，但是使用如<code>192.168.1.10</code>这类本机IP地址却访问不了。 </p><span id="more"></span><p>启动Falsk服务后信息如下，</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">* Serving Flask app &quot;app&quot; (lazy loading)</span><br><span class="line">* Environment: production</span><br><span class="line">  <span class="built_in">WARNING</span>: <span class="keyword">Do</span> <span class="keyword">not</span> use the development <span class="keyword">server</span> <span class="keyword">in</span> a production environment.</span><br><span class="line">  Use a production WSGI <span class="keyword">server</span> <span class="keyword">instead</span>.</span><br><span class="line">* <span class="keyword">Debug</span> mode: <span class="keyword">on</span></span><br><span class="line">* Restarting <span class="keyword">with</span> stat</span><br><span class="line">* Debugger <span class="keyword">is</span> active!</span><br><span class="line">* Debugger PIN: <span class="number">228</span><span class="number">-080</span><span class="number">-042</span></span><br><span class="line">* Running <span class="keyword">on</span> http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span>/ (Press CTRL+C <span class="keyword">to</span> quit)</span><br></pre></td></tr></table></figure><p>除本机外是不能访问的，需要在<code>run</code>参数中设置,端口自定，主机为<code>0.0.0.0</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">5000</span>)</span><br></pre></td></tr></table></figure><p>再次启动后就可以了。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">* Serving Flask app &quot;app&quot; (lazy loading)</span><br><span class="line">* Environment: production</span><br><span class="line">  <span class="built_in">WARNING</span>: <span class="keyword">Do</span> <span class="keyword">not</span> use the development <span class="keyword">server</span> <span class="keyword">in</span> a production environment.</span><br><span class="line">  Use a production WSGI <span class="keyword">server</span> <span class="keyword">instead</span>.</span><br><span class="line">* <span class="keyword">Debug</span> mode: <span class="keyword">on</span></span><br><span class="line">* Restarting <span class="keyword">with</span> stat</span><br><span class="line">* Debugger <span class="keyword">is</span> active!</span><br><span class="line">* Debugger PIN: <span class="number">228</span><span class="number">-080</span><span class="number">-042</span></span><br><span class="line">* Running <span class="keyword">on</span> http://<span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">5000</span>/ (Press CTRL+C <span class="keyword">to</span> quit)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 码路刺客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Atom插件aligner冒号(:)对齐的问题</title>
      <link href="2018/12/21/20181221001_atom_aligner/"/>
      <url>2018/12/21/20181221001_atom_aligner/</url>
      
        <content type="html"><![CDATA[<p>最近在折腾Atom编辑器，写Python进行交互运行还是很方便的，代码提示什么的比Jupyter也好一些，还可以配置一堆插件，定制自己的开发环境。对于代码整齐性来说，<code>aligner</code>插件是不能错过的。</p><span id="more"></span><p><a href="https://github.com/adrianlee44/atom-aligner">atom-aligner</a>是干什么的呢，就是用来对齐的，比如我们写这样一段变量赋值的程序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var_a =<span class="number">1</span> <span class="comment">#我是变量1</span></span><br><span class="line">b = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]<span class="comment">#我是变量2</span></span><br><span class="line">cccc=(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)<span class="comment">#注释</span></span><br><span class="line">ddddddd=<span class="string">&#x27;rrrrrrrr&#x27;</span><span class="comment">#又一个注释</span></span><br></pre></td></tr></table></figure><p>虽然也没问题，但是如果能按<code>=</code>对齐就更强迫症一些。安装插件后，选中要对齐的行，按快捷键:<br>Mac: <code>ctrl-cmd-/</code> Linux/Windows: <code>ctrl-alt-/</code><br>就会变为这样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var_a   = <span class="number">1</span>         <span class="comment">#我是变量1</span></span><br><span class="line">b       = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>] <span class="comment">#我是变量2</span></span><br><span class="line">cccc    = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)   <span class="comment">#注释</span></span><br><span class="line">ddddddd = <span class="string">&#x27;rrrrrrrr&#x27;</span><span class="comment">#又一个注释</span></span><br></pre></td></tr></table></figure><p>需要注意是，只安装一个<code>atom-aligner</code>插件是不够的，得配合不同语言的另一些插件，比如我写python代码，得另外装一个<code>aligner-python</code>插件才可以。</p><p>如果是JSON格式的对象，也是可以按冒号:对齐的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">obj = &#123;<span class="string">&#x27;aaa&#x27;</span>: <span class="number">11</span>,</span><br><span class="line">    <span class="string">&#x27;bbb&#x27;</span>: <span class="string">&#x27;terdff&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;ccc&#x27;</span>: <span class="number">123111</span>,</span><br><span class="line">    <span class="string">&#x27;array&#x27;</span>: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]&#125;</span><br></pre></td></tr></table></figure><p>要注意的是，如果连同<code>=</code>,<code>&#123;&#125;</code>一起选中，按快捷键对齐是不起作用的，得写成这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">obj = &#123;</span><br><span class="line">  <span class="string">&#x27;aaa&#x27;</span>: <span class="number">11</span>,</span><br><span class="line">    <span class="string">&#x27;bbb&#x27;</span>: <span class="string">&#x27;terdff&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;ccc&#x27;</span>: <span class="number">123111</span>,</span><br><span class="line">    <span class="string">&#x27;array&#x27;</span>: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对齐后是这样的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">obj = &#123;</span><br><span class="line"> <span class="string">&#x27;aaa&#x27;</span>:      <span class="number">11</span>,</span><br><span class="line">    <span class="string">&#x27;bbb&#x27;</span>:   <span class="string">&#x27;terdff&#x27;</span>,</span><br><span class="line">  <span class="string">&#x27;ccc&#x27;</span>:     <span class="number">123111</span>,</span><br><span class="line">    <span class="string">&#x27;array&#x27;</span>: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>所以<code>:</code>左边是不会对齐的，我们在编辑器写代码的时候一般都会左对齐了，像这样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">obj = &#123;</span><br><span class="line">    <span class="string">&#x27;aaa&#x27;</span>:   <span class="number">11</span>,</span><br><span class="line">    <span class="string">&#x27;bbb&#x27;</span>:   <span class="string">&#x27;terdff&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;ccc&#x27;</span>:   <span class="number">123111</span>,</span><br><span class="line">    <span class="string">&#x27;array&#x27;</span>: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>有个问题是，官方的说明里说是可以冒号对齐的，对齐成这样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">obj = &#123;</span><br><span class="line">    <span class="string">&#x27;aaa&#x27;</span>  : <span class="number">11</span>,</span><br><span class="line">    <span class="string">&#x27;bbb&#x27;</span>  : <span class="string">&#x27;terdff&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;ccc&#x27;</span>  : <span class="number">123111</span>,</span><br><span class="line">    <span class="string">&#x27;array&#x27;</span>: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>插件设置中没有找到相关设置，官方说明看了半天也没找到怎么设置，最后无奈改了插件的源码。</p><p>进入插件设置</p><center><img src="/img/posts/20181221001-01.gif" alt=""></img></center><p>找到插件包配置，修改默认为<code>left</code></p><center><img src="/img/posts/20181221001-02.gif" alt=""></img></center><p>重启编辑器就可以了。</p>]]></content>
      
      
      <categories>
          
          <category> 码路刺客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> Atom </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Html中使用CSS制作火焰燃烧动画</title>
      <link href="2018/11/24/20181124001_css_fire/"/>
      <url>2018/11/24/20181124001_css_fire/</url>
      
        <content type="html"><![CDATA[<p>　　</p><span id="more"></span><center><img src="/img/posts/20181124001-01.gif" alt="css fire"></img></center><ul><li>作者：Chalda Pnuzig</li><li>使用技术：HTML (Pug) / CSS (SCSS)</li><li>依赖库：-</li><li>浏览器兼容：Chrome, Edge, Firefox, Opera, Safari</li><li>源码链接：<a href="https://codepen.io/chalda/pen/wRJYmz">https://codepen.io/chalda/pen/wRJYmz</a></li></ul><center><img src="/img/posts/20181124001-02.gif" alt="css fire"></img></center><ul><li>作者：Jamie Coulter</li><li>使用技术：HTML / CSS (SCSS)</li><li>依赖库：-</li><li>浏览器兼容：Chrome, Edge, Firefox, Opera, Safari</li><li>源码链接：<a href="https://codepen.io/jcoulterdesign/pen/yGgxOY">https://codepen.io/jcoulterdesign/pen/yGgxOY</a></li></ul><center><img src="/img/posts/20181124001-03.gif" alt="css fire"></img></center><ul><li>作者：Ivan Grozdic</li><li>使用技术：HTML / CSS / JavaScript</li><li>依赖库：bootstrap.css, jquery.js, popper.js, bootstrap.js</li><li>浏览器兼容：Chrome, Edge, Firefox, Opera, Safari</li><li>源码链接：<a href="https://codepen.io/ig_design/pen/NeRxzj">https://codepen.io/ig_design/pen/NeRxzj</a></li></ul><center><img src="/img/posts/20181124001-04.gif" alt="css fire"></img></center><ul><li>作者：Jon Kantner</li><li>使用技术：HTML (Pug) / CSS (SCSS)</li><li>依赖库：-</li><li>浏览器兼容：Chrome, Firefox, Opera, Safari</li><li>源码链接：<a href="https://codepen.io/jkantner/pen/gKRKKb">https://codepen.io/jkantner/pen/gKRKKb</a></li></ul><center><img src="/img/posts/20181124001-05.gif" alt="css fire"></img></center><ul><li>作者：Yusuke Nakaya</li><li>使用技术：HTML (Pug) / CSS (SCSS)</li><li>依赖库：-</li><li>浏览器兼容：Chrome, Firefox, Opera, Safari</li><li>源码链接：<a href="https://codepen.io/YusukeNakaya/pen/vJKwZw">https://codepen.io/YusukeNakaya/pen/vJKwZw</a></li></ul><center><img src="/img/posts/20181124001-06.gif" alt="css fire"></img></center><ul><li>作者：Satrio Yamanda</li><li>使用技术：HTML / CSS</li><li>依赖库：-</li><li>浏览器兼容：Chrome, Edge, Firefox, Opera, Safari</li><li>源码链接：<a href="https://codepen.io/yamanda/pen/RpNMaY">https://codepen.io/yamanda/pen/RpNMaY</a></li></ul><center><img src="/img/posts/20181124001-07.gif" alt="css fire"></img></center><ul><li>作者：Tahina</li><li>使用技术：HTML / CSS</li><li>依赖库：-</li><li>浏览器兼容：Chrome, Edge, Firefox, Opera, Safari</li><li>源码链接：<a href="https://codepen.io/tahina/pen/WRXNwQ">https://codepen.io/tahina/pen/WRXNwQ</a></li></ul><center><img src="/img/posts/20181124001-08.gif" alt="css fire"></img></center><ul><li>作者：Zed Dash</li><li>使用技术：HTML / CSS (SCSS)</li><li>依赖库：-</li><li>浏览器兼容：Chrome, Firefox, Opera, Safari</li><li>源码链接：<a href="https://codepen.io/z-/pen/JXVpgp">https://codepen.io/z-/pen/JXVpgp</a></li></ul><center><img src="/img/posts/20181124001-09.gif" alt="css fire"></img></center><ul><li>作者：Deepak K Vijayan</li><li>使用技术：HTML (Haml) / CSS (SCSS)</li><li>依赖库：-</li><li>浏览器兼容：Chrome, Edge, Firefox, Opera, Safari</li><li>源码链接：<a href="https://codepen.io/BrianBravo/pen/JaFfz">https://codepen.io/BrianBravo/pen/JaFfz</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 码路刺客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 前端 </tag>
            
            <tag> CSS </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>有趣的403页面设计</title>
      <link href="2018/11/18/20181118001_403_pages/"/>
      <url>2018/11/18/20181118001_403_pages/</url>
      
        <content type="html"><![CDATA[<p>在访问网站的时候，会时不时的出现403 Forbidden错误，浏览器会给出403 Forbidden错误提示，在打开Access Error中列出的URL之后, 出现以下错误：</p><blockquote><p>403 Forbidden<br> Access to this resource on the server is denied!<br> Powered By LiteSpeed Web Server<br> LiteSpeed Technologies is not responsible for administration and contents of this web site!</p></blockquote><span id="more"></span><h3 id="403状态码"><a href="#403状态码" class="headerlink" title="403状态码"></a>403状态码</h3><p>403错误是网站访问过程中，常见的错误提示。资源不可用，服务器理解客户的请求，但拒绝处理它。通常由于服务器上文件或目录的权限设置导致，比如IIS或者apache设置了访问权限不当。</p><p>下面看一些有意思的403页面设计，撇开实不实用，能看见几回等等等，，，专注于设计。</p><center><img src="/img/posts/20181118001-01.gif" alt="404page"></img></center><ul><li>作者：Mansoour</li><li>使用技术：HTML / CSS</li><li>依赖库：-</li><li>浏览器兼容：Chrome, Edge, Firefox, Opera, Safari</li><li>源码链接：<a href="https://codepen.io/Mansoour/pen/LgGGvm">https://codepen.io/Mansoour/pen/LgGGvm</a></li></ul><center><img src="/img/posts/20181118001-02.gif" alt="404page"></img></center><ul><li>作者：lsgrrd</li><li>使用技术：HTML / CSS (SCSS)</li><li>依赖库：-</li><li>浏览器兼容：Chrome, Edge, Firefox, Opera, Safari</li><li>源码链接：<a href="https://codepen.io/lsgrrd/pen/BObbYY">https://codepen.io/lsgrrd/pen/BObbYY</a></li></ul><center><img src="/img/posts/20181118001-03.gif" alt="404page"></img></center><ul><li>作者：ycw</li><li>使用技术：HTML (Pug) / CSS (Less)</li><li>依赖库：-</li><li>浏览器兼容：Chrome, Edge, Firefox, Opera, Safari</li><li>源码链接：<a href="https://codepen.io/ycw/pen/BObmJr">https://codepen.io/ycw/pen/BObmJr</a></li></ul><center><img src="/img/posts/20181118001-04.gif" alt="404page"></img></center><ul><li>作者：Aimie | Blissful Lemon</li><li>使用技术：HTML / CSS</li><li>依赖库：-</li><li>浏览器兼容：Chrome, Firefox, Opera, Safari</li><li>源码链接：<a href="https://codepen.io/ablissfullemon/pen/zJepap">https://codepen.io/ablissfullemon/pen/zJepap</a></li></ul><center><img src="/img/posts/20181118001-05.gif" alt="404page"></img></center><ul><li>作者：Sean B</li><li>使用技术：HTML / CSS (SCSS) / JavaScript</li><li>依赖库：-</li><li>浏览器兼容：Chrome, Edge, Firefox, Opera, Safari</li><li>源码链接：<a href="https://codepen.io/Chesswithsean/pen/ZMwagQ">https://codepen.io/Chesswithsean/pen/ZMwagQ</a></li></ul><center><img src="/img/posts/20181118001-06.png" alt="404page"></img></center><ul><li>作者：Blessing Oni</li><li>使用技术：HTML / CSS (SCSS)</li><li>依赖库：-</li><li>浏览器兼容：Chrome, Edge, Firefox, Opera, Safari</li><li>源码链接：<a href="https://codepen.io/blecaf/pen/EervOE">https://codepen.io/blecaf/pen/EervOE</a></li></ul><center><img src="/img/posts/20181118001-07.gif" alt="404page"></img></center><ul><li>作者：Arturo Wibawa</li><li>使用技术：HTML / CSS (SCSS)</li><li>依赖库：-</li><li>浏览器兼容：Chrome, Edge, Firefox, Opera, Safari</li><li>源码链接：<a href="https://codepen.io/artcoholic/pen/ZMVNMw">https://codepen.io/artcoholic/pen/ZMVNMw</a></li></ul><center><img src="/img/posts/20181118001-08.png" alt="404page"></img></center><ul><li>作者：Leena Lavanya</li><li>使用技术：HTML / CSS / JavaScript</li><li>依赖库：-</li><li>浏览器兼容：Chrome, Edge, Firefox, Opera, Safari</li><li>源码链接：<a href="https://codepen.io/leenalavanya/pen/RYqvgK">https://codepen.io/leenalavanya/pen/RYqvgK</a></li></ul><center><img src="/img/posts/20181118001-09.gif" alt="404page"></img></center><ul><li>作者：Cassidy Williams</li><li>使用技术：HTML (Haml) / CSS (Less)</li><li>依赖库：-</li><li>浏览器兼容：Chrome, Edge, Firefox, Opera, Safari</li><li>源码链接：<a href="https://codepen.io/cassidoo/pen/rZQQrj">https://codepen.io/cassidoo/pen/rZQQrj</a></li></ul><center><img src="/img/posts/20181118001-10.gif" alt="404page"></img></center><ul><li>作者：creme</li><li>使用技术：HTML / CSS (SCSS) / JavaScript</li><li>依赖库：jquery.js, tweenmax.js</li><li>浏览器兼容：Chrome, Edge, Firefox, Opera, Safari</li><li>源码链接：<a href="https://codepen.io/creme/pen/VGVpbJ">https://codepen.io/creme/pen/VGVpbJ</a></li></ul><center><img src="/img/posts/20181118001-11.gif" alt="404page"></img></center><ul><li>作者：Mariana</li><li>使用技术：HTML / CSS / JavaScript</li><li>依赖库：-</li><li>浏览器兼容：Chrome, Edge, Firefox, Opera, Safari</li><li>源码链接：<a href="https://codepen.io/marianab/pen/EedpEb">https://codepen.io/marianab/pen/EedpEb</a></li></ul><center><img src="/img/posts/20181118001-12.png" alt="404page"></img></center><ul><li>作者：A van Hagen</li><li>使用技术：HTML / CSS (SCSS)</li><li>依赖库：-</li><li>浏览器兼容：Chrome, Edge, Firefox, Opera, Safari</li><li>源码链接：<a href="https://codepen.io/anjanas_dh/pen/ZMqKwb">https://codepen.io/anjanas_dh/pen/ZMqKwb</a></li></ul><center><img src="/img/posts/20181118001-13.gif" alt="404page"></img></center><ul><li>作者：Nuuou</li><li>使用技术：HTML / CSS (SCSS) / JavaScript (Babel)</li><li>依赖库：bootstrap-reboot.css, tweenmax.js</li><li>浏览器兼容：Chrome, Edge, Firefox, Opera, Safari</li><li>源码链接：<a href="https://codepen.io/Nuuou/pen/GXYmJv">https://codepen.io/Nuuou/pen/GXYmJv</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 码路刺客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 前端 </tag>
            
            <tag> CSS </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>有趣的404页面设计</title>
      <link href="2018/11/14/20181114001_404_pages/"/>
      <url>2018/11/14/20181114001_404_pages/</url>
      
        <content type="html"><![CDATA[<p>　　</p><span id="more"></span><center><img src="/img/posts/20181114001-01.gif" alt="404page"></img></center><ul><li>作者：Andrew Hani</li><li>使用技术：HTML / CSS / JavaScript</li><li>依赖库：jquery.js</li><li>浏览器兼容：Chrome, Edge, Firefox, Opera, Safari</li><li>源码链接：<a href="https://codepen.io/androhani/pen/deOpMZ">https://codepen.io/androhani/pen/deOpMZ</a></li></ul><center><img src="/img/posts/20181114001-02.gif" alt="404page"></img></center><ul><li>作者：Saleh Riaz Qureshi</li><li>使用技术：HTML / CSS / JavaScript</li><li>依赖库：-</li><li>浏览器兼容：Chrome, Edge, Firefox, Opera, Safari</li><li>源码链接：<a href="https://codepen.io/salehriaz/pen/erJrZM">https://codepen.io/salehriaz/pen/erJrZM</a></li></ul><center><img src="/img/posts/20181114001-03.gif" alt="404page"></img></center><ul><li>作者：Vincent Van Goggles</li><li>使用技术：HTML / CSS (SCSS)</li><li>依赖库：-</li><li>浏览器兼容：Chrome, Edge, Firefox, Opera, Safari</li><li>源码链接：<a href="https://codepen.io/Gogh/pen/eeReMO">https://codepen.io/Gogh/pen/eeReMO</a></li></ul><center><img src="/img/posts/20181114001-04.gif" alt="404page"></img></center><ul><li>作者：Selcuk Cura</li><li>使用技术：HTML / CSS (SCSS) / JavaScript</li><li>依赖库：jquery.js, tweenmax.js, splittext.js</li><li>浏览器兼容：Chrome, Edge, Firefox, Opera, Safari</li><li>源码链接：<a href="https://codepen.io/selcukcura/pen/XeQpEv">https://codepen.io/selcukcura/pen/XeQpEv</a></li></ul><center><img src="/img/posts/20181114001-05.gif" alt="404page"></img></center><ul><li>作者：Robin Selmer</li><li>使用技术：HTML / CSS (SCSS)</li><li>依赖库：-</li><li>浏览器兼容：Chrome, Edge, Firefox, Opera, Safari</li><li>源码链接：<a href="https://codepen.io/robinselmer/pen/vJjbOZ">https://codepen.io/robinselmer/pen/vJjbOZ</a></li></ul><center><img src="/img/posts/20181114001-06.gif" alt="404page"></img></center><ul><li>作者：Clement Girault</li><li>使用技术：HTML / CSS / JavaScript</li><li>依赖库：jquery.js</li><li>浏览器兼容：Chrome, Firefox, Opera, Safari</li><li>源码链接：<a href="https://codepen.io/clementGir/pen/PqGyMq">https://codepen.io/clementGir/pen/PqGyMq</a></li></ul><center><img src="/img/posts/20181114001-07.gif" alt="404page"></img></center><ul><li>作者：john</li><li>使用技术：HTML / CSS (Less) / JavaScript</li><li>依赖库：-</li><li>浏览器兼容：Chrome, Firefox, Opera, Safari</li><li>源码链接：<a href="https://codepen.io/thejohnyagiz/pen/npDyq">https://codepen.io/thejohnyagiz/pen/npDyq</a></li></ul><center><img src="/img/posts/20181114001-08.gif" alt="404page"></img></center><ul><li>作者：gavra</li><li>使用技术：HTML / CSS / JavaScript</li><li>依赖库：jquery.js</li><li>浏览器兼容：Chrome, Edge, Firefox, Opera, Safari</li><li>源码链接：<a href="https://codepen.io/gavra/pen/upHzg">https://codepen.io/gavra/pen/upHzg</a></li></ul><center><img src="/img/posts/20181114001-09.png" alt="404page"></img></center><ul><li>作者：Ian Gloude</li><li>使用技术：HTML / CSS (SCSS)</li><li>依赖库：-</li><li>浏览器兼容：Chrome, Edge, Firefox, Opera, Safari</li><li>源码链接：<a href="https://codepen.io/igloude/pen/qNNWKr">https://codepen.io/igloude/pen/qNNWKr</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 码路刺客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 前端 </tag>
            
            <tag> CSS </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>理解Python函数闭包</title>
      <link href="2018/08/13/20180813001_py_clousure/"/>
      <url>2018/08/13/20180813001_py_clousure/</url>
      
        <content type="html"><![CDATA[<p>本文主要介绍什么是闭包，Ptyhon中使用闭包时容易出现的变量问题。</p><span id="more"></span><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>闭包指延伸了作用域的函数，其中包含函数定义体中引用、但是不在定义体中定义的非全局变量。函数是不是匿名的没有关系，关键是它能访问定义体之外定义的非全局变量。</p><h3 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_averager</span>():</span></span><br><span class="line">    series = []</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">averager</span>(<span class="params">new_value</span>):</span></span><br><span class="line">        series.append(new_value)</span><br><span class="line">        total = <span class="built_in">sum</span>(series)</span><br><span class="line">        <span class="keyword">return</span> total/<span class="built_in">len</span>(series)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> averager</span><br><span class="line"></span><br><span class="line">avg = make_averager()</span><br><span class="line">avg(<span class="number">10</span>) <span class="comment"># 10.0</span></span><br><span class="line">avg(<span class="number">13</span>) <span class="comment"># 11.5</span></span><br><span class="line">avg(<span class="number">19</span>) <span class="comment"># 14.0</span></span><br></pre></td></tr></table></figure><p>上面定义了一个嵌套函数，作用是计算移动平均值。<br>调用<code>make_averager</code>时，返回一个<code>averager</code>函数对象。每次调用<code>averager</code>时，会把一个新的参数值添加到列表中，然后计算列表的平均值。<code>series</code>是<code>make_averager</code>函数的局部变量，但是调用<code>avg(10)</code>时，<code>make_averager()</code>函数已经返回了，所以它的本地作用域也没有了。</p><p>在<code>averager()</code>函数中，<code>series</code>变成了自由变量，就是没在本地作用域中绑定的变量。</p><center><img src="/img/posts/20180813001-01.png" alt="clousure"></img></center><p>所以闭包是一种函数，它会保留定义函数时存在的自由变量的绑定，在调用函数时，虽然定义作用域不可用了但是还可以使用绑定的变量。注意，只有嵌套在其他函数中的函数才可能需要处理不在全局作用域中的外部变量</p><h3 id="栗子改进"><a href="#栗子改进" class="headerlink" title="栗子改进"></a>栗子改进</h3><p>虽然上面函数可以实现计算移动平均，但是效率不高，因为把所有历史数据都保留在列表中。如果只存储总和以及元素个数，再求平均值更好些。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_averager</span>():</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">averager</span>(<span class="params">new_value</span>):</span></span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        total += new_value</span><br><span class="line">        <span class="keyword">return</span> total / count</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> averager</span><br></pre></td></tr></table></figure><p>上述函数在调用<code>averager()</code>时是有问题的，原因是<code>count</code>初始定义是数字，是不可变类型。在执行<code>count = count + 1</code> 时，<code>count</code>变成了局部变量，不是自由变量，所以解析器认为<code>count</code>在<code>averager()</code>里没有定义。<code>total</code>变量也是这样的问题。</p><p>问题显然出现在变量是否是可变类型上，在用列表计算的时候，采用的<code>series</code>是可变的列表类型。但是对于数字、字符串、元祖等不可变类型，嵌套函数内只能读取，不能更新，如果尝试重新绑定，比如<code>count = count + 1</code>,就会隐式创建局部变量，不会成为自由变量保存在闭包里。</p><p>python3下解决方式是引入<code>nonlocal</code>声明。作用就是把变量标记为自由变量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_averager</span>():</span></span><br><span class="line">    count = <span class="number">0</span></span><br><span class="line">    total = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">averager</span>(<span class="params">new_value</span>):</span></span><br><span class="line">        <span class="keyword">nonlocal</span> count,total</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        total += new_value</span><br><span class="line">        <span class="keyword">return</span> total / count</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> averager</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>在函数内嵌套的函数如果引用了外层函数定义的变量，外部调用嵌套的函数时，可以认为这时候函数变量的作用域延伸了，存在自由变量。主意自由变量如果是不可变类型，需要使用<code>nonlocal</code>声明。那么闭包有什么用呢？如果要了解Python装饰器，或许会有所帮助。</p><p>参考Luciano Ramalho-《Fluent Python》</p>]]></content>
      
      
      <categories>
          
          <category> 码路刺客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Aqua Data Studio 执行HiveSql的问题</title>
      <link href="2018/07/26/20180726001_aqua_hive_go/"/>
      <url>2018/07/26/20180726001_aqua_hive_go/</url>
      
        <content type="html"><![CDATA[<p>连接Hive的客户端有很多，<strong>Aqua Data Studio</strong>是不错的一个，之前用过DbVisualizer，多个Sql语句都是用<code>;</code>结束的，运行没问题，但是到了Aqua里就报错了：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;[Error] Script lines: <span class="number">1</span>-<span class="number">1</span> --------------------------</span><br><span class="line"> Error while compiling statement: FAILED: ParseException line <span class="number">1</span>:<span class="number">19</span> </span><br><span class="line"> cannot recognize input near &#x27;agent&#x27; &#x27;;&#x27; &#x27;&lt;EOF&gt;&#x27; <span class="keyword">in</span> from source</span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="Aqua-Data-Studio简介"><a href="#Aqua-Data-Studio简介" class="headerlink" title="Aqua Data Studio简介"></a>Aqua Data Studio简介</h3><blockquote><p>Aqua Data Studio是一套完整IDE的数据库开发工具，拥有数据库查询、管理、比对和源码控制等功能，可用于创建、编辑和执行SQL的管理工具脚本编写，以及浏览和修改数据库内容，支持大多数常见的数据库，如Oracle，MySQL，MSSQL，Vertica，Hadoop，Impala等，为所有数据库提供了一个统一界面的平台，让使用者或开发者在一个应用程序中能同时处理多个任务。</p></blockquote><h3 id="使用环境"><a href="#使用环境" class="headerlink" title="使用环境"></a>使用环境</h3><ul><li>Aqua Data Studio 18.0.18</li><li>JDK 1.8</li><li>Windows 7</li></ul><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>问题解决比较简单，菜单<code>File-&gt;Options</code>,在弹出的设置窗口总的搜索里搜索<code>Hive</code>,结果中的<code>Scripts</code>下的<code>Apache Hive</code>里面，勾选<code>;Statement Separator</code>即可。</p><p><img src="/img/posts/20180726001-01.png" alt="20180726001-01"></p><p>其实如果不设置这个选项，默认情况下如何在查询窗口执行多条语句而不报错呢？每条语句用<code>GO</code>隔开就可以了，例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb1</span><br><span class="line">go</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb2</span><br></pre></td></tr></table></figure><p><strong>DbVisualizer</strong> 也是一个不错的工具，可以试用下。</p>]]></content>
      
      
      <categories>
          
          <category> 码路刺客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> 原创 </tag>
            
            <tag> Hive </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Hive】日期从整形转为Date类型</title>
      <link href="2018/07/24/20180724001_hive_date_trans/"/>
      <url>2018/07/24/20180724001_hive_date_trans/</url>
      
        <content type="html"><![CDATA[<p>在建表的时候我们常将日期字段设置为INT类型，将诸如<code>20180601</code>这样的数字值来表示日期，这样在做日期比较等操作时没有问题，但是要进行某些日期计算，就要先转成日期类型才能进行计算了，怎么转换呢？</p><span id="more"></span><h3 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h3><p>下面在Hive中先建一个表，含有一个INT类型的日期字段，插入两行数据。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb (dt <span class="type">INT</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb <span class="keyword">values</span> (<span class="number">20180701</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb <span class="keyword">values</span> (<span class="number">20180715</span>);</span><br></pre></td></tr></table></figure><h3 id="转换类型"><a href="#转换类型" class="headerlink" title="转换类型"></a>转换类型</h3><p>这里第一种方法是将<code>INT</code>类型的日期值转成<code>STRING</code>类型，用Hive内置的<code>unix_timestamp</code>函数转成时间戳类型，最后将时间戳用<code>from_unixtime</code>转成<code>yyyy-MM-dd</code>的日期类型。</p><p>第二种就比较直接，将<code>INT</code>类型的日期值转成<code>STRING</code>类型，再对字符串进行截取处理，用<code>-</code>拼接起来。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> dt,</span><br><span class="line">from_unixtime(unix_timestamp(<span class="built_in">cast</span>(dt <span class="keyword">as</span> string),<span class="string">&#x27;yyyyMMdd&#x27;</span>),<span class="string">&#x27;yyyy-MM-dd&#x27;</span>) <span class="keyword">as</span> a,</span><br><span class="line">concat(substr(<span class="built_in">cast</span>(dt <span class="keyword">as</span> string),<span class="number">1</span>,<span class="number">4</span>), <span class="string">&#x27;-&#x27;</span>,substr(<span class="built_in">cast</span>(dt <span class="keyword">as</span> string),<span class="number">5</span>,<span class="number">2</span>), <span class="string">&#x27;-&#x27;</span>,substr(<span class="built_in">cast</span>(dt <span class="keyword">as</span> string),<span class="number">7</span>,<span class="number">2</span>)) <span class="keyword">as</span> b</span><br><span class="line"><span class="keyword">from</span> tb;</span><br></pre></td></tr></table></figure><p>运行结果</p><table><thead><tr><th>dt</th><th>a</th><th>b</th></tr></thead><tbody><tr><td>20180701</td><td>2018-07-01</td><td>2018-07-01</td></tr><tr><td>20180715</td><td>2018-07-15</td><td>2018-07-15</td></tr></tbody></table><p>当然，每次都这样写有些费劲，可以在Hive中创建UDF或者宏，转换时进行调用就好了。</p><h3 id="创建宏命令"><a href="#创建宏命令" class="headerlink" title="创建宏命令"></a>创建宏命令</h3><p>宏命令相对于UDF要简单方便些，但是<strong>宏只能是临时宏，只在本次会话中可见、有效。因此你需要将宏脚本放在SQL脚本的头部</strong>。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> TEMPORARY MACRO IF <span class="keyword">EXISTS</span> date_trans;</span><br><span class="line"><span class="keyword">CREATE</span> TEMPORARY MACRO date_trans(dt <span class="type">int</span>)</span><br><span class="line">    if(dt <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span> <span class="keyword">and</span> length(dt)<span class="operator">=</span><span class="number">8</span>,</span><br><span class="line">       concat(substr(<span class="built_in">cast</span>(dt <span class="keyword">as</span> string),<span class="number">1</span>,<span class="number">4</span>), <span class="string">&#x27;-&#x27;</span>,substr(<span class="built_in">cast</span>(dt <span class="keyword">as</span> string),<span class="number">5</span>,<span class="number">2</span>), <span class="string">&#x27;-&#x27;</span>,substr(<span class="built_in">cast</span>(dt <span class="keyword">as</span> string),<span class="number">7</span>,<span class="number">2</span>)), </span><br><span class="line">   <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">--调用</span></span><br><span class="line"><span class="keyword">select</span> dt,date_trans(dt) <span class="keyword">as</span> a <span class="keyword">from</span> tb;</span><br></pre></td></tr></table></figure><p>如果同一个功能的函数或宏命令被多次调用，那维护起来就很方便，语句也简洁很多。</p><h3 id="Hive内置日期函数一览"><a href="#Hive内置日期函数一览" class="headerlink" title="Hive内置日期函数一览"></a>Hive内置日期函数一览</h3><table><tr><th width='9.51%'>Return Type</th><th width='21.33%'>Name(Signature)</th><th width='34.03%'>Description</th><th width='35.19%'>说明</th></tr><tr><td>string</td><td>from_unixtime(bigint unixtime[, string format])</td><td>Converts the number of seconds from unix epoch (1970-01-01 00:00:00 UTC) to a string representing the timestamp of that moment in the current system time zone in the format of "1970-01-01 00:00:00".</td><td>将时间的秒值转换成format格式（format可为“yyyy-MM-dd hh:mm:ss”,“yyyy-MM-dd hh”,“yyyy-MM-dd hh:mm”等等）如from_unixtime(1250111000,"yyyy-MM-dd") 得到2009-03-12</td></tr><tr><td>bigint</td><td>unix_timestamp()</td><td>Gets current Unix timestamp in seconds.</td><td>获取本地时区下的时间戳</td></tr><tr><td>bigint</td><td>unix_timestamp(string date)</td><td>Converts time string in format?yyyy-MM-dd HH:mm:ss?to Unix timestamp (in seconds), using the default timezone and the default locale, return 0 if fail: unix_timestamp('2009-03-20 11:30:01') = 1237573801</td><td>将格式为yyyy-MM-dd HH:mm:ss的时间字符串转换成时间戳 ?如unix_timestamp('2009-03-20 11:30:01') = 1237573801</td></tr><tr><td>bigint</td><td>unix_timestamp(string date, string pattern)</td><td>Convert time string with given pattern (see [http://docs.oracle.com/javase/tutorial/i18n/format/simpleDateFormat.html]) to Unix time stamp (in seconds), return 0 if fail: unix_timestamp('2009-03-20', 'yyyy-MM-dd') = 1237532400.</td><td>将指定时间字符串格式字符串转换成Unix时间戳，如果格式不对返回0 如：unix_timestamp('2009-03-20', 'yyyy-MM-dd') = 1237532400</td></tr><tr><td>string</td><td>to_date(string timestamp)</td><td>Returns the date part of a timestamp string: to_date("1970-01-01 00:00:00") = "1970-01-01".</td><td>返回时间字符串的日期部分</td></tr><tr><td>int</td><td>year(string date)</td><td>Returns the year part of a date or a timestamp string: year("1970-01-01 00:00:00") = 1970, year("1970-01-01") = 1970.</td><td>返回时间字符串的年份部分</td></tr><tr><td>int</td><td>quarter(date/timestamp/string)</td><td>Returns the quarter of the year for a date, timestamp, or string in the range 1 to 4 (as of Hive?1.3.0). Example: quarter('2015-04-08') = 2.</td><td>返回当前时间属性哪个季度 如quarter('2015-04-08') = 2</td></tr><tr><td>int</td><td>month(string date)</td><td>Returns the month part of a date or a timestamp string: month("1970-11-01 00:00:00") = 11, month("1970-11-01") = 11.</td><td>返回时间字符串的月份部分</td></tr><tr><td>int</td><td>day(string date) dayofmonth(date)</td><td>Returns the day part of a date or a timestamp string: day("1970-11-01 00:00:00") = 1, day("1970-11-01") = 1.</td><td>返回时间字符串的天</td></tr><tr><td>int</td><td>hour(string date)</td><td>Returns the hour of the timestamp: hour('2009-07-30 12:58:59') = 12, hour('12:58:59') = 12.</td><td>返回时间字符串的小时</td></tr><tr><td>int</td><td>minute(string date)</td><td>Returns the minute of the timestamp.</td><td>返回时间字符串的分钟</td></tr><tr><td>int</td><td>second(string date)</td><td>Returns the second of the timestamp.</td><td>返回时间字符串的秒</td></tr><tr><td>int</td><td>weekofyear(string date)</td><td>Returns the week number of a timestamp string: weekofyear("1970-11-01 00:00:00") = 44, weekofyear("1970-11-01") = 44.</td><td>返回时间字符串位于一年中的第几个周内 ?如weekofyear("1970-11-01 00:00:00") = 44, weekofyear("1970-11-01") = 44</td></tr><tr><td>int</td><td>datediff(string enddate, string startdate)</td><td>Returns the number of days from startdate to enddate: datediff('2009-03-01', '2009-02-27') = 2.</td><td>计算开始时间startdate到结束时间enddate相差的天数</td></tr><tr><td>string</td><td>date_add(string startdate, int days)</td><td>Adds a number of days to startdate: date_add('2008-12-31', 1) = '2009-01-01'.</td><td>从开始时间startdate加上days</td></tr><tr><td>string</td><td>date_sub(string startdate, int days)</td><td>Subtracts a number of days to startdate: date_sub('2008-12-31', 1) = '2008-12-30'.</td><td>从开始时间startdate减去days</td></tr><tr><td>timestamp</td><td>from_utc_timestamp(timestamp, string timezone)</td><td>Assumes given timestamp is UTC and converts to given timezone (as of Hive?0.8.0). For example, from_utc_timestamp('1970-01-01 08:00:00','PST') returns 1970-01-01 00:00:00.</td><td>如果给定的时间戳并非UTC，则将其转化成指定的时区下时间戳</td></tr><tr><td>timestamp</td><td>to_utc_timestamp(timestamp, string timezone)</td><td>Assumes given timestamp is in given timezone and converts to UTC (as of Hive?0.8.0). For example, to_utc_timestamp('1970-01-01 00:00:00','PST') returns 1970-01-01 08:00:00.</td><td>如果给定的时间戳指定的时区下时间戳，则将其转化成UTC下的时间戳</td></tr><tr><td>date</td><td>current_date</td><td>Returns the current date at the start of query evaluation (as of Hive?1.2.0). All calls of current_date within the same query return the same value.</td><td>返回当前时间日期</td></tr><tr><td>timestamp</td><td>current_timestamp</td><td>Returns the current timestamp at the start of query evaluation?(as of Hive?1.2.0). All calls of current_timestamp within the same query return the same value.</td><td>返回当前时间戳</td></tr><tr><td>string</td><td>add_months(string start_date, int num_months)</td><td>Returns the date that is num_months after start_date?(as of Hive?1.1.0). start_date is a string, date or timestamp. num_months is an integer. The time part of start_date is ignored.?If start_date is the last day of the month or if the resulting month has fewer days than the day component of start_date, then the result is the last day of the resulting month. Otherwise, the result has the same day component as start_date.</td><td>返回当前时间下再增加num_months个月的日期</td></tr><tr><td>string</td><td>last_day(string date)</td><td>Returns the last day of the month which the date belongs to?(as of Hive?1.1.0). date is a string in the format 'yyyy-MM-dd HH:mm:ss' or 'yyyy-MM-dd'.?The time part of date is ignored.</td><td>返回这个月的最后一天的日期，忽略时分秒部分（HH:mm:ss）</td></tr><tr><td>string</td><td>next_day(string start_date, string day_of_week)</td><td>Returns the first date which is later than start_date and named as day_of_week?(as of Hive1.2.0).?start_date is a string/date/timestamp. day_of_week is 2 letters, 3 letters or full name of the day of the week (e.g. Mo, tue, FRIDAY). The time part of start_date is ignored. Example: next_day('2015-01-14', 'TU') = 2015-01-20.</td><td>返回当前时间的下一个星期X所对应的日期 如：next_day('2015-01-14', 'TU') = 2015-01-20 ?以2015-01-14为开始时间，其下一个星期二所对应的日期为2015-01-20</td></tr><tr><td>string</td><td>trunc(string date, string format)</td><td>Returns date truncated to the unit specified by the format?(as of Hive?1.2.0). Supported formats: MONTH/MON/MM, YEAR/YYYY/YY. Example: trunc('2015-03-17', 'MM') = 2015-03-01.</td><td>返回时间的最开始年份或月份 ?如trunc("2016-06-26",“MM”)=2016-06-01 ?trunc("2016-06-26",“YY”)=2016-01-01 ? 注意所支持的格式为MONTH/MON/MM, YEAR/YYYY/YY</td></tr><tr><td>double</td><td>months_between(date1, date2)</td><td>Returns number of months between dates date1 and date2 (as of Hive?1.2.0). If date1 is later than date2, then the result is positive. If date1 is earlier than date2, then the result is negative. If date1 and date2 are either the same days of the month or both last days of months, then the result is always an integer. Otherwise the UDF calculates the fractional portion of the result based on a 31-day month and considers the difference in time components date1 and date2. date1 and date2 type can be date, timestamp or string in the format 'yyyy-MM-dd' or 'yyyy-MM-dd HH:mm:ss'. The result is rounded to 8 decimal places. Example: months_between('1997-02-28 10:30:00', '1996-10-30') = 3.94959677</td><td>返回date1与date2之间相差的月份，如date1>date2，则返回正，如果date1<date2,则返回负，否则返回0.0 ?如：months_between('1997-02-28 10:30:00', '1996-10-30') = 3.94959677 ?1997-02-28 10:30:00与1996-10-30相差3.94959677个月</td></tr><tr><td>string</td><td>date_format(date/timestamp/string ts, string fmt)</td><td>Converts a date/timestamp/string to a value of string in the format specified by the date format fmt (as of Hive?1.2.0). Supported formats are Java SimpleDateFormat formats?–https://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html. The second argument fmt should be constant. Example: date_format('2015-04-08', 'y') = '2015'.date_format can be used to implement other UDFs, e.g.:dayname(date) is date_format(date, 'EEEE')dayofyear(date) is date_format(date, 'D')</td><td>按指定格式返回时间date 如：date_format("2016-06-22","MM-dd")=06-22</td></tr></table>]]></content>
      
      
      <categories>
          
          <category> 码路刺客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 数据仓库 </tag>
            
            <tag> Hive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>有用的JScript代码整理</title>
      <link href="2018/06/02/20180602001_jscript/"/>
      <url>2018/06/02/20180602001_jscript/</url>
      
        <content type="html"><![CDATA[<p>JScript并不是我们熟知的JavaScript，但是跟JavaScript很像，如果要在Windows环境中做一些自动化工作，比直接写BAT批处理脚本要简单些。</p><blockquote><p>JScript是由微软公司开发的活动脚本语言，是微软对ECMAScript规范的实现。JScript最初是随Internet Explorer 3.0于1996年8月发布。在网络程序员谈论Internet Explorer中的JavaScript的时候，他们实际上是指JScript。和其他活动脚本一样，它后来也被Windows Script Host（WSH）和Active Server Pages所支持。典型的JScript源文件使用的扩展名是.js。JScript最新的版本是基于尚未定稿的ECMAScript4.0版规范的JScript .NET，并且可以在微软的.Net环境下编译。JScript在ECMA的规范上增加了许多特性。      ——百度百科</p></blockquote><span id="more"></span><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>测试环境：Windows 10 专业版</p><p>测试文件夹目录结构如下:</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">testfolder</span></span><br><span class="line"><span class="comment">|</span>--<span class="literal">-</span><span class="comment">test</span><span class="string">.</span><span class="comment">bat</span></span><br><span class="line"><span class="comment">|</span>--<span class="literal">-</span><span class="comment">test</span><span class="string">.</span><span class="comment">js</span></span><br><span class="line"><span class="comment">|</span>--<span class="literal">-</span><span class="comment">folder1</span></span><br><span class="line"><span class="comment">|</span>--<span class="literal">-</span><span class="comment">|</span>--<span class="literal">-</span><span class="comment">folder1</span><span class="string">.</span><span class="comment">1</span></span><br><span class="line"><span class="comment">|</span>--<span class="literal">-</span><span class="comment">|</span>--<span class="literal">-</span><span class="comment">folder1</span><span class="string">.</span><span class="comment">2</span></span><br><span class="line"><span class="comment">|</span>--<span class="literal">-</span><span class="comment">|</span>--<span class="literal">-</span><span class="comment">a</span><span class="string">.</span><span class="comment">txt</span></span><br><span class="line"><span class="comment">|</span>--<span class="literal">-</span><span class="comment">|</span>--<span class="literal">-</span><span class="comment">b</span><span class="string">.</span><span class="comment">txt</span></span><br><span class="line"><span class="comment">|</span>--<span class="literal">-</span><span class="comment">|</span>--<span class="literal">-</span><span class="comment">c</span><span class="string">.</span><span class="comment">txt</span></span><br></pre></td></tr></table></figure><p>test.bat是批处理文件，测试的时候直接点击这个文件运行，该文件内容如下：</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">@rem </span></span><br><span class="line"><span class="comment">@rem </span></span><br><span class="line"><span class="comment">@rem 我是注释</span></span><br><span class="line"><span class="comment">@rem </span></span><br><span class="line"></span><br><span class="line">cscript ./test.js</span><br><span class="line"></span><br><span class="line"><span class="built_in">pause</span></span><br></pre></td></tr></table></figure><p>test.js文件是具体放JScript代码的地方，将下列功能的代码放在这里。</p><p>** 特别注意：中文系统下，将所有文件的编码格式改为GB2312，否则有乱码导致程序存在中文时有异常。**</p><h3 id="遍历文件夹"><a href="#遍历文件夹" class="headerlink" title="遍历文件夹"></a>遍历文件夹</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*******************************************</span></span><br><span class="line"><span class="comment">*遍历所有子文件夹</span></span><br><span class="line"><span class="comment">*******************************************/</span></span><br><span class="line"><span class="keyword">var</span> folderPath = <span class="string">&quot;./folder1&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> folers = GetFolderList(folderPath);</span><br><span class="line"><span class="keyword">for</span> (; !folers.atEnd(); folers.moveNext())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">var</span> folderName = folers.item();</span><br><span class="line">WScript.Echo(<span class="string">&quot;文件夹名称：&quot;</span>+folderName.Name);</span><br><span class="line">WScript.Echo(<span class="string">&quot;文件夹路径：&quot;</span>+folderName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*******************************************</span></span><br><span class="line"><span class="comment">*获取指定路径文件夹下的所有子文件夹</span></span><br><span class="line"><span class="comment">*<span class="doctag">@folderspec</span>:文件夹路径</span></span><br><span class="line"><span class="comment">*return:子文件夹集合</span></span><br><span class="line"><span class="comment">*******************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GetFolderList</span>(<span class="params">folderspec</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">var</span> fso, f, fc;</span><br><span class="line">   fso = <span class="keyword">new</span> ActiveXObject(<span class="string">&quot;Scripting.FileSystemObject&quot;</span>);</span><br><span class="line">   f = fso.GetFolder(folderspec);</span><br><span class="line">   fc = <span class="keyword">new</span> Enumerator(f.SubFolders);</span><br><span class="line">   <span class="keyword">return</span>(fc);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">C:<span class="symbol">\U</span>sers<span class="symbol">\A</span>dministrator<span class="symbol">\D</span>esktop<span class="symbol">\t</span>estfolder&gt;cscript ./test.js</span><br><span class="line">Microsoft (R) Windows Script Host Version 5.812</span><br><span class="line">版权所有(C) Microsoft Corporation。保留所有权利。</span><br><span class="line"></span><br><span class="line">文件夹名称：folder1.1</span><br><span class="line">文件夹路径：C:<span class="symbol">\U</span>sers<span class="symbol">\A</span>dministrator<span class="symbol">\D</span>esktop<span class="symbol">\t</span>estfolder<span class="symbol">\f</span>older1<span class="symbol">\f</span>older1.1</span><br><span class="line">文件夹名称：folder1.2</span><br><span class="line">文件夹路径：C:<span class="symbol">\U</span>sers<span class="symbol">\A</span>dministrator<span class="symbol">\D</span>esktop<span class="symbol">\t</span>estfolder<span class="symbol">\f</span>older1<span class="symbol">\f</span>older1.2</span><br><span class="line"></span><br><span class="line">C:<span class="symbol">\U</span>sers<span class="symbol">\A</span>dministrator<span class="symbol">\D</span>esktop<span class="symbol">\t</span>estfolder&gt;pause</span><br><span class="line">请按任意键继续. . .</span><br></pre></td></tr></table></figure><h3 id="遍历所有文件"><a href="#遍历所有文件" class="headerlink" title="遍历所有文件"></a>遍历所有文件</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">/<span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">**<span class="emphasis">*</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">*</span>遍历所有文件</span></span><br><span class="line"><span class="strong">**</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="emphasis">*/</span></span><br><span class="line"><span class="emphasis">var folderPath = &quot;./folder1&quot;;</span></span><br><span class="line"><span class="emphasis">var files = GetFolderFileList(folderPath);</span></span><br><span class="line"><span class="emphasis">for (; !files.atEnd(); files.moveNext())</span></span><br><span class="line"><span class="emphasis">&#123;</span></span><br><span class="line"><span class="emphasis">var fileName = files.item();</span></span><br><span class="line"><span class="emphasis">WScript.Echo(&quot;文件名称：&quot;+fileName.Name);</span></span><br><span class="line"><span class="emphasis">WScript.Echo(&quot;文件路径：&quot;+fileName);</span></span><br><span class="line"><span class="emphasis">&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">/<span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">**<span class="emphasis">*</span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis">*</span>获取指定文件夹路径下的所有文件</span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis">*@folderspec:文件夹路径</span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis">*</span>return:文件夹下的文件集合</span></span></span><br><span class="line"><span class="emphasis"><span class="strong">**</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span>*</span>/</span><br><span class="line">function GetFolderFileList(folderspec)</span><br><span class="line">&#123;   </span><br><span class="line"><span class="code">    var fso, folder, files;</span></span><br><span class="line"><span class="code">    fso = new ActiveXObject(&quot;Scripting.FileSystemObject&quot;);</span></span><br><span class="line"><span class="code">    folder = fso.GetFolder(folderspec);</span></span><br><span class="line"><span class="code">    files = new Enumerator(folder.files);</span></span><br><span class="line"><span class="code">    return files;</span></span><br><span class="line"><span class="code">&#125;</span></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">C:<span class="symbol">\U</span>sers<span class="symbol">\A</span>dministrator<span class="symbol">\D</span>esktop<span class="symbol">\t</span>estfolder&gt;cscript ./test.js</span><br><span class="line">Microsoft (R) Windows Script Host Version 5.812</span><br><span class="line">版权所有(C) Microsoft Corporation。保留所有权利。</span><br><span class="line"></span><br><span class="line">文件名称：a.txt</span><br><span class="line">文件路径：C:<span class="symbol">\U</span>sers<span class="symbol">\A</span>dministrator<span class="symbol">\D</span>esktop<span class="symbol">\t</span>estfolder<span class="symbol">\f</span>older1<span class="symbol">\a</span>.txt</span><br><span class="line">文件名称：b.txt</span><br><span class="line">文件路径：C:<span class="symbol">\U</span>sers<span class="symbol">\A</span>dministrator<span class="symbol">\D</span>esktop<span class="symbol">\t</span>estfolder<span class="symbol">\f</span>older1<span class="symbol">\b</span>.txt</span><br><span class="line">文件名称：c.txt</span><br><span class="line">文件路径：C:<span class="symbol">\U</span>sers<span class="symbol">\A</span>dministrator<span class="symbol">\D</span>esktop<span class="symbol">\t</span>estfolder<span class="symbol">\f</span>older1<span class="symbol">\c</span>.txt</span><br><span class="line"></span><br><span class="line">C:<span class="symbol">\U</span>sers<span class="symbol">\A</span>dministrator<span class="symbol">\D</span>esktop<span class="symbol">\t</span>estfolder&gt;pause</span><br><span class="line">请按任意键继续. . .</span><br></pre></td></tr></table></figure><h3 id="获取文件MD5值"><a href="#获取文件MD5值" class="headerlink" title="获取文件MD5值"></a>获取文件MD5值</h3><p>有时候需要找出修改的文件，对比文件MD5值是有用的，耗时看文件大小，文件太大时间可能很长。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">/<span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">**<span class="emphasis">*</span></span></span><br><span class="line"><span class="strong"><span class="emphasis">*</span>遍历所有文件，获取文件MD5值</span></span><br><span class="line"><span class="strong">**</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="emphasis">*/</span></span><br><span class="line"><span class="emphasis">var folderPath = &quot;./folder1&quot;;</span></span><br><span class="line"><span class="emphasis">var files = GetFolderFileList(folderPath);</span></span><br><span class="line"><span class="emphasis">for (; !files.atEnd(); files.moveNext())</span></span><br><span class="line"><span class="emphasis">&#123;</span></span><br><span class="line"><span class="emphasis">var fileName = files.item();</span></span><br><span class="line"><span class="emphasis">WScript.Echo(fileName.Name+&quot;的MD5值：&quot;+GetFileMD5(fileName));</span></span><br><span class="line"><span class="emphasis">&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">/<span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">**<span class="emphasis">*</span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis">*</span>获取指定文件夹路径下的所有文件</span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis">*@folderspec:文件夹路径</span></span></span></span><br><span class="line"><span class="emphasis"><span class="strong"><span class="emphasis">*</span>return:文件夹下的文件集合</span></span></span><br><span class="line"><span class="emphasis"><span class="strong">**</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span><span class="strong">****</span>*</span>/</span><br><span class="line">function GetFolderFileList(folderspec)</span><br><span class="line">&#123;   </span><br><span class="line"><span class="code">    var fso, folder, files;</span></span><br><span class="line"><span class="code">    fso = new ActiveXObject(&quot;Scripting.FileSystemObject&quot;);</span></span><br><span class="line"><span class="code">    folder = fso.GetFolder(folderspec);</span></span><br><span class="line"><span class="code">    files = new Enumerator(folder.files);</span></span><br><span class="line"><span class="code">    return files;</span></span><br><span class="line"><span class="code">&#125;</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">/*******************************************</span></span><br><span class="line"><span class="code">*获取文件MD5值</span></span><br><span class="line"><span class="code">*@filePath:脚本文件绝对路径</span></span><br><span class="line"><span class="code">*******************************************/</span></span><br><span class="line"><span class="code">function GetFileMD5(filePath)</span></span><br><span class="line"><span class="code">&#123;</span></span><br><span class="line"><span class="code">var objShell = new ActiveXObject(&quot;WScript.Shell&quot;);</span></span><br><span class="line"><span class="code">var iReturnMsg = objShell.Exec(&quot;cmd.exe /c certutil -hashfile \&quot;&quot;+filePath+&quot;\&quot; MD5&quot;);</span></span><br><span class="line"><span class="code">var result = iReturnMsg.StdOut.ReadAll();</span></span><br><span class="line"><span class="code">var splitArr = result.split(&quot;\n&quot;);</span></span><br><span class="line"><span class="code">var fileMD5 = splitArr[1].replace(/\s/g,&quot;&quot;);</span></span><br><span class="line"><span class="code">return fileMD5;</span></span><br><span class="line"><span class="code">//WScript.Echo(fileMD5);</span></span><br><span class="line"><span class="code">&#125;</span></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">C:<span class="symbol">\U</span>sers<span class="symbol">\A</span>dministrator<span class="symbol">\D</span>esktop<span class="symbol">\t</span>estfolder&gt;cscript ./test.js</span><br><span class="line">Microsoft (R) Windows Script Host Version 5.812</span><br><span class="line">版权所有(C) Microsoft Corporation。保留所有权利。</span><br><span class="line"></span><br><span class="line">a.txt的MD5值：22d42eb002cefa81e9ad604ea57bc01d</span><br><span class="line">b.txt的MD5值：1efc98f0102b2109fb90307e6e1c484e</span><br><span class="line">c.txt的MD5值：ba2ee8e2ba48e6667dca8c83dab38f4c</span><br><span class="line"></span><br><span class="line">C:<span class="symbol">\U</span>sers<span class="symbol">\A</span>dministrator<span class="symbol">\D</span>esktop<span class="symbol">\t</span>estfolder&gt;pause</span><br><span class="line">请按任意键继续. . .</span><br></pre></td></tr></table></figure><h3 id="创建Excel文件"><a href="#创建Excel文件" class="headerlink" title="创建Excel文件"></a>创建Excel文件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">CreateExcelFile(<span class="string">&quot;./texcel.xlsx&quot;</span>,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*******************************************</span></span><br><span class="line"><span class="comment">*创建Excel文件</span></span><br><span class="line"><span class="comment">*<span class="doctag">@filePathName</span>:文件路径，相对路径或绝对路径</span></span><br><span class="line"><span class="comment">*<span class="doctag">@sheetCount</span>:Excel中Sheet的个数</span></span><br><span class="line"><span class="comment">*******************************************/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CreateExcelFile</span>(<span class="params">filePathName,sheetCount</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="keyword">var</span> ExcelApp = <span class="keyword">new</span> ActiveXObject(<span class="string">&quot;Excel.Application&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> WshShell = WScript.CreateObject (<span class="string">&quot;WScript.Shell&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> currentPath = WshShell.CurrentDirectory;</span><br><span class="line"><span class="keyword">var</span> i;</span><br><span class="line"></span><br><span class="line">ExcelApp.Visible = <span class="literal">false</span>;</span><br><span class="line">ExcelApp.DisplayAlerts = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">var</span> ExcelBook = ExcelApp.Workbooks.Add;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;sheetCount;++i)</span><br><span class="line">&#123;</span><br><span class="line">ExcelBook.Worksheets.Add;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (filePathName.indexOf(<span class="string">&quot;.&quot;</span>) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">currentPath = currentPath + filePathName.slice(<span class="number">1</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">currentPath = filePathName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">currentPath = currentPath.replace(<span class="regexp">/\//g</span>,<span class="string">&quot;\\&quot;</span>);</span><br><span class="line"><span class="comment">//currentPath = currentPath.replace(/\\/g,&quot;\\\\&quot;); 路径在变量中不用转义</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//保存表格</span></span><br><span class="line">ExcelBook.SaveAs(currentPath);</span><br><span class="line">&#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">WScript.Echo(<span class="string">&quot;发生异常：&quot;</span>+e);</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line"><span class="comment">//用 Application 对象用 Quit 方法关闭 Excel。</span></span><br><span class="line">ExcelApp.Quit();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 码路刺客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> JScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Python 3 基础】循环</title>
      <link href="2018/01/26/20180126001/"/>
      <url>2018/01/26/20180126001/</url>
      
        <content type="html"><![CDATA[<p>本文主要介绍Ptyhon 3中while循环、for循环的基本语法，以及利用for循环遍历列表、字典和列表推导的相关内容。</p><span id="more"></span><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><h4 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h4><p>while循环语法比较简单，与其他语言类似。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#输出1-10</span></span><br><span class="line">x = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> x &lt;= <span class="number">10</span>:</span><br><span class="line">    <span class="built_in">print</span>(x)</span><br><span class="line">    x +=<span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><h4 id="遍历列表"><a href="#遍历列表" class="headerlink" title="遍历列表"></a>遍历列表</h4><p>for循环更多地用于列表，集合，字典等遍历。</p><p>例如遍历一个列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#遍历列表</span></span><br><span class="line">numbers = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">for</span> number <span class="keyword">in</span> numbers:</span><br><span class="line">    <span class="built_in">print</span>(number)</span><br></pre></td></tr></table></figure><p>如果要生成特定序列，可使用内建函数range()，注意python 3 中xrange()函数跟range()已合并。之前版本中xrange()函数作用与range()函数相同，区别是range()函数一次创建整个序列，xrange()函数一次只创建一个数。需要迭代一个巨大的序列时，xrange()会更高效一些。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#如果只是输出某一范围的数字，可以使用范围函数range(),该函数生成一个包含开始，不含结束区间的序列。</span></span><br><span class="line"><span class="keyword">for</span> number <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">6</span>):</span><br><span class="line">    <span class="built_in">print</span>(number)</span><br></pre></td></tr></table></figure><h4 id="字典遍历"><a href="#字典遍历" class="headerlink" title="字典遍历"></a>字典遍历</h4><p>可使用如下语法遍历字典的键和值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#循环遍历字典</span></span><br><span class="line">d = &#123;<span class="string">&#x27;x&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;y&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;z&#x27;</span>:<span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">for</span> key,value <span class="keyword">in</span> d.items():</span><br><span class="line">    <span class="built_in">print</span>(key,<span class="string">&#x27;-&gt;&#x27;</span>,value)</span><br></pre></td></tr></table></figure><p>如果只遍历字典的键，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#循环遍历字典</span></span><br><span class="line">d = &#123;<span class="string">&#x27;x&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;y&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;z&#x27;</span>:<span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> d.keys():</span><br><span class="line">    <span class="built_in">print</span>(key)</span><br></pre></td></tr></table></figure><p>如果只遍历字典的值，如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#循环遍历字典</span></span><br><span class="line">d = &#123;<span class="string">&#x27;x&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;y&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;z&#x27;</span>:<span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> d.values():</span><br><span class="line">    <span class="built_in">print</span>(value)</span><br></pre></td></tr></table></figure><h4 id="字典并行遍历"><a href="#字典并行遍历" class="headerlink" title="字典并行遍历"></a>字典并行遍历</h4><p>如果要同时遍历两个列表，可以按如下方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#并行迭代，如果要同时遍历两个列表</span></span><br><span class="line">names = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">ages = [<span class="number">12</span>,<span class="number">34</span>,<span class="number">55</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(names)):</span><br><span class="line">    <span class="built_in">print</span>(names[i],<span class="string">&#x27; is &#x27;</span>,ages[i],<span class="string">&#x27; years old&#x27;</span>)</span><br></pre></td></tr></table></figure><p>内建zip()函数可用于并行迭代，把两个序列并在一起，返回一个元祖列表，写法更简洁。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 内建zip()函数可用于并行迭代，把两个序列并在一起，返回一个元祖列表</span></span><br><span class="line"><span class="comment"># 如果连个序列不等长，遍历完短的序列就结束了</span></span><br><span class="line">names = [<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line">ages = [<span class="number">12</span>,<span class="number">34</span>,<span class="number">55</span>,<span class="number">66</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> name,age <span class="keyword">in</span> <span class="built_in">zip</span>(names,ages):</span><br><span class="line">    <span class="built_in">print</span>(name,<span class="string">&#x27; is &#x27;</span>,age,<span class="string">&#x27; years old&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="for循环与else语句"><a href="#for循环与else语句" class="headerlink" title="for循环与else语句"></a>for循环与else语句</h4><p>for循环中可以使用判断语句，如果符合某一特定条件就让for循环终止，如下代码，如果n等于3，则循环终止了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">print</span>(n)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>如果在for后加一个else子句，如果for循环被break打断，else子句不会被执行，如下代码输出结果3。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">print</span>(n)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;No&#x27;</span>)</span><br></pre></td></tr></table></figure><p>如果for循环中没有执行break语句，则else子句会被执行一次，如下代码输出结果:No</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">7</span>:</span><br><span class="line">        <span class="built_in">print</span>(n)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;No&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="列表推导"><a href="#列表推导" class="headerlink" title="列表推导"></a>列表推导</h4><p>刚开始看列表推导的语法可能不大容易理解，它的功能就是在一个列表基础上生成另一个列表，例如生成0-9的平方数列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[x*x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果：[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</span></span><br></pre></td></tr></table></figure><p>还可以在列表推导中加入判断语句，例如，如果要过滤出0-9中能被3整除的数的平方，可以怎么写：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 输出能被3整除的平方数</span></span><br><span class="line">[x*x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>) <span class="keyword">if</span> x % <span class="number">3</span> == <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果：[0, 9, 36, 81]</span></span><br></pre></td></tr></table></figure><p>列表推导中可以写多个for语句，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[(x,y) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>) <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果：[(0, 0), (0, 1), (0, 2), (1, 0), (1, 1), (1, 2), (2, 0), (2, 1), (2, 2)]</span></span><br></pre></td></tr></table></figure><p>可以看到，效果类似于表的全连接，输出连个列表的所有组合，同样可以加入if语句，效果类似于表连接中的where条件过滤。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[(x,y) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>) <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>) <span class="keyword">if</span> x == y]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果：[(0, 0), (1, 1), (2, 2)]</span></span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>Magnus Lie Hetland 著《Beginning Python-From Novice to Professional Secnod Edition》</p>]]></content>
      
      
      <categories>
          
          <category> 码路刺客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS Hbase-1.2.0 安装配置</title>
      <link href="2018/01/24/20180124001/"/>
      <url>2018/01/24/20180124001/</url>
      
        <content type="html"><![CDATA[<p>本篇介绍在四个节点的集群中安装Hbase，Hbase依赖于zookeeper,Hbase的安装包内自带zookeeper，本篇将配置使用单独安装的zookeeper。最后启动时遇到<code>Master is initializing</code>、<code>error telling master we are up</code>的异常，通过修改hosts文件得以解决。</p><span id="more"></span><h3 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h3><ul><li>虚拟机：VMware Workstation 12 Player</li><li>Linux版本：CentOS release 6.4 (Final)</li><li>hadoop版本：hadoop-2.6.0-cdh5.7.6</li><li>zookeeper版本：zookeeper-3.4.5-cdh5.7.6</li><li>hbase版本：hbase-1.2.0-cdh5.7.6</li><li>集群节点：<ul><li>master:192.168.137.11 内存1G</li><li>slave1:192.168.137.12 内存512M</li><li>slave2:192.168.137.13 内存512M</li><li>slave3:192.168.137.14 内存512M</li></ul></li><li>前提：java已安装，Hadoop已安装，zookeeper已安装，已配置ssh免密登录，停掉防火墙等。</li></ul><p>zookeeper安装请参考<a href="/2018/01/20/20180120001/">CentOS上zookeeper集群模式安装配置</a>,本篇将在四个节点上安装Hbase，master作为HMaster，其他slave节点作为HRegionServer。</p><h3 id="上传安装包"><a href="#上传安装包" class="headerlink" title="上传安装包"></a>上传安装包</h3><p>将下载的hbase-1.2.0-cdh5.7.6.tar.gz安装包上传到CentOS指定目录，例如<code>/opt</code>。<br>上传方法很多，这里在SecureCRT用rz命令。</p><p>解压缩安装包：</p><p><code>tar -zxf hbase-1.2.0-cdh5.7.6.tar.gz</code></p><p>重命名文件夹：</p><p><code>mv hbase-1.2.0-cdh5.7.6 hbase</code></p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>修改环境变量:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/profile</span><br><span class="line">添加</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">HBASE_HOME</span>=/opt/hbase</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">PATH</span>=<span class="variable">$HBASE_HOME</span>/bin:$PATH</span><br></pre></td></tr></table></figure><p>修改hbase配置文件hbase-env.sh:</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@slave1 conf]# pwd</span><br><span class="line">/opt/hbase/conf</span><br><span class="line">[root@slave1 conf]# vi hbase-env.sh</span><br><span class="line"></span><br><span class="line">文件中去掉一下两行注释并修改</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">JAVA_HOME</span>=/opt/jdk</span><br><span class="line"><span class="builtin-name">export</span> <span class="attribute">HBASE_MANAGES_ZK</span>=<span class="literal">false</span></span><br></pre></td></tr></table></figure><p>因为zookeeper用的是单独安装的，不是hbase自带的，所以上面配置为<code>false</code>.</p><p>修改conf文件下的hbase配置文件hbase-site.xml。</p><p><configuration>节点中间的内容是空的，增加如下配置：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="params">&lt;configuration&gt;</span></span><br><span class="line">        <span class="params">&lt;property&gt;</span></span><br><span class="line">                <span class="params">&lt;name&gt;</span>hbase.rootdir<span class="params">&lt;/name&gt;</span></span><br><span class="line">                <span class="params">&lt;value&gt;</span>hdfs:<span class="comment">//master:9000/hbase&lt;/value&gt;</span></span><br><span class="line">        <span class="params">&lt;/property&gt;</span></span><br><span class="line">        <span class="params">&lt;property&gt;</span></span><br><span class="line">                <span class="params">&lt;name&gt;</span>hbase.cluster.distributed<span class="params">&lt;/name&gt;</span></span><br><span class="line">                <span class="params">&lt;value&gt;</span>true<span class="params">&lt;/value&gt;</span></span><br><span class="line">        <span class="params">&lt;/property&gt;</span></span><br><span class="line">        <span class="params">&lt;property&gt;</span></span><br><span class="line">                <span class="params">&lt;name&gt;</span>hbase.zookeeper.quorum<span class="params">&lt;/name&gt;</span></span><br><span class="line">                <span class="params">&lt;value&gt;</span>master,slave1,slave2,slave3<span class="params">&lt;/value&gt;</span></span><br><span class="line">        <span class="params">&lt;/property&gt;</span></span><br><span class="line">        <span class="params">&lt;property&gt;</span></span><br><span class="line">                <span class="params">&lt;name&gt;</span>hbase.zookeeper.property.dataDir<span class="params">&lt;/name&gt;</span></span><br><span class="line">                <span class="params">&lt;value&gt;</span><span class="meta-keyword">/opt/</span>zookeeper<span class="params">&lt;/value&gt;</span></span><br><span class="line">        <span class="params">&lt;/property&gt;</span></span><br><span class="line"><span class="params">&lt;/configuration&gt;</span></span><br></pre></td></tr></table></figure><p>修改conf文件夹下的regionservers文件：</p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root<span class="symbol">@slave1</span> conf]<span class="meta"># vi regionservers </span></span><br><span class="line">slave1</span><br><span class="line">slave2</span><br><span class="line">slave3</span><br></pre></td></tr></table></figure><h3 id="启动运行"><a href="#启动运行" class="headerlink" title="启动运行"></a>启动运行</h3><p>HBase的启动顺序为：HDFS-&gt;Zookeeper-&gt;HBase，所以先保证hadoop和zookeeper已经启动。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@master bin]# /opt/hbase/<span class="keyword">start</span>-hbase.sh</span><br><span class="line">starting master, logging <span class="keyword">to</span> /opt/hbase/bin/../logs/hbase-root-master-master.<span class="keyword">out</span></span><br><span class="line">Java HotSpot(TM) <span class="number">64</span>-<span class="type">Bit</span> <span class="keyword">Server</span> VM <span class="built_in">warning</span>: ignoring <span class="keyword">option</span> PermSize=<span class="number">128</span>m; support was removed <span class="keyword">in</span> <span class="number">8.0</span></span><br><span class="line">Java HotSpot(TM) <span class="number">64</span>-<span class="type">Bit</span> <span class="keyword">Server</span> VM <span class="built_in">warning</span>: ignoring <span class="keyword">option</span> MaxPermSize=<span class="number">128</span>m; support was removed <span class="keyword">in</span> <span class="number">8.0</span></span><br><span class="line">slave2: starting regionserver, logging <span class="keyword">to</span> /opt/hbase/logs/hbase-root-regionserver-slave2.<span class="keyword">out</span></span><br><span class="line">slave3: starting regionserver, logging <span class="keyword">to</span> /opt/hbase/logs/hbase-root-regionserver-slave3.<span class="keyword">out</span></span><br><span class="line">slave1: starting regionserver, logging <span class="keyword">to</span> /opt/hbase/logs/hbase-root-regionserver-slave1.<span class="keyword">out</span></span><br><span class="line">slave2: Java HotSpot(TM) <span class="number">64</span>-<span class="type">Bit</span> <span class="keyword">Server</span> VM <span class="built_in">warning</span>: ignoring <span class="keyword">option</span> PermSize=<span class="number">128</span>m; support was removed <span class="keyword">in</span> <span class="number">8.0</span></span><br><span class="line">slave2: Java HotSpot(TM) <span class="number">64</span>-<span class="type">Bit</span> <span class="keyword">Server</span> VM <span class="built_in">warning</span>: ignoring <span class="keyword">option</span> MaxPermSize=<span class="number">128</span>m; support was removed <span class="keyword">in</span> <span class="number">8.0</span></span><br><span class="line">slave1: Java HotSpot(TM) <span class="number">64</span>-<span class="type">Bit</span> <span class="keyword">Server</span> VM <span class="built_in">warning</span>: ignoring <span class="keyword">option</span> PermSize=<span class="number">128</span>m; support was removed <span class="keyword">in</span> <span class="number">8.0</span></span><br><span class="line">slave1: Java HotSpot(TM) <span class="number">64</span>-<span class="type">Bit</span> <span class="keyword">Server</span> VM <span class="built_in">warning</span>: ignoring <span class="keyword">option</span> MaxPermSize=<span class="number">128</span>m; support was removed <span class="keyword">in</span> <span class="number">8.0</span></span><br></pre></td></tr></table></figure><p>master节点上可看到如下进程：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">root@master</span> <span class="string">bin</span>]<span class="comment"># jps</span></span><br><span class="line"><span class="number">3089 </span><span class="string">Jps</span></span><br><span class="line"><span class="number">2696 </span><span class="string">QuorumPeerMain</span></span><br><span class="line"><span class="number">2520 </span><span class="string">SecondaryNameNode</span></span><br><span class="line"><span class="number">2858 </span><span class="string">HMaster</span></span><br><span class="line"><span class="number">2365 </span><span class="string">NameNode</span></span><br></pre></td></tr></table></figure><p>slave节点上可看到如下进程：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">root@slave1</span> <span class="string">opt</span>]<span class="comment"># jps</span></span><br><span class="line"><span class="number">2258 </span><span class="string">QuorumPeerMain</span></span><br><span class="line"><span class="number">2339 </span><span class="string">HRegionServer</span></span><br><span class="line"><span class="number">2154 </span><span class="string">DataNode</span></span><br><span class="line"><span class="number">2506 </span><span class="string">Jps</span></span><br></pre></td></tr></table></figure><p>如果没有问题，那么通过hbase shell查看状态可看到：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@master logs]# <span class="regexp">/opt/</span>hbase<span class="regexp">/bin/</span>hbase shell</span><br><span class="line"><span class="number">2018</span>-<span class="number">01</span>-<span class="number">24</span> <span class="number">17</span>:<span class="number">38</span>:<span class="number">50</span>,<span class="number">902</span> INFO  [main] Configuration.deprecation: hadoop.<span class="keyword">native</span>.lib is deprecated. Instead, use io.<span class="keyword">native</span>.lib.available</span><br><span class="line"><span class="number">2018</span>-<span class="number">01</span>-<span class="number">24</span> <span class="number">17</span>:<span class="number">38</span>:<span class="number">53</span>,<span class="number">829</span> WARN  [main] util.NativeCodeLoader: Unable to load <span class="keyword">native</span>-hadoop library <span class="keyword">for</span> your platform... using builtin-java classes where applicable</span><br><span class="line">SLF4J: <span class="keyword">Class</span> path contains multiple SLF4J bindings.</span><br><span class="line">SLF4J: Found binding in [jar:<span class="keyword">file</span>:<span class="regexp">/opt/</span>hbase<span class="regexp">/lib/</span>slf4j-log4j12-<span class="number">1.7</span>.<span class="number">5</span>.jar!<span class="regexp">/org/</span>slf4j<span class="regexp">/impl/</span>StaticLoggerBinder.<span class="keyword">class</span>]</span><br><span class="line">SLF4J: Found binding in [jar:<span class="keyword">file</span>:<span class="regexp">/opt/</span>hadoop<span class="regexp">/share/</span>hadoop<span class="regexp">/common/</span>lib<span class="regexp">/slf4j-log4j12-1.7.5.jar!/</span>org<span class="regexp">/slf4j/im</span>pl/StaticLoggerBinder.<span class="keyword">class</span>]</span><br><span class="line">SLF4J: See http:<span class="comment">//www.slf4j.org/codes.html#multiple_bindings for an explanation.</span></span><br><span class="line">SLF4J: Actual binding is of type [org.slf4j.impl.Log4jLoggerFactory]</span><br><span class="line">HBase Shell; enter <span class="string">&#x27;help&lt;RETURN&gt;&#x27;</span> <span class="keyword">for</span> list of supported commands.</span><br><span class="line">Type <span class="string">&quot;exit&lt;RETURN&gt;&quot;</span> to leave the HBase Shell</span><br><span class="line">Version <span class="number">1.2</span>.<span class="number">0</span>-cdh5.<span class="number">7.6</span>, rUnknown, Tue Feb <span class="number">21</span> <span class="number">15</span>:<span class="number">18</span>:<span class="number">14</span> PST <span class="number">2017</span></span><br><span class="line"></span><br><span class="line">hbase(main):<span class="number">001</span>:<span class="number">0</span>&gt; status</span><br><span class="line"><span class="number">1</span> active master, <span class="number">0</span> backup masters, <span class="number">3</span> servers, <span class="number">0</span> dead, <span class="number">0.6667</span> average load</span><br></pre></td></tr></table></figure><p>我第一次查看报错：<code>Master is initializing</code>.</p><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>虽然上面看到相关进程都已启动，但是进入hbase shell后查看状态报错：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">[<span class="identifier">root</span>@<span class="identifier">master</span> <span class="identifier">bin</span>]</span># /opt/hbase/bin/hbase shell</span><br><span class="line"><span class="number">2018</span>-<span class="number">01</span>-<span class="number">24</span> <span class="number">16</span>:<span class="number">40</span>:<span class="number">15</span>,<span class="number">994</span> INFO  <span class="literal">[<span class="identifier">main</span>]</span> <span class="module-access"><span class="module"><span class="identifier">Configuration</span>.</span></span>deprecation: hadoop.native.lib is deprecated. Instead, use io.native.lib.available</span><br><span class="line"><span class="number">2018</span>-<span class="number">01</span>-<span class="number">24</span> <span class="number">16</span>:<span class="number">40</span>:<span class="number">18</span>,<span class="number">484</span> WARN  <span class="literal">[<span class="identifier">main</span>]</span> util.NativeCodeLoader: Unable <span class="keyword">to</span> load native-hadoop library <span class="keyword">for</span> your platform... using builtin-java classes where applicable</span><br><span class="line">SLF4J: Class path contains multiple SLF4J bindings.</span><br><span class="line">SLF4J: Found binding <span class="keyword">in</span> <span class="literal">[<span class="identifier">jar</span>:<span class="identifier">file</span>:<span class="operator">/</span><span class="identifier">opt</span><span class="operator">/</span><span class="identifier">hbase</span><span class="operator">/</span><span class="identifier">lib</span><span class="operator">/</span><span class="identifier">slf4j</span>-<span class="identifier">log4j12</span>-<span class="number">1.7</span>.<span class="number">5.</span><span class="identifier">jar</span>!<span class="operator">/</span><span class="identifier">org</span><span class="operator">/</span><span class="identifier">slf4j</span><span class="operator">/</span><span class="identifier">impl</span><span class="operator">/</span>S<span class="identifier">taticLoggerBinder</span>.<span class="identifier">class</span>]</span></span><br><span class="line">SLF4J: Found binding <span class="keyword">in</span> <span class="literal">[<span class="identifier">jar</span>:<span class="identifier">file</span>:<span class="operator">/</span><span class="identifier">opt</span><span class="operator">/</span><span class="identifier">hadoop</span><span class="operator">/</span><span class="identifier">share</span><span class="operator">/</span><span class="identifier">hadoop</span><span class="operator">/</span><span class="identifier">common</span><span class="operator">/</span><span class="identifier">lib</span><span class="operator">/</span><span class="identifier">slf4j</span>-<span class="identifier">log4j12</span>-<span class="number">1.7</span>.<span class="number">5.</span><span class="identifier">jar</span>!<span class="operator">/</span><span class="identifier">org</span><span class="operator">/</span><span class="identifier">slf4j</span><span class="operator">/</span><span class="identifier">impl</span><span class="operator">/</span>S<span class="identifier">taticLoggerBinder</span>.<span class="identifier">class</span>]</span></span><br><span class="line">SLF4J: See http:<span class="comment">//www.slf4j.org/codes.html#multiple_bindings for an explanation.</span></span><br><span class="line">SLF4J: Actual binding is <span class="keyword">of</span> <span class="keyword">type</span> <span class="literal">[<span class="identifier">org</span>.<span class="identifier">slf4j</span>.<span class="identifier">impl</span>.L<span class="identifier">og4jLoggerFactory</span>]</span></span><br><span class="line">HBase Shell; enter &#x27;help&lt;RETURN&gt;&#x27; <span class="keyword">for</span> <span class="built_in">list</span> <span class="keyword">of</span> supported commands.</span><br><span class="line">Type <span class="string">&quot;exit&lt;RETURN&gt;&quot;</span> <span class="keyword">to</span> leave the HBase Shell</span><br><span class="line">Version <span class="number">1.2</span>.<span class="number">0</span>-cdh5.<span class="number">7.6</span>, rUnknown, Tue Feb <span class="number">21</span> <span class="number">15</span>:<span class="number">18</span>:<span class="number">14</span> PST <span class="number">2017</span></span><br><span class="line"></span><br><span class="line">hbase(main):<span class="number">001</span>:<span class="number">0</span>&gt; status</span><br><span class="line"></span><br><span class="line">ERROR: org.apache.hadoop.hbase.PleaseHoldException: Master is initializing</span><br><span class="line">        at org.apache.hadoop.hbase.master.<span class="module-access"><span class="module"><span class="identifier">HMaster</span>.</span></span>check<span class="constructor">Initialized(HMaster.<span class="params">java</span>:2316)</span></span><br><span class="line">        at org.apache.hadoop.hbase.master.<span class="module-access"><span class="module"><span class="identifier">MasterRpcServices</span>.</span></span>get<span class="constructor">ClusterStatus(MasterRpcServices.<span class="params">java</span>:783)</span></span><br><span class="line">        at org.apache.hadoop.hbase.protobuf.generated.<span class="module-access"><span class="module"><span class="identifier">MasterProtos$MasterService$2</span>.</span></span>call<span class="constructor">BlockingMethod(MasterProtos.<span class="params">java</span>:55652)</span></span><br><span class="line">        at org.apache.hadoop.hbase.ipc.<span class="module-access"><span class="module"><span class="identifier">RpcServer</span>.</span></span>call(<span class="module-access"><span class="module"><span class="identifier">RpcServer</span>.</span></span>java:<span class="number">2170</span>)</span><br><span class="line">        at org.apache.hadoop.hbase.ipc.<span class="module-access"><span class="module"><span class="identifier">CallRunner</span>.</span></span>run(<span class="module-access"><span class="module"><span class="identifier">CallRunner</span>.</span></span>java:<span class="number">109</span>)</span><br><span class="line">        at org.apache.hadoop.hbase.ipc.<span class="module-access"><span class="module"><span class="identifier">RpcExecutor</span>.</span></span>consumer<span class="constructor">Loop(RpcExecutor.<span class="params">java</span>:133)</span></span><br><span class="line">        at org.apache.hadoop.hbase.ipc.<span class="module-access"><span class="module"><span class="identifier">RpcExecutor$1</span>.</span></span>run(<span class="module-access"><span class="module"><span class="identifier">RpcExecutor</span>.</span></span>java:<span class="number">108</span>)</span><br><span class="line">        at java.lang.<span class="module-access"><span class="module"><span class="identifier">Thread</span>.</span></span>run(<span class="module-access"><span class="module"><span class="identifier">Thread</span>.</span></span>java:<span class="number">748</span>)</span><br></pre></td></tr></table></figure><p>查看master节点的hbase目录下的logs日志文件<code>hbase-root-master-master.log</code>，发现以下这段总在重复。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">2018</span>-<span class="number">01</span>-<span class="number">24</span> <span class="number">17</span>:<span class="number">29</span>:<span class="number">32</span>,<span class="number">752</span> INFO <span class="meta"> [master:60000.activeMasterManager] master.ServerManager: Waiting for region servers count to settle; currently checked in 0, slept for 529904 ms, expecting minimum of 1, maximum of 2147483647, timeout of 4500 ms, interval of 1500 ms.</span></span><br></pre></td></tr></table></figure><p>查看slave节点的hbase目录下的logs日志文件<code>hbase-root-regionserver-slave1.log</code>，发现如下一段异常：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2018</span>-<span class="number">01</span>-<span class="number">24</span> <span class="number">17</span>:<span class="number">21</span>:<span class="number">52</span>,<span class="number">093</span> WARN  <span class="selector-attr">[regionserver/localhost/127.0.0.1:60020]</span> regionserver<span class="selector-class">.HRegionServer</span>: error telling master we are up</span><br><span class="line">com<span class="selector-class">.google</span><span class="selector-class">.protobuf</span><span class="selector-class">.ServiceException</span>: java<span class="selector-class">.net</span><span class="selector-class">.SocketException</span>: Invalid argument</span><br><span class="line">at org<span class="selector-class">.apache</span><span class="selector-class">.hadoop</span><span class="selector-class">.hbase</span><span class="selector-class">.ipc</span><span class="selector-class">.AbstractRpcClient</span><span class="selector-class">.callBlockingMethod</span>(AbstractRpcClient<span class="selector-class">.java</span>:<span class="number">240</span>)</span><br><span class="line">at org<span class="selector-class">.apache</span><span class="selector-class">.hadoop</span><span class="selector-class">.hbase</span><span class="selector-class">.ipc</span>.AbstractRpcClient<span class="variable">$BlockingRpcChannelImplementation</span><span class="selector-class">.callBlockingMethod</span>(AbstractRpcClient<span class="selector-class">.java</span>:<span class="number">336</span>)</span><br><span class="line">at org<span class="selector-class">.apache</span><span class="selector-class">.hadoop</span><span class="selector-class">.hbase</span><span class="selector-class">.protobuf</span><span class="selector-class">.generated</span>.RegionServerStatusProtos<span class="variable">$RegionServerStatusService</span><span class="variable">$BlockingStub</span><span class="selector-class">.regionServerStartup</span>(RegionServerStatusProtos<span class="selector-class">.java</span>:<span class="number">8982</span>)</span><br><span class="line">at org<span class="selector-class">.apache</span><span class="selector-class">.hadoop</span><span class="selector-class">.hbase</span><span class="selector-class">.regionserver</span><span class="selector-class">.HRegionServer</span><span class="selector-class">.reportForDuty</span>(HRegionServer<span class="selector-class">.java</span>:<span class="number">2300</span>)</span><br><span class="line">at org<span class="selector-class">.apache</span><span class="selector-class">.hadoop</span><span class="selector-class">.hbase</span><span class="selector-class">.regionserver</span><span class="selector-class">.HRegionServer</span><span class="selector-class">.run</span>(HRegionServer<span class="selector-class">.java</span>:<span class="number">914</span>)</span><br><span class="line">at java<span class="selector-class">.lang</span><span class="selector-class">.Thread</span><span class="selector-class">.run</span>(Thread<span class="selector-class">.java</span>:<span class="number">748</span>)</span><br></pre></td></tr></table></figure><p>经过百度，发现slave节点上的<code>/etc/hosts</code>文件含有这样一行：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>   localhost slave<span class="number">2</span> slave<span class="number">2</span> localhost<span class="number">4</span> localhost<span class="number">4</span>.localdomain<span class="number">4</span></span><br></pre></td></tr></table></figure><p>改为如下再启动hbase就正常了：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>   localhost localhost.localdomain localhost<span class="number">4</span> localhost<span class="number">4</span>.localdomain<span class="number">4</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 码路刺客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> 原创 </tag>
            
            <tag> 分布式 </tag>
            
            <tag> Hbase </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS上zookeeper集群模式安装配置</title>
      <link href="2018/01/20/20180120001/"/>
      <url>2018/01/20/20180120001/</url>
      
        <content type="html"><![CDATA[<p>本篇介绍在四个节点的集群中搭建zookeeper环境，zookeeper可配置三种模式运行：单机模式，伪集群模式，集群模式，本文使用集群模式搭建。</p><span id="more"></span><h3 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h3><ul><li>虚拟机：VMware Workstation 12 Player</li><li>Linux版本：CentOS release 6.4 (Final)</li><li>zookeeper版本：zookeeper-3.4.5-cdh5.7.6.tar.gz</li><li>集群节点：<ul><li>master:192.168.137.11 内存1G</li><li>slave1:192.168.137.12 内存512M</li><li>slave2:192.168.137.13 内存512M</li><li>slave3:192.168.137.14 内存512M</li></ul></li><li>前提：java已安装，已配置ssh免密登录，停掉防火墙等。</li></ul><h3 id="上传安装包"><a href="#上传安装包" class="headerlink" title="上传安装包"></a>上传安装包</h3><p>将下载的zookeeper-3.4.5-cdh5.7.6.tar.gz安装包上传到CentOS指定目录，例如<code>/opt</code>。<br>上传方法很多，这里在SecureCRT用rz命令。</p><p>解压缩安装包：</p><p><code>tar -zxf zookeeper-3.4.5-cdh5.7.6.tar.gz</code></p><p>重命名文件夹：</p><p><code>mv zookeeper-3.4.5-cdh5.7.6 zookeeper</code></p><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>配置文件在安装目录<code>conf</code>文件夹下的<code>zoo_sample.cfg</code>，需要先复制一个并且改文件名：</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@master conf]<span class="comment"># pwd</span></span><br><span class="line">/opt/zookeeper/conf</span><br><span class="line">[root@master conf]<span class="comment"># cp zoo_sample.cfg zoo.cfg</span></span><br><span class="line">[root@master conf]<span class="comment"># ll</span></span><br><span class="line">total 16</span><br><span class="line">-rw-rw-r--.<span class="number"> 1 </span>root root <span class="number"> 535 </span>Feb<span class="number"> 22 </span><span class="number"> 2017 </span>configuration.xsl</span><br><span class="line">-rw-rw-r--.<span class="number"> 1 </span>root root<span class="number"> 2693 </span>Feb<span class="number"> 22 </span><span class="number"> 2017 </span>log4j.properties</span><br><span class="line">-rw-r--r--.<span class="number"> 1 </span>root root <span class="number"> 808 </span>Jan<span class="number"> 23 </span>10:06 zoo.cfg</span><br><span class="line">-rw-rw-r--.<span class="number"> 1 </span>root root <span class="number"> 808 </span>Feb<span class="number"> 22 </span><span class="number"> 2017 </span>zoo_sample.cfg</span><br></pre></td></tr></table></figure><p>修改zoo.cfg配置文件：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tickTime</span>=<span class="number">2000</span></span><br><span class="line"><span class="comment"># The number of ticks that the initial</span></span><br><span class="line"><span class="comment"># synchronization phase can take</span></span><br><span class="line"><span class="attr">initLimit</span>=<span class="number">10</span></span><br><span class="line"><span class="comment"># The number of ticks that can pass between</span></span><br><span class="line"><span class="comment"># sending a request and getting an acknowledgement</span></span><br><span class="line"><span class="attr">syncLimit</span>=<span class="number">5</span></span><br><span class="line"><span class="comment"># the directory where the snapshot is stored.</span></span><br><span class="line"><span class="comment"># do not use /tmp for storage, /tmp here is just</span></span><br><span class="line"><span class="comment"># example sakes.</span></span><br><span class="line"><span class="attr">dataDir</span>=/opt/zookeeper/tmp</span><br><span class="line"><span class="comment"># the port at which the clients will connect</span></span><br><span class="line"><span class="attr">clientPort</span>=<span class="number">2181</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Be sure to read the maintenance section of the</span></span><br><span class="line"><span class="comment"># administrator guide before turning on autopurge.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># http://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_maintenance</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># The number of snapshots to retain in dataDir</span></span><br><span class="line"><span class="comment">#autopurge.snapRetainCount=3</span></span><br><span class="line"><span class="comment"># Purge task interval in hours</span></span><br><span class="line"><span class="comment"># Set to &quot;0&quot; to disable auto purge feature</span></span><br><span class="line"><span class="comment">#autopurge.purgeInterval=1</span></span><br><span class="line"><span class="attr">dataLogDir</span>=/opt/zookeeper/logs</span><br><span class="line"><span class="attr">server.1</span>=master:<span class="number">2888</span>:<span class="number">3888</span></span><br><span class="line"><span class="attr">server.2</span>=slave1:<span class="number">2888</span>:<span class="number">3888</span></span><br><span class="line"><span class="attr">server.3</span>=slave2:<span class="number">2888</span>:<span class="number">3888</span></span><br><span class="line"><span class="attr">server.4</span>=slave3:<span class="number">2888</span>:<span class="number">3888</span></span><br></pre></td></tr></table></figure><p>参数说明：</p><ul><li>tickTime: zookeeper中使用的基本时间单位, 毫秒值.</li><li>dataDir: 数据目录. 可以是任意目录.</li><li>dataLogDir: log目录, 同样可以是任意目录. 如果没有设置该参数, 将使用和dataDir相同的设置.</li><li>clientPort: 监听client连接的端口号.</li><li>initLimit: zookeeper集群中的包含多台server, 其中一台为leader, 集群中其余的server为follower. initLimit参数配置初始化连接时, follower和leader之间的最长心跳时间. 此时该参数设置为5, 说明时间限制为5倍tickTime, 即5*2000=10000ms=10s.</li><li>syncLimit: 该参数配置leader和follower之间发送消息, 请求和应答的最大时间长度. 此时该参数设置为2, 说明时间限制为2倍tickTime, 即4000ms.</li><li>server.X=A:B:C 其中X是一个数字, 表示这是第几号server. A是该server所在的IP地址. B配置该server和集群中的leader交换消息所使用的端口. C配置选举leader时所使用的端口. </li></ul><p>由于我们修改了<code>dataDir</code>目录，在zookeeper目录中创建一个文件夹用于后面创建<code>myid</code>文件：</p><p><code>mkdir /opt/zookeeper/tmp</code></p><p><code>mkdir /opt/zookeeper/logs</code></p><h3 id="复制安装包到其他节点"><a href="#复制安装包到其他节点" class="headerlink" title="复制安装包到其他节点"></a>复制安装包到其他节点</h3><p>将<code>zookeeper</code>文件夹复制到其他三个服务器上：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scp -r <span class="regexp">/opt/</span>zookeeper<span class="regexp">/ root@slave1:/</span>opt</span><br><span class="line">scp -r <span class="regexp">/opt/</span>zookeeper<span class="regexp">/ root@slave2:/</span>opt</span><br><span class="line">scp -r <span class="regexp">/opt/</span>zookeeper<span class="regexp">/ root@slave3:/</span>opt</span><br></pre></td></tr></table></figure><p>在master节点上用一下命令给每个节点上创建<code>myid</code>文件，文件中的id号与<code>zoo.cfg</code>配置文件中的对应：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@<span class="keyword">master</span> <span class="title">zookeeper</span>]<span class="comment"># echo 1 &gt; /opt/zookeeper/tmp/myid</span></span><br><span class="line">[root@<span class="keyword">master</span> <span class="title">zookeeper</span>]<span class="comment"># ssh slave1 &quot;echo 2 &gt; /opt/zookeeper/tmp/myid&quot;</span></span><br><span class="line">[root@<span class="keyword">master</span> <span class="title">zookeeper</span>]<span class="comment"># ssh slave2 &quot;echo 3 &gt; /opt/zookeeper/tmp/myid&quot;</span></span><br><span class="line">[root@<span class="keyword">master</span> <span class="title">zookeeper</span>]<span class="comment"># ssh slave3 &quot;echo 4 &gt; /opt/zookeeper/tmp/myid&quot;</span></span><br></pre></td></tr></table></figure><h3 id="运行启动"><a href="#运行启动" class="headerlink" title="运行启动"></a>运行启动</h3><p>由于没有配置环境变量，需要用全路径执行：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@master zookeeper]# <span class="regexp">/opt/</span>zookeeper<span class="regexp">/bin/</span>zkServer.sh start</span><br><span class="line">JMX enabled by <span class="keyword">default</span></span><br><span class="line">Using config: <span class="regexp">/opt/</span>zookeeper<span class="regexp">/bin/</span>..<span class="regexp">/conf/</span>zoo.cfg</span><br><span class="line">Starting zookeeper ... STARTED</span><br></pre></td></tr></table></figure><p>其实配置文件中修改<code>dataLogDir</code>的本意是想让启动日志输出到配置的文件夹里，但是好像并没有，日志文件<code>zookeeper.out</code>还是在zookeeper的安装目录下生成。</p><p>查看<code>zookeeper.out</code>文件发现有错误：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">2018-01-23</span> <span class="selector-tag">10</span>:<span class="selector-tag">48</span>:<span class="selector-tag">35</span>,<span class="selector-tag">470</span> <span class="selector-attr">[myid:]</span> <span class="selector-tag">-</span> <span class="selector-tag">INFO</span>  <span class="selector-attr">[main:QuorumPeerConfig@101]</span> <span class="selector-tag">-</span> <span class="selector-tag">Reading</span> <span class="selector-tag">configuration</span> <span class="selector-tag">from</span>: /<span class="selector-tag">opt</span>/<span class="selector-tag">zookeeper</span>/<span class="selector-tag">bin</span>/../<span class="selector-tag">conf</span>/<span class="selector-tag">zoo</span><span class="selector-class">.cfg</span></span><br><span class="line"><span class="selector-tag">2018-01-23</span> <span class="selector-tag">10</span>:<span class="selector-tag">48</span>:<span class="selector-tag">35</span>,<span class="selector-tag">484</span> <span class="selector-attr">[myid:]</span> <span class="selector-tag">-</span> <span class="selector-tag">WARN</span>  <span class="selector-attr">[main:QuorumPeerConfig@290]</span> <span class="selector-tag">-</span> <span class="selector-tag">Non-optimial</span> <span class="selector-tag">configuration</span>, <span class="selector-tag">consider</span> <span class="selector-tag">an</span> <span class="selector-tag">odd</span> <span class="selector-tag">number</span> <span class="selector-tag">of</span> <span class="selector-tag">servers</span>.</span><br><span class="line"><span class="selector-tag">2018-01-23</span> <span class="selector-tag">10</span>:<span class="selector-tag">48</span>:<span class="selector-tag">35</span>,<span class="selector-tag">484</span> <span class="selector-attr">[myid:]</span> <span class="selector-tag">-</span> <span class="selector-tag">INFO</span>  <span class="selector-attr">[main:QuorumPeerConfig@334]</span> <span class="selector-tag">-</span> <span class="selector-tag">Defaulting</span> <span class="selector-tag">to</span> <span class="selector-tag">majority</span> <span class="selector-tag">quorums</span></span><br><span class="line"><span class="selector-tag">2018-01-23</span> <span class="selector-tag">10</span>:<span class="selector-tag">48</span>:<span class="selector-tag">35</span>,<span class="selector-tag">512</span> <span class="selector-attr">[myid:4]</span> <span class="selector-tag">-</span> <span class="selector-tag">INFO</span>  <span class="selector-attr">[main:DatadirCleanupManager@78]</span> <span class="selector-tag">-</span> <span class="selector-tag">autopurge</span><span class="selector-class">.snapRetainCount</span> <span class="selector-tag">set</span> <span class="selector-tag">to</span> <span class="selector-tag">3</span></span><br><span class="line"><span class="selector-tag">2018-01-23</span> <span class="selector-tag">10</span>:<span class="selector-tag">48</span>:<span class="selector-tag">35</span>,<span class="selector-tag">513</span> <span class="selector-attr">[myid:4]</span> <span class="selector-tag">-</span> <span class="selector-tag">INFO</span>  <span class="selector-attr">[main:DatadirCleanupManager@79]</span> <span class="selector-tag">-</span> <span class="selector-tag">autopurge</span><span class="selector-class">.purgeInterval</span> <span class="selector-tag">set</span> <span class="selector-tag">to</span> <span class="selector-tag">0</span></span><br><span class="line"><span class="selector-tag">2018-01-23</span> <span class="selector-tag">10</span>:<span class="selector-tag">48</span>:<span class="selector-tag">35</span>,<span class="selector-tag">513</span> <span class="selector-attr">[myid:4]</span> <span class="selector-tag">-</span> <span class="selector-tag">INFO</span>  <span class="selector-attr">[main:DatadirCleanupManager@101]</span> <span class="selector-tag">-</span> <span class="selector-tag">Purge</span> <span class="selector-tag">task</span> <span class="selector-tag">is</span> <span class="selector-tag">not</span> <span class="selector-tag">scheduled</span>.</span><br><span class="line"><span class="selector-tag">2018-01-23</span> <span class="selector-tag">10</span>:<span class="selector-tag">48</span>:<span class="selector-tag">35</span>,<span class="selector-tag">536</span> <span class="selector-attr">[myid:4]</span> <span class="selector-tag">-</span> <span class="selector-tag">INFO</span>  <span class="selector-attr">[main:QuorumPeerMain@132]</span> <span class="selector-tag">-</span> <span class="selector-tag">Starting</span> <span class="selector-tag">quorum</span> <span class="selector-tag">peer</span></span><br><span class="line"><span class="selector-tag">2018-01-23</span> <span class="selector-tag">10</span>:<span class="selector-tag">48</span>:<span class="selector-tag">35</span>,<span class="selector-tag">587</span> <span class="selector-attr">[myid:4]</span> <span class="selector-tag">-</span> <span class="selector-tag">INFO</span>  <span class="selector-attr">[main:NIOServerCnxnFactory@94]</span> <span class="selector-tag">-</span> <span class="selector-tag">binding</span> <span class="selector-tag">to</span> <span class="selector-tag">port</span> <span class="selector-tag">0</span><span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.0</span>/<span class="selector-tag">0</span><span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.0</span>:<span class="selector-tag">2181</span></span><br><span class="line"><span class="selector-tag">2018-01-23</span> <span class="selector-tag">10</span>:<span class="selector-tag">48</span>:<span class="selector-tag">35</span>,<span class="selector-tag">611</span> <span class="selector-attr">[myid:4]</span> <span class="selector-tag">-</span> <span class="selector-tag">INFO</span>  <span class="selector-attr">[main:QuorumPeer@913]</span> <span class="selector-tag">-</span> <span class="selector-tag">tickTime</span> <span class="selector-tag">set</span> <span class="selector-tag">to</span> <span class="selector-tag">2000</span></span><br><span class="line"><span class="selector-tag">2018-01-23</span> <span class="selector-tag">10</span>:<span class="selector-tag">48</span>:<span class="selector-tag">35</span>,<span class="selector-tag">612</span> <span class="selector-attr">[myid:4]</span> <span class="selector-tag">-</span> <span class="selector-tag">INFO</span>  <span class="selector-attr">[main:QuorumPeer@933]</span> <span class="selector-tag">-</span> <span class="selector-tag">minSessionTimeout</span> <span class="selector-tag">set</span> <span class="selector-tag">to</span> <span class="selector-tag">-1</span></span><br><span class="line"><span class="selector-tag">2018-01-23</span> <span class="selector-tag">10</span>:<span class="selector-tag">48</span>:<span class="selector-tag">35</span>,<span class="selector-tag">612</span> <span class="selector-attr">[myid:4]</span> <span class="selector-tag">-</span> <span class="selector-tag">INFO</span>  <span class="selector-attr">[main:QuorumPeer@944]</span> <span class="selector-tag">-</span> <span class="selector-tag">maxSessionTimeout</span> <span class="selector-tag">set</span> <span class="selector-tag">to</span> <span class="selector-tag">-1</span></span><br><span class="line"><span class="selector-tag">2018-01-23</span> <span class="selector-tag">10</span>:<span class="selector-tag">48</span>:<span class="selector-tag">35</span>,<span class="selector-tag">612</span> <span class="selector-attr">[myid:4]</span> <span class="selector-tag">-</span> <span class="selector-tag">INFO</span>  <span class="selector-attr">[main:QuorumPeer@959]</span> <span class="selector-tag">-</span> <span class="selector-tag">initLimit</span> <span class="selector-tag">set</span> <span class="selector-tag">to</span> <span class="selector-tag">10</span></span><br><span class="line"><span class="selector-tag">2018-01-23</span> <span class="selector-tag">10</span>:<span class="selector-tag">48</span>:<span class="selector-tag">35</span>,<span class="selector-tag">639</span> <span class="selector-attr">[myid:4]</span> <span class="selector-tag">-</span> <span class="selector-tag">INFO</span>  <span class="selector-attr">[main:QuorumPeer@429]</span> <span class="selector-tag">-</span> <span class="selector-tag">currentEpoch</span> <span class="selector-tag">not</span> <span class="selector-tag">found</span>! <span class="selector-tag">Creating</span> <span class="selector-tag">with</span> <span class="selector-tag">a</span> <span class="selector-tag">reasonable</span> <span class="selector-tag">default</span> <span class="selector-tag">of</span> <span class="selector-tag">0</span>. <span class="selector-tag">This</span> <span class="selector-tag">should</span> <span class="selector-tag">only</span> <span class="selector-tag">happen</span> <span class="keyword">when</span> you are upgrading your installation</span><br><span class="line"><span class="number">2018</span>-<span class="number">01</span>-<span class="number">23</span> <span class="number">10</span>:<span class="number">48</span>:<span class="number">35</span>,<span class="number">643</span> [<span class="attribute">myid</span>:<span class="number">4</span>] - INFO  [<span class="attribute">main</span>:QuorumPeer<span class="variable">@444</span>] - acceptedEpoch <span class="keyword">not</span> found! Creating with a reasonable default of <span class="number">0</span>. This should only happen <span class="keyword">when</span> you are upgrading your installation</span><br><span class="line"><span class="number">2018</span>-<span class="number">01</span>-<span class="number">23</span> <span class="number">10</span>:<span class="number">48</span>:<span class="number">35</span>,<span class="number">652</span> [<span class="attribute">myid</span>:<span class="number">4</span>] - INFO  [<span class="attribute">Thread-1</span>:QuorumCnxManager$Listener<span class="variable">@486</span>] - My election bind <span class="attribute">port</span>: <span class="number">0.0</span>.<span class="number">0.0</span>/<span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">3888</span></span><br><span class="line"><span class="number">2018</span>-<span class="number">01</span>-<span class="number">23</span> <span class="number">10</span>:<span class="number">48</span>:<span class="number">35</span>,<span class="number">674</span> [<span class="attribute">myid</span>:<span class="number">4</span>] - INFO  [QuorumPeer[myid=<span class="number">4</span>]/<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">2181</span>:QuorumPeer<span class="variable">@670</span>] - LOOKING</span><br><span class="line"><span class="number">2018</span>-<span class="number">01</span>-<span class="number">23</span> <span class="number">10</span>:<span class="number">48</span>:<span class="number">35</span>,<span class="number">679</span> [<span class="attribute">myid</span>:<span class="number">4</span>] - INFO  [QuorumPeer[myid=<span class="number">4</span>]/<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">0</span>:<span class="number">2181</span>:FastLeaderElection<span class="variable">@740</span>] - New election. My id =  <span class="number">4</span>, proposed zxid=<span class="number">0</span>x0</span><br><span class="line"><span class="number">2018</span>-<span class="number">01</span>-<span class="number">23</span> <span class="number">10</span>:<span class="number">48</span>:<span class="number">35</span>,<span class="number">692</span> [<span class="attribute">myid</span>:<span class="number">4</span>] - INFO  [slave3/<span class="number">192.168</span>.<span class="number">137.14</span>:<span class="number">3888</span>:QuorumCnxManager$Listener<span class="variable">@493</span>] - Received connection request /<span class="number">192.168</span>.<span class="number">137.11</span>:<span class="number">34491</span></span><br><span class="line"><span class="number">2018</span>-<span class="number">01</span>-<span class="number">23</span> <span class="number">10</span>:<span class="number">48</span>:<span class="number">35</span>,<span class="number">704</span> [<span class="attribute">myid</span>:<span class="number">4</span>] - INFO  [WorkerReceiver[myid=<span class="number">4</span>]:FastLeaderElection<span class="variable">@542</span>] - <span class="attribute">Notification</span>: <span class="number">4</span> (n.leader), <span class="number">0</span>x0 (n.zxid), <span class="number">0</span>x1 (n.round), LOOKING (n.state), <span class="number">4</span> (n.sid), <span class="number">0</span>x0 (n.peerEPoch), LOOKING (my state)</span><br><span class="line"><span class="number">2018</span>-<span class="number">01</span>-<span class="number">23</span> <span class="number">10</span>:<span class="number">48</span>:<span class="number">35</span>,<span class="number">706</span> [<span class="attribute">myid</span>:<span class="number">4</span>] - WARN  [WorkerSender[myid=<span class="number">4</span>]:QuorumCnxManager<span class="variable">@368</span>] - Cannot open channel to <span class="number">2</span> at election address slave1/<span class="number">192.168</span>.<span class="number">137.12</span>:<span class="number">3888</span></span><br><span class="line">java.net.<span class="attribute">ConnectException</span>: Connection refused (Connection refused)</span><br><span class="line">at java.net.PlainSocketImpl.socketConnect(Native Method)</span><br><span class="line">at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.<span class="attribute">java</span>:<span class="number">350</span>)</span><br><span class="line">at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.<span class="attribute">java</span>:<span class="number">206</span>)</span><br><span class="line">at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.<span class="attribute">java</span>:<span class="number">188</span>)</span><br><span class="line">at java.net.SocksSocketImpl.connect(SocksSocketImpl.<span class="attribute">java</span>:<span class="number">392</span>)</span><br><span class="line">at java.net.Socket.connect(Socket.<span class="attribute">java</span>:<span class="number">589</span>)</span><br><span class="line">at org.apache.zookeeper.server.quorum.QuorumCnxManager.connectOne(QuorumCnxManager.<span class="attribute">java</span>:<span class="number">354</span>)</span><br><span class="line">at org.apache.zookeeper.server.quorum.QuorumCnxManager.toSend(QuorumCnxManager.<span class="attribute">java</span>:<span class="number">327</span>)</span><br><span class="line">at org.apache.zookeeper.server.quorum.FastLeaderElection$Messenger$WorkerSender.process(FastLeaderElection.<span class="attribute">java</span>:<span class="number">393</span>)</span><br><span class="line">at org.apache.zookeeper.server.quorum.FastLeaderElection$Messenger$WorkerSender.run(FastLeaderElection.<span class="attribute">java</span>:<span class="number">365</span>)</span><br><span class="line">at java.lang.Thread.run(Thread.<span class="attribute">java</span>:<span class="number">748</span>)</span><br></pre></td></tr></table></figure><p>提示<code>Connection refused</code>的异常，其实一开始先不急着百度这个问题，其实要所有节点上都启动zookeeper后再看看运行状态，现在查看运行状态都是没运行的，也找不到相应的进程：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@master zookeeper]# <span class="regexp">/opt/</span>zookeeper<span class="regexp">/bin/</span>zkServer.sh start</span><br><span class="line">JMX enabled by <span class="keyword">default</span></span><br><span class="line">Using config: <span class="regexp">/opt/</span>zookeeper<span class="regexp">/bin/</span>..<span class="regexp">/conf/</span>zoo.cfg</span><br><span class="line">Starting zookeeper ... STARTED</span><br><span class="line">[root@master zookeeper]# <span class="regexp">/opt/</span>zookeeper<span class="regexp">/bin/</span>zkServer.sh status</span><br><span class="line">JMX enabled by <span class="keyword">default</span></span><br><span class="line">Using config: <span class="regexp">/opt/</span>zookeeper<span class="regexp">/bin/</span>..<span class="regexp">/conf/</span>zoo.cfg</span><br><span class="line">Error contacting service. It is probably not running.</span><br></pre></td></tr></table></figure><p>到其他节点服务器上都启动zookeeper，过一会儿后每个服务器查看状态：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@master zookeeper]# <span class="regexp">/opt/</span>zookeeper<span class="regexp">/bin/</span>zkServer.sh status</span><br><span class="line">JMX enabled by <span class="keyword">default</span></span><br><span class="line">Using config: <span class="regexp">/opt/</span>zookeeper<span class="regexp">/bin/</span>..<span class="regexp">/conf/</span>zoo.cfg</span><br><span class="line">Mode: follower</span><br><span class="line">[root@master zookeeper]# jps</span><br><span class="line"><span class="number">5488</span> QuorumPeerMain</span><br><span class="line"><span class="number">5539</span> Jps</span><br></pre></td></tr></table></figure><p>如果有Mode和QuorumPeerMain，就说明已经启动成功了。</p><p>如果要关闭zookeeper,需要在每个节点上执行：</p><p><code>/opt/zookeeper/bin/zkServer.sh stop</code></p><p>另外如果使用如下命令启动，就会在启动时输出日志信息：</p><p><code>/opt/zookeeper/bin/zkServer.sh start-foreground</code></p><h3 id="批量启动和关闭"><a href="#批量启动和关闭" class="headerlink" title="批量启动和关闭"></a>批量启动和关闭</h3><p>一台一台服务器去执行命令有点麻烦，写一个脚本批量执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#下面变量修改zookeeper安装目录</span></span><br><span class="line">zooHome=/opt/zookeeper</span><br><span class="line"><span class="keyword">if</span>  [ <span class="variable">$1</span> != <span class="string">&quot;&quot;</span>  ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">        confFile=<span class="variable">$zooHome</span>/conf/zoo.cfg</span><br><span class="line">        slaves=$(cat <span class="string">&quot;<span class="variable">$confFile</span>&quot;</span> | sed <span class="string">&#x27;/^server/!d;s/^.*=//;s/:.*$//g;/^$/d&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> salve <span class="keyword">in</span> <span class="variable">$slaves</span> ; <span class="keyword">do</span></span><br><span class="line">            ssh <span class="variable">$salve</span> <span class="string">&quot;<span class="variable">$zooHome</span>/bin/zkServer.sh <span class="variable">$1</span>&quot;</span></span><br><span class="line">        <span class="keyword">done</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;parameter empty! parameter:start|stop&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>将上面脚本保存为<code>zooManager</code>文件，调用执行：</p><p><code>sh zooManager start</code></p><p><code>sh zooManager stop</code></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[root@master opt]# sh zooManager start</span><br><span class="line">JMX enabled by <span class="keyword">default</span></span><br><span class="line">Using config: <span class="regexp">/opt/</span>zookeeper<span class="regexp">/bin/</span>..<span class="regexp">/conf/</span>zoo.cfg</span><br><span class="line">Starting zookeeper ... STARTED</span><br><span class="line">JMX enabled by <span class="keyword">default</span></span><br><span class="line">Using config: <span class="regexp">/opt/</span>zookeeper<span class="regexp">/bin/</span>..<span class="regexp">/conf/</span>zoo.cfg</span><br><span class="line">Starting zookeeper ... STARTED</span><br><span class="line">JMX enabled by <span class="keyword">default</span></span><br><span class="line">Using config: <span class="regexp">/opt/</span>zookeeper<span class="regexp">/bin/</span>..<span class="regexp">/conf/</span>zoo.cfg</span><br><span class="line">Starting zookeeper ... STARTED</span><br><span class="line">JMX enabled by <span class="keyword">default</span></span><br><span class="line">Using config: <span class="regexp">/opt/</span>zookeeper<span class="regexp">/bin/</span>..<span class="regexp">/conf/</span>zoo.cfg</span><br><span class="line">Starting zookeeper ... STARTED</span><br></pre></td></tr></table></figure><p>由于所有服务器节点都是使用root用户，所以没有考虑权限问题，实际情况要考虑的。</p><p>参考：<a href="http://coolxing.iteye.com/blog/1871009">http://coolxing.iteye.com/blog/1871009</a></p>]]></content>
      
      
      <categories>
          
          <category> 码路刺客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> zookeeper </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown使用table标签创建表格的问题</title>
      <link href="2017/12/10/20171210001/"/>
      <url>2017/12/10/20171210001/</url>
      
        <content type="html"><![CDATA[<p>使用Markdown写东西有时需要插入表格，方式有两种：</p><ul><li>1.使用Markdown的表格语法</li><li>2.使用html的<code>&lt;table&gt;</code>标签来创建表格</li></ul><p>但是某些Markdown编辑器中使用<code>&lt;table&gt;</code>标签会出现表格前有空行的情况。</p><span id="more"></span><h3 id="问题复现"><a href="#问题复现" class="headerlink" title="问题复现"></a>问题复现</h3><p>先看使用Markdown语法创建表格：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| Tables   |      Are      |  Cool |</span><br><span class="line">|----------|<span class="symbol">:-------------</span><span class="symbol">:|------</span><span class="symbol">:|</span></span><br><span class="line">| col <span class="number">1</span> is |  left-aligned | <span class="variable">$1600</span> |</span><br><span class="line">| col <span class="number">2</span> is |    centered   |   <span class="variable">$12</span> |</span><br><span class="line">| col <span class="number">3</span> is | right-aligned |    <span class="variable">$1</span> |</span><br></pre></td></tr></table></figure><p>效果如下（分割线中间的表格）</p><hr><table><thead><tr><th>Tables</th><th align="center">Are</th><th align="right">Cool</th></tr></thead><tbody><tr><td>col 1 is</td><td align="center">left-aligned</td><td align="right">$1600</td></tr><tr><td>col 2 is</td><td align="center">centered</td><td align="right">$12</td></tr><tr><td>col 3 is</td><td align="center">right-aligned</td><td align="right">$1</td></tr></tbody></table><hr><p>同样的表格使用<code>&lt;table&gt;</code>标签创建：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>Tables<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>Are<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>Cool<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>col 1 is<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>left-aligned<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>$1600<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>col 2 is<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>centered<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>$12<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>col 3 is<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>right-aligned<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>$1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下：（分割线中间的表格）</p><hr><table>  <tr>    <th>Tables</th>    <th>Are</th>    <th>Cool</th>  </tr>  <tr>    <td>col 1 is</td>    <td>left-aligned</td>    <td>$1600</td>  </tr>  <tr>    <td>col 2 is</td>    <td>centered</td>    <td>$12</td>  </tr>  <tr>    <td>col 3 is</td>    <td>right-aligned</td>    <td>$1</td>  </tr></table>***<p>会发现表格前多了很多<code>&lt;/br&gt;</code>换行。</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>解决办法是将代码改为紧凑模式，修改代码如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>Tables<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>Are<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>Cool<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>col 1 is<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>left-aligned<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>$1600<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>col 2 is<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>centered<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>$12<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>col 3 is<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>right-aligned<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span>$1<span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下：（分割线中间的表格）</p><hr><table><tr><th>Tables</th><th>Are</th><th>Cool</th></tr><tr><td>col 1 is</td><td>left-aligned</td><td>$1600</td></tr><tr><td>col 2 is</td><td>centered</td><td>$12</td></tr><tr><td>col 3 is</td><td>right-aligned</td><td>$1</td></tr></table>***<h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><ul><li>1由于使用Haroopad编辑器写东西再用Hexo发布到Github上，所以会有这种情况出现。如果是其他编辑器，比如简书，这个不会有，因为简书压根儿不支持<code>&lt;table&gt;</code>标签的表格，CSDN上是支持的，不会出现以上问题。</li><li>2.使用哪种方式创建表格根据自己的需要而定，Markdown语法简单，但是缺点是不支持列宽度定义，表格样式定义，单元格合并等。<code>&lt;table&gt;</code>标签相比较而言灵活很多。</li><li>3.很多时候直接写表格代码是很累的，比较好的方案是在Excel中编辑，再生成代码，网上搜索相应工具也有很多，比如<a href="http://www.tablesgenerator.com/">Tables Generator</a>。</li><li>4.笔者使用Excel自行写了个生成<code>&lt;table&gt;</code>代码的工具生成压缩的表格代码，在EXCEL中编辑好表格，生成的表格代码列宽会根据Excel中的表格列宽转成百分比，编辑后点击<code>生成表格代码</code>即在Excel文件的同一目录中出现<code>Output.txt</code>文件，将代码复制到Markdown中即可。</li></ul><p><a href="/download/table2code.xlsm">代码生成工具下载</a></p>]]></content>
      
      
      <categories>
          
          <category> 码路刺客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【cmd】IF ELSE 复制(copy)文件问题</title>
      <link href="2017/11/28/20171128001/"/>
      <url>2017/11/28/20171128001/</url>
      
        <content type="html"><![CDATA[<p>cmd中复制文件<code>COPY</code>命令一般都不会有问题，但是如果把<code>COPY</code>放在<code>IF ELSE</code>中可能导致批处理文件无法运行。</p><span id="more"></span><h3 id="测试场景"><a href="#测试场景" class="headerlink" title="测试场景"></a>测试场景</h3><p>文件夹结构如下：</p><p>test </br><br>|—folder1</br><br>|—|—a(b).txt</br><br>|—folder2</p><p>选择是否从folder1文件夹复制a(b).txt文件到folder2文件夹。</p><h3 id="测试1"><a href="#测试1" class="headerlink" title="测试1"></a>测试1</h3><p>不进行选择交互，直接复制，脚本如下：</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off &amp; <span class="built_in">setlocal</span> EnableDelayedExpansion</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> currentDir=<span class="variable">!cd!</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">DEL</span> /Q <span class="variable">!currentDir!</span>\folder2\*.* </span><br><span class="line"></span><br><span class="line"><span class="built_in">copy</span> <span class="variable">!currentDir!</span>\folder1\a(b).txt <span class="variable">!currentDir!</span>\folder2</span><br></pre></td></tr></table></figure><p>保存为test.bat文件后执行结果：</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">已复制         <span class="number">1</span> 个文件。</span><br><span class="line">请按任意键继续. . .</span><br></pre></td></tr></table></figure><p>copy复制语句似乎没有问题。</p><h3 id="测试2"><a href="#测试2" class="headerlink" title="测试2"></a>测试2</h3><p>修改以上脚本，添加选择交互：</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off &amp; <span class="built_in">setlocal</span> EnableDelayedExpansion</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> /p yesno=是否复制(<span class="number">0</span>:否，<span class="number">1</span>:是): </span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> currentDir=<span class="variable">!cd!</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">DEL</span> /Q <span class="variable">!currentDir!</span>\folder2\*.*</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="variable">!yesno!</span> <span class="keyword">equ</span> <span class="number">1</span> ( </span><br><span class="line">    <span class="built_in">copy</span> <span class="variable">!currentDir!</span>\folder1\a(b).txt <span class="variable">!currentDir!</span>\folder2</span><br><span class="line">)<span class="keyword">else</span> (</span><br><span class="line">    <span class="built_in">echo</span> 没复制</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">pause</span></span><br></pre></td></tr></table></figure><p>保存为test.bat文件后执行,发现一闪而过，看不到什么报错。</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>经过多次测试，发现将copy中的路径用双引号(“”)包裹起来就可以了。</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off &amp; <span class="built_in">setlocal</span> EnableDelayedExpansion</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> /p yesno=是否复制(<span class="number">0</span>:否，<span class="number">1</span>:是): </span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> currentDir=<span class="variable">!cd!</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">DEL</span> /Q <span class="variable">!currentDir!</span>\folder2\*.*</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="variable">!yesno!</span> <span class="keyword">equ</span> <span class="number">1</span> ( </span><br><span class="line">    <span class="built_in">copy</span> &quot;<span class="variable">!currentDir!</span>\folder1\a(b).txt&quot; <span class="variable">!currentDir!</span>\folder2</span><br><span class="line">)<span class="keyword">else</span> (</span><br><span class="line">    <span class="built_in">echo</span> 没复制</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">pause</span></span><br></pre></td></tr></table></figure><p>由此可见，应该是路径中某些符号没有转义导致的，目测是文件名中的<code>()</code>，修改脚本，用<code>^</code>将<code>()</code>转义：</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off &amp; <span class="built_in">setlocal</span> EnableDelayedExpansion</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> /p yesno=是否复制(<span class="number">0</span>:否，<span class="number">1</span>:是): </span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> currentDir=<span class="variable">!cd!</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">DEL</span> /Q <span class="variable">!currentDir!</span>\folder2\*.*</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="variable">!yesno!</span> <span class="keyword">equ</span> <span class="number">1</span> ( </span><br><span class="line">    <span class="built_in">copy</span> <span class="variable">!currentDir!</span>\folder1\a^(b^).txt <span class="variable">!currentDir!</span>\folder2</span><br><span class="line">)<span class="keyword">else</span> (</span><br><span class="line">    <span class="built_in">echo</span> 没复制</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">pause</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">是否复制(<span class="number">0</span>:否，<span class="number">1</span>:是): <span class="number">1</span></span><br><span class="line">已复制         <span class="number">1</span> 个文件。</span><br><span class="line">请按任意键继续. . .</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>虽然测试1中直接执行复制没问题，但是，将同样的语句放入IF ELSE中居然无法执行，还很难定位问题在哪里，所以解决方法是最好把路径放在双引号(“”)里面，就不用担心这个问题了，如果不这样就在IF ELSE中的路径把特殊字符转义。附上CMD中特殊字符转义说明。</p><table><thead><tr><th>Character to be escaped</th><th>Escape Sequence</th><th>Remark</th></tr></thead><tbody><tr><td>%</td><td>%%</td><td>May not always be required in doublequoted strings, just try</td></tr><tr><td>^</td><td>^^</td><td>May not always be required in doublequoted strings, but it won’t hurt</td></tr><tr><td>&amp;</td><td>^&amp;</td><td>May not always be required in doublequoted strings, but it won’t hurt</td></tr><tr><td>&lt;</td><td>^&lt;</td><td>May not always be required in doublequoted strings, but it won’t hurt</td></tr><tr><td>&gt;</td><td>^&gt;</td><td>May not always be required in doublequoted strings, but it won’t hurt</td></tr><tr><td>‘</td><td>^’</td><td>Required only in the FOR /F “subject” (i.e. between the parenthesis), unless backqis used</td></tr><tr><td>`</td><td>^`</td><td>Required only in the FOR /F “subject” (i.e. between the parenthesis), if backq is used</td></tr><tr><td>,</td><td>^,</td><td>Required only in the FOR /F “subject” (i.e. between the parenthesis), even in doublequoted strings</td></tr><tr><td>;</td><td>^;</td><td>Required only in the FOR /F “subject” (i.e. between the parenthesis), even in doublequoted strings</td></tr><tr><td>=</td><td>^=</td><td>Required only in the FOR /F “subject” (i.e. between the parenthesis), even in doublequoted strings</td></tr><tr><td>(</td><td>^(</td><td>Required only in the FOR /F “subject” (i.e. between the parenthesis), even in doublequoted strings</td></tr><tr><td>)</td><td>^)</td><td>Required only in the FOR /F “subject” (i.e. between the parenthesis), even in doublequoted strings</td></tr><tr><td>!</td><td>^^!</td><td>Required only when delayed variable expansion is active</td></tr><tr><td>“</td><td>“”</td><td>Required only inside the search pattern of FIND</td></tr><tr><td>\</td><td>\\</td><td>Required only inside the regex pattern of FINDSTR</td></tr><tr><td>[</td><td>\[</td><td>Required only inside the regex pattern of FINDSTR</td></tr><tr><td>]</td><td>\]</td><td>Required only inside the regex pattern of FINDSTR</td></tr><tr><td>\</td><td>\\</td><td>Required only inside the regex pattern of FINDSTR</td></tr><tr><td>.</td><td>\.</td><td>Required only inside the regex pattern of FINDSTR</td></tr><tr><td>*</td><td>\*</td><td>Required only inside the regex pattern of FINDSTR</td></tr><tr><td>?</td><td>\?</td><td>Required only inside the regex pattern of FINDSTR</td></tr></tbody></table><p>参考：<a href="http://www.robvanderwoude.com/escapechars.php">http://www.robvanderwoude.com/escapechars.php</a></p><p>将表格快速转换为HTML,Markdown格式：<a href="http://www.tablesgenerator.com/">http://www.tablesgenerator.com/</a></p>]]></content>
      
      
      <categories>
          
          <category> 码路刺客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> cmd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【ORACLE】导致物化视图快速刷新变慢的原因和解决</title>
      <link href="2017/11/19/20171119001/"/>
      <url>2017/11/19/20171119001/</url>
      
        <content type="html"><![CDATA[<p>ORACLE物化视图(MATERIALIZED VIEW)有自动提交刷新和手动刷新两种刷新方式，每种刷新方式下有增量刷新(FAST)、全量刷新(COMPLETE)、系统自动判断(FORCE)三种刷新方法。一般而言，增量刷新理论上是比全量刷新要快一些的，但是我发现某些情况下增量刷新将导致基表提交后延迟严重，下面将做一些测试。</p><span id="more"></span><h3 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h3><ul><li>操作系统：Red Hat Enterprise Linux Server release 5.8 虚拟机</li><li>处理器：Intel(R) Core(TM) i7-4700MQ CPU @ 2.40GHz</li><li>内存大小：4G</li><li>数据库：Oracle Database 11g Enterprise Edition Release 11.2.0.1.0 - 64bit Production</li></ul><h3 id="准备测试数据"><a href="#准备测试数据" class="headerlink" title="准备测试数据"></a>准备测试数据</h3><p>创建三个表结构相同的测试表，id为自增长主键，这三个表作为物化视图的基表。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t1 (</span><br><span class="line">    id <span class="type">INT</span>,</span><br><span class="line">    c1 <span class="type">INT</span>,</span><br><span class="line">    c2 <span class="type">INT</span>,</span><br><span class="line">    <span class="keyword">constraint</span> pk1 <span class="keyword">primary</span> key(id));</span><br><span class="line">    </span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t2 (</span><br><span class="line">    id <span class="type">INT</span>,</span><br><span class="line">    c1 <span class="type">INT</span>,</span><br><span class="line">    c2 <span class="type">INT</span>,</span><br><span class="line">    <span class="keyword">constraint</span> pk2 <span class="keyword">primary</span> key(id));</span><br><span class="line">    </span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t3 (</span><br><span class="line">    id <span class="type">INT</span>,</span><br><span class="line">    c1 <span class="type">INT</span>,</span><br><span class="line">    c2 <span class="type">INT</span>,</span><br><span class="line">    <span class="keyword">constraint</span> pk3 <span class="keyword">primary</span> key(id));</span><br></pre></td></tr></table></figure><p>每个表插入30000行数据，并给三个基表创建物化视图日志(MATERIALIZED VIEW LOG)：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">MATERIALIZED</span> <span class="keyword">VIEW</span> <span class="keyword">LOG</span> <span class="keyword">ON</span> t1 <span class="keyword">WITH</span> ROWID,<span class="keyword">SEQUENCE</span>(id,c1,c2) INCLUDING <span class="built_in">NEW</span> <span class="keyword">VALUES</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">MATERIALIZED</span> <span class="keyword">VIEW</span> <span class="keyword">LOG</span> <span class="keyword">ON</span> t2 <span class="keyword">WITH</span> ROWID,<span class="keyword">SEQUENCE</span>(id,c1,c2) INCLUDING <span class="built_in">NEW</span> <span class="keyword">VALUES</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">MATERIALIZED</span> <span class="keyword">VIEW</span> <span class="keyword">LOG</span> <span class="keyword">ON</span> t3 <span class="keyword">WITH</span> ROWID,<span class="keyword">SEQUENCE</span>(id,c1,c2) INCLUDING <span class="built_in">NEW</span> <span class="keyword">VALUES</span>;   </span><br></pre></td></tr></table></figure><h3 id="物化视图中不包含列计算"><a href="#物化视图中不包含列计算" class="headerlink" title="物化视图中不包含列计算"></a>物化视图中不包含列计算</h3><p>首先创建的物化视图如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">CREATE</span> MATERIALIZED VIEW mv<span class="number">1</span></span><br><span class="line"><span class="attribute">BUILD</span> IMMEDIATE</span><br><span class="line"><span class="attribute">REFRESH</span> FAST <span class="literal">ON</span> COMMIT</span><br><span class="line"><span class="attribute">WITH</span> ROWID</span><br><span class="line"><span class="attribute">AS</span></span><br><span class="line"><span class="attribute">SELECT</span> a.id aid,a.c<span class="number">1</span> ac<span class="number">1</span>,a.c<span class="number">2</span> ac<span class="number">2</span>,b.c<span class="number">1</span> bc<span class="number">1</span>,b.c<span class="number">2</span> bc<span class="number">2</span>,</span><br><span class="line">       <span class="attribute">a</span>.rowid rida,b.rowid ridb</span><br><span class="line">  <span class="attribute">FROM</span> t<span class="number">1</span> a,t<span class="number">2</span> b</span><br><span class="line"> <span class="attribute">WHERE</span> a.id=b.id(+)</span><br><span class="line">   <span class="attribute">AND</span> a.c<span class="number">1</span>=b.c<span class="number">1</span>(+);</span><br></pre></td></tr></table></figure><p>该物化视图采用的是基表提交(commit)触发快速刷新(FAST)的方式刷新数据，物化视图为两个基表t1,t2的外联接，SELECT后面的列只是简单列出t1,t2表中的列而已。</p><h4 id="更新外联接主表数据"><a href="#更新外联接主表数据" class="headerlink" title="更新外联接主表数据"></a>更新外联接主表数据</h4><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> mv1 <span class="keyword">where</span> aid = <span class="number">9</span>;</span><br></pre></td></tr></table></figure><p><img src="/img/posts/20171119001-01.png" alt="20171119001-01"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">update</span> t<span class="number">1</span> set c<span class="number">2</span>=<span class="number">3</span> where id = <span class="number">9</span>;</span><br></pre></td></tr></table></figure><p><img src="/img/posts/20171119001-02.png" alt="20171119001-02"></p><p>可见提交耗时很短，再查看物化视图数据，已经更新。</p><p><img src="/img/posts/20171119001-03.png" alt="20171119001-03"></p><p>使用如下语句查询物化视图的刷新方式，刷新时间等信息。</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SELECT MVIEW_NAME,</span><br><span class="line"><span class="built_in">       REFRESH_MODE,</span></span><br><span class="line"><span class="built_in">       REFRESH_METHOD,</span></span><br><span class="line"><span class="built_in">       FAST_REFRESHABLE,</span></span><br><span class="line"><span class="built_in">       LAST_REFRESH_TYPE,</span></span><br><span class="line"><span class="built_in">       LAST_REFRESH_DATE,</span></span><br><span class="line">       STALENESS </span><br><span class="line">  FROM USER_MVIEWS </span><br><span class="line"> WHERE MVIEW_NAME = &#x27;MV1&#x27;<span class="comment">;</span></span><br></pre></td></tr></table></figure><p><img src="/img/posts/20171119001-04.png" alt="20171119001-04"></p><h4 id="更新外联接非主表数据"><a href="#更新外联接非主表数据" class="headerlink" title="更新外联接非主表数据"></a>更新外联接非主表数据</h4><p>更新非主表t2的同一行的数据，提交后耗时也很短。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">update</span> t<span class="number">2</span> set c<span class="number">2</span>=<span class="number">13</span> where id = <span class="number">9</span>;</span><br></pre></td></tr></table></figure><p><img src="/img/posts/20171119001-05.png" alt="20171119001-05"></p><p><img src="/img/posts/20171119001-06.png" alt="20171119001-06"></p><p><img src="/img/posts/20171119001-07.png" alt="20171119001-07"></p><p>所以这种情况下，物化视图的增量刷新是没有多少延迟的。</p><h3 id="物化视图中包含列计算"><a href="#物化视图中包含列计算" class="headerlink" title="物化视图中包含列计算"></a>物化视图中包含列计算</h3><p>将MV1物化视图删除，重新创建一个。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">DROP</span> MATERIALIZED VIEW mv<span class="number">1</span>;</span><br><span class="line"><span class="attribute">CREATE</span> MATERIALIZED VIEW mv<span class="number">1</span></span><br><span class="line"><span class="attribute">BUILD</span> IMMEDIATE</span><br><span class="line"><span class="attribute">REFRESH</span> FAST <span class="literal">ON</span> COMMIT</span><br><span class="line"><span class="attribute">WITH</span> ROWID</span><br><span class="line"><span class="attribute">AS</span></span><br><span class="line"><span class="attribute">SELECT</span> a.id aid,a.c<span class="number">1</span> ac<span class="number">1</span>,a.c<span class="number">2</span> ac<span class="number">2</span>,b.c<span class="number">1</span> bc<span class="number">1</span>,b.c<span class="number">2</span> bc<span class="number">2</span>,</span><br><span class="line">       <span class="attribute">a</span>.c<span class="number">2</span>+b.c<span class="number">2</span> as d,</span><br><span class="line">       <span class="attribute">a</span>.rowid rida,b.rowid ridb</span><br><span class="line"> <span class="attribute">FROM</span> t<span class="number">1</span> a,t<span class="number">2</span> b</span><br><span class="line"><span class="attribute">WHERE</span> a.id=b.id(+)</span><br><span class="line">  <span class="attribute">AND</span> a.c<span class="number">1</span>=b.c<span class="number">1</span>(+);</span><br></pre></td></tr></table></figure><p>在之前的基础上增加了d列，这列是t1和t2基表中各一列的计算。</p><h4 id="更新外联接主表数据-1"><a href="#更新外联接主表数据-1" class="headerlink" title="更新外联接主表数据"></a>更新外联接主表数据</h4><p>测试更新主表数据，查看提交耗时。</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> mv1 <span class="keyword">where</span> aid = <span class="number">9</span>;</span><br></pre></td></tr></table></figure><p><img src="/img/posts/20171119001-08.png" alt="20171119001-08"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">update</span> t<span class="number">1</span> set c<span class="number">2</span>=<span class="number">6</span> where id = <span class="number">9</span>;</span><br></pre></td></tr></table></figure><p><img src="/img/posts/20171119001-09.png" alt="20171119001-09"></p><p><img src="/img/posts/20171119001-10.png" alt="20171119001-10"></p><p><img src="/img/posts/20171119001-11.png" alt="20171119001-11"></p><p>基表数据提交时延迟很小。</p><h4 id="更新外联接非主表数据-1"><a href="#更新外联接非主表数据-1" class="headerlink" title="更新外联接非主表数据"></a>更新外联接非主表数据</h4><p>测试更新t2表数据，查看提交耗时。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">update</span> t<span class="number">2</span> set c<span class="number">2</span>=<span class="number">1</span> where id = <span class="number">9</span>;</span><br></pre></td></tr></table></figure><p><img src="/img/posts/20171119001-12.png" alt="20171119001-12"></p><p><img src="/img/posts/20171119001-13.png" alt="20171119001-13"></p><p><img src="/img/posts/20171119001-14.png" alt="20171119001-14"></p><p>基表更新数据提交时，显示<strong>20多秒</strong>才完成，显然，这种情况会导致物化视图增量刷新延迟严重。</p><p>将MV1删除后重建为下列情况，相加的两列是同一个表的两列，这时再更新t2表的一行数据，发现提交没有延迟。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">MATERIALIZED</span> <span class="keyword">VIEW</span> mv1;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">MATERIALIZED</span> <span class="keyword">VIEW</span> mv1</span><br><span class="line">BUILD <span class="keyword">IMMEDIATE</span></span><br><span class="line"><span class="keyword">REFRESH</span> FAST <span class="keyword">ON</span> <span class="keyword">COMMIT</span></span><br><span class="line"><span class="keyword">WITH</span> ROWID</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> a.id aid,a.c1 ac1,a.c2 ac2,b.c1 bc1,b.c2 bc2,</span><br><span class="line">       b.c1+b.c2 <span class="keyword">as</span> d,</span><br><span class="line">       a.rowid rida,b.rowid ridb</span><br><span class="line">  <span class="keyword">FROM</span> t1 a,t2 b</span><br><span class="line"> <span class="keyword">WHERE</span> a.id=b.id;</span><br></pre></td></tr></table></figure><h3 id="一种解决方案"><a href="#一种解决方案" class="headerlink" title="一种解决方案"></a>一种解决方案</h3><p>既然含有外联接的物化视图多表列运算有问题，可以在MV1中将运算列都SELECT出来，再创建一个嵌套物化视图MV2，将MV1中的列进行运算处理。<br>物化视图MV1创建如下：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">MATERIALIZED</span> <span class="keyword">VIEW</span> mv1</span><br><span class="line">BUILD <span class="keyword">IMMEDIATE</span></span><br><span class="line"><span class="keyword">REFRESH</span> FAST <span class="keyword">ON</span> <span class="keyword">COMMIT</span></span><br><span class="line"><span class="keyword">WITH</span> ROWID</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> a.id aid,a.c1 ac1,a.c2 ac2,b.c1 bc1,b.c2 bc2,</span><br><span class="line">       a.rowid rida,b.rowid ridb</span><br><span class="line">  <span class="keyword">FROM</span> t1 a,t2 b</span><br><span class="line"> <span class="keyword">WHERE</span> a.id=b.id(+)</span><br><span class="line">   <span class="keyword">AND</span> a.c1=b.c1(+);</span><br><span class="line"><span class="comment">--因为MV1将作为MV2的基本表，所以要建物化视图日志</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">materialized</span> <span class="keyword">view</span> <span class="keyword">log</span> <span class="keyword">on</span> mv1 <span class="keyword">with</span> rowid,<span class="keyword">sequence</span>(aid) including <span class="built_in">new</span> <span class="keyword">values</span>;</span><br></pre></td></tr></table></figure><p>物化视图MV2创建如下：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">materialized</span> <span class="keyword">view</span> mv2</span><br><span class="line">build <span class="keyword">immediate</span></span><br><span class="line"><span class="keyword">refresh</span> fast <span class="keyword">on</span> <span class="keyword">commit</span></span><br><span class="line"><span class="keyword">with</span> rowid</span><br><span class="line"><span class="keyword">as</span></span><br><span class="line"><span class="keyword">select</span> aid,ac1,ac2,bc1,bc2,</span><br><span class="line">       ac2+bc2 <span class="keyword">as</span> d, <span class="comment">--原本在MV1中计算的列在这里计算</span></span><br><span class="line">       a.rowid rida,b.rowid ridb</span><br><span class="line">  <span class="keyword">from</span> mv1 a,t3 b <span class="comment">--这里注意，在这个ORACLE版本中，创建嵌套物化视图必须要有表关联或者聚合计算，单独from mv1创建不了MV2.</span></span><br><span class="line"> <span class="keyword">where</span> a.aid=b.id(+);</span><br></pre></td></tr></table></figure><p>查看初始数据<code>select * from mv2 where aid = 99;</code><br><img src="/img/posts/20171119001-15.png" alt="20171119001-15"><br>更新t2表数据<code>update t2 set c2=37 where id = 99;</code>，查看提交耗时<br><img src="/img/posts/20171119001-16.png" alt="20171119001-16"><br>查看MV2结果<br><img src="/img/posts/20171119001-17.png" alt="20171119001-17"><br>查看物化视图刷新情况<br><img src="/img/posts/20171119001-18.png" alt="20171119001-18"><br>可见，两个物化视图在基表数据更新后提交不会耗时很久。用这种方式将一个运算分开两步完成，虽然可行，但是代价也很明显，要多创建嵌套物化视图，不敢保证复杂情况下，嵌套物化视图会有其他问题。</p><h3 id="另两种解决方案"><a href="#另两种解决方案" class="headerlink" title="另两种解决方案"></a>另两种解决方案</h3><ul><li>1.将含有多表列运算的外联接快速刷新物化视图改为定时全量刷新。</li><li>2.将外联接重写为内连接。</li></ul><h3 id="最终解决"><a href="#最终解决" class="headerlink" title="最终解决"></a>最终解决</h3><p>经测试，除以上方法外，有一个方法比较完美的解决延迟问题的方案，就是在物化视图上的ROWID列创建索引。测试如下：<br>这里做了一个相对复杂的嵌套物化视图测试。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">MATERIALIZED</span> <span class="keyword">VIEW</span> mv1;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">MATERIALIZED</span> <span class="keyword">VIEW</span> mv1</span><br><span class="line">BUILD <span class="keyword">IMMEDIATE</span></span><br><span class="line"><span class="keyword">REFRESH</span> FAST <span class="keyword">ON</span> <span class="keyword">COMMIT</span></span><br><span class="line"><span class="keyword">WITH</span> ROWID</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> a.id aid,a.c1 ac1,a.c2 ac2,b.c1 bc1,b.c2 bc2,</span><br><span class="line">       a.c2+b.c2 <span class="keyword">as</span> d,</span><br><span class="line">       (a.c2+b.c2)*b.c1 <span class="keyword">as</span> e,</span><br><span class="line">       a.rowid rida,b.rowid ridb</span><br><span class="line"> <span class="keyword">FROM</span> t1 a,t2 b</span><br><span class="line"><span class="keyword">WHERE</span> a.id=b.id(+)</span><br><span class="line">  <span class="keyword">AND</span> a.c1=b.c1(+);</span><br><span class="line"><span class="comment">--在mv1上所有rowid创建索引</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx1 <span class="keyword">on</span> mv1(rida,ridb);</span><br><span class="line"><span class="comment">--创建mv1物化视图日志</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">materialized</span> <span class="keyword">view</span> <span class="keyword">log</span> <span class="keyword">on</span> mv1 <span class="keyword">with</span> rowid(aid,ac1,ac2,bc1,bc2) including <span class="built_in">new</span> <span class="keyword">values</span>;</span><br><span class="line"><span class="comment">--mv2引用mv1</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">MATERIALIZED</span> <span class="keyword">VIEW</span> mv2</span><br><span class="line">BUILD <span class="keyword">IMMEDIATE</span></span><br><span class="line"><span class="keyword">REFRESH</span> FAST <span class="keyword">ON</span> <span class="keyword">COMMIT</span></span><br><span class="line"><span class="keyword">WITH</span> ROWID</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">select</span> a.aid,a.ac1,a.ac2,b.c1 bc1,b.c2 bc2,a.e,</span><br><span class="line">       a.e+b.c2 <span class="keyword">as</span> d,</span><br><span class="line">       a.rowid rida,b.rowid ridb</span><br><span class="line"><span class="keyword">from</span> mv1 a,t2 b</span><br><span class="line"><span class="keyword">where</span> a.aid=b.id(+)</span><br><span class="line">  <span class="keyword">and</span> a.ac1=b.c1(+);</span><br><span class="line"><span class="comment">--在mv2上所有rowid创建索引</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">index</span> idx2 <span class="keyword">on</span> mv2(rida,ridb);</span><br></pre></td></tr></table></figure><p>以上脚本，创建了两个物化视图mv1,mv2，每个物化视图都含有外联接，且select列中含有多个表列结算，mv1嵌套在mv2中，基表t2被两个物化视图引用，且t2的字段在两个物化视图中都参与计算，这样的情况应该算比较复杂了，注意每个物化视图都建立索引。</p><p>查询mv2初始值:<br><code>select * from mv2 where aid = 509;</code><br><img src="/img/posts/20171119001-19.png" alt="20171119001-19"><br>修改基表t2的数据：<br><code>update t2 set c2=85 where id = 509;</code><br><img src="/img/posts/20171119001-20.png" alt="20171119001-20"><br>查看结果：<br><code>select * from mv2 where aid = 509;</code><br><img src="/img/posts/20171119001-21.png" alt="20171119001-21"><br>查看物化视图状态：<br><img src="/img/posts/20171119001-22.png" alt="20171119001-22"><br>可见物化视图为增量刷新，且没有之前发生的严重延迟的情况，需要注意的是，物化视图都要建立索引，且索引列都是包含rowid列的复合索引，如果是其他不是rowid列索引，可能没有任何效果。经测试，对基表增删改都是有效果的。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>1.创建含有外联接且刷新方式为REFRESH FAST ON COMMIT的物化视图时，如果select列里含有多个表中取某些列做运算，注意了，这时更新非主表的数据(增删改)，那么基表提交数据后将有可能导致延迟阻塞，这个时间比物化视图全量刷新还要慢。</li><li>2.除上述情况，例如物化视图都是内连接，有外联接但是没有多个表列做运算等，增量刷新都没问题。</li><li><del>3.至于多表列运算的外联接物化视图增量刷新很慢的原因，与ORACLE物化视图的刷新机制有关，官方文档也有提及这种情况会影响效率，建议最好改为内连接。</del></li><li><del>4.解决方法是改为定时全量刷新或者改外联接为内连接或者利用嵌套物化视图，或者还有其他方法，总之就是为了避开这种情况。</del></li><li>3.比较靠谱的解决方案是在多表列运算的外联接物化视图上创建包含rowid列的索引，创建与不创建索引在这个问题上显现出天壤之别。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 码路刺客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> ORACLE </tag>
            
            <tag> 物化视图 </tag>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【ORACLE】常用物化视图相关元数据查询语句</title>
      <link href="2017/08/15/20170815001/"/>
      <url>2017/08/15/20170815001/</url>
      
        <content type="html"><![CDATA[<p>对物化视图的状态等信息进行查询，监控和管理时，需要对系统视图进行查询，以下列出了常用的物化视图状态、依赖关联，批量维护时能用到的查询语句，根据具体情况进行适当修改。</p><span id="more"></span><p>语句中使用到的系统表字段说明请查看<a href="/2017/08/13/20170813001">物化视图相关元数据视图字段说明</a></p><h3 id="基本信息查询"><a href="#基本信息查询" class="headerlink" title="基本信息查询"></a>基本信息查询</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 物化视图基本信息</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">OWNER</span>            , <span class="comment">--所有者账户</span></span><br><span class="line">   MVIEW_NAME       , <span class="comment">--名称</span></span><br><span class="line">   LAST_REFRESH_DATE, <span class="comment">--上次更新时间</span></span><br><span class="line">   REFRESH_METHOD   , <span class="comment">--更新方式</span></span><br><span class="line">   INVALID          , <span class="comment">--是否失效</span></span><br><span class="line">   QUERY              <span class="comment">--查询语句</span></span><br><span class="line">  <span class="keyword">FROM</span> USER_MVIEW_ANALYSIS </span><br><span class="line">  <span class="keyword">ORDER</span> <span class="keyword">BY</span> LAST_REFRESH_DATE <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><h3 id="物化视图输出列"><a href="#物化视图输出列" class="headerlink" title="物化视图输出列"></a>物化视图输出列</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">SELECT</span> a.<span class="keyword">OWNER</span>        , <span class="comment">--所有者账户</span></span><br><span class="line">a.MVIEW_NAME   , <span class="comment">--名称</span></span><br><span class="line">b.<span class="built_in">COLUMN_NAME</span>  , <span class="comment">--列名称</span></span><br><span class="line">b.COMMENTS       <span class="comment">--列注释</span></span><br><span class="line">      <span class="keyword">FROM</span> USER_MVIEW_ANALYSIS a</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> USER_COL_COMMENTS b</span><br><span class="line">        <span class="keyword">ON</span> a.MVIEW_NAME = b.<span class="built_in">TABLE_NAME</span>;</span><br></pre></td></tr></table></figure><h3 id="物化视图引用了哪些基表"><a href="#物化视图引用了哪些基表" class="headerlink" title="物化视图引用了哪些基表"></a>物化视图引用了哪些基表</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 物化视图关联表</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> </span><br><span class="line">   A.<span class="keyword">OWNER</span>,          <span class="comment">--所有者账户</span></span><br><span class="line">   A.MVIEW_NAME     ,<span class="comment">--物化视图名称</span></span><br><span class="line">       B.COMMENTS       ,<span class="comment">--视图注释</span></span><br><span class="line">       A.DETAILOBJ_OWNER,<span class="comment">--基表所有者账号</span></span><br><span class="line">       A.DETAILOBJ_NAME  <span class="comment">--基表名称</span></span><br><span class="line">  <span class="keyword">FROM</span> USER_MVIEW_DETAIL_RELATIONS A</span><br><span class="line">    <span class="keyword">INNER</span> <span class="keyword">JOIN</span> USER_MVIEW_COMMENTS B <span class="keyword">ON</span> A.MVIEW_NAME = B.MVIEW_NAME</span><br><span class="line"> <span class="keyword">WHERE</span> DETAILOBJ_NAME <span class="keyword">NOT</span> <span class="keyword">LIKE</span> <span class="string">&#x27;BIN%&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="物化视图-基表-存储过程引用关系"><a href="#物化视图-基表-存储过程引用关系" class="headerlink" title="物化视图-基表-存储过程引用关系"></a>物化视图-基表-存储过程引用关系</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 物化视图或普通视图引用了什么普通表，视图被哪些存储过程引用</span></span><br><span class="line"><span class="keyword">WITH</span> CTE <span class="keyword">AS</span> (</span><br><span class="line">    <span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> </span><br><span class="line">           A.<span class="keyword">OWNER</span>,               <span class="comment">-- 所有者账户</span></span><br><span class="line">           A.MVIEW_NAME         , <span class="comment">-- 物化视图名称</span></span><br><span class="line">           A.DETAILOBJ_OWNER    , <span class="comment">-- 被引用表账号</span></span><br><span class="line">           A.DETAILOBJ_NAME       <span class="comment">-- 被引用表名称</span></span><br><span class="line">      <span class="keyword">FROM</span> USER_MVIEW_DETAIL_RELATIONS A</span><br><span class="line">     <span class="keyword">WHERE</span> A.DETAILOBJ_NAME <span class="keyword">NOT</span> <span class="keyword">LIKE</span> <span class="string">&#x27;BIN%&#x27;</span></span><br><span class="line"> <span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line">    <span class="keyword">SELECT</span> <span class="string">&#x27;&#x27;</span> <span class="keyword">AS</span> <span class="keyword">OWNER</span>,</span><br><span class="line">           <span class="type">NAME</span> <span class="keyword">AS</span> MVIEW_NAME,</span><br><span class="line">           REFERENCED_OWNER <span class="keyword">AS</span> DETAILOBJ_OWNER,</span><br><span class="line">           REFERENCED_NAME <span class="keyword">AS</span> DETAILOBJ_NAME</span><br><span class="line">      <span class="keyword">FROM</span> USER_DEPENDENCIES </span><br><span class="line">     <span class="keyword">WHERE</span> <span class="keyword">TYPE</span> =<span class="string">&#x27;VIEW&#x27;</span></span><br><span class="line">)</span><br><span class="line">    <span class="keyword">SELECT</span> A.<span class="keyword">OWNER</span>            ,<span class="comment">-- 视图所有者账户</span></span><br><span class="line">           A.MVIEW_NAME <span class="keyword">AS</span> MV ,<span class="comment">-- 视图名称</span></span><br><span class="line">           A.DETAILOBJ_OWNER  ,<span class="comment">-- 基表所有者账户</span></span><br><span class="line">           A.DETAILOBJ_NAME   ,<span class="comment">-- 基表/视图</span></span><br><span class="line">           NVL(B.NAME,<span class="string">&#x27;-&#x27;</span>) <span class="keyword">AS</span> PROC_NAME <span class="comment">-- 存储过程名称</span></span><br><span class="line">      <span class="keyword">FROM</span> CTE A</span><br><span class="line"> <span class="keyword">LEFT JOIN</span> (<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> <span class="type">NAME</span>,REFERENCED_NAME </span><br><span class="line">              <span class="keyword">FROM</span> USER_DEPENDENCIES B </span><br><span class="line">             <span class="keyword">WHERE</span> B.<span class="keyword">TYPE</span> = <span class="string">&#x27;PROCEDURE&#x27;</span> </span><br><span class="line">            ) B <span class="keyword">ON</span> A.MVIEW_NAME = B.REFERENCED_NAME</span><br><span class="line">  <span class="keyword">ORDER</span> <span class="keyword">BY</span> A.MVIEW_NAME,A.DETAILOBJ_NAME,B.NAME</span><br><span class="line">    ;</span><br></pre></td></tr></table></figure><h3 id="批量删除物化视图日志"><a href="#批量删除物化视图日志" class="headerlink" title="批量删除物化视图日志"></a>批量删除物化视图日志</h3><p>将结果复制出来执行。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 批量删除物化视图日志</span></span><br><span class="line"><span class="keyword">SELECT</span> MASTER,<span class="string">&#x27;DROP MATERIALIZED VIEW LOG ON &#x27;</span> || MASTER || <span class="string">&#x27; ;&#x27;</span> <span class="keyword">AS</span> DSQL </span><br><span class="line">  <span class="keyword">FROM</span> USER_MVIEW_LOGS;</span><br></pre></td></tr></table></figure><h3 id="删除没有被引用的基表的物化视图日志"><a href="#删除没有被引用的基表的物化视图日志" class="headerlink" title="删除没有被引用的基表的物化视图日志"></a>删除没有被引用的基表的物化视图日志</h3><p>将结果复制出来执行。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 删除没有被物化视图引用的基表的物化视图日志</span></span><br><span class="line"><span class="keyword">SELECT</span> MASTER,<span class="string">&#x27;DROP MATERIALIZED VIEW LOG ON &#x27;</span> || MASTER || <span class="string">&#x27;;&#x27;</span>  <span class="keyword">AS</span> A</span><br><span class="line">  <span class="keyword">FROM</span> ALL_MVIEW_LOGS </span><br><span class="line"> <span class="keyword">WHERE</span> MASTER <span class="keyword">NOT</span> <span class="keyword">IN</span> (</span><br><span class="line">           <span class="keyword">SELECT</span> DETAILOBJ_NAME </span><br><span class="line">             <span class="keyword">FROM</span> USER_MVIEW_DETAIL_RELATIONS </span><br><span class="line">        ); </span><br></pre></td></tr></table></figure><h3 id="批量修改物化视图刷新方式"><a href="#批量修改物化视图刷新方式" class="headerlink" title="批量修改物化视图刷新方式"></a>批量修改物化视图刷新方式</h3><p>将结果复制出来执行。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--修改物化视图为手动增量刷新</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;ALTER MATERIALIZED VIEW &#x27;</span> || MVIEW_NAME || <span class="string">&#x27; REFRESH FAST ON DEMAND;&#x27;</span> <span class="keyword">AS</span> S</span><br><span class="line"><span class="keyword">FROM</span> USER_MVIEWS <span class="keyword">WHERE</span> MVIEW_NAME <span class="keyword">LIKE</span> <span class="string">&#x27;MV_%&#x27;</span>;</span><br><span class="line"><span class="comment">--手动执行物化视图增量刷新</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;DBMS_MVIEW.REFRESH(&#x27;&#x27;&#x27;</span> || MVIEW_NAME || <span class="string">&#x27;&#x27;&#x27;,&#x27;&#x27;F&#x27;&#x27;);&#x27;</span> <span class="keyword">AS</span> S</span><br><span class="line"><span class="keyword">FROM</span> USER_MVIEWS <span class="keyword">WHERE</span> MVIEW_NAME <span class="keyword">LIKE</span> <span class="string">&#x27;MV_%&#x27;</span>;</span><br><span class="line"><span class="comment">--修改物化视图为自动增量刷新</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;ALTER MATERIALIZED VIEW &#x27;</span> || MVIEW_NAME || <span class="string">&#x27; REFRESH FAST ON COMMIT;&#x27;</span> <span class="keyword">AS</span> S</span><br><span class="line"><span class="keyword">FROM</span> USER_MVIEWS <span class="keyword">WHERE</span> MVIEW_NAME <span class="keyword">LIKE</span> <span class="string">&#x27;MV_%&#x27;</span>;</span><br><span class="line"><span class="comment">--修改引用了某个基表的所有物化视图为手动增量刷新</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;ALTER MATERIALIZED VIEW &#x27;</span> || MVIEW_NAME || <span class="string">&#x27; REFRESH FAST ON DEMAND;&#x27;</span> <span class="keyword">AS</span> S</span><br><span class="line"><span class="keyword">FROM</span> USER_MVIEWS</span><br><span class="line"><span class="keyword">WHERE</span> MVIEW_NAME <span class="keyword">IN</span> (</span><br><span class="line">      <span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> <span class="type">NAME</span> </span><br><span class="line">      <span class="keyword">FROM</span> USER_DEPENDENCIES </span><br><span class="line">      <span class="keyword">WHERE</span> <span class="keyword">TYPE</span> = <span class="string">&#x27;MATERIALIZED VIEW&#x27;</span> </span><br><span class="line">      <span class="keyword">AND</span> REFERENCED_NAME <span class="keyword">LIKE</span> <span class="string">&#x27;%table_name%&#x27;</span> <span class="comment">-- 基表名称</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="物化视图刷新信息"><a href="#物化视图刷新信息" class="headerlink" title="物化视图刷新信息"></a>物化视图刷新信息</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--物化视图刷新信息</span></span><br><span class="line"><span class="keyword">SELECT</span> MVIEW_NAME,<span class="comment">--物化视图名称</span></span><br><span class="line">       REFRESH_MODE,<span class="comment">--刷新方式</span></span><br><span class="line">       REFRESH_METHOD,<span class="comment">--刷新类型</span></span><br><span class="line">       FAST_REFRESHABLE,<span class="comment">--是否可刷新</span></span><br><span class="line">       LAST_REFRESH_TYPE,<span class="comment">--最近一次刷新类型</span></span><br><span class="line">       LAST_REFRESH_DATE,<span class="comment">--最近一次刷新时间</span></span><br><span class="line">       STALENESS <span class="comment">--数据是否过时</span></span><br><span class="line">  <span class="keyword">FROM</span> USER_MVIEWS </span><br><span class="line"> <span class="comment">--WHERE MVIEW_NAME = &#x27;MV1&#x27;</span></span><br><span class="line"> <span class="keyword">ORDER</span> <span class="keyword">BY</span> LAST_REFRESH_DATE <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><h3 id="物化视图最近一次刷新信息"><a href="#物化视图最近一次刷新信息" class="headerlink" title="物化视图最近一次刷新信息"></a>物化视图最近一次刷新信息</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--查询物化视图最近一次刷新信息</span></span><br><span class="line"> <span class="keyword">SELECT</span> MVIEW_NAME,  <span class="comment">--物化视图名称</span></span><br><span class="line">    LAST_REFRESH_DATE &quot;START_TIME&quot;, <span class="comment">--刷新开始时间</span></span><br><span class="line">    <span class="keyword">CASE</span> <span class="keyword">WHEN</span> FULLREFRESHTIM &lt;&gt; <span class="number">0</span> </span><br><span class="line"> <span class="keyword">THEN</span> LAST_REFRESH_DATE + FULLREFRESHTIM/<span class="number">60</span>/<span class="number">60</span>/<span class="number">24</span></span><br><span class="line">     <span class="keyword">WHEN</span> INCREFRESHTIM &lt;&gt; <span class="number">0</span> </span><br><span class="line"> <span class="keyword">THEN</span> LAST_REFRESH_DATE + INCREFRESHTIM/<span class="number">60</span>/<span class="number">60</span>/<span class="number">24</span></span><br><span class="line">     <span class="keyword">ELSE</span> LAST_REFRESH_DATE</span><br><span class="line">    <span class="keyword">END</span> &quot;END_TIME&quot;, <span class="comment">--刷新结束时间</span></span><br><span class="line">    FULLREFRESHTIM, <span class="comment">--全量刷新耗时</span></span><br><span class="line">    INCREFRESHTIM , <span class="comment">--增量刷新耗时</span></span><br><span class="line">    REFRESH_METHOD, <span class="comment">--最近一次刷新方式</span></span><br><span class="line">    <span class="keyword">SUMMARY</span>       , <span class="comment">--是否含有聚合查询</span></span><br><span class="line">    INC_REFRESHABLE,<span class="comment">--是否支持增量刷新</span></span><br><span class="line">    INVALID       , <span class="comment">--是否失效</span></span><br><span class="line">    REWRITE_ENABLED <span class="comment">--是否支持查询重写</span></span><br><span class="line">   <span class="keyword">FROM</span> ALL_MVIEW_ANALYSIS</span><br><span class="line">  <span class="keyword">WHERE</span> OWNER=<span class="string">&#x27;OWNER&#x27;</span> <span class="comment">--物化视图所有者账户</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> LAST_REFRESH_DATE <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 码路刺客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> ORACLE </tag>
            
            <tag> 物化视图 </tag>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【ORACLE】物化视图相关元数据视图字段说明</title>
      <link href="2017/08/13/20170813001/"/>
      <url>2017/08/13/20170813001/</url>
      
        <content type="html"><![CDATA[<p>当需要对物化视图的状态等信息进行查询，监控和管理时，就要用到相关的系统元数据表了，本文介绍了Oracle物化视图相关的元数据系统视图的表结构，这些视图有：<br><code>ALL_VIEWS</code>,<code>DBA_MVIEWS</code>,<code>USER_MVIEWS</code>，<code>ALL_MVIEW_ANALYSIS</code>，<code>DBA_MVIEW_ANALYSIS</code>，<code>USER_MVIEW_ANALYSIS</code>，<code>ALL_MVIEW_AGGREGATES</code>，<code>DBA_MVIEW_AGGREGATES</code>，<code>USER_MVIEW_AGGREGATES</code>，<code>ALL_MVIEW_REFRESH_TIMES</code>，<code>DBA_MVIEW_REFRESH_TIMES</code>，<code>USER_MVIEW_REFRESH_TIMES</code>，<code>ALL_MVIEW_JOINS</code>，<code>DBA_MVIEW_JOINS</code>，<code>USER_MVIEW_JOINS</code>，<code>ALL_MVIEW_KEYS</code>，<code>DBA_MVIEW_KEYS</code>，<code>USER_MVIEW_KEYS</code>，<code>ALL_MVIEW_LOGS</code>，<code>DBA_MVIEW_LOGS</code>，<code>USER_MVIEW_LOGS</code>。</p><span id="more"></span><h3 id="ALL-MVIEWS"><a href="#ALL-MVIEWS" class="headerlink" title="ALL_MVIEWS"></a>ALL_MVIEWS</h3><p><code>ALL_MVIEWS</code>系统视图描述了当前用户下所有可以访问的物化视图的相关信息。<br>相关视图</p><ul><li><code>DBA_MVIEWS</code>描述了数据库中创建的所有物化视图的相关信息。</li><li><code>USER_MVIEWS</code>描述了所属于当前用户下的所有物化视图的相关信息。</li></ul><table style="font-size:14px;"><tr><th width='16.78%'>列名称</th><th width='14.24%'>数据类型</th><th width='11.44%'>是否可为NULL</th><th width='57.58%'>字段描述</th></tr><tr><td>OWNER</td><td>VARCHAR2(30)</td><td>NOT NULL</td><td>创建物化视图所用的Schema.</td></tr><tr><td>MVIEW_NAME</td><td>VARCHAR2(30)</td><td>NOT NULL</td><td>物化视图名称</td></tr><tr><td>CONTAINER_NAME</td><td>VARCHAR2(30)</td><td>NOT NULL</td><td>存储物化视图数据的容器名称。一般跟MVIEWNAME是一样的。对于早于Oracle8i的版本，数据库附上了SNAP$的前缀。如果MVIEW_NAME超过里了19比特长度，数据库将会把名称截断至19比特，外加了4位的序列号以免发生名称重复。</td></tr><tr><td>QUERY</td><td>LONG</td><td></td><td>定义物化视图查询的语句</td></tr><tr><td>QUERY_LEN</td><td>NUMBER(38)</td><td></td><td>定义的物化视图查询语句的长度，以比特为单位</td></tr><tr><td>UPDATABLE</td><td>VARCHAR2(1)</td><td></td><td>指明物化视图是(Y)否(N)可更新</td></tr><tr><td>UPDATE_LOG</td><td>VARCHAR2(30)</td><td></td><td>对于可更新的物化视图，更新日志的文件名称</td></tr><tr><td>MASTER_ROLLBACK_SEG</td><td>VARCHAR2(30)</td><td></td><td>Rollback segment for the master site or the master materialized view site</td></tr><tr><td>MASTER_LINK</td><td>VARCHAR2(128)</td><td></td><td>基表端的数据库链接</td></tr><tr><td>REWRITE_ENABLED</td><td>VARCHAR2(1)</td><td></td><td>指出是(Y)否(N)支持物化视图的查询重写</td></tr><tr><td>REWRITE_CAPABILITY</td><td>VARCHAR2(9)</td><td></td><td>指出物化视图是否适合查询重写。会有以下三种情况：NONE：物化视图不能被用于查询重写以为查询重写选项被禁用了。TEXTMATCH：物化视图的查询语句中包含查询重写的相关限制。GENETAL：物化视图的查询语句中没有任何限制，所以数据库将在物化视图上应用支持的查询重写功能。</td></tr><tr><td>REFRESH_MODE</td><td>VARCHAR2(6)</td><td></td><td>物化视图的刷新模式：DEMAND：物化视图将在调用刷新物化视图的存储过程时刷新。COMMIT：物化视图将在基表上的事物提交后刷新。NEVER：物化视图永远不会被刷新。</td></tr><tr><td>REFRESH_METHOD</td><td>VARCHAR2(8)</td><td></td><td>物化视图的刷新方法：COMPLETE：物化视图会对基表的数据进行全量刷新。FORCE：数据库引擎自动判断，如果物化视图可被增量刷新则执行增量刷新，否则全量刷新。FAST：物化视图将从上一次刷新后，对于基表的数据变化进行增量刷新。NEVER：用户告诉数据库该物化视图不用刷新。</td></tr><tr><td>BUILD_MODE</td><td>VARCHAR2(9)</td><td></td><td>指明物化视图在创建时是否填充数据：IMMEDIATE：在创建物化视图时填充数据。DEFERRED：在创建时不填充数据，之后用户要手动更新数据。PREBUILT：在创建物化视图时用一个已经存在的表的数据填充物化视图。</td></tr><tr><td>FAST_REFRESHABLE</td><td>VARCHAR2(18)</td><td></td><td>指明物化视图是否适合增量刷新。Oracle数据库会基于定义物化视图的查询语句静态计算这个值。NO：物化视图不支持增量刷新。DML；只支持DML操作的增量刷新。DIRLOAD_DML；适合于直接装载和DML操作的增加刷新。DIRLOAD_LIMITEDDML；只支持直接装载和某些类型的DML操作的增量刷新。</td></tr><tr><td>LAST_REFRESH_TYPE</td><td>VARCHAR2(8)</td><td></td><td>最近一次刷新方法：COMPLETE：全量刷新。FAST：增量刷新。NA：还没有刷新过，比如创建时没指定填充数据的时候。</td></tr><tr><td>LAST_REFRESH_DATE</td><td>DATE</td><td></td><td>最近一次刷新的日期时间，如果从没刷新过就是空。</td></tr><tr><td>STALENESS</td><td>VARCHAR2(19)</td><td></td><td>物化视图的数据和基表数据的关系：FRESH：物化视图数据跟基表的数据是一致的。STALE：物化视图过期了，因为有一个或多个基表的数据已经变了，如果物化视图在此之前是FRESH，然后才变成STALE，那物化视图的数据跟基表表数据变更前是一致的。NEEDS_COMPILE：物化视图的某些基表已经改了，要用ALTER MATERIALIZED VIEW…COMPILE语句来重新计算物化视图该状态。UNUSABLE：物化视图的数据跟基表的数据任何时间都不一致。UNKNOWN：Oracle数据库无法得知物化视图的数据跟基表的关系。这可能是基于prebuilt table来创建的物化视图。UNDEFINED：物化视图有远程的基表，对于这类物化视图该状态不适用。</td></tr><tr><td>AFTER_FAST_REFRESH</td><td>VARCHAR2(19)</td><td></td><td>指明在物化视图执行增量刷新后是啥状态，状态值跟STALENESS列是一样的，只是多了一个NA，当执行增量刷新后变为不适用增量了出现这个值。</td></tr><tr><td>UNKNOWN_PREBUILT</td><td>VARCHAR2(1)</td><td></td><td>Indicates whether the materialized view is prebuilt (Y) or not (N)</td></tr><tr><td>UNKNOWN_PLSQL_FUNC</td><td>VARCHAR2(1)</td><td></td><td>Indicates whether the materialized view contains PL/SQL functions (Y) or not (N)</td></tr><tr><td>UNKNOWN_EXTERNAL_TABLE</td><td>VARCHAR2(1)</td><td></td><td>Indicates whether the materialized view contains external tables (Y) or not (N)</td></tr><tr><td>UNKNOWN_CONSIDER_FRESH</td><td>VARCHAR2(1)</td><td></td><td>Indicates whether the materialized view is considered fresh (Y) or not (N)</td></tr><tr><td>UNKNOWN_IMPORT</td><td>VARCHAR2(1)</td><td></td><td>Indicates whether the materialized view is imported (Y) or not (N)</td></tr><tr><td>UNKNOWN_TRUSTED_FD</td><td>VARCHAR2(1)</td><td></td><td>Indicates whether the materialized view uses trusted constraints for refresh (Y) or not (N)</td></tr><tr><td>COMPILE_STATE</td><td>VARCHAR2(19)</td><td></td><td>检查物化视图的相关基表都是否合法：VALID：物化视图是没问题的，物化视图的基表没有变更。NEEDS_COMPILE：物化视图的某些基表被改变了，要重新编译。ERROR：物化视图有错误。</td></tr><tr><td>USE_NO_INDEX</td><td>VARCHAR2(1)</td><td></td><td>指出创建物化视图的时候是否使用USING NO INDEX子句，或者物化视图创建时默认了索引。</td></tr><tr><td>STALE_SINCE</td><td>DATE</td><td></td><td>Time from when the materialized view became stale</td></tr><tr><td>NUM_PCT_TABLES</td><td>NUMBER</td><td></td><td>Number of PCT detail tables</td></tr><tr><td>NUM_FRESH_PCT_REGIONS</td><td>NUMBER</td><td></td><td>Number of fresh PCT partition regions</td></tr><tr><td>NUM_STALE_PCT_REGIONS</td><td>NUMBER</td><td></td><td>Number of stale PCT partition regions</td></tr></table><p>参考<a href="https://docs.oracle.com/cd/E11882_01/server.112/e40402/statviews_1153.htm#REFRN20139">https://docs.oracle.com/cd/E11882_01/server.112/e40402/statviews_1153.htm#REFRN20139</a></p><h3 id="ALL-MVIEW-ANALYSIS"><a href="#ALL-MVIEW-ANALYSIS" class="headerlink" title="ALL_MVIEW_ANALYSIS"></a>ALL_MVIEW_ANALYSIS</h3><p>ALL_MVIEW_ANALYSIS describes the materialized views accessible to the current user. It provides additional information for analysis by applications. Minimal information is displayed for materialized views that do not support query rewrite (such as materialized views with remote master tables or nondeterministic functions).<br>Related Views<br>  ● DBA_MVIEW_ANALYSIS describes all such materialized views in the database.<br>  ● USER_MVIEW_ANALYSIS describes all such materialized views owned by the current user.<br>Note:<br>All of the information in these views is also displayed in ALL_MVIEWS and its related views. Oracle recommends that you refer to ALL_MVIEWSfor this information instead of these views.</p><table style="font-size:14px;"><tr><th width='16.78%'>Column</th><th width='14.24%'>Datatype</th><th width='11.44%'>NULL</th><th width='57.58%'>Description</th></tr><tr><td>OWNER</td><td>VARCHAR2(30)</td><td>NOT NULL</td><td>Owner of the materialized view</td></tr><tr><td>MVIEW_NAME</td><td>VARCHAR2(30)</td><td>NOT NULL</td><td>Name of the materialized view</td></tr><tr><td>MVIEW_TABLE_OWNER</td><td>VARCHAR2(30)</td><td>NOT NULL</td><td>Owner of the container table (see next column)</td></tr><tr><td>CONTAINER_NAME</td><td>VARCHAR2(30)</td><td></td><td>Name of the internal container in which the materialized view data is held. Normally this is the same asMVIEW_NAME. For materialized views created prior to Oracle8i, Oracle Database attaches the 6-byte prefix?SNAP$_. If?MVIEW_NAMEhas more than 19 bytes, then Oracle Database truncates the name to 19 bytes and adds a 4-byte sequence number as a suffix to produce a nonambiguousCONTAINER_NAME.</td></tr><tr><td>LAST_REFRESH_SCN</td><td>NUMBER</td><td></td><td>System change number (SCN) of the last refresh operation</td></tr><tr><td>LAST_REFRESH_DATE</td><td>DATE</td><td></td><td>SYSDATE?of the last refresh</td></tr><tr><td>REFRESH_METHOD</td><td>VARCHAR2(8)</td><td></td><td>Default refresh method:FORCEFASTCOMPLETENEVER</td></tr><tr><td>SUMMARY</td><td>VARCHAR2(1)</td><td></td><td>Indicates whether this materialized view includes a?GROUP BY?clause or aggregation (Y) or not (N)</td></tr><tr><td>FULLREFRESHTIM</td><td>NUMBER</td><td></td><td>Approximate refresh time, in seconds, for full refresh (defined only when?SUMMARY?=?Y)</td></tr><tr><td>INCREFRESHTIM</td><td>NUMBER</td><td></td><td>Approximate refresh time, in seconds, for fast refresh (defined only when?SUMMARY?=?Y)</td></tr><tr><td>CONTAINS_VIEWS</td><td>VARCHAR2(1)</td><td></td><td>Indicates whether this materialized view contains a view in its definition (Y) or not (N)</td></tr><tr><td>UNUSABLE</td><td>VARCHAR2(1)</td><td></td><td>Indicates whether this materialized view is?UNUSABLE?(inconsistent data) (Y) or not (N). A materialized view can be?UNUSABLE?if a system failure occurs during a full refresh.</td></tr><tr><td>RESTRICTED_SYNTAX</td><td>VARCHAR2(1)</td><td></td><td>Indicates whether this materialized view had a restriction in its defining query that limits the use of query rewrite (Y) or not (N). More complete information is provided by theREWRITE_CAPABILITY?column of the?*_MVIEWS?view.</td></tr><tr><td>INC_REFRESHABLE</td><td>VARCHAR2(1)</td><td></td><td>Indicates whether this materialized view can be fast refreshed (Y) or not (N)</td></tr><tr><td>KNOWN_STALE</td><td>VARCHAR2(1)</td><td></td><td>Indicates whether the data contained in the materialized view is known to be inconsistent with the master table data because that has been updated since the last successful refresh (Y) or not (N)</td></tr><tr><td>INVALID</td><td>VARCHAR2(1)</td><td></td><td>Indicates whether this materialized view is in an invalid state (inconsistent metadata) (Y) or not (N)</td></tr><tr><td>REWRITE_ENABLED</td><td>VARCHAR2(1)</td><td></td><td>Indicates whether this materialized view is currently enabled for query rewrite (Y) or not (N)</td></tr><tr><td>QUERY_LEN</td><td>NUMBER</td><td></td><td>Length (in bytes) of the query field</td></tr><tr><td>QUERY</td><td>LONG</td><td></td><td>SELECT?expression of the materialized view definition</td></tr><tr><td>REVISION</td><td>NUMBER</td><td>NOT NULL</td><td>Reserved for internal use</td></tr></table><p>参考<br><a href="https://docs.oracle.com/cd/E11882_01/server.112/e40402/statviews_1144.htm#REFRN20132">https://docs.oracle.com/cd/E11882_01/server.112/e40402/statviews_1144.htm#REFRN20132</a></p><h3 id="ALL-MVIEW-AGGREGATES"><a href="#ALL-MVIEW-AGGREGATES" class="headerlink" title="ALL_MVIEW_AGGREGATES"></a>ALL_MVIEW_AGGREGATES</h3><p>ALL_MVIEW_AGGREGATES describes the grouping functions (aggregate operations) that appear in the SELECT list of materialized aggregate views accessible to the current user.<br>Related Views<br>  ● DBA_MVIEW_AGGREGATES describes all such grouping functions defined for all materialized views in the database.<br>  ● USER_MVIEW_AGGREGATES describes all such grouping functions defined for all materialized views owned by the current user.<br>Note:<br>All three views exclude materialized views that reference remote tables or that include references to a nonstatic value such as SYSDATE orUSER. These views also exclude materialized views that were created as “snapshots” prior to Oracle8i and that were never altered to enable query rewrite.</p><table style="font-size:14px;"><tr><th width='16.78%'>Column</th><th width='14.24%'>Datatype</th><th width='11.44%'>NULL</th><th width='57.58%'>Description</th></tr><tr><td>OWNER</td><td>VARCHAR2(30)</td><td>NOT NULL</td><td>Owner of the materialized view</td></tr><tr><td>MVIEW_NAME</td><td>VARCHAR2(30)</td><td>NOT NULL</td><td>Name of the materialized view</td></tr><tr><td>POSITION_IN_SELECT</td><td>NUMBER</td><td>NOT NULL</td><td>Ordinal position of this aggregation within the?SELECT?list. For the position of nonaggregate elements of the select list, see"ALL_MVIEW_KEYS".</td></tr><tr><td>CONTAINER_COLUMN</td><td>VARCHAR2(30)</td><td>NOT NULL</td><td>Name of this column in the container table</td></tr><tr><td>AGG_FUNCTION</td><td>VARCHAR2(8)</td><td></td><td>Aggregation function</td></tr><tr><td>DISTINCTFLAG</td><td>VARCHAR2(1)</td><td></td><td>Indicates whether this aggregation is distinct (Y) or not (N)</td></tr><tr><td>MEASURE</td><td>LONG</td><td></td><td>SQL text of the measure, excluding the aggregation function. Equal to?*?for?COUNT(*).</td></tr></table><p>参考<br><a href="https://docs.oracle.com/cd/E11882_01/server.112/e40402/statviews_1143.htm#REFRN20131">https://docs.oracle.com/cd/E11882_01/server.112/e40402/statviews_1143.htm#REFRN20131</a></p><h3 id="ALL-MVIEW-REFRESH-TIMES"><a href="#ALL-MVIEW-REFRESH-TIMES" class="headerlink" title="ALL_MVIEW_REFRESH_TIMES"></a>ALL_MVIEW_REFRESH_TIMES</h3><p>ALL_MVIEW_REFRESH_TIMES describes refresh times of the materialized views accessible to the current user.<br>Related Views<br>  ● DBA_MVIEW_REFRESH_TIMES describes refresh times of all materialized views in the database.<br>  ● USER_MVIEW_REFRESH_TIMES describes refresh times of the materialized views owned by the current user.</p><table style="font-size:14px;"><tr><th width='16.78%'>Column</th><th width='14.24%'>Datatype</th><th width='11.44%'>NULL</th><th width='57.58%'>Description</th></tr><tr><td>OWNER</td><td>VARCHAR2(30)</td><td>NOT NULL</td><td>Owner of the materialized view</td></tr><tr><td>NAME</td><td>VARCHAR2(30)</td><td>NOT NULL</td><td>Name of the materialized view</td></tr><tr><td>MASTER_OWNER</td><td>VARCHAR2(30)</td><td></td><td>Owner of the master table</td></tr><tr><td>MASTER</td><td>VARCHAR2(30)</td><td></td><td>Name of the master table</td></tr><tr><td>LAST_REFRESH</td><td>DATE</td><td></td><td>SYSDATE?from the master site at the time of the last refresh</td></tr></table><h3 id="ALL-MVIEW-JOINS"><a href="#ALL-MVIEW-JOINS" class="headerlink" title="ALL_MVIEW_JOINS"></a>ALL_MVIEW_JOINS</h3><p>ALL_MVIEW_JOINS describes joins between two columns in the WHERE clause of the subquery that defines a materialized view accessible to the current user.<br>Related Views<br>  ● DBA_MVIEW_JOINS describes all such joins for all materialized views in the database.<br>  ● USER_MVIEW_JOINS describes such joins for all materialized views owned by the current user.<br>Note:<br>All three views exclude materialized views that reference remote tables or that includes references to a nonstatic value such as SYSDATE orUSER. These views also exclude materialized views that were created as “snapshots” prior to Oracle8i and that were never altered to enable query rewrite.</p><table style="font-size:14px;"><tr><th width='16.78%'>Column</th><th width='14.24%'>Datatype</th><th width='11.44%'>NULL</th><th width='57.58%'>Description</th></tr><tr><td>OWNER</td><td>VARCHAR2(30)</td><td>NOT NULL</td><td>Owner of the materialized view</td></tr><tr><td>MVIEW_NAME</td><td>VARCHAR2(30)</td><td>NOT NULL</td><td>Materialized view name</td></tr><tr><td>DETAILOBJ1_OWNER</td><td>VARCHAR2(30)</td><td>NOT NULL</td><td>Owner of the first object in the joinFoot?1?</td></tr><tr><td>DETAILOBJ1_RELATION</td><td>VARCHAR2(30)</td><td>NOT NULL</td><td>Name of the first object in the joinFootref?1</td></tr><tr><td>DETAILOBJ1_COLUMN</td><td>VARCHAR2(30)</td><td>NOT NULL</td><td>Join column of the first object in the joinFootref?1</td></tr><tr><td>OPERATOR</td><td>CHAR(1)</td><td></td><td>Join operatorFootref?1</td></tr><tr><td>OPERATOR_TYPE</td><td>VARCHAR2(1)</td><td></td><td>Indicates whether the join is an inner join (I) or the?DETAILOBJ1table is the left side of an outer join (L)Footref?1</td></tr><tr><td>DETAILOBJ2_OWNER</td><td>VARCHAR2(30)</td><td>NOT NULL</td><td>Owner of the second object in the joinFootref?1</td></tr><tr><td>DETAILOBJ2_RELATION</td><td>VARCHAR2(30)</td><td>NOT NULL</td><td>Name of the second object in the joinFootref?1</td></tr><tr><td>DETAILOBJ2_COLUMN</td><td>VARCHAR2(30)</td><td>NOT NULL</td><td>Join column of the second object in the joinFootref?1</td></tr></table><p>Footnote 1 These rows relate only to materialized join views and materialized aggregate views. They describe the two detail objects of a materialized view join.</p><p>参考<br><a href="https://docs.oracle.com/cd/E11882_01/server.112/e40402/statviews_1149.htm#REFRN20134">https://docs.oracle.com/cd/E11882_01/server.112/e40402/statviews_1149.htm#REFRN20134</a></p><h3 id="ALL-MVIEW-KEYS"><a href="#ALL-MVIEW-KEYS" class="headerlink" title="ALL_MVIEW_KEYS"></a>ALL_MVIEW_KEYS</h3><p>ALL_MVIEW_KEYS describes the columns or expressions in the SELECT list upon which materialized views accessible to the current user are based.<br>Related Views<br>  ● DBA_MVIEW_KEYS describes such columns and expressions for all materialized views in the database.<br>  ● USER_MVIEW_KEYS describes such columns and expressions for all materialized views owned by the current user.<br>Note:<br>All three views exclude materialized views that reference remote tables or that includes references to a nonstatic value such as SYSDATE orUSER. These views also exclude materialized views that were created as snapshots prior to Oracle8i and that were never altered to enable query rewrite.</p><table style="font-size:14px;"><tr><th width='16.78%'>Column</th><th width='14.24%'>Datatype</th><th width='11.44%'>NULL</th><th width='57.58%'>Description</th></tr><tr><td>OWNER</td><td>VARCHAR2(30)</td><td>NOT NULL</td><td>Owner of the materialized view</td></tr><tr><td>MVIEW_NAME</td><td>VARCHAR2(30)</td><td>NOT NULL</td><td>Materialized view name</td></tr><tr><td>POSITION_IN_SELECT</td><td>NUMBER</td><td>NOT NULL</td><td>Ordinal position of this key within the?SELECT?list</td></tr><tr><td>CONTAINER_COLUMN</td><td>VARCHAR2(30)</td><td>NOT NULL</td><td>Name of the column in the container table</td></tr><tr><td>DETAILOBJ_OWNER</td><td>VARCHAR2(30)</td><td>NOT NULL</td><td>Detail object owner</td></tr><tr><td>DETAILOBJ_NAME</td><td>VARCHAR2(30)</td><td>NOT NULL</td><td>Detail object name (for example, the name of a table or view)</td></tr><tr><td>DETAILOBJ_ALIAS</td><td>VARCHAR2(30)</td><td></td><td>Implicit or explicit alias for detail relation</td></tr><tr><td>DETAILOBJ_TYPE</td><td>VARCHAR2(5)</td><td></td><td>Detail object type:</td></tr></table><p>参考<br><a href="https://docs.oracle.com/cd/E11882_01/server.112/e40402/statviews_1150.htm#REFRN20135">https://docs.oracle.com/cd/E11882_01/server.112/e40402/statviews_1150.htm#REFRN20135</a></p><h3 id="ALL-MVIEW-LOGS"><a href="#ALL-MVIEW-LOGS" class="headerlink" title="ALL_MVIEW_LOGS"></a>ALL_MVIEW_LOGS</h3><p>ALL_MVIEW_LOGS describes all materialized view logs accessible to the current user.<br>Related Views<br>  ● DBA_MVIEW_LOGS describes all materialized view logs in the database.<br>  ● USER_MVIEW_LOGS describes all materialized view logs owned by the current user.</p><table style="font-size:14px;"><tr><th width='16.78%'>Column</th><th width='14.24%'>Datatype</th><th width='11.44%'>NULL</th><th width='57.58%'>Description</th></tr><tr><td>LOG_OWNER</td><td>VARCHAR2(30)</td><td></td><td>Owner of the materialized view log</td></tr><tr><td>MASTER</td><td>VARCHAR2(30)</td><td></td><td>Name of the master table or master materialized view whose changes are logged</td></tr><tr><td>LOG_TABLE</td><td>VARCHAR2(30)</td><td></td><td>Name of the table where the changes to the master table or master materialized view are logged</td></tr><tr><td>LOG_TRIGGER</td><td>VARCHAR2(30)</td><td></td><td>Obsolete with Oracle8i?and later. Set to NULL. Formerly, this parameter was an after-row trigger on the master which inserted rows into the log.</td></tr><tr><td>ROWIDS</td><td>VARCHAR2(3)</td><td></td><td>Indicates whether rowid information is recorded (YES) or not (NO)</td></tr><tr><td>PRIMARY_KEY</td><td>VARCHAR2(3)</td><td></td><td>Indicates whether primary key information is recorded (YES) or not (NO)</td></tr><tr><td>OBJECT_ID</td><td>VARCHAR2(3)</td><td></td><td>Indicates whether object identifier information in an object table is recorded (YES) or not (NO)</td></tr><tr><td>FILTER_COLUMNS</td><td>VARCHAR2(3)</td><td></td><td>Indicates whether filter column information is recorded (YES) or not (NO)</td></tr><tr><td>SEQUENCE</td><td>VARCHAR2(3)</td><td></td><td>Indicates whether the sequence value, which provides additional ordering information, is recorded (YES) or not (NO)</td></tr><tr><td>INCLUDE_NEW_VALUES</td><td>VARCHAR2(3)</td><td></td><td>Indicates whether both old and new values are recorded (YES) or old values are recorded but new values are not recorded (NO)</td></tr><tr><td>PURGE_ASYNCHRONOUS</td><td>VARCHAR2(3)</td><td></td><td>Indicates whether the materialized view log is purged asynchronously (YES) or not (NO)</td></tr><tr><td>PURGE_DEFERRED</td><td>VARCHAR2(3)</td><td></td><td>Indicates whether the materialized view log is purged in a deferred manner (YES) or not (NO)</td></tr><tr><td>PURGE_START</td><td>DATE</td><td></td><td>For deferred purge, the purge start date</td></tr><tr><td>PURGE_INTERVAL</td><td>VARCHAR2(200)</td><td></td><td>For deferred purge, the purge interval</td></tr><tr><td>LAST_PURGE_DATE</td><td>DATE</td><td></td><td>Date of the last purge</td></tr><tr><td>LAST_PURGE_STATUS</td><td>NUMBER</td><td></td><td>Status of the last purge (error code or?0?for success)</td></tr><tr><td>NUM_ROWS_PURGED</td><td>NUMBER</td><td></td><td>Number of rows purged in the last purge</td></tr><tr><td>COMMIT_SCN_BASED</td><td>VARCHAR2(3)</td><td></td><td>Indicates whether the materialized view log is commit SCN-based (YES) or not (NO)</td></tr></table><p>参考<br><a href="https://docs.oracle.com/cd/E11882_01/server.112/e40402/statviews_1151.htm#REFRN20137">https://docs.oracle.com/cd/E11882_01/server.112/e40402/statviews_1151.htm#REFRN20137</a></p>]]></content>
      
      
      <categories>
          
          <category> 码路刺客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> ORACLE </tag>
            
            <tag> 物化视图 </tag>
            
            <tag> 翻译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【ORACLE】物化视图快速刷新限制条件</title>
      <link href="2017/07/13/20170713001/"/>
      <url>2017/07/13/20170713001/</url>
      
        <content type="html"><![CDATA[<p>快速刷新的物化视图创建比较麻烦，限制条件比较多，本文参考Oracle 11g 11.2版本官方文档，总结一般情况、含有联接、含有聚合计算、UNION ALL等情况下的限制条件。</p><span id="more"></span><h3 id="所有快速刷新的物化视图都必须满足的条件"><a href="#所有快速刷新的物化视图都必须满足的条件" class="headerlink" title="所有快速刷新的物化视图都必须满足的条件"></a><span id='here'>所有快速刷新的物化视图都必须满足的条件</span></h3><p>定义物化视图的查询语句限制如下：</p><ul><li>1.物化视图中不能含有非重复表达式的引用，例如<code>SYSDATE</code>和<code>ROWNUM</code>.</li><li>2.物化视图中不能出现<code>RAW</code>或<code>LONG RAW</code>数据类型的引用。</li><li>3.查询语句的<code>SELECT</code>部分语不能出现子查询。</li><li>4.<code>SELECT</code>子句部分不能包含分析性质的函数，例如<code>RANK</code>。</li><li>5.不能含有<code>MODEL</code>子句。</li><li>6.子查询中不能含有<code>HAVING</code>子句。</li><li>7.不能出现含有<code>ANY</code>,<code>ALL</code>或<code>NOT EXISTS</code>的嵌套子查询。</li><li>8.不能含有<code>[START WITH …] CONNECT BY</code>子句。</li><li>9.不能包含不同站点的多个明细表。</li><li>10.<code>ON COMMIT</code>刷新方式的物化视图不能有远程明细表的引用。</li><li>11.嵌套物化视图必须含有表联接或者聚合计算。</li><li>12.物化视图包含联接和<code>GROUP BY</code>子句的聚合计算时，不能select from 一个有索引的表。</li></ul><h3 id="只包含联接的物化视图快速刷新限制条件"><a href="#只包含联接的物化视图快速刷新限制条件" class="headerlink" title="只包含联接的物化视图快速刷新限制条件"></a>只包含联接的物化视图快速刷新限制条件</h3><p>定义物化视图的查询语句只含有联接且没有聚合计算，实现快速刷新除满足<a href="#here">通用条件</a>外，还要满足条件如下：</p><ul><li>1.不能含有<code>GROUP BY</code>子句或聚合计算。</li><li>2.<code>FROM</code>中出现的每个基表的<code>ROWID</code>必须出现在<code>SELECT</code>子句中。</li><li>3.<code>FROM</code>中出现的每个基表都必须创建基于<code>ROWID</code>的物化视图日志(MATERIALIZED VIEW LOG)。</li><li>4.<code>SELECT</code>子句中不能含有object类型的列。</li></ul><p><font color='red'><strong>另外，以下情况将会影响快速刷新的效率：</font></strong></p><ul><li><strong><font color='red'>1.定义的查询语句含有外联接，如果这样的话，请考虑重写查询语句改为内连接。</font></strong></li><li><strong><font color='red'>2.<code>SELECT</code>子句中含有多个表的列运算。</font></strong></li></ul><h3 id="包含聚合的物化视图快速刷新限制"><a href="#包含聚合的物化视图快速刷新限制" class="headerlink" title="包含聚合的物化视图快速刷新限制"></a>包含聚合的物化视图快速刷新限制</h3><p>定义物化视图的查询语句含有聚合计算，实现快速刷新除满足<a href="#here">通用条件</a>外，还要满足条件如下：</p><ul><li>1.所有基表必须建立物化视图日志，创建日志必须满足：<ul><li>1.1 包含在物化视图中引用的所有列，确保这些列没有被加密。</li><li>1.2 需要指定<code>ROWID</code>和<code>INCLUDING NEW VAUES</code>。</li><li>1.3 如果基表会有插入/直接导入，删除，更新数据的混合操作，需要指定<code>SEQUENCE</code>子句。</li></ul></li><li>2.只有<code>SUM</code>,<code>COUNT</code>,<code>AVG</code>,<code>STDDEV</code>,<code>VARIANCE</code>,<code>MIN</code>和<code>MAX</code>才支持快速刷新。</li><li>3.必须有写<code>COUNT(*)</code>。</li><li>4.聚合函数必须出现在表达式的最外层，也就是说像<code>AVG(AVG(X))</code>或<code>AVG(x)+AVG(x)</code>都是不允许的。</li><li>5.对每一个聚集计算如<code>AVG(expr)</code>,相应的<code>COUNT(expr)</code>也必须要有，Oracle建议<code>SUM(expr)</code>也写上。</li><li>6.如果含有<code>VARIANCE(expr)</code>或<code>STDDEV(expr)</code>,<code>COUNT(expr)</code>和<code>SUM(expr)</code>都必须写，Oracle建议<code>SUM(expr*expr)</code>也写上。</li><li>7.查询中定义的<code>SELECT</code>列不能是来自多个表的列复杂运算，可以考虑使用嵌套物化视图作为变通方案。</li><li>8.<code>GROUP BY</code>中的列都要在<code>SELECT</code>里出现。</li><li>9.如果物化视图日志中过滤列字段类型为<code>CHAR</code>，那么基表所在的数据库和物化视图所在的数据库的字符集必须要一样。</li><li>10.如果物化视图有以下情况，增量刷新只支持DML操作中的<code>INSERT</code>和直接装载(direct loads)操作，这种物化视图叫只能插入(insert-only)的物化视图：<ul><li>10.1 物化视图有<code>MIN</code>或者<code>MAX</code>聚合计算。</li><li>10.2 物化视图有<code>SUM(expr)</code>但是没有<code>COUNT(expr)</code>。</li><li>10.3 物化视图没有指定<code>COUNT(*)</code>。</li></ul></li><li>11.含有<code>MAX</code>或<code>MIN</code>聚合计算的物化视图如果没有<code>WHERE</code>子句，是支持基表增删改的增量刷新的。</li><li>12.物化视图的<code>FROM</code>子句中有普通视图或者子查询，如果普通视图可以被完全合并是可以支持增量刷新的。(PS.这一条不懂啥意思)</li><li>13.如果没有外联接，<code>WHERE</code>子句没有限制。</li><li>14.有外联接和聚合计算的物化视图是支持增量刷新的，只有外接表数据变更的时候。另外，唯一约束必须存在于表的内连接列上。如果有外联接，所有连接必须用<code>AND</code>和<code>=</code>操作符。</li><li>15.对于含有<code>CUBE</code>，<code>ROLLUP</code>，<code>GOUPING SETS</code>的物化视图，会有以下限制：<ul><li>15.1<code>SELECT</code>列表要包含<code>GROUP BY</code>所有字段的<code>GROUPING_ID</code>或<code>GROUPING</code>。举个例子，<code>GROUP BY</code>子句是<code>GROUP BY CUBE(a, b)</code>，那么<code>SELECT</code>列表中应该包含<code>GROUPING_ID(a, b)</code>或<code>GROUPING(a) , GROUPING(b)</code>，这样才会使物化视图增量刷新。</li><li>15.2 <code>GROUP BY</code>不能导致多个groupings的情况，比如，<code>GROUP BY a, ROLLUP(a, b)</code>就不会增量刷新因为这会导致多个groupings，<code>(a), (a, b), (a)</code>。</li></ul></li></ul><h3 id="包含UNION-ALL的物化视图快速刷新限制"><a href="#包含UNION-ALL的物化视图快速刷新限制" class="headerlink" title="包含UNION ALL的物化视图快速刷新限制"></a>包含UNION ALL的物化视图快速刷新限制</h3><p>含有<code>UNION ALL</code>的物化视图<code>REFRESH FAST</code>需要满足以下条件：</p><ul><li>1.<code>UNION ALL</code>操作必须在查询语句的顶层。<code>UNION ALL</code>不能被嵌套在一个子查询里面，这里有一个例外：<code>SELECT * FROM</code>后面直接跟含有<code>UNION ALL</code>的子查询。</li></ul><p>例如：<br>  <figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> view_with_unionall <span class="keyword">AS</span></span><br><span class="line">(<span class="keyword">SELECT</span> c.rowid crid, c.cust_id, <span class="number">2</span> umarker</span><br><span class="line">   <span class="keyword">FROM</span> customers c <span class="keyword">WHERE</span> c.cust_last_name = <span class="string">&#x27;Smith&#x27;</span></span><br><span class="line">  <span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"> <span class="keyword">SELECT</span> c.rowid crid, c.cust_id, <span class="number">3</span> umarker</span><br><span class="line">   <span class="keyword">FROM</span> customers c <span class="keyword">WHERE</span> c.cust_last_name = <span class="string">&#x27;Jones&#x27;</span>);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">CREATE</span> <span class="keyword">MATERIALIZED</span> <span class="keyword">VIEW</span> unionall_inside_view_mv</span><br><span class="line"><span class="keyword">REFRESH</span> FAST <span class="keyword">ON</span> DEMAND <span class="keyword">AS</span></span><br><span class="line"> <span class="keyword">SELECT</span> * <span class="keyword">FROM</span> view_with_unionall;</span><br></pre></td></tr></table></figure></p><ul><li>2.<code>UNION ALL</code>的每一部分查询必须满足聚合物化视图货连接物化视图的增量刷新条件。相应的物化视图日志也要建上。</li><li>3.<code>UNION ALL</code>的每一部分查询必须包含一列标记列，这个标识列必须是数值或者字符型的固定数值，而且这一列在每一部分的查询中<code>SELECT</code>列顺序相同。</li><li>4.一些特性如外联接，只能插入(insert-only)的物化视图查询和远程表都是不支持<code>UNION ALL</code>物化视图的。然而，那些被用于复制的不包含联接和聚集计算的物化视图，是可以增量刷新的。</li><li>5.创建包含<code>UNION ALL</code>的增量刷新物化视图，版本需满足9.2.0或更高才能满足兼容。</li></ul><p>参考：<br><a href="https://docs.oracle.com/cd/E11882_01/server.112/e25554/basicmv.htm#i1007013">https://docs.oracle.com/cd/E11882_01/server.112/e25554/basicmv.htm#i1007013</a></p><p>更多：<br><a href="http://c-xuan.com/2017/07/13/20170713001">http://c-xuan.com/2017/07/13/20170713001</a></p>]]></content>
      
      
      <categories>
          
          <category> 码路刺客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> ORACLE </tag>
            
            <tag> 物化视图 </tag>
            
            <tag> 翻译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树形结构数据存储方案（五）：区间嵌套</title>
      <link href="2017/03/07/tree-table-store5/"/>
      <url>2017/03/07/tree-table-store5/</url>
      
        <content type="html"><![CDATA[<p>前面的一篇文章介绍了左右值编码，不知道大家注意到了没有，如果数据庞大，每次更新都需要更新差不多全表，效率较低没有更好的方式？今天我们就来研究下区间嵌套法。</p><p><strong>区间嵌套法原理</strong></p><p>如果节点区间<code>[clft, crgt]</code>与<code>[plft, prgt]</code>存在如下关系：<code>plft &lt;= clft and crgt &gt;= prgt</code>，则<code>[clft, crgt]</code>区间里的点是<code>[plft, prgt]</code>的子节点。基于此假设我们就可以通过对区间的不断的向下划来获取新的区间。举例：如果在区间<code>[plft, prgt]</code>中存在一个空白区间<code>[lft1, rgt1]</code>，如果要加入一个<code>[plft,lft1]</code>、<code>[rgt1,prgt]</code>同级的区间，只需插入节点：<code>[(2*lft1+rgt1)/3</code>,  <code>(rgt1+2*lft)/3]</code>。在添加完节点后我们还留下<code>[lft1,(2*lft1+rgt1)/3]</code>和 <code>[(rgt1+2*lft)/3,rgt1]</code>两个空余的空间用来添加更多的子节点。</p><span id="more"></span><center><img src="/img/posts/tree-table-store5-1.gif"></img></center><p>如果我们把区间放在二位平面上，把<code>rgt</code>当成是x轴，<code>lft</code>当做是y轴，纳闷嵌套的区间数差不多是这样的：</p><center><img src="/img/posts/tree-table-store5-2.gif"></img></center><p>每个节点<code>[lft, rgt]</code>拥有的子节点都被包含在<code>y &gt;= lft &amp; x &lt;= rgt</code>中。同时<code>y &gt;= clft &amp; x &lt;= crgt</code>所在的空间也是<code>y &gt;= plft  &amp; x &lt;= prgt</code>的子集。另外由于新增的右区间都小于已有的左区间，所以新增的节点均在y=x这条直线以下。</p><p><strong>区间嵌套法实现</strong></p><p>了解了区间嵌套法的原理后，接下来我们就要考虑如何实现他，原则上初始的区间使用任何区间都是可以的，这里我们使用的是[0,1]作为根区间。</p><center><img src="/img/posts/tree-table-store5-3.gif"></img></center><p>首先，我们在XY平面上定义2个点。深度优先集合点和广度有限集合点，针对点<code>&lt;x=1,y=1/2&gt;</code>的深度优先集合点为<code>&lt;x=1,y=1&gt;</code>，广度优先集合点为<code>&lt;x=1/2,y=1/2&gt;</code>。接下来我们定义第一个子节点的位置为父节点和深度优先集合点的中间点。兄弟节点则为前一个子节点到广度优先集合点的中间点，如上图所示，节点1.2的位置为<code>&lt;x=3/4, y=5/8&gt;</code>。</p><p>另外仔细看我们可以看到点与点之间的关系。另外如果我们知道x和y的和，我们就能反推出x,y的值（具体的逻辑是什么，我现在也还没有搞懂，有知道的朋友可以帮忙解释下）。</p><p>我们以节点<code>&lt;x=3/4, y=5/8&gt;</code>为例，我们可以得到他的和为11/8。</p><p>我们定义11为分子（numerator），8为分母（denominator），则x点的分子为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DEFINER <span class="operator">=</span> `root`@`localhost` <span class="keyword">FUNCTION</span> `x_numer`(`numer` <span class="type">int</span>,`denom` <span class="type">int</span>)</span><br><span class="line"><span class="keyword">RETURNS</span> <span class="type">int</span>(<span class="number">11</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> ret_num <span class="type">INT</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> ret_den <span class="type">INT</span>;</span><br><span class="line"><span class="keyword">SET</span> ret_num :<span class="operator">=</span> numer<span class="operator">+</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">SET</span> ret_den :<span class="operator">=</span> denom<span class="operator">*</span><span class="number">2</span>;</span><br><span class="line">WHILE <span class="built_in">floor</span>(ret_num<span class="operator">/</span><span class="number">2</span>) <span class="operator">=</span> ret_num<span class="operator">/</span><span class="number">2</span> DO</span><br><span class="line"><span class="keyword">SET</span> ret_num :<span class="operator">=</span> ret_num<span class="operator">/</span><span class="number">2</span>;</span><br><span class="line"><span class="keyword">SET</span> ret_den :<span class="operator">=</span> ret_den<span class="operator">/</span><span class="number">2</span>;</span><br><span class="line"><span class="keyword">END</span> WHILE;</span><br><span class="line"><span class="keyword">RETURN</span> ret_num;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><p>x点的分母为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DEFINER <span class="operator">=</span> `root`@`localhost` <span class="keyword">FUNCTION</span> `x_ denom`(`numer` <span class="type">int</span>,`denom` <span class="type">int</span>)</span><br><span class="line"><span class="keyword">RETURNS</span> <span class="type">int</span>(<span class="number">11</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> ret_num <span class="type">INT</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> ret_den <span class="type">INT</span>;</span><br><span class="line"><span class="keyword">SET</span> ret_num :<span class="operator">=</span> numer<span class="operator">+</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">SET</span> ret_den :<span class="operator">=</span> denom<span class="operator">*</span><span class="number">2</span>;</span><br><span class="line">WHILE <span class="built_in">floor</span>(ret_num<span class="operator">/</span><span class="number">2</span>) <span class="operator">=</span> ret_num<span class="operator">/</span><span class="number">2</span> DO</span><br><span class="line"><span class="keyword">SET</span> ret_num :<span class="operator">=</span> ret_num<span class="operator">/</span><span class="number">2</span>;</span><br><span class="line"><span class="keyword">SET</span> ret_den :<span class="operator">=</span> ret_den<span class="operator">/</span><span class="number">2</span>;</span><br><span class="line"><span class="keyword">END</span> WHILE;</span><br><span class="line"><span class="keyword">RETURN</span> ret_den;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><p>Y点的分子:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DEFINER <span class="operator">=</span> `root`@`localhost` <span class="keyword">FUNCTION</span> `y_numer`(`numer` <span class="type">int</span>,`denom` <span class="type">int</span>)</span><br><span class="line"><span class="keyword">RETURNS</span> <span class="type">int</span>(<span class="number">11</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> num <span class="type">INT</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> den <span class="type">INT</span>;</span><br><span class="line"><span class="keyword">SET</span> num :<span class="operator">=</span> x_numer(numer, denom);</span><br><span class="line"><span class="keyword">SET</span> den :<span class="operator">=</span> x_denom(numer, denom);</span><br><span class="line">WHILE den <span class="operator">&lt;</span> denom DO</span><br><span class="line"><span class="keyword">SET</span> num :<span class="operator">=</span> num<span class="operator">*</span><span class="number">2</span>;</span><br><span class="line"><span class="keyword">SET</span> den :<span class="operator">=</span> den<span class="operator">*</span><span class="number">2</span>;</span><br><span class="line"><span class="keyword">END</span> WHILE;</span><br><span class="line"><span class="keyword">SET</span> num :<span class="operator">=</span> (numer <span class="operator">-</span> num);</span><br><span class="line">WHILE <span class="built_in">floor</span>(num<span class="operator">/</span><span class="number">2</span>) <span class="operator">=</span> num<span class="operator">/</span><span class="number">2</span> DO</span><br><span class="line"><span class="keyword">SET</span> num :<span class="operator">=</span> num<span class="operator">/</span><span class="number">2</span>;</span><br><span class="line"><span class="keyword">SET</span> den :<span class="operator">=</span> den<span class="operator">/</span><span class="number">2</span>;</span><br><span class="line"><span class="keyword">END</span> WHILE;</span><br><span class="line"><span class="keyword">RETURN</span> num;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><p>Y 的分母：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DEFINER <span class="operator">=</span> `root`@`localhost` <span class="keyword">FUNCTION</span> `y_denom`(`numer` <span class="type">int</span>,`denom` <span class="type">int</span>)</span><br><span class="line"><span class="keyword">RETURNS</span> <span class="type">int</span>(<span class="number">11</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> num <span class="type">INT</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> den <span class="type">INT</span>;</span><br><span class="line"><span class="keyword">SET</span> num :<span class="operator">=</span> x_numer(numer, denom);</span><br><span class="line"><span class="keyword">SET</span> den :<span class="operator">=</span> x_denom(numer, denom);</span><br><span class="line">WHILE den <span class="operator">&lt;</span> denom DO</span><br><span class="line"><span class="keyword">SET</span> num :<span class="operator">=</span> num<span class="operator">*</span><span class="number">2</span>;</span><br><span class="line"><span class="keyword">SET</span> den :<span class="operator">=</span> den<span class="operator">*</span><span class="number">2</span>;</span><br><span class="line"><span class="keyword">END</span> WHILE;</span><br><span class="line"><span class="keyword">SET</span> num :<span class="operator">=</span> (numer <span class="operator">-</span> num);</span><br><span class="line">WHILE <span class="built_in">floor</span>(num<span class="operator">/</span><span class="number">2</span>) <span class="operator">=</span> num<span class="operator">/</span><span class="number">2</span> DO</span><br><span class="line"><span class="keyword">SET</span> num :<span class="operator">=</span> num<span class="operator">/</span><span class="number">2</span>;</span><br><span class="line"><span class="keyword">SET</span> den :<span class="operator">=</span> den<span class="operator">/</span><span class="number">2</span>;</span><br><span class="line"><span class="keyword">END</span> WHILE;</span><br><span class="line"><span class="keyword">RETURN</span> den;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><p>接下来我们来测试下，X与Y是否能解码出来：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">CONCAT(x_numer (<span class="number">11</span>, <span class="number">8</span>),<span class="string">&#x27;/&#x27;</span>,x_denom (<span class="number">11</span>, <span class="number">8</span>)) <span class="keyword">AS</span> X,</span><br><span class="line">CONCAT(y_numer (<span class="number">11</span>, <span class="number">8</span>),<span class="string">&#x27;/&#x27;</span>,y_denom (<span class="number">11</span>, <span class="number">8</span>)) <span class="keyword">AS</span> Y</span><br></pre></td></tr></table></figure><center><img src="/img/posts/tree-table-store5-4.gif"></img></center><p>结果与节点1.2的位置为<code>&lt;x=3/4, y=5/8&gt;</code>完全一致。现在我们知道只需要一个分数即可表示平面上的一个点。</p><p>如有已经有分数11/8如何获取该节点的父节点？(如果分子为3，则代表其为根节点)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DEFINER <span class="operator">=</span> `root`@`localhost` <span class="keyword">FUNCTION</span> `parent_numer`(`numer` <span class="type">int</span>,`denom` <span class="type">int</span>)</span><br><span class="line"><span class="keyword">RETURNS</span> <span class="type">int</span>(<span class="number">11</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> ret_num <span class="type">INT</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> ret_den <span class="type">INT</span>;</span><br><span class="line">IF numer<span class="operator">=</span><span class="number">3</span> <span class="keyword">THEN</span></span><br><span class="line"><span class="keyword">RETURN</span> denom<span class="operator">/</span><span class="number">2</span>;</span><br><span class="line"><span class="keyword">END</span> IF;</span><br><span class="line"><span class="keyword">SET</span> ret_num :<span class="operator">=</span> (numer<span class="number">-1</span>)<span class="operator">/</span><span class="number">2</span>;</span><br><span class="line"><span class="keyword">SET</span> ret_den :<span class="operator">=</span> denom<span class="operator">/</span><span class="number">2</span>;</span><br><span class="line">WHILE <span class="built_in">floor</span>((ret_num<span class="number">-1</span>)<span class="operator">/</span><span class="number">4</span>) <span class="operator">=</span> (ret_num<span class="number">-1</span>)<span class="operator">/</span><span class="number">4</span> DO</span><br><span class="line"><span class="keyword">SET</span> ret_num :<span class="operator">=</span> (ret_num<span class="operator">+</span><span class="number">1</span>)<span class="operator">/</span><span class="number">2</span>;</span><br><span class="line"><span class="keyword">SET</span> ret_den :<span class="operator">=</span> ret_den<span class="operator">/</span><span class="number">2</span>;</span><br><span class="line"><span class="keyword">END</span> WHILE;</span><br><span class="line"><span class="keyword">RETURN</span> ret_num;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> CONCAT(parent_numer(<span class="number">11</span>,<span class="number">8</span>),<span class="string">&#x27;/&#x27;</span>,parent_denom(<span class="number">11</span>,<span class="number">8</span>)) <span class="keyword">AS</span> parent</span><br></pre></td></tr></table></figure><p>计算当前节点在同级所在的位置：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DEFINER <span class="operator">=</span> `root`@`localhost` <span class="keyword">FUNCTION</span> `parent_denom`(`numer` <span class="type">int</span>,`denom` <span class="type">int</span>)</span><br><span class="line"><span class="keyword">RETURNS</span> <span class="type">int</span>(<span class="number">11</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> ret_num <span class="type">INT</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> ret_den <span class="type">INT</span>;</span><br><span class="line">IF numer<span class="operator">=</span><span class="number">3</span> <span class="keyword">THEN</span></span><br><span class="line"><span class="keyword">RETURN</span> <span class="keyword">NULL</span>;</span><br><span class="line"><span class="keyword">END</span> IF;</span><br><span class="line"><span class="keyword">SET</span> ret_num :<span class="operator">=</span> (numer<span class="number">-1</span>)<span class="operator">/</span><span class="number">2</span>;</span><br><span class="line"><span class="keyword">SET</span> ret_den :<span class="operator">=</span> denom<span class="operator">/</span><span class="number">2</span>;</span><br><span class="line">WHILE <span class="built_in">floor</span>((ret_num<span class="number">-1</span>)<span class="operator">/</span><span class="number">4</span>) <span class="operator">=</span> (ret_num<span class="number">-1</span>)<span class="operator">/</span><span class="number">4</span> DO</span><br><span class="line"><span class="keyword">SET</span> ret_num :<span class="operator">=</span> (ret_num<span class="operator">+</span><span class="number">1</span>)<span class="operator">/</span><span class="number">2</span>;</span><br><span class="line"><span class="keyword">SET</span> ret_den :<span class="operator">=</span> ret_den<span class="operator">/</span><span class="number">2</span>;</span><br><span class="line"><span class="keyword">END</span> WHILE;</span><br><span class="line"><span class="keyword">RETURN</span> ret_den;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><p>有了查询父节点的方法及当前节点所在同级中的位置的方法，即可通过这两个的组合，将节点的路径给计算出来。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DEFINER <span class="operator">=</span> `root`@`localhost` <span class="keyword">FUNCTION</span> `path`(`numer` <span class="type">int</span>,`denom` <span class="type">int</span>)</span><br><span class="line"><span class="keyword">RETURNS</span> <span class="type">varchar</span>(<span class="number">255</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">IF numer <span class="keyword">is</span> <span class="keyword">NULL</span> <span class="keyword">THEN</span></span><br><span class="line"><span class="keyword">RETURN</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">END</span> IF;</span><br><span class="line"><span class="keyword">RETURN</span> path(parent_numer(numer, denom),parent_denom(numer, denom))<span class="operator">||</span> ‘.’ <span class="operator">||</span> sibling_number(numer, denom);</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><p>按照以上方法添加后进行测试，返回<br>**[Err] 1424 – Recursive stored functions and triggers are not allowed.**即MySQL的自定义函数不支持递归查询。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DEFINER <span class="operator">=</span> `root`@`localhost` <span class="keyword">FUNCTION</span> `path`(`numer` <span class="type">int</span>,`denom` <span class="type">int</span>)</span><br><span class="line"><span class="keyword">RETURNS</span> <span class="type">varchar</span>(<span class="number">255</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> numer_temp <span class="type">INT</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> denom_temp <span class="type">INT</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> path_result <span class="type">VARCHAR</span>(<span class="number">255</span>);</span><br><span class="line"><span class="keyword">DECLARE</span> path_temp <span class="type">VARCHAR</span>(<span class="number">255</span>);</span><br><span class="line"><span class="keyword">DECLARE</span> sn <span class="type">VARCHAR</span>(<span class="number">255</span>);</span><br><span class="line"><span class="keyword">SET</span> path_temp :<span class="operator">=</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">WHILE numer <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> DO</span><br><span class="line">IF path_temp <span class="operator">=</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">THEN</span></span><br><span class="line"><span class="keyword">SET</span> path_result :<span class="operator">=</span> sibling_number(numer, denom);</span><br><span class="line"><span class="keyword">ELSE</span></span><br><span class="line"><span class="keyword">SET</span> path_result :<span class="operator">=</span> CONCAT(sibling_number(numer, denom),<span class="string">&#x27;.&#x27;</span>,path_temp);</span><br><span class="line"><span class="keyword">END</span> IF;</span><br><span class="line"><span class="keyword">SET</span> path_temp :<span class="operator">=</span> path_result;</span><br><span class="line"><span class="keyword">SET</span> numer_temp :<span class="operator">=</span> parent_numer(numer, denom);</span><br><span class="line"><span class="keyword">SET</span> denom_temp :<span class="operator">=</span> parent_denom(numer, denom);</span><br><span class="line"><span class="keyword">SET</span> numer :<span class="operator">=</span> numer_temp;</span><br><span class="line"><span class="keyword">SET</span> denom :<span class="operator">=</span> denom_temp;</span><br><span class="line"><span class="keyword">END</span> WHILE;</span><br><span class="line"><span class="keyword">RETURN</span> path_result;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><p><code>SELECT path (11, 8) </code>的结果为 1.2</p><p>计算节点层级的方法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DEFINER <span class="operator">=</span> `root`@`localhost` <span class="keyword">FUNCTION</span> `node_level`(`numer` <span class="type">int</span>,`denom` <span class="type">int</span>)</span><br><span class="line"><span class="keyword">RETURNS</span> <span class="type">int</span>(<span class="number">11</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> ret_num <span class="type">INT</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> ret_den <span class="type">INT</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> ret <span class="type">INT</span>;</span><br><span class="line"><span class="keyword">SET</span> ret <span class="operator">=</span><span class="number">1</span>;</span><br><span class="line">IF numer<span class="operator">=</span><span class="number">3</span> <span class="keyword">THEN</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">END</span> IF;</span><br><span class="line">WHILE numer<span class="operator">!=</span><span class="number">3</span> DO</span><br><span class="line"><span class="keyword">SET</span> ret_num :<span class="operator">=</span> parent_numer(numer, denom);</span><br><span class="line"><span class="keyword">SET</span> ret_den :<span class="operator">=</span> parent_denom(numer, denom);</span><br><span class="line"><span class="keyword">SET</span> numer :<span class="operator">=</span> ret_num;</span><br><span class="line"><span class="keyword">SET</span> denom :<span class="operator">=</span> ret_den;</span><br><span class="line"><span class="keyword">SET</span> ret :<span class="operator">=</span> ret <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">END</span> WHILE;</span><br><span class="line"><span class="keyword">RETURN</span> ret;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><p>我们知道了如何将编码过的节点转成目录形式，如何逆转呢？以下是方法：</p><p>先添加2个辅助函数：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DEFINER <span class="operator">=</span> `root`@`localhost` <span class="keyword">FUNCTION</span> `child_numer`(`num` <span class="type">int</span>,`den` <span class="type">int</span>,`child` <span class="type">int</span>)</span><br><span class="line"><span class="keyword">RETURNS</span> <span class="type">int</span>(<span class="number">11</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">RETURN</span> num <span class="operator">*</span> <span class="built_in">power</span>(<span class="number">2</span>, child) <span class="operator">+</span> <span class="number">3</span> <span class="operator">-</span> <span class="built_in">power</span>(<span class="number">2</span>, child);</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DEFINER <span class="operator">=</span> `root`@`localhost` <span class="keyword">FUNCTION</span> `child_denom`(`num` <span class="type">int</span>,`den` <span class="type">int</span>,`child` <span class="type">int</span>)</span><br><span class="line"><span class="keyword">RETURNS</span> <span class="type">int</span>(<span class="number">11</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">RETURN</span> den<span class="operator">*</span><span class="built_in">power</span>(<span class="number">2</span>, child);</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><p>再来编写逆转函数：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DEFINER <span class="operator">=</span> `root`@`localhost` <span class="keyword">FUNCTION</span> `path_numer`(`path` <span class="type">varchar</span>(<span class="number">255</span>))</span><br><span class="line"><span class="keyword">RETURNS</span> <span class="type">int</span>(<span class="number">11</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> num <span class="type">INT</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> den <span class="type">INT</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> postfix <span class="type">VARCHAR</span>(<span class="number">255</span>);</span><br><span class="line"><span class="keyword">DECLARE</span> sibling <span class="type">VARCHAR</span>(<span class="number">255</span>);</span><br><span class="line"><span class="keyword">SET</span> num :<span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">SET</span> den :<span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">SET</span> postfix :<span class="operator">=</span> CONCAT(path,<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">WHILE length(postfix) <span class="operator">&gt;</span> <span class="number">1</span> DO</span><br><span class="line"><span class="keyword">SET</span> sibling :<span class="operator">=</span> SUBSTR(postfix, <span class="number">1</span>, instr(postfix,<span class="string">&#x27;.&#x27;</span>)<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">SET</span> postfix :<span class="operator">=</span> SUBSTR(postfix, instr(postfix,<span class="string">&#x27;.&#x27;</span>)<span class="operator">+</span><span class="number">1</span>);</span><br><span class="line"><span class="keyword">SET</span> num :<span class="operator">=</span> child_numer(num,den,sibling<span class="operator">+</span><span class="number">0</span>);</span><br><span class="line"><span class="keyword">SET</span> den :<span class="operator">=</span> child_denom(num,den,sibling<span class="operator">+</span><span class="number">0</span>);</span><br><span class="line"><span class="keyword">END</span> WHILE;</span><br><span class="line"><span class="keyword">RETURN</span> num;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DEFINER <span class="operator">=</span> `root`@`localhost` <span class="keyword">FUNCTION</span> `path_denom`(`path` <span class="type">varchar</span>(<span class="number">255</span>))</span><br><span class="line"><span class="keyword">RETURNS</span> <span class="type">int</span>(<span class="number">11</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> num <span class="type">INT</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> den <span class="type">INT</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> postfix <span class="type">VARCHAR</span>(<span class="number">255</span>);</span><br><span class="line"><span class="keyword">DECLARE</span> sibling <span class="type">VARCHAR</span>(<span class="number">255</span>);</span><br><span class="line"><span class="keyword">SET</span> num :<span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">SET</span> den :<span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">SET</span> postfix :<span class="operator">=</span> CONCAT(path,<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">WHILE length(postfix) <span class="operator">&gt;</span> <span class="number">1</span> DO</span><br><span class="line"><span class="keyword">SET</span> sibling :<span class="operator">=</span> SUBSTR(postfix, <span class="number">1</span>, instr(postfix,<span class="string">&#x27;.&#x27;</span>)<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">SET</span> postfix :<span class="operator">=</span> SUBSTR(postfix, instr(postfix,<span class="string">&#x27;.&#x27;</span>)<span class="operator">+</span><span class="number">1</span>);</span><br><span class="line"><span class="keyword">SET</span> num :<span class="operator">=</span> child_numer(num,den,sibling<span class="operator">+</span><span class="number">0</span>);</span><br><span class="line"><span class="keyword">SET</span> den :<span class="operator">=</span> child_denom(num,den,sibling<span class="operator">+</span><span class="number">0</span>);</span><br><span class="line"><span class="keyword">END</span> WHILE;</span><br><span class="line"><span class="keyword">RETURN</span> den;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><p><code>select CONCAT(path_numer(‘2.1.3′),’/’,path_denom(‘2.1.3’)) </code>结果为51/64</p><p>参考资料：<br>  ● <a href="http://www.rampant-books.com/art_vadim_nested_sets_sql_trees.htm">http://www.rampant-books.com/art_vadim_nested_sets_sql_trees.htm</a></p><p>转自<a href="https://www.biaodianfu.com/nested-intervals.html">https://www.biaodianfu.com/nested-intervals.html</a></p><p>作者：标点符</p>]]></content>
      
      
      <categories>
          
          <category> 码路刺客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 转载 </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树形结构数据存储方案（四）：左右值编码</title>
      <link href="2017/03/07/tree-table-store4/"/>
      <url>2017/03/07/tree-table-store4/</url>
      
        <content type="html"><![CDATA[<p>在基于数据库的一般应用中，查询的需求总要大于删除和修改。为了避免对于树形结构查询时的“递归”过程，基于Tree的前序遍历设计一种全新的无递归查询、无限分组的左右值编码方案，来保存该树的数据。</p><center><img src="/img/posts/tree-table-store4-1.gif"></img></center> <span id="more"></span><p>第一次看见这种表结构，相信大部分人都不清楚左值（Lft）和右值（Rgt）是如何计算出来的，而且这种表设计似乎并没有保存父子节点的继承关系。但当你用手指指着表中的数字从1数到18，你应该会发现点什么吧。对，你手指移动的顺序就是对这棵树进行前序遍历的顺序，如下图所示。当我们从根节点Food左侧开始，标记为1，并沿前序遍历的方向，依次在遍历的路径上标注数字，最后我们回到了根节点Food，并在右边写上了18。</p><center><img src="/img/posts/tree-table-store4-2.gif"></img></center><p>依据此设计，我们可以推断出所有左值大于2，并且右值小于11的节点都是Fruit的后续节点，整棵树的结构通过左值和右值存储了下来。然而，这还不够，我们的目的是能够对树进行CRUD操作，即需要构造出与之配套的相关算法。按照深度优先，由左到右的原则遍历整个树，从1开始给每个节点标注上left值和right值，并将这两个值存入对应的name之中。</p><p>如何查询？</p><p>1、获取某个节点下的所有子孙节点，以Fruit为例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Tree <span class="keyword">WHERE</span> Lft <span class="operator">&gt;</span> <span class="number">2</span> <span class="keyword">AND</span> Lft <span class="operator">&lt;</span> <span class="number">11</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> Lft <span class="keyword">ASC</span></span><br></pre></td></tr></table></figure><p>2、获取子孙节点总数<br>子孙总数 = (右值–左值–1)/2，以Fruit为例，其子孙总数为：(11–2–1)/2 = 4</p><p>3、 获取节点在树中所处的层数，以Fruit为例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">FROM</span> Tree <span class="keyword">WHERE</span> Lft <span class="operator">&lt;=</span> <span class="number">2</span> <span class="keyword">AND</span> Rgt <span class="operator">&gt;=</span><span class="number">11</span></span><br></pre></td></tr></table></figure><p>4、 获取当前节点所在路径，以Fruit为例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Tree <span class="keyword">WHERE</span> Lft <span class="operator">&lt;=</span> <span class="number">2</span> <span class="keyword">AND</span> Rgt <span class="operator">&gt;=</span><span class="number">11</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> Lft <span class="keyword">ASC</span></span><br></pre></td></tr></table></figure><p>在日常的处理中我们经常还会遇到的需要获取某一个节点的直属上级、同级、直属下级。为了更好的描述层级关系，我们可以为Tree建立一个视图，添加一个层次列，该列数值可以编写一个自定义函数来计算：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> `CountLayer`(`_node_id` <span class="type">int</span>)</span><br><span class="line"><span class="keyword">RETURNS</span> <span class="type">int</span>(<span class="number">11</span>)</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> _result <span class="type">INT</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> _lft <span class="type">INT</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> _rgt <span class="type">INT</span>;</span><br><span class="line">IF <span class="keyword">EXISTS</span>(<span class="keyword">SELECT</span> Node_id <span class="keyword">FROM</span> Tree <span class="keyword">WHERE</span> Node_id <span class="operator">=</span> _node_id)</span><br><span class="line"><span class="keyword">THEN</span></span><br><span class="line"><span class="keyword">SELECT</span> Lft,Rgt <span class="keyword">FROM</span> Tree <span class="keyword">WHERE</span> Node_id <span class="operator">=</span> _node_id <span class="keyword">INTO</span> _lft,_rgt;</span><br><span class="line"><span class="keyword">SET</span> _result <span class="operator">=</span> (<span class="keyword">SELECT</span> <span class="built_in">COUNT</span>(<span class="number">1</span>) <span class="keyword">FROM</span> Tree <span class="keyword">WHERE</span> Lft <span class="operator">&lt;=</span> _lft <span class="keyword">AND</span> Rgt <span class="operator">&gt;=</span> _rgt); </span><br><span class="line"><span class="keyword">RETURN</span> _result;</span><br><span class="line"><span class="keyword">ELSE</span></span><br><span class="line"><span class="keyword">RETURN</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">END</span> IF;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><p>在添加完函数以后，我们创建一个a视图，添加新的层次列：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> `NewView`<span class="keyword">AS</span> </span><br><span class="line"><span class="keyword">SELECT</span> Node_id, Name, Lft, Rgt, CountLayer(Node_id) <span class="keyword">AS</span> Layer <span class="keyword">FROM</span> Tree <span class="keyword">ORDER</span> <span class="keyword">BY</span> Lft ;</span><br></pre></td></tr></table></figure><p>5、 获取当前节点父节点,以Fruit为例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> treeview <span class="keyword">WHERE</span> Lft <span class="operator">&lt;=</span> <span class="number">2</span> <span class="keyword">AND</span> Rgt <span class="operator">&gt;=</span><span class="number">11</span> <span class="keyword">AND</span> Layer<span class="operator">=</span><span class="number">1</span></span><br></pre></td></tr></table></figure><p>6、 获取所有直属子节点，以Fruit为例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> treeview <span class="keyword">WHERE</span> Lft <span class="keyword">BETWEEN</span> <span class="number">2</span> <span class="keyword">AND</span> <span class="number">11</span> <span class="keyword">AND</span> Layer<span class="operator">=</span><span class="number">3</span></span><br></pre></td></tr></table></figure><p>7、 获取所有兄弟节点，以Fruit为例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> treeview <span class="keyword">WHERE</span> Rgt <span class="operator">&gt;</span> <span class="number">11</span> <span class="keyword">AND</span> Rgt <span class="operator">&lt;</span> (<span class="keyword">SELECT</span> Rgt <span class="keyword">FROM</span> treeview <span class="keyword">WHERE</span> Lft <span class="operator">&lt;=</span> <span class="number">2</span> <span class="keyword">AND</span> Rgt <span class="operator">&gt;=</span><span class="number">11</span> <span class="keyword">AND</span> Layer<span class="operator">=</span><span class="number">1</span>) <span class="keyword">AND</span> Layer<span class="operator">=</span><span class="number">2</span></span><br></pre></td></tr></table></figure><p>8、 返回所有叶子节点</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Tree <span class="keyword">WHERE</span> Rgt <span class="operator">=</span> Lft <span class="operator">+</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>如何创建树？如何新增数据？</strong></p><p>上面已经介绍了如何检索结果，那么如何才能增加新的节点呢？Nested set 最重要是一定要有一个根节点作为所有节点的起点，而且通常这个节点是不被使用的。为了便于控制查询级别，在建表的时候建议添加parent_id配合之联结列表方式一起使用。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `Tree` (</span><br><span class="line">`node_id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">`parent_id` <span class="type">int</span>(<span class="number">10</span>) UNSIGNED <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">`name` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">`lft` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">`rgt` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`node_id`),</span><br><span class="line">KEY `idx_left_right` (`lft`,`rgt`)</span><br><span class="line">) <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `Tree` (parent_id,name,lft,rgt) <span class="keyword">VALUES</span> ( <span class="number">0</span>,<span class="string">&#x27;Food&#x27;</span>,<span class="number">1</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p>添加子节点（子节点起始处），以在Food下添加子节点Fruit为例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">LOCK <span class="keyword">TABLE</span> Tree WRITE;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@parent</span>_id :<span class="operator">=</span> node_id, <span class="variable">@myLeft</span> :<span class="operator">=</span> lft <span class="keyword">FROM</span> Tree <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;Food&#x27;</span>;</span><br><span class="line">UPDATE Tree <span class="keyword">SET</span> rgt <span class="operator">=</span> rgt <span class="operator">+</span> <span class="number">2</span> <span class="keyword">WHERE</span> rgt <span class="operator">&gt;</span> <span class="variable">@myLeft</span>;</span><br><span class="line">UPDATE Tree <span class="keyword">SET</span> lft <span class="operator">=</span> lft <span class="operator">+</span> <span class="number">2</span> <span class="keyword">WHERE</span> lft <span class="operator">&gt;</span> <span class="variable">@myLeft</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Tree(parent_id, name, lft, rgt) <span class="keyword">VALUES</span>(<span class="variable">@parent</span>_id, <span class="string">&#x27;Fruit&#x27;</span>, <span class="variable">@myLeft</span> <span class="operator">+</span> <span class="number">1</span>, <span class="variable">@myLeft</span> <span class="operator">+</span> <span class="number">2</span>);</span><br><span class="line">UNLOCK TABLES;</span><br></pre></td></tr></table></figure><p>如需在末尾追加就需要以下方式进行（以在Red下添加Apple为例）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">LOCK <span class="keyword">TABLE</span> Tree WRITE;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@parent</span>_id :<span class="operator">=</span> node_id , <span class="variable">@myRight</span> :<span class="operator">=</span> rgt <span class="keyword">FROM</span> Tree <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;Red&#x27;</span>;</span><br><span class="line">UPDATE Tree <span class="keyword">SET</span> rgt <span class="operator">=</span> rgt <span class="operator">+</span> <span class="number">2</span> <span class="keyword">WHERE</span> rgt <span class="operator">&gt;=</span> <span class="variable">@myRight</span>;</span><br><span class="line">UPDATE Tree <span class="keyword">SET</span> lft <span class="operator">=</span> lft <span class="operator">+</span> <span class="number">2</span> <span class="keyword">WHERE</span> lft <span class="operator">&gt;</span> <span class="variable">@myRight</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Tree(parent_id, name, lft, rgt) <span class="keyword">VALUES</span>(<span class="variable">@parent</span>_id, <span class="string">&#x27;Apple&#x27;</span>, <span class="variable">@myRight</span>, <span class="variable">@myRight</span> <span class="operator">+</span> <span class="number">1</span>);</span><br><span class="line">UNLOCK TABLES;</span><br></pre></td></tr></table></figure><p>在节点A后面添加同级节点（以在Yellow后面添加Green为例）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">LOCK <span class="keyword">TABLE</span> Tree WRITE;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@parent</span>_id :<span class="operator">=</span> parent_id , <span class="variable">@myRight</span> :<span class="operator">=</span> rgt <span class="keyword">FROM</span> Tree <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;Yellow&#x27;</span>;</span><br><span class="line">UPDATE Tree <span class="keyword">SET</span> rgt <span class="operator">=</span> rgt <span class="operator">+</span> <span class="number">2</span> <span class="keyword">WHERE</span> rgt <span class="operator">&gt;</span> <span class="variable">@myRight</span>;</span><br><span class="line">UPDATE Tree <span class="keyword">SET</span> lft <span class="operator">=</span> lft <span class="operator">+</span> <span class="number">2</span> <span class="keyword">WHERE</span> lft <span class="operator">&gt;</span> <span class="variable">@myRight</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Tree(parent_id, name, lft, rgt) <span class="keyword">VALUES</span>(<span class="variable">@parent</span>_id, <span class="string">&#x27;Green&#x27;</span>, <span class="variable">@myRight</span><span class="operator">+</span><span class="number">1</span>, <span class="variable">@myRight</span><span class="operator">+</span><span class="number">2</span>);</span><br><span class="line">UNLOCK TABLES;</span><br></pre></td></tr></table></figure><p>以上讨论的添加节点指的都是添加末端节点，即插入的这个节点不是当前已存在节点的父节点。如果需要插入非末端节点要怎么办呢？<br>这个过程可以将流程分为2步，首先新增节点，接下里再将需要的节点移到新增的节点下级。节点移动方法(以将Apple移到Yellow中为例)：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">LOCK <span class="keyword">TABLE</span> Tree WRITE;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@nodeId</span> :<span class="operator">=</span> node_id , <span class="variable">@myLeft</span> :<span class="operator">=</span> lft , <span class="variable">@myRight</span> :<span class="operator">=</span> rgt <span class="keyword">FROM</span> Tree <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;Apple&#x27;</span>;</span><br><span class="line">UPDATE Tree <span class="keyword">SET</span> lft <span class="operator">=</span> lft <span class="operator">-</span> (<span class="variable">@myRight</span> <span class="operator">-</span> <span class="variable">@myLeft</span>) <span class="operator">-</span> <span class="number">1</span> <span class="keyword">WHERE</span> lft <span class="operator">&gt;</span> <span class="variable">@myRight</span>;</span><br><span class="line">UPDATE Tree <span class="keyword">SET</span> rgt <span class="operator">=</span> rgt <span class="operator">-</span> (<span class="variable">@myRight</span> <span class="operator">-</span> <span class="variable">@myLeft</span>) <span class="operator">-</span> <span class="number">1</span> <span class="keyword">WHERE</span> rgt <span class="operator">&gt;</span> <span class="variable">@myRight</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@parent</span>_id :<span class="operator">=</span> node_id , <span class="variable">@Left</span> :<span class="operator">=</span> lft , <span class="variable">@Right</span> :<span class="operator">=</span> rgt <span class="keyword">FROM</span> Tree <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;Yellow&#x27;</span>;</span><br><span class="line">UPDATE Tree <span class="keyword">SET</span> lft <span class="operator">=</span> lft <span class="operator">+</span> (<span class="variable">@myRight</span> <span class="operator">-</span> <span class="variable">@myLeft</span>) <span class="operator">+</span> <span class="number">1</span> <span class="keyword">WHERE</span> lft <span class="operator">&gt;</span> <span class="variable">@Left</span>;</span><br><span class="line">UPDATE Tree <span class="keyword">SET</span> rgt <span class="operator">=</span> rgt <span class="operator">+</span> (<span class="variable">@myRight</span> <span class="operator">-</span> <span class="variable">@myLeft</span>) <span class="operator">+</span> <span class="number">1</span> <span class="keyword">WHERE</span> lft <span class="operator">&gt;</span> <span class="variable">@Left</span>;</span><br><span class="line">UPDATE Tree <span class="keyword">SET</span> parent_id <span class="operator">=</span> <span class="variable">@parent</span>_id <span class="keyword">WHERE</span> name <span class="operator">=</span> node_id <span class="operator">=</span> <span class="variable">@nodeId</span>;</span><br><span class="line">UPDATE Tree <span class="keyword">SET</span> lft <span class="operator">=</span> <span class="variable">@Left</span> <span class="operator">+</span> lft <span class="operator">-</span> <span class="variable">@myLeft</span> <span class="operator">+</span> <span class="number">1</span>, rgt <span class="operator">=</span> <span class="variable">@Left</span> <span class="operator">+</span> lft <span class="operator">-</span> <span class="variable">@myLeft</span> <span class="operator">+</span> <span class="number">1</span> <span class="operator">+</span> (<span class="variable">@myRight</span> <span class="operator">-</span> <span class="variable">@myLeft</span>) <span class="keyword">WHERE</span> lft <span class="operator">&gt;=</span> <span class="variable">@myLeft</span> <span class="keyword">AND</span> rgt <span class="operator">&lt;=</span> <span class="variable">@myRight</span>;</span><br><span class="line">UNLOCK TABLES;</span><br></pre></td></tr></table></figure><p><strong>删除节点（包含子节点）</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">LOCK <span class="keyword">TABLE</span> Tree WRITE;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@myLeft</span> :<span class="operator">=</span> lft , <span class="variable">@myRight</span> :<span class="operator">=</span> rgt <span class="keyword">FROM</span> Tree <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;Apple&#x27;</span>;</span><br><span class="line"><span class="keyword">DELETE</span> Tree <span class="keyword">WHERE</span> lft <span class="operator">&gt;=</span> <span class="variable">@myLeft</span> <span class="keyword">AND</span> rgt <span class="operator">&lt;=</span> <span class="variable">@myRight</span>;</span><br><span class="line">UPDATE Tree <span class="keyword">SET</span> lft <span class="operator">=</span> lft <span class="operator">-</span> (<span class="variable">@myRight</span> <span class="operator">-</span> <span class="variable">@myLeft</span>) <span class="operator">-</span> <span class="number">1</span> <span class="keyword">WHERE</span> lft <span class="operator">&gt;</span> <span class="variable">@myRight</span>;</span><br><span class="line">UPDATE Tree <span class="keyword">SET</span> rgt <span class="operator">=</span> rgt <span class="operator">-</span> (<span class="variable">@myRight</span> <span class="operator">-</span> <span class="variable">@myLeft</span>) <span class="operator">-</span> <span class="number">1</span> <span class="keyword">WHERE</span> rgt <span class="operator">&gt;</span> <span class="variable">@myRight</span>;</span><br><span class="line">UNLOCK TABLES;</span><br></pre></td></tr></table></figure><p>如果需要只删除该节点，子节点自动上移一级如何处理？</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">LOCK <span class="keyword">TABLE</span> Tree WRITE;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="variable">@parent</span>_id :<span class="operator">=</span> parent_id , <span class="variable">@node</span>_id :<span class="operator">=</span>node_id , <span class="variable">@myLeft</span> :<span class="operator">=</span> lft , <span class="variable">@myRight</span> :<span class="operator">=</span> rgt <span class="keyword">FROM</span> Tree <span class="keyword">WHERE</span> name <span class="operator">=</span> <span class="string">&#x27;Red&#x27;</span>;</span><br><span class="line">UPDATE Tree <span class="keyword">SET</span> parent_id <span class="operator">=</span> <span class="variable">@parent</span>_id <span class="keyword">WHERE</span> parent_id <span class="operator">=</span> <span class="variable">@node</span>_id</span><br><span class="line"><span class="keyword">DELETE</span> Tree <span class="keyword">WHERE</span> lft <span class="operator">=</span> <span class="variable">@myLeft</span>;</span><br><span class="line">UPDATE Tree <span class="keyword">SET</span> lft <span class="operator">=</span> lft <span class="operator">-</span> <span class="number">1</span>,rgt <span class="operator">=</span> rgt<span class="number">-1</span> <span class="keyword">Where</span> lft <span class="operator">&gt;</span> <span class="variable">@myLeft</span> <span class="keyword">AND</span> <span class="variable">@rgt</span> <span class="operator">&lt;</span> <span class="variable">@myRight</span></span><br><span class="line">UPDATE Tree <span class="keyword">SET</span> lft <span class="operator">=</span> lft <span class="operator">-</span> <span class="number">2</span>,rgt <span class="operator">=</span> rgt<span class="number">-2</span> <span class="keyword">Where</span> lft <span class="operator">&gt;</span> <span class="variable">@rgt</span> <span class="operator">&gt;</span> <span class="variable">@myRight</span></span><br><span class="line">UNLOCK TABLES;</span><br></pre></td></tr></table></figure><p>以上为Nested Set的CURD操作，具体在使用时建议结合事务和存储过程一起使用。本方案的优点时查询非常的方便，缺点就是每次插入删除数据涉及到的更新内容太多，如果树非常大，插入一条数据可能花很长的时间。</p><p>参考链接：<br>  ● <a href="https://www.sitepoint.com/hierarchical-data-database/">https://www.sitepoint.com/hierarchical-data-database/</a><br>  ● <a href="https://packagist.org/search/?q=Nested+Set">https://packagist.org/search/?q=Nested+Set</a></p><p>转自<a href="https://www.biaodianfu.com/the-nested-set-model.html">https://www.biaodianfu.com/the-nested-set-model.html</a></p><p>作者：标点符</p>]]></content>
      
      
      <categories>
          
          <category> 码路刺客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 转载 </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树形结构数据存储方案（三）：闭包表</title>
      <link href="2017/03/06/tree-table-store3/"/>
      <url>2017/03/06/tree-table-store3/</url>
      
        <content type="html"><![CDATA[<p>将Closure Table翻译成闭包表不知道是否合适，闭包表的思路和物化路径差不多，都是空间换时间，Closure Table，一种更为彻底的全路径结构，分别记录路径上相关结点的全展开形式。能明晰任意两结点关系而无须多余查询，级联删除和结点移动也很方便。但是它的存储开销会大一些，除了表示结点的Meta信息，还需要一张专用的关系表。</p><span id="more"></span><p>以下图举例数据举例：</p><center><img src="/img/posts/tree-table-store3-1.gif"></img></center><p>创建主表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> nodeInfo (</span><br><span class="line">node_id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">node_name <span class="type">VARCHAR</span> (<span class="number">255</span>),</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`node_id`)</span><br><span class="line">) <span class="keyword">DEFAULT</span> CHARSET <span class="operator">=</span> utf8;</span><br></pre></td></tr></table></figure><p>创建关系表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> nodeRelationship (</span><br><span class="line">ancestor <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">descendant <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">distance <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (ancestor, descendant)</span><br><span class="line">) <span class="keyword">DEFAULT</span> CHARSET <span class="operator">=</span> utf8;</span><br></pre></td></tr></table></figure><p>其中</p><ul><li>Ancestor代表祖先节点</li><li>Descendant代表后代节点</li><li>Distance 祖先距离后代的距离</li></ul><p>添加数据（创建存储过程）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DEFINER <span class="operator">=</span> `root`@`localhost` <span class="keyword">PROCEDURE</span> `AddNode`(`_parent_name` <span class="type">varchar</span>(<span class="number">255</span>),`_node_name` <span class="type">varchar</span>(<span class="number">255</span>))</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">DECLARE</span> _ancestor <span class="type">INT</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> _descendant <span class="type">INT</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> _parent <span class="type">INT</span>;</span><br><span class="line">IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>(<span class="keyword">SELECT</span> node_id <span class="keyword">From</span> nodeinfo <span class="keyword">WHERE</span> node_name <span class="operator">=</span> _node_name)</span><br><span class="line"><span class="keyword">THEN</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> nodeinfo (node_name) <span class="keyword">VALUES</span>(_node_name);</span><br><span class="line"><span class="keyword">SET</span> _descendant <span class="operator">=</span> (<span class="keyword">SELECT</span> node_id <span class="keyword">FROM</span> nodeinfo <span class="keyword">WHERE</span> node_name <span class="operator">=</span> _node_name);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> noderelationship (ancestor,descendant,distance) <span class="keyword">VALUES</span>(_descendant,_descendant,<span class="number">0</span>);</span><br><span class="line">IF <span class="keyword">EXISTS</span> (<span class="keyword">SELECT</span> node_id <span class="keyword">FROM</span> nodeinfo <span class="keyword">WHERE</span> node_name <span class="operator">=</span> _parent_name)</span><br><span class="line"><span class="keyword">THEN</span></span><br><span class="line"><span class="keyword">SET</span> _parent <span class="operator">=</span> (<span class="keyword">SELECT</span> node_id <span class="keyword">FROM</span> nodeinfo <span class="keyword">WHERE</span> node_name <span class="operator">=</span> _parent_name);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> noderelationship (ancestor,descendant,distance) <span class="keyword">SELECT</span> ancestor,_descendant,distance<span class="operator">+</span><span class="number">1</span> <span class="keyword">from</span> noderelationship <span class="keyword">where</span> descendant <span class="operator">=</span> _parent;</span><br><span class="line"><span class="keyword">END</span> IF;</span><br><span class="line"><span class="keyword">END</span> IF;</span><br><span class="line"><span class="keyword">END</span>;</span><br></pre></td></tr></table></figure><p>完成后2张表的数据大致是这样的：（注意：每个节点都有一条到其本身的记录。）</p><center><img src="/img/posts/tree-table-store3-2.gif"></img></center><p>查询Fruit下所有的子节点：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">n3.node_name</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">nodeinfo n1</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> noderelationship n2 <span class="keyword">ON</span> n1.node_id <span class="operator">=</span> n2.ancestor</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> nodeinfo n3 <span class="keyword">ON</span> n2.descendant <span class="operator">=</span> n3.node_id</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">n1.node_name <span class="operator">=</span> <span class="string">&#x27;Fruit&#x27;</span></span><br><span class="line"><span class="keyword">AND</span> n2.distance <span class="operator">!=</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p>查询Fruit下直属子节点</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">n3.node_name</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">nodeinfo n1</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> noderelationship n2 <span class="keyword">ON</span> n1.node_id <span class="operator">=</span> n2.ancestor</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> nodeinfo n3 <span class="keyword">ON</span> n2.descendant <span class="operator">=</span> n3.node_id</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">n1.node_name <span class="operator">=</span> <span class="string">&#x27;Fruit&#x27;</span></span><br><span class="line"><span class="keyword">AND</span> n2.distance <span class="operator">=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>查询Fruit所处的层级：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">n2.<span class="operator">*</span>, n3.node_name</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">nodeinfo n1</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> noderelationship n2 <span class="keyword">ON</span> n1.node_id <span class="operator">=</span> n2.descendant</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> nodeinfo n3 <span class="keyword">ON</span> n2.ancestor <span class="operator">=</span> n3.node_id</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">n1.node_name <span class="operator">=</span> <span class="string">&#x27;Fruit&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span></span><br><span class="line">n2.distance <span class="keyword">DESC</span></span><br></pre></td></tr></table></figure><p>另外要删除节点也非常的简单，这里就不再做过多的阐述。<br>参考链接：</p><p>  ● <a href="https://coderwall.com/p/lixing/closure-tables-for-browsing-trees-in-sql">https://coderwall.com/p/lixing/closure-tables-for-browsing-trees-in-sql</a></p><p>转自<a href="https://www.biaodianfu.com/closure-table.html">https://www.biaodianfu.com/closure-table.html</a></p><p>作者：标点符</p>]]></content>
      
      
      <categories>
          
          <category> 码路刺客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 转载 </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树形结构数据存储方案（二）： 物化路径</title>
      <link href="2017/03/06/tree-table-store2/"/>
      <url>2017/03/06/tree-table-store2/</url>
      
        <content type="html"><![CDATA[<p>前一篇文章介绍了比较简单的邻接列表模式，物化路径其实更加容易理解，其实就是在创建节点时，将节点的完整路径进行记录。以下图为例：</p><center><img src="/img/posts/tree-table-store2-1.gif"></img></center> <span id="more"></span><p>按照Path Enumeration 进行存储后的结果如下：</p><center><img src="/img/posts/tree-table-store2-2.gif"></img></center><p>此种方案借助了unix文件目录的思想，主要时以空间换时间。<br>查询某一节点下的所有子节点:（以Fruit为例）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="variable">@path</span> <span class="operator">=</span> (<span class="keyword">SELECT</span> path <span class="keyword">FROM</span> pathTree <span class="keyword">WHERE</span> node_name <span class="operator">=</span> <span class="string">&#x27;Fruit&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> pathTree <span class="keyword">WHERE</span> path <span class="keyword">like</span> CONCAT(<span class="variable">@path</span>,<span class="string">&#x27;/%&#x27;</span>);</span><br></pre></td></tr></table></figure><p>如何查询直属子节点？需要采用MySQL的正则表达式查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="variable">@path</span> <span class="operator">=</span> (<span class="keyword">SELECT</span> path <span class="keyword">FROM</span> pathTree <span class="keyword">WHERE</span> node_name <span class="operator">=</span> <span class="string">&#x27;Fruit&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> pathTree <span class="keyword">WHERE</span> path REGEXP CONCAT(<span class="variable">@path</span>,<span class="string">&#x27;/&#x27;</span>,<span class="string">&#x27;[0-9]$&#x27;</span>);</span><br></pre></td></tr></table></figure><p>查询任意节点的所有上级：（以Yellow为例）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="variable">@path</span> <span class="operator">=</span> (<span class="keyword">SELECT</span> path <span class="keyword">FROM</span> pathTree <span class="keyword">WHERE</span> node_name <span class="operator">=</span> <span class="string">&#x27;Yellow&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> pathTree <span class="keyword">WHERE</span> <span class="variable">@path</span> <span class="keyword">LIKE</span> CONCAT(path, <span class="string">&#x27;%&#x27;</span>) <span class="keyword">AND</span> path <span class="operator">&lt;&gt;</span> <span class="variable">@path</span>;</span><br></pre></td></tr></table></figure><p>插入新增数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="variable">@parent</span>_path <span class="operator">=</span> ( <span class="keyword">SELECT</span> path <span class="keyword">FROM</span> pathTree <span class="keyword">WHERE</span> node_name <span class="operator">=</span> <span class="string">&#x27;Fruit&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> pathtree (path,node_name) <span class="keyword">VALUES</span> (CONCAT(<span class="variable">@parent</span>_path,<span class="string">&#x27;/&#x27;</span>,LAST_INSERT_ID()<span class="operator">+</span><span class="number">1</span>),<span class="string">&#x27;White&#x27;</span>)</span><br></pre></td></tr></table></figure><p>此方案的缺点是树的层级太深有可能会超过PATH字段的长度，所以其能支持的最大深度并非无限的。</p><p>如果层级数量是确定的，可以再将所有的列都展开，如下图，比较试用于类似行政区划、生物分类法（界、门、纲、目、科、属、种）这些层级确定的内容。</p><center><img src="/img/posts/tree-table-store2-3.gif"></img></center><p>转自<a href="https://www.biaodianfu.com/path-enumeration.html">https://www.biaodianfu.com/path-enumeration.html</a></p><p>作者：标点符</p>]]></content>
      
      
      <categories>
          
          <category> 码路刺客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 转载 </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树型结构数据存储方案（一）：邻接列表模式</title>
      <link href="2017/03/06/tree-table-store1/"/>
      <url>2017/03/06/tree-table-store1/</url>
      
        <content type="html"><![CDATA[<p>在程序开发中，我们常遇到用树型结构来表示某些数据间的关系，如企业的组织架构、商品的分类、操作栏目等，目前的关系型数据库都是以二维表的形式记录存储数据，而树型结构的数据如需存入二维表就必须进行Schema设计。</p><span id="more"></span><p>最近对此方面比较感兴趣，专门做下梳理，如下为常见的树型结构的数据：</p><center><img src="/img/posts/tree-table-store1-1.gif"></img></center><p>其中最简单的方法是：Adjacency List（邻接列表模式）。简单的说是根据节点之间的继承关系，显现的描述某一节点的父节点，从而建立二位的关系表。表结构通常设计为{Node_id,Parent_id}，如下图：</p><center><img src="/img/posts/tree-table-store1-2.gif"></img></center><p>使用连接表的大致代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// $parent is the parent of the children we want to see</span></span><br><span class="line"><span class="comment">// $level is increased when we go deeper into the tree,</span></span><br><span class="line"><span class="comment">// used to display a nice indented tree</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">display_children</span>(<span class="params"><span class="variable">$parent</span>, <span class="variable">$level</span></span>) </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="comment">// 获得一个 父节点 $parent 的所有子节点</span></span><br><span class="line"> <span class="variable">$result</span> = mysql_query(<span class="string">&#x27;SELECT name FROM tree WHERE parent=&quot;&#x27;</span>.<span class="variable">$parent</span>.<span class="string">&#x27;&quot;;&#x27;</span>);</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 显示每个子节点</span></span><br><span class="line"> <span class="keyword">while</span> (<span class="variable">$row</span> = mysql_fetch_array(<span class="variable">$result</span>)) </span><br><span class="line"> &#123;</span><br><span class="line"> <span class="comment">// 缩进显示节点名称</span></span><br><span class="line"> <span class="keyword">echo</span> str_repeat(<span class="string">&#x27; &#x27;</span>,<span class="variable">$level</span>).<span class="variable">$row</span>[<span class="string">&#x27;name&#x27;</span>].<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">//再次调用这个函数显示子节点的子节点</span></span><br><span class="line"> </span><br><span class="line"> display_children(<span class="variable">$row</span>[<span class="string">&#x27;name&#x27;</span>], <span class="variable">$level</span>+<span class="number">1</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>对整个结构的根节点（Food）使用这个函数就可以打印出整个多级树结构，由于Food是根节点它的父节点是空的，所以这样调用: display_children(”,0)。将显示整个树的内容。如果你只想显示整个结构中的一部分，比如说水果部分，就可以这样调用：</p><p>display_children(‘Fruit’,0);</p><p>几乎使用同样的方法我们可以知道从根节点到任意节点的路径。比如 Cherry 的路径是　”Food &gt;; Fruit &gt;; Red”。 为了得到这样的一个路径我们需要从最深的一级”Cherry”开始， 查询得到它的父节点”Red”把它添加到路径中， 然后我们再查询Red的父节点并把它也添加到路径中，以此类推直到最高层的”Food”<br>以下是代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// $node 是那个最深的节点</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_path</span>(<span class="params"><span class="variable">$node</span></span>) </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="comment">// 查询这个节点的父节点</span></span><br><span class="line"> <span class="variable">$result</span> = mysql_query(<span class="string">&#x27;SELECT parent FROM tree &#x27;</span>.</span><br><span class="line"> <span class="string">&#x27;WHERE name=&quot;&#x27;</span>.<span class="variable">$node</span>.<span class="string">&#x27;&quot;;&#x27;</span>);</span><br><span class="line"> <span class="variable">$row</span> = mysql_fetch_array(<span class="variable">$result</span>);</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 用一个数组保存路径</span></span><br><span class="line"> <span class="variable">$path</span> = <span class="keyword">array</span>();</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 如果不是根节点则继续向上查询</span></span><br><span class="line"> <span class="comment">// (根节点没有父节点)</span></span><br><span class="line"> <span class="keyword">if</span> (<span class="variable">$row</span>[<span class="string">&#x27;parent&#x27;</span>]!=<span class="string">&#x27;&#x27;</span>) </span><br><span class="line"> &#123;</span><br><span class="line"> <span class="comment">// the last part of the path to $node, is the name</span></span><br><span class="line"> <span class="comment">// of the parent of $node</span></span><br><span class="line"> <span class="variable">$path</span>[] = <span class="variable">$row</span>[<span class="string">&#x27;parent&#x27;</span>];</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// we should add the path to the parent of this node</span></span><br><span class="line"> <span class="comment">// to the path</span></span><br><span class="line"> <span class="variable">$path</span> = array_merge(get_path(<span class="variable">$row</span>[<span class="string">&#x27;parent&#x27;</span>]), <span class="variable">$path</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// return the path</span></span><br><span class="line"> <span class="keyword">return</span> <span class="variable">$path</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>如果对”Cherry”使用这个函数：print_r(get_path(‘Cherry’))，就会得到这样的一个数组了：</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span> </span><br><span class="line">( </span><br><span class="line"> [<span class="number">0</span>] =&gt;; Food </span><br><span class="line"> [<span class="number">1</span>] =&gt;; Fruit </span><br><span class="line"> [<span class="number">2</span>] =&gt;; Red </span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>这种方案的优点很明显：结构简单易懂，由于互相之间的关系只由一个parent_id维护，所以增删改都是非常容易，只需要改动和他直接相关的记录就可以。缺点当然也是非常的突出：由于直接地记录了节点之间的继承关系，因此对Tree的任何CRUD操作都将是低效的，这主要归根于频繁的“递归”操作，递归过程不断地访问数据库，每次数据库IO都会有时间开销。举个例子，如果想要返回所有水果，也就是水果的所有子孙节点，看似很简单的操作，就需要用到一堆递归。当然，这种方案并非没有用武之地，在树的层级比较少的时候就非常实用，在邻接列表模式的基础上还可以拓展的是平面表，区别是将节点的level和当前节点的顺序也放入表中，比较适合类似评论等场景，具体的表结构类似这样，这里就不再深入阐述。</p><center><img src="/img/posts/tree-table-store1-3.gif"></img></center><p>参考链接：<br>  ● <a href="http://salman-w.blogspot.com/2012/08/php-adjacency-list-hierarchy-tree-traversal.html">http://salman-w.blogspot.com/2012/08/php-adjacency-list-hierarchy-tree-traversal.html</a><br>  ● <a href="https://packagist.org/search/?tags=adjacency%20list">https://packagist.org/search/?tags=adjacency%20list</a></p><p>转自<a href="https://www.biaodianfu.com/adjacency-list.html">https://www.biaodianfu.com/adjacency-list.html</a></p><p>作者：标点符</p>]]></content>
      
      
      <categories>
          
          <category> 码路刺客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 转载 </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kimball维度建模技术总结</title>
      <link href="2017/02/05/KimballDimModing/"/>
      <url>2017/02/05/KimballDimModing/</url>
      
        <content type="html"><![CDATA[<p>Kimball维度建模技术几乎已经成为数据仓库建模的最佳实践。维度建模的基本概念总结。</p><span id="more"></span><center><img src="/img/posts/KimballDimModing.gif"></img></center><h2 id="收集业务需求"><a href="#收集业务需求" class="headerlink" title="收集业务需求"></a>收集业务需求</h2><p>在建模工作前，项目组需要跟使用数据的业务人员进行沟通调研，理解业务过程的KPI，数据分析的目标，利用数据进行哪些决策制定。可以收集业务人员，高层决策者经常看的报表，了解他们观察数据的维度跟指标。</p><h2 id="协作维度建模研讨"><a href="#协作维度建模研讨" class="headerlink" title="协作维度建模研讨"></a>协作维度建模研讨</h2><p>维度建模不应该只由那些不懂业务以及业务需求的技术人员来负责，还需要企业数据管理者与使用者的参与共同制定数据分析主题。与业务代表开展一系列高级别交流讨论可以帮助技术人员和需求分析人员对数据有更深入的了解，寻找不同部门使用数据的分析维度与指标的异同。</p><h2 id="维度建模的设计过程"><a href="#维度建模的设计过程" class="headerlink" title="维度建模的设计过程"></a>维度建模的设计过程</h2><p>维度模型设计主要设计四个步骤：</p><h3 id="选择业务过程"><a href="#选择业务过程" class="headerlink" title="选择业务过程"></a>选择业务过程</h3><p>业务过程是组织完成的操作型活动，例如：获得订单，处理保险索赔、学生课程注册或每个月每个账单的快照等等。过程的选择很重要，因为我们要从业务过程中得出事实的指标度量，以及事实表的粒度选取，维度划分等等。</p><h3 id="声明粒度"><a href="#声明粒度" class="headerlink" title="声明粒度"></a>声明粒度</h3><p>声明粒度是维度设计的重要步骤。粒度用于确定某一事实表中的行表示什么。选择维度或事实前必须声明粒度，因为每个候选维度或事实必须与定义的粒度保持一致。在所有维度设计中强制实行一致性是保证BI应用性能和易用性能的关键。在从给定的业务过程获取数据时，原子粒度是最低级别的粒度。粒度越小，描述的业务过程越详细。建议从设计最小粒度的数据开始，这样可以保证比较大的灵活性，满足无法预期的业务用户的查询需求。这对不同的事实表粒度要建立不同的物理表，在同一事实表中不要混用多种不同的粒度。</p><h3 id="确认维度"><a href="#确认维度" class="headerlink" title="确认维度"></a>确认维度</h3><p>维度表又是被称为数据仓库的“灵魂”，因为维度包含确保DW/BI系统能够被用作业务分析的入口和描述性标识。维度提供围绕某一业务过程事件所涉及的“谁、什么、何处、何时、为什么、如何”等背景。维度表包含BI应用所需要的用于过滤及分类事实的描述性属性。牢牢掌握事实表的粒度，就能够将所有可能存在的维度区分开。当与给定事实表行关联是，任何情况下都应使维度保持但一值。</p><h3 id="确认事实"><a href="#确认事实" class="headerlink" title="确认事实"></a>确认事实</h3><p>事实基本上都是以数量值表示，涉及来自业务过程事件的度量，例如销售量，销售额等。一个事实表行与按照事实表粒度描述的度量事件之间存在一对一关系，因此事实表对应一个物理可观察的事件。</p><h2 id="星型模型与OLAP多维数据库"><a href="#星型模型与OLAP多维数据库" class="headerlink" title="星型模型与OLAP多维数据库"></a>星型模型与OLAP多维数据库</h2><p>星型模式是部署在关系数据库管理系统(RDBMS)之上的多维结构。典型地，主要包含事实表，以及通过主键/外键关系与之关联的维度表。联机分析处理(OLAP)多维数据库是实现在多维数据库之上的数据结构，它来源于关系型星型模式。OLAP多维数据库包含维度属性和事实表，但它能够比SQL语言具有更强的分析能力和访问，比如XMLA和MDX等。</p><h2 id="灵活扩展"><a href="#灵活扩展" class="headerlink" title="灵活扩展"></a>灵活扩展</h2><p>维度模型对数据关系发生变化具有灵活的适用性。当发生如下变化时，不需要改变现存的BI查询或应用，就可以方便的适应。</p><ul><li>当事实与存在的事实表粒度一致时，可以创建新列。</li><li>通过建立新的外键列，可以将维度关联到已经存在的事实表上，前提是维度列与事实表粒度保持一致。</li><li>可以在维度表上通过建立新列添加属性。</li><li>可以使事实表的烈度更原子化，方法是在维度表上增加属性。然后以更细的烈度重置事实表，小心保存事实表及维度表的列名。</li></ul><p><em>参考</em></p><p><em>《The Data Warehouse Toolkit:The Definitive Guide to Dimensional Modeling》,Ralph Kimball &amp; Margy Ross</em></p>]]></content>
      
      
      <categories>
          
          <category> BI墨客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 数据仓库 </tag>
            
            <tag> 维度建模 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>宽表和窄表的建设该如何选择？</title>
      <link href="2017/01/03/wide-table-thinking/"/>
      <url>2017/01/03/wide-table-thinking/</url>
      
        <content type="html"><![CDATA[<blockquote><p>宽表从字面意义上讲就是字段比较多的数据库表。通常是指业务主题相关的指标、维度、属性关联在一起的一张数据库表。由于把不同的内容都放在同一张表存储，宽表已经不符合三范式的模型设计规范，随之带来的主要坏处就是数据的大量冗余，与之相对应的好处就是查询性能的提高与便捷。这种宽表的设计广泛应用于数据挖掘模型训练前的数据准备，通过把相关字段放在同一张表中，可以大大提高数据挖掘模型训练过程中迭代计算时的效率问题。<br>————百度百科</p></blockquote><span id="more"></span><h3 id="宽表和窄表的建设该如何选择？"><a href="#宽表和窄表的建设该如何选择？" class="headerlink" title="宽表和窄表的建设该如何选择？"></a>宽表和窄表的建设该如何选择？</h3><p>这个问题相信纠结了很多从是数据库开发、数据仓库开发和后台开发人员；单单考虑这个问题，难给出一个绝对的答案；本人从事数据仓库开发工作到现在已经有一年半时间了，对于这个问题，我也曾经纠结过，但是是否有绝对的答案呢？事实上任何东西都没有绝对的说法。</p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>考虑这样的一个问题，一个公司有这样的一个需求：</p><p>设计销售领域的订单事实表，该事实表应该包含哪些维度和度量？事实表和维表该分别如何去设计？</p><p>好了，我们把关键信息拿出来，首先我们要有维度包括：销售员、销售员所属部门、下订单的时间；度量：销售量；</p><p>那么，订单事实表，其实就是一个商品销售的清单。</p><h3 id="方案一"><a href="#方案一" class="headerlink" title="方案一"></a>方案一</h3><p>依照这个思路，我们建立的第一个模型可能是以下这样的：</p><center><img src="/img/posts/wide-table-thinking-1.gif"></img></center><p>单单看上去，貌似是符合我们的问题的需要，而且符合数据库的范式设计：没有冗余字段；但是情况真的就是这样吗？</p><p>答案是否定的，确实对于一般的OLTP系统而言这样的表设计确实减少了冗余和，增删改查等操作也很方便，但是往往对于我们的统计系统、OLAP、数据挖掘而言，情况却并非如此，举个例子：我们要统计每个部门各自的销售量为多少？那么对于上表,sql是这样的：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> a.<span class="operator">*</span>,b.sid <span class="keyword">into</span> #dep_saleser <span class="keyword">from</span> department a,saleser_dim b <span class="keyword">on</span> a.dep_id <span class="operator">=</span> b.dep_id;</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="number">1</span>),a.dep_name <span class="keyword">from</span> #dep_saleser a,order_fact b <span class="keyword">on</span> a.sid<span class="operator">=</span>b.sid <span class="keyword">group</span> <span class="keyword">by</span> a.dep_name;</span><br></pre></td></tr></table></figure><p>对于这么一个简单的需求已经要写两了sql去实现了，其实数据库表模型的的设计是灵活的，我们完全可以根据我们的业务去设计我们的数据表；考虑到部门和销售员可以是同属于销售者这个维度，只是他们是有上下级别关系的。</p><h3 id="方案二"><a href="#方案二" class="headerlink" title="方案二"></a>方案二</h3><p>那么依照这个思路，我们的模型可以建立为下面这样：</p><center><img src="/img/posts/wide-table-thinking-2.gif"></img></center><p>那么统计每个部门各自的销售量，可以用如下sql去实现：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="number">1</span>),a.dep_name <span class="keyword">from</span> saleser_dim a,order_fact b</span><br><span class="line"><span class="keyword">on</span> a.sid<span class="operator">=</span>b.sid <span class="keyword">group</span> <span class="keyword">by</span> a.dep_name;</span><br></pre></td></tr></table></figure><p>确实对于这个模型而言，有些情况下会出现冗余（填写用户，没有填写部门，填写部门没填写用户），但是对于提取数统计的逻辑又相对来说要简单了好多。</p><h3 id="方案三"><a href="#方案三" class="headerlink" title="方案三"></a>方案三</h3><p>考虑到要实现取数简单，我们还可以想出另外一种方法：</p><center><img src="/img/posts/wide-table-thinking-3.gif"></img></center><p>看上去好像不错哦~~，取数据也就一句sql就搞掂了，但是却是最最槽糕的情况，有可能一个销售员，前几天登记的部门是a，但是其实他的所属于的部门为b，那么对于上面这个模型，我们得改动销售员和订单表；而对于上面的其他两个模型都仅仅需要改动一张表就行了，造成查询数据部一致往往也就是这种数据模型所造成的。</p><p>所谓的宽表就是字段比较多的表，包含的维度层次比较多，造成冗余也比较多，毁范式设计，但是利于取数统计，而窄表往往对于OLTP比较合适，符合范式设计原则。</p><p>转自<a href="http://www.cnblogs.com/super-d2/p/3384938.html">http://www.cnblogs.com/super-d2/p/3384938.html</a></p>]]></content>
      
      
      <categories>
          
          <category> BI墨客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 转载 </tag>
            
            <tag> 数据仓库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【SQL Server】编辑、修改字段说明（备注）</title>
      <link href="2016/12/02/SQLAddColumnNote/"/>
      <url>2016/12/02/SQLAddColumnNote/</url>
      
        <content type="html"><![CDATA[<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">sp_addextendedproperty</span><br><span class="line">    [ @name = ] &#123; <span class="string">&#x27;property_name&#x27;</span> &#125;</span><br><span class="line">    [ , [ @value = ] &#123; <span class="string">&#x27;value&#x27;</span> &#125; </span><br><span class="line">        [ , [ @level0type = ] &#123; <span class="string">&#x27;level0_object_type&#x27;</span> &#125; </span><br><span class="line">                    , [ @level0name = ] &#123; <span class="string">&#x27;level0_object_name&#x27;</span> &#125; </span><br><span class="line">                [ , [ @level1type = ] &#123; <span class="string">&#x27;level1_object_type&#x27;</span> &#125; </span><br><span class="line">                                    , [ @level1name = ] &#123; <span class="string">&#x27;level1_object_name&#x27;</span> &#125; </span><br><span class="line">                        [ , [ @level2type = ] &#123; <span class="string">&#x27;level2_object_type&#x27;</span> &#125; </span><br><span class="line">                                                    , [ @level2name = ] &#123; <span class="string">&#x27;level2_object_name&#x27;</span> &#125; </span><br><span class="line">                        ] </span><br><span class="line">                ]</span><br><span class="line">        ] </span><br><span class="line">    ] </span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h3><p>为了指定扩展属性，SQL Server 数据库中的对象分为三个级别（0、1 和 2）。级别 0 是最高级别，定义为包含在数据库作用域中的对象。级别 1 的对象包含在架构作用域或用户作用域中，而级别 ２ 的对象包含在级别 1 对象中。可以为这些级别中任一级别的对象定义扩展属性。</p><p>引用某个级别中的对象必须用拥有或包含它们的更高级别对象的名称进行限制。例如，当将扩展属性添加到表列（级别 2）时，还必须指定包含该列的表名（级别 1）以及包含该表的架构（级别 0）。</p><p>有关对象及其有效的级别 0、1 和 2 类型的完整列表，请参阅对数据库对象使用扩展属性。如果所有对象类型和名称都为空，则属性属于当前数据库本身。对于系统对象、用户定义数据库的作用域以外的对象或者未在 Arguments 中作为有效输入列出的对象，不允许使用扩展属性。</p><h3 id="架构与用户"><a href="#架构与用户" class="headerlink" title="架构与用户"></a>架构与用户</h3><p>在 SQL Server 的早期版本中，用户拥有表、视图和触发器之类的数据库对象。因此，允许将扩展属性添加到这些对象之一以及将用户名指定为级别 0 类型。但在 SQL Server 2005 中，数据库对象包含在架构中。它们独立于拥有架构的用户。在 SQL Server 2005 中，我们建议不要在将扩展属性应用于数据库对象时指定 USER 作为级别 0 类型，因为这会导致名称解析不明确。例如，假定用户 Mary 拥有两个架构（Mary 和 MySchema），并且这两个架构都包含名为 MyTable 的表。如果 Mary 将扩展属性添加到表 MyTable 并指定 @level0type = N’USER’、@level0name = Mary，则扩展属性应用于哪个表并不明确。为了保持向后兼容，SQL Server 将属性应用于名为 Mary 的架构所包含的表。有关用户与架构的详细信息，请参阅用户架构分离。</p><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p><code>[ @name ] = &#123; &#39;property_name&#39; &#125;</code></p><p>要添加的属性的名称。property_name 的数据类型为 sysname，不能为 NULL。名称还可以包括空格或非字母数字字符串以及二进制值。</p><p><code>[ @value = ] &#123; &#39;value&#39; &#125;</code></p><p>要与属性关联的值。value 的数据类型为 sql_variant，默认值为 NULL。value 的大小不能超过 7,500 个字节。</p><p><code>[ @level0type = ] &#123; &#39;level0_object_type&#39; &#125;</code></p><p>级别 0 对象的类型。level0_object_type 的数据类型为 varchar(128)，默认值为 NULL。<br>有效的输入包括：ASSEMBLY、CONTRACT、EVENT NOTIFICATION、FILEGROUP、MESSAGE TYPE、PARTITION FUNCTION、PARTITION SCHEME、REMOTE SERVICE BINDING、ROUTE、SCHEMA、SERVICE、USER、TRIGGER、TYPE 和 NULL。<br>重要事项：</p><p>作为级别 0 类型的 USER 和 TYPE 将在 SQL Server 的未来版本中删除。请避免在新的开发工作中使用这些功能，并考虑修改当前使用这些功能的应用程序。改用 SCHEMA 代替 USER 作为级别 0 类型。对于 TYPE，请使用 SCHEMA 作为级别 0 类型，使用 TYPE 作为级别 1 类型。</p><p><code>[ @level0name = ] &#123; &#39;level0_object_name&#39; &#125;</code></p><p>所指定的级别 0 对象类型的名称。level0_object_name 的数据类型为 sysname，默认值为 NULL。</p><p><code>[ @level1type = ] &#123; &#39;level1_object_type&#39; &#125;</code></p><p>级别 1 对象的类型。level1_object_type 的数据类型为 varchar(128)，默认值为 NULL。有效的输入包括：AGGREGATE、DEFAULT、FUNCTION、LOGICAL FILE NAME、PROCEDURE、QUEUE、RULE、SYNONYM、TABLE、TYPE、VIEW、XML SCHEMA COLLECTION 和 NULL。</p><p><code>[ @level1name = ] &#123; &#39;level1_object_name&#39; &#125;</code></p><p>所指定的级别 1 对象类型的名称。level1_object_name 的数据类型为 sysname，默认值为 NULL。</p><p><code>[ @level2type = ] &#123; &#39;level2_object_type&#39; &#125;</code></p><p>级别 2 对象的类型。level2_object_type 的数据类型为 varchar(128)，默认值为 NULL。有效的输入包括：COLUMN、CONSTRAINT、EVENT NOTIFICATION、INDEX、PARAMETER、TRIGGER 和 NULL。</p><p><code>[ @level2name = ] &#123; &#39;level2_object_name&#39; &#125;</code></p><p>所指定的级别 2 对象类型的名称。level2_object_name 的数据类型为 sysname，默认值为 NULL。</p><h3 id="返回代码值"><a href="#返回代码值" class="headerlink" title="返回代码值"></a>返回代码值</h3><p>0（成功）或 1（失败）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">EXEC sys.sp_addextendedproperty @name&#x3D;N&#39;MS_Description&#39;, @value&#x3D;N&#39;0:取消,1:已到,2:未到,3:预订违约&#39; ,@level0type&#x3D;N&#39;SCHEMA&#39;, @level0name&#x3D;N&#39;dbo&#39;, @level1type&#x3D;N&#39;TABLE&#39;, @level1name&#x3D;N&#39;Tab_Passenger&#39;, @level2type&#x3D;N&#39;COLUMN&#39;, @level2name&#x3D;N&#39;PassengerState&#39;</span><br><span class="line">-表及字段描述信息处理示例</span><br><span class="line"></span><br><span class="line">--创建表</span><br><span class="line">create table 表(a1 varchar(10),a2 char(2))</span><br><span class="line"></span><br><span class="line">--为表添加描述信息</span><br><span class="line">EXECUTE sp_addextendedproperty N&#39;MS_Description&#39;, &#39;人员信息表&#39;, N&#39;user&#39;, N&#39;dbo&#39;, N&#39;table&#39;, N&#39;表&#39;, NULL, NULL</span><br><span class="line"></span><br><span class="line">--为字段a1添加描述信息</span><br><span class="line">EXECUTE sp_addextendedproperty N&#39;MS_Description&#39;, &#39;姓名&#39;, N&#39;user&#39;, N&#39;dbo&#39;, N&#39;table&#39;, N&#39;表&#39;, N&#39;column&#39;, N&#39;a1&#39;</span><br><span class="line"></span><br><span class="line">--为字段a2添加描述信息</span><br><span class="line">EXECUTE sp_addextendedproperty N&#39;MS_Description&#39;, &#39;性别&#39;, N&#39;user&#39;, N&#39;dbo&#39;, N&#39;table&#39;, N&#39;表&#39;, N&#39;column&#39;, N&#39;a2&#39;</span><br><span class="line"></span><br><span class="line">--更新表中列a1的描述属性：</span><br><span class="line">EXEC sp_updateextendedproperty &#39;MS_Description&#39;,&#39;字段1&#39;,&#39;user&#39;,dbo,&#39;table&#39;,&#39;表&#39;,&#39;column&#39;,a1</span><br><span class="line"></span><br><span class="line">--删除表中列a1的描述属性：</span><br><span class="line">EXEC sp_dropextendedproperty &#39;MS_Description&#39;,&#39;user&#39;,dbo,&#39;table&#39;,&#39;表&#39;,&#39;column&#39;,a1</span><br><span class="line"></span><br><span class="line">--删除测试</span><br><span class="line">drop table 表</span><br></pre></td></tr></table></figure><p>转自:<a href="http://blog.csdn.net/zanychou/article/details/7403336">http://blog.csdn.net/zanychou/article/details/7403336</a></p>]]></content>
      
      
      <categories>
          
          <category> 码路刺客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 转载 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> SQL Server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从事技术，坚持写博客的好处？</title>
      <link href="2016/12/01/BenifitOfWritingBlog/"/>
      <url>2016/12/01/BenifitOfWritingBlog/</url>
      
        <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><ul><li>1.写博客的担心</li></ul><p>今天来谈谈,写博客对我的益处,说起写博客,其实我写博客的时间不长,也就10来个月时间;之前工作的时候,看到同事每天晚上写博客,当时觉得很奇怪,就觉得写这个东西,非常浪费时间,自己知道的好的技术或者是好的技术解决思路,如果分享出去,不是被别人学去了吗等等一系列问题.</p><ul><li>2.自己的经历</li></ul><p>等写了一段时间博客时,慢慢发现,其实之前的担心的完全没必要,你会的东西,精通的知识,即使分享出去,别人也未必能学的会,即时要学会学透,也是要花费时间和精力的,所以这种担心我们大可不必.人还是要有点分享和谦虚精神的,仅仅是这种只进不出的思想,我想你也很难有的发展!那么写博客10来个时间里,通过写博客给自己带来了哪些方面的提升呢?下面我就结合自己经力来给大家做个详细的总结. </p><span id="more"></span><h2 id="写博客的好处"><a href="#写博客的好处" class="headerlink" title="写博客的好处"></a>写博客的好处</h2><p>下面我就大家来做一个详细的分析.以思维导图的形式给大家列举一下,写博客这10来个月时间里,给我带来了哪些变化.</p><ul><li>1.没写博客的原因</li></ul><center><img src="/img/posts/BenifitOfWritingBlog-1.jpg"></img></center><p>下面也对当初写博客时担心,给大家一一分析.</p><ul><li>1.1 浪费时间</li></ul><p>如果你刚开始写博客,你可能会有这样的担心,觉得他很浪费时间,需要花时间去思考,去总结,去整理成章,这一系列过程都是要花费很多时间.当你渐渐养成写博客习惯时,就会慢慢意识到这是花费时间,而不是所谓的浪费时间!</p><ul><li>1.2. 工作太忙,没时间去写</li></ul><p>这是最无能为力的，有热情的程序员是不会总以这个理由推脱的。习惯成自然!</p><ul><li>1.3.怕自己的技术被别人学去</li></ul><p>这个完全没必要去担心,你会的别人也未必会,即使你分享出去,别人也未必学的会!人还是要有点分享精神的!</p><ul><li>1.4.懒于思考,疏于总结</li></ul><p>这个是最致命的,事情的成败在于此!吃一堑长一智,能力都是在思考和总结中得带长足进步的!</p><ul><li>1.5.想写,但不知道该写些什么?</li></ul><p>这其实是一种思考总结能力的欠缺。大胆迈出第一步,慢慢来,就把它当做每天发微信动态一样,把它变成一种常态。</p><ul><li>1.6.技术含量低,写出来没意义</li></ul><p>写博客不一定要写出多么牛逼的文章,只要是自己所悟所思所想就行,记录自己知识点滴的不足,例如,今天我一个变量用错了,我也可以把它写出来,自己的博客无关他人怎么看.事实上，除了你的挚友和亲人，没有人会那么在意你，这些担心都是庸人自扰。知识是自己的事,我总结我进步!</p><ul><li>2.最初的想法</li></ul><p>我为什么要写博客呢?其实当时的想法非常简单,仅仅是想把自己当天工作中学到的知识及解决问题的思路,整理记录下来,方便自己日后工作用到的时候能够翻翻,快速的找到.原因就这么简单.</p><ul><li>3.最后的好处</li></ul><center><img src="/img/posts/BenifitOfWritingBlog-2.jpg"></img></center><p>那么问题来了,写博客有什么好处呢,能让一个人坚持这么久?下面我就给大家一一做个解释.</p><ul><li>3.1.加深对技术点的理解</li></ul><p>每天写博客,可以加深对技术点的理解,假如工作中,对某个技术点运用的不熟,当你通过博客的形式写出来,这个过程中,遇到不懂的知识点,你就会查阅相关的资料,弄明白他.</p><ul><li>3.2.自己日后用到</li></ul><p>就相当于笔记本一样,把重要的东西都记录下来,等哪天在遇到同样的问题,我们可以翻阅他.确实偶尔会用到，但频率不会那么高；因为你遇到过一次，解决了之后记忆能保存很长时间，除非又过了一段时间后又遇到这个问题；或者问题解决方案比较复杂，不是简单一次就能记住的。</p><ul><li>3.3.获得阅读量,得到认可</li></ul><p>当一篇文章,获得更多人阅读时或者是被各大网站转发时,往往就会有一种喜悦感,一种得到认可的感觉,写文章的动力就随之而来了.</p><ul><li>3.4.成就感</li></ul><p>当你的文章被大量阅读时,是不是很有成就感?当别人对你的文章称赞的时,是不是有某种成就感,继续写下去的<br>冲动?当你的文章被大量转发,被收录,是不是也有成就感?</p><ul><li>3.5.一点小虚荣</li></ul><p>当你遇到一个问题，搜索结果是自己的博客文章；当你的同事遇到问题，搜索结果是你的文章；当你的名称出现在全球最大中文IT社区的博客首页上；每个月博客网给你送书,是否感到一种无比的欣喜?你是不是有那么一点小小的虚荣心和自豪感呢？</p><ul><li>3.6.提高自己思维能力</li></ul><p>博客写多了,你的逻辑思维是不是很强了;解决问题的思路更加清晰了;技术文档是不是轻易的就写出来了.可以时刻保持思考的习惯,不至于思想比较僵化.可以提高解决问题的思维角度,有利于我们作为程序员的长远发展!</p><ul><li>3.7.提高自己的写作水平</li></ul><p>这个，确实有一定的帮助；但对于程序方面的文档来说，文字是一方面，画图是另一方面（思维导图，关系图，架构图之类的）。不过目前也就普通的文档还行，招投标文档感觉写起来还是有难度。</p><ul><li>3.8.为自己的人生留下只言片语</li></ul><p>就像日志一样,人生总有回味的地方吧.你不能说你做了10来年的技术,10年来的技术积累在哪,总要留下点只言片语.人生需要回味!<br>这同时也是是一个知识积累的过程，但更重的是为自己的人生留下一点痕迹。你也可以把它当成写日志，只不过是程序员体的语言,在IT圈子里，如果有人问起我关于某个技术，文字是不容易撒谎的。翻阅自己以前写的博客，很容易找到自己的成长轨迹.</p><ul><li>3.9.提高自己的知名度</li></ul><p>现在自己只是个无名的程序员,对这个倒没啥感觉</p><ul><li>3.10.养成有始有终的好习惯</li></ul><p>每天写日志,私密的东西,始终是自己一个人看,对我而言很难坚持下去,;而技术就不一样了,一篇博客人人都可以去看,好就点个赞,就评论一下,分享给大家!</p><ul><li>3.11.结交志同道合的朋友</li></ul><p>这个可以有,看你文章的人,大部分都是跟你从事同一领域的人,交流多了,进步也快了!</p><ul><li>3.12.碎片化学习</li></ul><p>你是否有这样的困惑？通过网络确实能够学习到很多东西，但从网上学到的东西大都是零零散散的，不系统，好像学了很多东西，又好像什么都没学到，或者学过之后又忘了，这该怎么办？有个博客就很简单了，我们可以把学习的知识按自己的结构整理记录下来，方便日后查阅巩固。</p><ul><li>3.13.使自己成为技术大牛</li></ul><p>这个真的可以做到,写博客,在相同的时间里, 带给自己能力的提升要比别人要快很多,不过这也是个循序渐进的过程,非一日之寒!</p><ul><li>3.14.分享与学习</li></ul><p>什么意思呢？也就是随着你的分享越来越多， 可能会出现一批技术的追随者、崇拜者。当然，我的技术还远远没达到那个层次，这也就是为什么是分享与学习；也就是说，你分享的内容如果有说的不对的地方，考虑的不周的地方，角度不全面的地方，热心的小伙伴会帮你指出来！这样就通过你的分享，产生沟通与交流的介质，从而学习更多的知识。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总之写博客,对一个技术人员来讲,益处很大,最自己能力,技能,知识的提升都有很大的帮助,在这里大家要记住写博客是非常花费时间的,注意这里说的是花费时间而不是浪费时间,我觉得花费时间去写博客是值得的!</p><p>最后希望那些想想写博客而没有坚持写下去的人,继续坚持写下去,坚持了就有收获.而那些没有写博客的人.给自己找个自己写博客的理由不需要太复杂太充分，正如我的简简单单就可以.</p><p>坚持下去!</p><p>转自:<a href="http://www.toutiao.com/a6308960007249559810/">http://www.toutiao.com/a6308960007249559810/</a></p>]]></content>
      
      
      <categories>
          
          <category> 随笔感悟 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 转载 </tag>
            
            <tag> 知识管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>再见Solo，谢谢!</title>
      <link href="2016/11/28/HardSayGoodby/"/>
      <url>2016/11/28/HardSayGoodby/</url>
      
        <content type="html"><![CDATA[<center><img src="/img/posts/HardSayGoodbye-1.jpeg"></img></center><p>还有一天，购买的服务器就要到期了，并没有续期的打算，意味着在服务器上运行的这个Solo博客就停掉了。其实也没有什么大不了的事情，只是想来这一路没有为自己能够坚持而愧疚。</p><span id="more"></span><p>购买服务器的初衷就是想有一个自己部署的博客，当然有CSDN这些非常优秀的博客平台，上面的大牛资源很多，在上面写东西分享东西会更好些，自己搞个服务器运行个博客，还没什么人去看，无外乎为了装个X罢了。没错，是这样的，但是坦白讲这个X装的并不好。每当在网上搜索解决问题的方法的时候，链接到一些不错的个人博客，看到那随着时光而留下的一篇篇印记，就很是羡慕，看得出那一路的积累、总结与成长。</p><center><img src="/img/posts/HardSayGoodbye-2.jpeg"></img></center><p>记得服务器是去年双十一优惠买的阿里云服务器，单核1G内存。买之前还买了域名。那时候刚知道有WP(Wordpress)不久，这个相信很多人都知道，一个很不错的开源的博客与内容展示平台，用PHP写的，在互联网世界还是很流行的(还记得嘛，PHP是世界上最好的语言)。所以起初是部署的WP的博客，所以就要搞一个MySql+PHP的运行环境，自然不用说，用集成的XAMPP就好了。</p><p>但是后来让我换成了现在用的Solo，并不是因为Wordpress不好，Wordpress还是很不错的，功能很完善，还有各种插件皮肤可以用，由于买的服务器配置比较低，1G的内存，本身运行了Win Server 2012在运行其他的显得比较勉强，经常出现PHP运行环境不稳定崩溃的现象。所以想到有没有一些比较轻量级的博客平台，也不记得怎么找到的Solo，觉着挺好，按个JAVA环境，就可以独立启动运行。功能上也够用，还可以将博客同步到黑客派。当然也折腾了一下皮肤，修改了默认皮肤的一些样式。</p><center><img src="/img/posts/HardSayGoodbye-3.jpeg"></img></center><p>其实大部分文章都是转来的，平时搜东西的时候觉得挺好就转载一下，偶尔也把自己遇到的一些问题整理记录下来放出去。必须得承认，自己整理的东西会让自己更加印象深刻，在整理成博客的时候会让你理清思路，还可以练习你的表达。我还得承认我的写作能力巅峰时期应该在高中，高考后再没那时的水准。大学里论文什么的虽然字数多，但怎么出来的你懂得。</p><p>大概是在8月份，开始比较深入了解Git，自然就少不了GitHub，后来了解到在Github上可以发布静态网页的博客，遂折腾了一段时间，觉得还是蛮神奇的，用nodejs生成静态网页在同步到Github，还可以练习Git命令，所以就用Hexo搭了一个github静态博客<a href="http://c-xuan.com/">c-xuan.com</a>。当然它并没有B3log那么方便，每次更新博客都要push。而且还得想办法解决多个地方发布的同步问题。但好处也显而易见，不需要独立的服务器，注册一个Github账号即可。有没有即功能齐全又不需要独立服务器的？有，像博客园、CSDN、简书等等都不错。</p><center><img src="/img/posts/HardSayGoodbye-4.jpeg"></img></center><p>最后我想说的是，选择什么样的平台发布自己的博客并不需要太过在意，适合自己的就是最好的，无论什么工具，目的都是总结自己的经历，分享自己的历程。我们庆幸自己生活在一个互联网的时代，这是一个最好的时代，我们可以随心所欲在浩瀚的网络中学到自己想要的东西。另外，就是坚持，其实坚持并不是胜利，坚持到底才是胜利，坚持着去写些东西，让岁月在互联网上留下点痕迹。诚然，网络是一个虚拟的世界，想必我们都已离不开这个世界，学着在这个世界里让自己更快成长。看到过这样一句话：有些人你可能忘了，但输入法还记得。就像很多事情你也忘了，但可能会有这样一个地方会让你回忆起什么(我说的不是朋友圈)。愿你迷茫时都可以找回来时的路。</p><p>PS:感谢Solo开源博客平台，感谢B3log团队。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔感悟 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 知识管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript :零基础打造自己的类库</title>
      <link href="2016/10/29/JS-BuildBaseClassLib/"/>
      <url>2016/10/29/JS-BuildBaseClassLib/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>在之前的章节中，我们已经不依赖jQuery，单纯地用JavaScript封装了很多方法，这个时候，你一定会想，这些经常使用的方法能不能单独整理成一个js文件呢？</p><p>当然可以，封装本来就是干这个用的。放在一个单独js文件里固然不错，其实我们也可以单独整一个js类库，一方面可以锻炼一下自己封装方法的能力，另一方面，也可以将自己学到的东西做一个整理。</p><p>出于这个目的，本文将介绍如何封装一个简单的js类库。（当然，只是开一个头，熟悉一下js基础而已。实际使用的话我感觉完全没有必要，因为jQuery已经很强大了，直接使用第三方的就可以）</p><span id="more"></span><h3 id="总体设计"><a href="#总体设计" class="headerlink" title="总体设计"></a>总体设计</h3><p>所谓的js库，其实也就是一个js文件，我思前想后，决定取个名字叫“miniQuery”,是不是山寨的味道十足呢？哈，请不要在意这些小细节。</p><p>大概的设计如下：</p><ul><li>1.扩展方法的兼容（主要写一些兼容的扩展方法，比如 forEach 方法等）</li><li>2.工具包定义 （就是之前封装的utils.js，我们的miniQuery需要依赖这个工具包，为了方便，就干脆写在一个文件里面了。）</li><li>3.miniQuery定义</li></ul><h3 id="扩展方法的兼容"><a href="#扩展方法的兼容" class="headerlink" title="扩展方法的兼容"></a>扩展方法的兼容</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ------------------------ 基本扩展, 字符串,数组等-------------------------------//</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">extend_base</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">String</span>.prototype.format )&#123;</span><br><span class="line">        <span class="built_in">String</span>.prototype.format = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> e = <span class="built_in">arguments</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.replace(<span class="regexp">/&#123;(\d+)&#125;/g</span>,<span class="function"><span class="keyword">function</span>(<span class="params">t, n</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">typeof</span> e[n] != <span class="string">&quot;undefined&quot;</span> ? e[n] : t</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">Array</span>.prototype.forEach &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">Array</span>.prototype.forEach !== <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">        <span class="built_in">Array</span>.prototype.forEach = <span class="function"><span class="keyword">function</span>(<span class="params">callback, context</span>) </span>&#123;</span><br><span class="line">           <span class="comment">// 遍历数组,在每一项上调用回调函数，这里使用原生方法验证数组。</span></span><br><span class="line">           <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.toString.call(<span class="built_in">this</span>) === <span class="string">&quot;[object Array]&quot;</span>) &#123;</span><br><span class="line">               <span class="keyword">var</span> i,len;</span><br><span class="line">               <span class="comment">//遍历该数组所有的元素</span></span><br><span class="line">               <span class="keyword">for</span> (i = <span class="number">0</span>, len = <span class="built_in">this</span>.length; i &lt; len; i++) &#123;</span><br><span class="line">                   <span class="keyword">if</span> (<span class="keyword">typeof</span> callback === <span class="string">&quot;function&quot;</span>  &amp;&amp; <span class="built_in">Object</span>.prototype.hasOwnProperty.call(<span class="built_in">this</span>, i)) &#123;</span><br><span class="line">                       <span class="keyword">if</span> (callback.call(context, <span class="built_in">this</span>[i], i, <span class="built_in">this</span>) === <span class="literal">false</span>) &#123;</span><br><span class="line">                           <span class="keyword">break</span>; <span class="comment">// or return;</span></span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">String</span>.prototype.format )&#123;</span><br><span class="line">        <span class="built_in">Array</span>.isArray = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> obj.constructor.toString().indexOf(<span class="string">&#x27;Array&#x27;</span>) != -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//待补充 ...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们定义一个extend_base方法，里面主要对js内置对象的api做了一些兼容性补充，目前还不完善，只有寥寥几个方法。当然，如果你不考虑IE678的话，那么基本上不需要这一部分了。</p><p>定义完成后立即调用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">extend_base(); </span><br></pre></td></tr></table></figure><h3 id="工具包整合"><a href="#工具包整合" class="headerlink" title="工具包整合"></a>工具包整合</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ------------------------ 工具包---------------------------------//</span></span><br><span class="line"><span class="keyword">var</span> utils = &#123;</span><br><span class="line">            center : <span class="function"><span class="keyword">function</span>(<span class="params">dom</span>)</span>&#123;</span><br><span class="line">                dom.style.position = <span class="string">&#x27;absolute&#x27;</span>;</span><br><span class="line">                dom.style.top = <span class="string">&#x27;50%&#x27;</span>;</span><br><span class="line">                dom.style.left = <span class="string">&#x27;50%&#x27;</span>;</span><br><span class="line">                dom.style[<span class="string">&#x27;margin-top&#x27;</span>] = - dom.offsetHeight / <span class="number">2</span> + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">                dom.style[<span class="string">&#x27;margin-left&#x27;</span>] = - dom.offsetWidth / <span class="number">2</span> + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">            &#125;,</span><br><span class="line">        </span><br><span class="line">            <span class="comment">/** dom相关 * */</span></span><br><span class="line">            isDom : ( <span class="keyword">typeof</span> HTMLElement === <span class="string">&#x27;object&#x27;</span> ) ?</span><br><span class="line">                <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> obj <span class="keyword">instanceof</span> HTMLElement;</span><br><span class="line">                &#125; :</span><br><span class="line">                <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> obj &amp;&amp; <span class="keyword">typeof</span> obj === <span class="string">&#x27;object&#x27;</span> &amp;&amp; obj.nodeType === <span class="number">1</span> &amp;&amp; <span class="keyword">typeof</span> obj.nodeName === <span class="string">&#x27;string&#x27;</span>;</span><br><span class="line">                &#125; ,</span><br><span class="line">             </span><br><span class="line">            <span class="comment">/** 数组相关 * */</span></span><br><span class="line">            isArray : <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> obj.constructor.toString().indexOf(<span class="string">&#x27;Array&#x27;</span>) != -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><ul><li>center ：控制dom元素相对于父盒子居中</li><li>isDom ：判断是否为dom元素</li><li>isArray ：判断是否为数组</li></ul><h3 id="miniQuery总体设计"><a href="#miniQuery总体设计" class="headerlink" title="miniQuery总体设计"></a>miniQuery总体设计</h3><p>终于到miniQuery了，在写代码之前，先简单说一下自执行函数。<br>可能你在很多书上，或者下载的源码里面，经常会看到这样的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>这样子你或许觉得很奇怪，没事，我们一起来分析。</p><p>在js中，你如果把函数看作一个数据类型，和其他语言中的 Integer， Float ， String等等一样，就会理解很多事情了。当然，其实在js中，函数本身就是一个对象，不然的话就不会出现call方法了。因为只有对象才可以调用方法嘛。不过，大部分情况下，你把函数理解为数据类型就可以了。</p><p>匿名函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不过，因为js语法的关系，这样子是不能执行的，你需要用一对圆括号来包一下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(  </span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">&quot;你好！&quot;</span>);</span><br><span class="line">    &#125;()  </span><br><span class="line">) ;</span><br></pre></td></tr></table></figure><p>这样就可以了，下面是另一种写法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(  </span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">&quot;你好！&quot;</span>);</span><br><span class="line">    &#125;  </span><br><span class="line">)();</span><br></pre></td></tr></table></figure><p>这样也可以，这种写法会更多一点。它的意思就是说，我不关心你这个函数叫什么名字，反正你在被定义的时候就要给我执行，这就是所谓的自执行函数。</p><p>好，问题来了，怎么加参数呢？</p><p>以前我们习惯于这么写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">say</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">    alert(str);</span><br><span class="line"> &#125; </span><br><span class="line"></span><br><span class="line">say(<span class="string">&quot;你好！&quot;</span>);</span><br></pre></td></tr></table></figure><p>依葫芦画瓢</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(  </span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">       alert(str);</span><br><span class="line">    &#125;  </span><br><span class="line">)(<span class="string">&quot;你好！&quot;</span>);</span><br></pre></td></tr></table></figure><p>OK了。</p><p>是不是一样的意思呢？</p><p>没啥区别，以前怎么做，现在还怎么做，无非就是一个函数传参的事情罢了。</p><p>我们将圆括号的位置调整一下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">( <span class="function"><span class="keyword">function</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">    alert(str);</span><br><span class="line">&#125; )(<span class="string">&quot;你好！&quot;</span>);</span><br></pre></td></tr></table></figure><p>这样差不多就是最终的版本了，我记得初学js的时候，看这种代码很吃力，好像在看外星语言一样，后来看多了也就习惯了。</p><p>自执行函数就是这么一回事，没什么大不了的。</p><p>有了上面的解释，以后如果你再遇到这种写法，就 so easy 啦。</p><p>所以，不要再恐惧了，它就是这么回事，没什么大不了的，我这么后知后觉的人都能写，你也可以。我花了半年的时间才看明白，我相信你现在只需要几分钟。我的意思是，如果你之前不知道这些的话。</p><p>那么，什么时候用自执行函数呢？</p><p><strong>当你觉得某个函数只需要执行一次，而且不需要在其他地方调用的时候，就用。</strong></p><p>你可能会问了，我干嘛要这样写啊，反正就执行一次，我直接把实现代码写在外面不就行了？</p><p><strong>原因很简单，因为那样的话，你定义的变量就会是全局的，而一般来说我们设计的原则是尽量不要使用全局变量。</strong></p><p>而采用这种方式，我们就形成了一个匿名函数，函数的定义又会形成闭包，所以比较安全和简洁。</p><p>你可能还会觉得疑惑，我干嘛要这些写，如果我非要给函数取一个名字，然后马上调用呢？</p><p>额，其实我个人认为这也是没有问题的，但是你得费一番心思去给函数取名字，取 a,b,c,d 这样的名字肯定是不好的。那么，我私以为，还不如干脆就用匿名函数算了，省得麻烦。</p><p>如果这部分知识你以前就不知道，那么我建议你把这篇文章多看几遍，反正就是那么回事，没什么大不了的。我当初就是走了很多弯路，也没有人教我，只有靠自己在那瞎摸索和各种百度，当然，现在想想很简单了。</p><p>我们的miniQuery的定义就放在这个自执行函数里面，这样一来，只要有人调用了这个js文件，就能调用miniQuery函数了。</p><p>当然，你直接放在外面其实也没事，因为反正就一个方法，而且这个方法本来就是要暴露出去的。</p><p>这边为了说明自执行函数，就硬加进来了。</p><p>我们把miniQuery的定义丢进去。</p><p>比如，像这样子的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">var</span> miniQuery = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">&#x27;Hello miniQuery!&#x27;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>我们尝试在外面调用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">miniQuery();</span><br></pre></td></tr></table></figure><p>很遗憾，调不到。</p><p>我们再回顾一下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">var</span> miniQuery = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">&#x27;Hello miniQuery!&#x27;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">miniQuery();</span><br></pre></td></tr></table></figure><p>原来，miniQuery是存在于一个闭包中的，它可以访问到父级作用域的变量，但是反过来就不行，除非函数自己用 return 的方式将私有数据暴露出去。这些在之前的关于闭包的文章里面已经解释过了，这里不再赘述。</p><p>解决方法有很多，比如，最简单的，我们直接把var去掉，这样就会发生一次变量提升，miniQuery被升级为全局变量，挂在window对象上面。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   </span><br><span class="line">   miniQuery = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">&#x27;Hello miniQuery!&#x27;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">miniQuery();</span><br></pre></td></tr></table></figure><p>成了，简单明了，干干净净。</p><p>虽然我觉得很有道理，但是我看别人的代码，他们封装自己的js库的时候，几乎没有这样做的，因此我们也采用一种大众的做法。</p><p>即，我们把window作为参数传进去，然后手动将miniQuery挂上去。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">win</span>)</span>&#123;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">var</span> miniQuery = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">&#x27;Hello miniQuery!&#x27;</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   win.miniQuery = miniQuery;</span><br><span class="line">   </span><br><span class="line">&#125;)(<span class="built_in">window</span>);</span><br><span class="line"></span><br><span class="line">miniQuery();</span><br></pre></td></tr></table></figure><p>是不是也可以呢？</p><p>如果你觉得每次写miniQuery太麻烦，那么我们可以给它换一个名字，比如 $</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">win</span>)</span>&#123;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">var</span> miniQuery = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    alert(<span class="string">&#x27;Hello miniQuery!&#x27;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">   win.$ = miniQuery;</span><br><span class="line">   </span><br><span class="line">&#125;)(<span class="built_in">window</span>);</span><br><span class="line"></span><br><span class="line">$();</span><br></pre></td></tr></table></figure><p>这样就差不多了。</p><h3 id="miniQuery-包裹对象"><a href="#miniQuery-包裹对象" class="headerlink" title="miniQuery 包裹对象"></a>miniQuery 包裹对象</h3><p>我们先弄来一个测试用的网页：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrap</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">80px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">80px</span>;</span><br><span class="line">    <span class="attribute">background</span>:darkslateblue;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">2px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;boxes&#x27;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;box1&#x27;</span> <span class="attr">class</span>=<span class="string">&#x27;wrap&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;box2&#x27;</span> <span class="attr">class</span>=<span class="string">&#x27;wrap&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;box3&#x27;</span> <span class="attr">class</span>=<span class="string">&#x27;wrap&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>举一个例子，现在我们要获取id为box1的盒子，并把它的背景色改为红色。</p><p>用js代码，我们会这样做：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> box2 = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;box2&#x27;</span>);</span><br><span class="line">box2.style.backgroundColor = <span class="string">&#x27;red&#x27;</span>;</span><br></pre></td></tr></table></figure><p>思路很清晰，分为简单的两步：</p><p>第一步：获取dom对象。<br>第二部：设置其背景色为红色。</p><p>同样的，我们的 miniQuery 也要这么做，首先得获取对象，然后进行操作。就好像你做饭，首先得有米面吧。所谓巧妇难为，无米之炊。</p><p>于是，我们有了下面的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> miniQuery = <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">var</span> miniQuery = <span class="built_in">document</span>.getElementById(selector);</span><br><span class="line">   <span class="built_in">console</span>.log(miniQuery);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>selector 代表选择器，它只是一个参数名字，参数列表的名称是可以自己定义的。你写 aaa , bbb , ccc 都没问题，只要你愿意的话。</p><p>我以前经常看别人写的代码，参数里面有callback，现在我知道是回调函数的意思。可是我以前不知道，然后就觉得很困惑，作为一个英语比日语还差的js玩家，我感到很那个啥。</p><p>其实无所谓，只是一个名字而已，你写什么都行，只要符合标识符的命名规范就成。</p><p>总有人觉得，看到参数里边写了context（上下文），callback（回调函数）这样的词汇，就觉得很困惑。</p><p>不要困惑啦，不要再惊恐啦，它就是一个名称罢了！</p><p>。。。</p><p>额，扯远了，继续回来。</p><p>我们在外面调用miniQuery ~</p><p>window 上面挂的是 $ , 其实就是 miniQuery</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&#x27;box1&#x27;</span>);</span><br></pre></td></tr></table></figure><p>接下里，我们给dom元素变更背景色为红色。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> miniQuery = <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">var</span> miniQuery = <span class="built_in">document</span>.getElementById(selector);</span><br><span class="line">   miniQuery.style.backgroundColor = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果确实出来了。</p><p>可是呢，如果用户过几天又来个需求，说我要把box1的宽度变为之前的两倍，你怎么办？</p><p>总不可能去修改源码吧！</p><p>这时候，我们就可以考虑能不能通过一个什么办法，我先用miniQuery把你传进来的东西包装成dom元素，保存起来返回给你，同时再给你返回一大堆方法，比如改变高度啊，添加背景色啊等等。那么，操作的就是之前保存的元素了。也就是你一开始希望操作的元素。</p><p>这是一个很好的想法，我们经过代码的重写，最终产生了这样的一个miniQuery函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> miniQuery = <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> miniQuery = <span class="built_in">document</span>.getElementById(selector);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        obj : miniQuery , <span class="comment">//将dom元素保存起来，再返回给你</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// ------------------------ css 相关 ------------------------//</span></span><br><span class="line">        backgroundColor : <span class="function"><span class="keyword">function</span>(<span class="params">color</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.obj.style.backgroundColor = color;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line">   win.$ = miniQuery;</span><br><span class="line">   </span><br><span class="line">&#125;)(<span class="built_in">window</span>);</span><br></pre></td></tr></table></figure><p>我们再调用一次，看看这回它给我们返回的是什么东东？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $box = $(<span class="string">&#x27;box1&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log($box);</span><br></pre></td></tr></table></figure><center><img src="/img/posts/JS-BuildBaseClassLib-1.gif"></img></center><p>可见，它给我们返回的是一个json对象，里面有 obj 变量和 backgroundColor 函数。这样的好处就是极大的扩展了我们的miniQuery，你给我一个选择器，我就包起来，然后不仅把它返回给你，而且还给你各种api方法！</p><p>于是我们就可以直接调用 backgroundColor 函数了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $box = $(<span class="string">&#x27;box1&#x27;</span>);</span><br><span class="line">$box.backgroundColor(<span class="string">&#x27;red&#x27;</span>);</span><br></pre></td></tr></table></figure><center><img src="/img/posts/JS-BuildBaseClassLib-2.gif"></img></center><p>成了。</p><p>我们现在返回的，不是一个单纯的dom元素，dom元素只是它的一部分。可以说，我们返回给用户的是一个miniQuery对象！</p><p>经过改进，我已经陆陆续续地给miniQuery添加了很多方法，大部分是模拟的jQuery：</p><center><img src="/img/posts/JS-BuildBaseClassLib-3.gif"></img></center><p>顺便弄了两个小型的组件，一个是按钮，另一个是简单的数据列表。</p><p>按钮使用：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">link</span> rel=<span class="string">&quot;stylesheet&quot;</span> type=<span class="string">&quot;text/css&quot;</span> href=<span class="string">&quot;css/mui.css&quot;</span>/&gt;</span><br><span class="line">&lt;div class=<span class="string">&#x27;box&#x27;</span>&gt;&lt;/div&gt;</span><br><span class="line">var $box = $(<span class="string">&#x27;.box&#x27;</span>).e<span class="string">q(0)</span>;</span><br><span class="line">$box.linkbutton();</span><br></pre></td></tr></table></figure><p>按钮的样式就出来了，然后我们来设置按钮的属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> $box = $(<span class="string">&#x27;.box&#x27;</span>).eq(<span class="number">0</span>);</span><br><span class="line">$box.linkbutton(&#123;</span><br><span class="line">    text : <span class="string">&#x27;保存&#x27;</span> ,</span><br><span class="line">    click : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">&#x27;保存成功！&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>按钮的大小也自动变大了。</p><p>对应的css：</p><p>mui.css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.linkbutton</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: .<span class="number">4em</span> .<span class="number">9em</span>; <span class="comment">/*em的好处就是随着父元素的字体大小而变化，当该元素的字体变化时，会自适应*/</span></span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">1</span>);</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ac0</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: .<span class="number">2em</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">5</span>);</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">0</span> -.<span class="number">06em</span> .<span class="number">24em</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">5</span>); <span class="comment">/*将阴影设置为半透明，就无所谓底色了，都能很好地适应*/</span></span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">130%</span>; </span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.5</span>; <span class="comment">/*行高是字号的1.5倍*/</span></span><br><span class="line">    <span class="attribute">display</span>:inline-block;</span><br><span class="line">    <span class="attribute">cursor</span>:pointer;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&quot;微软雅黑&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数据列表简单演示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;css/mui.css&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;js/miniQuery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">&#x27;btn0&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;grid0&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">&#x27;#btn0&#x27;</span>).linkbutton(&#123;</span></span><br><span class="line"><span class="javascript">            text : <span class="string">&#x27;测试&#x27;</span> ,</span></span><br><span class="line"><span class="javascript">            click : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line">                if(grid0.getSize() &lt; 1)&#123;</span><br><span class="line"><span class="javascript">                    alert(<span class="string">&#x27;请选择一条数据！&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span>;</span></span><br><span class="line">                &#125;</span><br><span class="line"><span class="javascript">                alert(<span class="string">&#x27;您选择的是&#x27;</span> + <span class="built_in">JSON</span>.stringify(grid0.getSelected()));</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> grid0 = mui.get(<span class="string">&#x27;#grid0&#x27;</span>).dataGrid(&#123;</span></span><br><span class="line">            header : [</span><br><span class="line"><span class="javascript">                &#123;<span class="attr">name</span>:<span class="string">&#x27;ID&#x27;</span> ,  <span class="attr">width</span>:<span class="number">10</span> , <span class="attr">type</span> : <span class="string">&#x27;checkColumn&#x27;</span> &#125; ,</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">name</span>:<span class="string">&#x27;标题&#x27;</span> , <span class="attr">type</span> : <span class="string">&#x27;column&#x27;</span> , <span class="attr">field</span> : <span class="string">&#x27;title&#x27;</span>&#125; ,</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">name</span>:<span class="string">&#x27;分类&#x27;</span> , <span class="attr">type</span> : <span class="string">&#x27;column&#x27;</span> , <span class="attr">field</span> : <span class="string">&#x27;type&#x27;</span>&#125; ,</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">name</span>:<span class="string">&#x27;作者&#x27;</span> ,  <span class="attr">type</span> : <span class="string">&#x27;column&#x27;</span> , <span class="attr">field</span> : <span class="string">&#x27;author&#x27;</span>&#125; ,</span></span><br><span class="line"><span class="javascript">                &#123;<span class="attr">name</span>:<span class="string">&#x27;时间&#x27;</span> ,  <span class="attr">type</span> : <span class="string">&#x27;column&#x27;</span> , <span class="attr">field</span> : <span class="string">&#x27;time&#x27;</span>&#125; ,</span></span><br><span class="line">            ] ,</span><br><span class="line">            </span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        grid0.load([</span><br><span class="line"><span class="javascript">            &#123;<span class="attr">title</span> : <span class="string">&#x27;111&#x27;</span> , <span class="attr">type</span> : <span class="string">&#x27;A&#x27;</span> , <span class="attr">author</span> : <span class="string">&#x27;张三&#x27;</span> , <span class="attr">time</span> : <span class="string">&#x27;2015&#x27;</span>&#125; ,</span></span><br><span class="line"><span class="javascript">            &#123;<span class="attr">title</span> : <span class="string">&#x27;222&#x27;</span> , <span class="attr">type</span> : <span class="string">&#x27;B&#x27;</span> , <span class="attr">author</span> : <span class="string">&#x27;李四&#x27;</span> , <span class="attr">time</span> : <span class="string">&#x27;2015&#x27;</span>&#125; ,</span></span><br><span class="line"><span class="javascript">            &#123;<span class="attr">title</span> : <span class="string">&#x27;333&#x27;</span> , <span class="attr">type</span> : <span class="string">&#x27;C&#x27;</span> , <span class="attr">author</span> : <span class="string">&#x27;王五&#x27;</span> , <span class="attr">time</span> : <span class="string">&#x27;2015&#x27;</span>&#125; ,</span></span><br><span class="line"><span class="javascript">            &#123;<span class="attr">title</span> : <span class="string">&#x27;444&#x27;</span> , <span class="attr">type</span> : <span class="string">&#x27;D&#x27;</span> , <span class="attr">author</span> : <span class="string">&#x27;赵六&#x27;</span> , <span class="attr">time</span> : <span class="string">&#x27;2015&#x27;</span>&#125; ,</span></span><br><span class="line">        ]);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当然，好多组件都还不够完善，我主要也是自己尝试一下，不过并不打算再拓展了。</p><p>自己做个小类库主要用于学习，以后还是用jQuery吧。</p><p>附录A</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * miniQuery 和 工具类库</span></span><br><span class="line"><span class="comment"> * 版本 1.1 (修正了一部分Bug，增加了一些方法)</span></span><br><span class="line"><span class="comment"> * 作者：剽悍一小兔</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ------------------------ 基本扩展, 字符串,数组等---------------------------------//</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">extend_base</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">String</span>.prototype.format )&#123;</span><br><span class="line">        <span class="built_in">String</span>.prototype.format = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> e = <span class="built_in">arguments</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.replace(<span class="regexp">/&#123;(\d+)&#125;/g</span>,<span class="function"><span class="keyword">function</span>(<span class="params">t, n</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">typeof</span> e[n] != <span class="string">&quot;undefined&quot;</span> ? e[n] : t</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">Array</span>.prototype.forEach &amp;&amp; <span class="keyword">typeof</span> <span class="built_in">Array</span>.prototype.forEach !== <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">        <span class="built_in">Array</span>.prototype.forEach = <span class="function"><span class="keyword">function</span>(<span class="params">callback, context</span>) </span>&#123;</span><br><span class="line">           <span class="comment">// 遍历数组,在每一项上调用回调函数，这里使用原生方法验证数组。</span></span><br><span class="line">           <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.toString.call(<span class="built_in">this</span>) === <span class="string">&quot;[object Array]&quot;</span>) &#123;</span><br><span class="line">               <span class="keyword">var</span> i,len;</span><br><span class="line">               <span class="comment">//遍历该数组所有的元素</span></span><br><span class="line">               <span class="keyword">for</span> (i = <span class="number">0</span>, len = <span class="built_in">this</span>.length; i &lt; len; i++) &#123;</span><br><span class="line">                   <span class="keyword">if</span> (<span class="keyword">typeof</span> callback === <span class="string">&quot;function&quot;</span>  &amp;&amp; <span class="built_in">Object</span>.prototype.hasOwnProperty.call(<span class="built_in">this</span>, i)) &#123;</span><br><span class="line">                       <span class="keyword">if</span> (callback.call(context, <span class="built_in">this</span>[i], i, <span class="built_in">this</span>) === <span class="literal">false</span>) &#123;</span><br><span class="line">                           <span class="keyword">break</span>; <span class="comment">// or return;</span></span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">String</span>.prototype.format )&#123;</span><br><span class="line">        <span class="built_in">Array</span>.isArray = <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> obj.constructor.toString().indexOf(<span class="string">&#x27;Array&#x27;</span>) != -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">extend_base(); </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ------------------------ 工具包---------------------------------//</span></span><br><span class="line"><span class="keyword">var</span> utils = &#123;</span><br><span class="line">            center : <span class="function"><span class="keyword">function</span>(<span class="params">dom</span>)</span>&#123;</span><br><span class="line">                dom.style.position = <span class="string">&#x27;absolute&#x27;</span>;</span><br><span class="line">                dom.style.top = <span class="string">&#x27;50%&#x27;</span>;</span><br><span class="line">                dom.style.left = <span class="string">&#x27;50%&#x27;</span>;</span><br><span class="line">                dom.style[<span class="string">&#x27;margin-top&#x27;</span>] = - dom.offsetHeight / <span class="number">2</span> + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">                dom.style[<span class="string">&#x27;margin-left&#x27;</span>] = - dom.offsetWidth / <span class="number">2</span> + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">            &#125;,</span><br><span class="line">        </span><br><span class="line">            <span class="comment">/** dom相关 * */</span></span><br><span class="line">            isDom : ( <span class="keyword">typeof</span> HTMLElement === <span class="string">&#x27;object&#x27;</span> ) ?</span><br><span class="line">                <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> obj <span class="keyword">instanceof</span> HTMLElement;</span><br><span class="line">                &#125; :</span><br><span class="line">                <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> obj &amp;&amp; <span class="keyword">typeof</span> obj === <span class="string">&#x27;object&#x27;</span> &amp;&amp; obj.nodeType === <span class="number">1</span> &amp;&amp; <span class="keyword">typeof</span> obj.nodeName === <span class="string">&#x27;string&#x27;</span>;</span><br><span class="line">                &#125; ,</span><br><span class="line">             </span><br><span class="line">            <span class="comment">/** 数组相关 * */</span></span><br><span class="line">            isArray : <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> obj.constructor.toString().indexOf(<span class="string">&#x27;Array&#x27;</span>) != -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ------------------------ miniQuery.js ---------------------------------//</span></span><br><span class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params">win</span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> miniQuery = <span class="function"><span class="keyword">function</span>(<span class="params">selector</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> miniQuery = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">var</span> length = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">var</span> children = [];</span><br><span class="line">        <span class="keyword">if</span>(!selector) <span class="keyword">return</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/** 1. 传入的是id * */</span></span><br><span class="line">        <span class="keyword">if</span>(selector.toString().indexOf(<span class="string">&#x27;#&#x27;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">            selector = selector.replace(<span class="string">&#x27;#&#x27;</span>,<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">            miniQuery = <span class="built_in">document</span>.getElementById(selector);</span><br><span class="line">        &#125; </span><br><span class="line">        </span><br><span class="line">        <span class="comment">/** 2. 传入的是class * */</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(selector.toString().indexOf(<span class="string">&#x27;.&#x27;</span>) != -<span class="number">1</span>)&#123;</span><br><span class="line">            selector = selector.replace(<span class="string">&#x27;.&#x27;</span>,<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">            miniQuery = <span class="built_in">document</span>.getElementsByClassName(selector);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">/** 3. 传入的是dom元素 * */</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(utils.isDom(selector))&#123;</span><br><span class="line">            miniQuery = selector;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">         <span class="comment">/** 4. 传入的是标签 * */</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> selector === <span class="string">&#x27;string&#x27;</span>)&#123;</span><br><span class="line">            miniQuery = <span class="built_in">document</span>.getElementsByTagName(selector);</span><br><span class="line">            <span class="keyword">return</span> miniQuery;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(!miniQuery) <span class="keyword">return</span>; <span class="comment">//如果本类库包装不了，就返回</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(miniQuery.length)&#123;   <span class="comment">//如果是一个类数组元素的话，就获取他的长度</span></span><br><span class="line">            length = miniQuery.length; </span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            length = <span class="number">1</span>; <span class="comment">//这种情况，说明成功包裹了元素，但是该元素还是存在的，就将长度设定为1</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        children = miniQuery.children; <span class="comment">//取得所有的孩子节点</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">/** 属性区 */</span></span><br><span class="line">            obj : miniQuery,    <span class="comment">//返回的dom元素</span></span><br><span class="line">            index : <span class="number">0</span> ,         <span class="comment">//默认的角标（假如 miniquery 是一个类数组的话）</span></span><br><span class="line">            length : length,    <span class="comment">//元素的个数（假如 miniquery 是一个类数组的话）</span></span><br><span class="line">            children : children,<span class="comment">//所有孩子节点</span></span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            <span class="comment">/** 方法区 */</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">// ------------------------ dom 相关 ---------------------------------//</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">/**获取dom对象本身,返回纯粹的dom元素，而非miniQuery元素*/</span></span><br><span class="line">            getObj : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.obj;</span><br><span class="line">            &#125; ,</span><br><span class="line">            </span><br><span class="line">            <span class="comment">/**获取元素的长度*/</span></span><br><span class="line">            size : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.length;</span><br><span class="line">            &#125; ,</span><br><span class="line">            </span><br><span class="line">            <span class="comment">/** 假如 miniquery 是一个类数组的话，用于返回其中一个元素 */</span></span><br><span class="line">            eq : <span class="function"><span class="keyword">function</span>(<span class="params">index</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> $(<span class="built_in">this</span>.obj[index]); <span class="comment">//eq返回的还是miniQuery对象</span></span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; ,</span><br><span class="line">            </span><br><span class="line">            <span class="comment">/** 获得第一个匹配元素 */</span></span><br><span class="line">            first : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> $(<span class="built_in">this</span>.obj[<span class="number">0</span>]);</span><br><span class="line">            &#125; ,</span><br><span class="line">            </span><br><span class="line">            <span class="comment">/** 获得最后一个匹配元素 */</span></span><br><span class="line">            last : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> $(<span class="built_in">this</span>.obj[<span class="built_in">this</span>.length - <span class="number">1</span>]);</span><br><span class="line">            &#125; ,</span><br><span class="line">            </span><br><span class="line">            <span class="comment">/** 获得最后一个匹配元素 */</span></span><br><span class="line">            getChildren : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.obj.children;</span><br><span class="line">            &#125; ,</span><br><span class="line">            </span><br><span class="line">            <span class="comment">/** 获得某一个孩子节点 */</span></span><br><span class="line">            getChild : <span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> $(<span class="built_in">this</span>.children[i]);</span><br><span class="line">            &#125; ,</span><br><span class="line">            </span><br><span class="line">            <span class="comment">/** 获得父节点 */</span></span><br><span class="line">            getParent : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> $(<span class="built_in">this</span>.obj.parentElement);</span><br><span class="line">            &#125; ,</span><br><span class="line">            </span><br><span class="line">            <span class="comment">/** 获得上一个节点 */</span></span><br><span class="line">            previous : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">var</span> parent = <span class="built_in">this</span>.getParent();</span><br><span class="line">                <span class="keyword">var</span> children = parent.children;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; children.length; i++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(<span class="built_in">this</span>.obj == children[i]) &#123;</span><br><span class="line">                        <span class="keyword">return</span> $(children[i - <span class="number">1</span>]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125; ,</span><br><span class="line">            </span><br><span class="line">            <span class="comment">/** 获得下一个节点 */</span></span><br><span class="line">            next : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">var</span> parent = <span class="built_in">this</span>.getParent();</span><br><span class="line">                <span class="keyword">var</span> children = parent.children;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; children.length; i++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(<span class="built_in">this</span>.obj == children[i]) &#123;</span><br><span class="line">                        <span class="keyword">return</span> $(children[i + <span class="number">1</span>]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125; ,</span><br><span class="line">            </span><br><span class="line">            findClassDom : <span class="function"><span class="keyword">function</span>(<span class="params">className</span>)</span>&#123;</span><br><span class="line">                 <span class="built_in">this</span>.obj = <span class="built_in">this</span>.obj.getElementsByClassName(className) ;</span><br><span class="line">                 <span class="keyword">return</span> <span class="built_in">this</span> ;</span><br><span class="line">            &#125; ,</span><br><span class="line">            </span><br><span class="line">            findIdDom : <span class="function"><span class="keyword">function</span>(<span class="params">id</span>)</span>&#123;</span><br><span class="line">                 <span class="keyword">var</span> $this = <span class="built_in">this</span>; </span><br><span class="line">                 <span class="keyword">var</span> children = <span class="built_in">this</span>.getChildren();</span><br><span class="line">                 children = <span class="built_in">Array</span>.prototype.slice.call(children); <span class="comment">//obj 转  []</span></span><br><span class="line">                 children.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">                    <span class="comment">//console.log(item.id);</span></span><br><span class="line">                    (id === item.id) &amp;&amp; ($this = item) ;</span><br><span class="line">                 &#125;);</span><br><span class="line">                 <span class="keyword">return</span> <span class="built_in">this</span> ;</span><br><span class="line">            &#125; ,</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// ------------------------ css 相关 ---------------------------------//</span></span><br><span class="line">            <span class="comment">/** 添加背景色 */</span></span><br><span class="line">            backgroundColor : <span class="function"><span class="keyword">function</span>(<span class="params">color</span>)</span>&#123;</span><br><span class="line">                <span class="built_in">this</span>.obj.style.backgroundColor = color;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">            &#125; ,</span><br><span class="line">            </span><br><span class="line">            <span class="comment">/** 获取style */</span></span><br><span class="line">            getStyle : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">var</span> styleEle = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">window</span>.getComputedStyle)&#123;</span><br><span class="line">                    styleEle = <span class="built_in">window</span>.getComputedStyle(<span class="built_in">this</span>.obj,<span class="literal">null</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    styleEle = ht.currentStyle;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> styleEle;</span><br><span class="line">             &#125; ,</span><br><span class="line">            </span><br><span class="line">            <span class="comment">/** 设置或者拿到高度 */</span> </span><br><span class="line">            height : <span class="function"><span class="keyword">function</span>(<span class="params">h</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(!h) <span class="keyword">return</span> <span class="built_in">this</span>.getStyle().getPropertyValue(<span class="string">&#x27;height&#x27;</span>);</span><br><span class="line">                (<span class="keyword">typeof</span> h == <span class="string">&#x27;number&#x27;</span>) &amp;&amp; (h = h + <span class="string">&#x27;px&#x27;</span>);</span><br><span class="line">                <span class="built_in">this</span>.obj.style.height = h;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">            &#125; ,</span><br><span class="line">            </span><br><span class="line">            <span class="comment">/** 设置或者拿到宽度 */</span> </span><br><span class="line">            width : <span class="function"><span class="keyword">function</span>(<span class="params">w</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(!w) <span class="keyword">return</span> <span class="built_in">this</span>.getStyle().getPropertyValue(<span class="string">&#x27;width&#x27;</span>);</span><br><span class="line">                (<span class="keyword">typeof</span> w == <span class="string">&#x27;number&#x27;</span>) &amp;&amp; (w = w + <span class="string">&#x27;px&#x27;</span>);</span><br><span class="line">                <span class="built_in">this</span>.obj.style.width = w;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">            &#125; ,</span><br><span class="line">            </span><br><span class="line">            <span class="comment">/** 设置自定义样式 */</span></span><br><span class="line">            css : <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(!obj) <span class="keyword">return</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> obj)&#123;</span><br><span class="line">                    <span class="comment">//console.log(key + &#x27;=========&#x27; + obj[key]);</span></span><br><span class="line">                    <span class="built_in">this</span>.obj.style[key] = <span class="keyword">typeof</span> obj[key] === <span class="string">&#x27;number&#x27;</span> ? obj[key] + <span class="string">&#x27;px&#x27;</span> : obj[key];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">            &#125; ,</span><br><span class="line">            </span><br><span class="line">            <span class="comment">/** 设置放大 倍数*/</span></span><br><span class="line">            scale : <span class="function"><span class="keyword">function</span>(<span class="params">scaleNumber</span>)</span>&#123;</span><br><span class="line">                <span class="built_in">this</span>.css(&#123;</span><br><span class="line">                    scale : scaleNumber</span><br><span class="line">                &#125;);</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">            &#125; ,</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            hasClass : <span class="function"><span class="keyword">function</span>(<span class="params">cls</span>) </span>&#123;  </span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.obj.className.match(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&#x27;(\\s|^)&#x27;</span> + cls + <span class="string">&#x27;(\\s|$)&#x27;</span>));  </span><br><span class="line">            &#125;  ,</span><br><span class="line">            </span><br><span class="line">            addClass : <span class="function"><span class="keyword">function</span>(<span class="params">cls</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (!<span class="built_in">this</span>.hasClass(cls)) <span class="built_in">this</span>.obj.className += <span class="string">&quot; &quot;</span> + cls;  </span><br><span class="line">            &#125; ,</span><br><span class="line">            </span><br><span class="line">            removeClass : <span class="function"><span class="keyword">function</span>(<span class="params">cls</span>) </span>&#123;  </span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.hasClass(cls)) &#123;  </span><br><span class="line">                    <span class="comment">//console.log(this.obj);</span></span><br><span class="line">                    <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&#x27;(\\s|^)&#x27;</span> + cls + <span class="string">&#x27;(\\s|$)&#x27;</span>);  </span><br><span class="line">                    <span class="built_in">this</span>.obj.className = <span class="built_in">this</span>.obj.className.replace(reg, <span class="string">&#x27; &#x27;</span>);  <span class="comment">//修正bug，之前右边少了一个this</span></span><br><span class="line">                &#125;  </span><br><span class="line">            &#125; ,</span><br><span class="line">            </span><br><span class="line">            toggleClass : <span class="function"><span class="keyword">function</span>(<span class="params">cls</span>)</span>&#123;  </span><br><span class="line">                <span class="keyword">if</span>(<span class="built_in">this</span>.hasClass(cls))&#123;  </span><br><span class="line">                    <span class="built_in">this</span>.removeClass(cls);  </span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">                    <span class="built_in">this</span>.addClass(cls);  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  ,</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            <span class="comment">// ------------------------ 动画 相关 ---------------------------------//</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">//TODO</span></span><br><span class="line">            animate : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                </span><br><span class="line">            &#125; ,</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// ------------------------ 事件相关 ---------------------------------//</span></span><br><span class="line">            </span><br><span class="line">            on : <span class="function"><span class="keyword">function</span>(<span class="params">eventName,callback</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">var</span> $this = <span class="built_in">this</span>;</span><br><span class="line">                <span class="built_in">this</span>.obj[<span class="string">&#x27;on&#x27;</span> + eventName] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                    callback.call($this,$this.obj); <span class="comment">//context指向$this，参数传入dom对象</span></span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">            &#125; ,</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// ------------------------ 属性相关 ---------------------------------//</span></span><br><span class="line">            </span><br><span class="line">            attr : <span class="function"><span class="keyword">function</span>(<span class="params">attr</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>.obj.attributes[attr];</span><br><span class="line">            &#125; ,</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            <span class="comment">// ------------------------ ajax相关 ---------------------------------//</span></span><br><span class="line">            </span><br><span class="line">            ajax : <span class="function"><span class="keyword">function</span>(<span class="params">obj</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">var</span> defaults = &#123;</span><br><span class="line">                    type : <span class="string">&#x27;post&#x27;</span> ,</span><br><span class="line">                    data : &#123;&#125; ,</span><br><span class="line">                    success : <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">                        </span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;;</span><br><span class="line">                </span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 创建一个ajax对象</span></span><br><span class="line">                <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">                <span class="comment">//开始和后台的upload.jsp页面进行交换</span></span><br><span class="line">                xhr.open(<span class="string">&quot;post&quot;</span>, basePath+<span class="string">&quot;/upload/file.do&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">                <span class="comment">//上传成功进入的毁掉函数</span></span><br><span class="line">                xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(xhr.readyState==<span class="number">4</span> &amp;&amp; xhr.status==<span class="number">200</span>)&#123;<span class="comment">//状态4和200代表和服务器端交互成功</span></span><br><span class="line">                        <span class="comment">//获取上传成功的返回数据</span></span><br><span class="line">                        <span class="keyword">var</span> data = xhr.responseText.trim();</span><br><span class="line">                        <span class="keyword">var</span> jdata = <span class="built_in">eval</span>(<span class="string">&quot;(&quot;</span>+data+<span class="string">&quot;)&quot;</span>);</span><br><span class="line">                        jdata[<span class="string">&quot;target&quot;</span>]=uploadTo;</span><br><span class="line">                        tz_uploadsuccess($(uploadTo),jdata);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="comment">//监听文件上传的进度</span></span><br><span class="line">                xhr.upload.addEventListener(<span class="string">&quot;progress&quot;</span>, progressFunction, <span class="literal">false</span>);</span><br><span class="line">                <span class="comment">//发送文件上传的进度</span></span><br><span class="line">                xhr.send(form);</span><br><span class="line">            &#125; ,</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// ------------------------ ui ---------------------------------//</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">/** 按钮 * */</span></span><br><span class="line">            linkbutton : <span class="function"><span class="keyword">function</span>(<span class="params">opts</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">var</span> opts = opts || &#123;&#125;;</span><br><span class="line">                <span class="comment">/**添加基本样式* */</span></span><br><span class="line">                <span class="built_in">this</span>.addClass(<span class="string">&#x27;linkbutton&#x27;</span>);</span><br><span class="line">                <span class="built_in">this</span>.on(<span class="string">&#x27;mouseover&#x27;</span> , <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">                    <span class="comment">//console.log(e);</span></span><br><span class="line">                    <span class="built_in">this</span>.css(&#123;</span><br><span class="line">                        backgroundColor: <span class="string">&#x27;#d4ef50&#x27;</span></span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;).on(<span class="string">&#x27;mouseout&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">                    <span class="built_in">this</span>.css(&#123;</span><br><span class="line">                        backgroundColor: <span class="string">&#x27;#ac0&#x27;</span></span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;);</span><br><span class="line">                </span><br><span class="line">                opts.text &amp;&amp; (<span class="built_in">this</span>.obj.innerText = opts.text);</span><br><span class="line">                opts.click &amp;&amp; (<span class="built_in">this</span>.on(<span class="string">&#x27;click&#x27;</span> , opts.click));</span><br><span class="line">            &#125; ,</span><br><span class="line">            </span><br><span class="line">            <span class="comment">/** 数据列表 * */</span></span><br><span class="line">            dataGrid : <span class="function"><span class="keyword">function</span>(<span class="params">opts</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">var</span> $this = <span class="built_in">this</span>;</span><br><span class="line">                <span class="keyword">var</span> opts = opts || &#123;&#125;;</span><br><span class="line">                <span class="keyword">var</span> header = <span class="literal">null</span>; <span class="comment">//表头</span></span><br><span class="line">                <span class="keyword">var</span> id = <span class="literal">null</span>; <span class="comment">//grid的id，唯一</span></span><br><span class="line">                <span class="keyword">var</span> tb_id = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">var</span> tbody_id = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">var</span> count = <span class="number">0</span>; <span class="comment">//为了防止id重复</span></span><br><span class="line">                <span class="keyword">var</span> columns = []; <span class="comment">//存放field</span></span><br><span class="line">                <span class="keyword">var</span> types = [];</span><br><span class="line">                <span class="keyword">if</span>(!<span class="built_in">this</span>.obj.id) <span class="keyword">return</span>;</span><br><span class="line">                <span class="keyword">else</span> id = <span class="built_in">this</span>.obj.id;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(!opts.header) <span class="keyword">return</span>;</span><br><span class="line">                <span class="keyword">else</span> header = opts.header;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">/**添加基本样式* */</span></span><br><span class="line">                <span class="built_in">this</span>.addClass(<span class="string">&#x27;tableBox&#x27;</span>);</span><br><span class="line">                </span><br><span class="line">                <span class="comment">//初始化表头</span></span><br><span class="line">                <span class="function"><span class="keyword">function</span> <span class="title">initHeader</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                    <span class="keyword">var</span> time = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span><br><span class="line">                    tb_id = <span class="string">&#x27;mui-table_&#x27;</span> + time + <span class="string">&#x27;_&#x27;</span> + count++;</span><br><span class="line">                    <span class="keyword">var</span> html = <span class="string">&quot; &lt;table id=&#x27;&quot;</span>+tb_id+<span class="string">&quot;&#x27;&gt;&lt;thead&gt;&quot;</span> ;</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">//拼接表头</span></span><br><span class="line">                    html += <span class="string">&#x27;&lt;tr&gt;&#x27;</span> ;</span><br><span class="line">                    header.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line">                        columns.push(item.field); <span class="comment">//添加字段名</span></span><br><span class="line">                        types.push(item.type);    <span class="comment">//添加列类型</span></span><br><span class="line">                        <span class="keyword">var</span> width = <span class="literal">null</span>;</span><br><span class="line">                        <span class="keyword">if</span>(item.width) width = item.width + <span class="string">&#x27;px&#x27;</span>; <span class="comment">//设置宽度</span></span><br><span class="line">                        <span class="keyword">if</span>(width) width = <span class="string">&quot;width=&#x27;&quot;</span>+width+<span class="string">&quot;&#x27; &quot;</span>;</span><br><span class="line">                        html += <span class="string">&quot;&lt;th &quot;</span>+width+<span class="string">&quot;&gt;&quot;</span> + item.name + <span class="string">&#x27;&lt;/th&gt;&#x27;</span></span><br><span class="line">                    &#125;);</span><br><span class="line">                    tbody_id = <span class="string">&#x27;mui-table-tbody_&#x27;</span> + time + <span class="string">&#x27;_&#x27;</span> + count++;</span><br><span class="line">                    html += <span class="string">&quot;&lt;/tr&gt;&lt;/thread&gt;&lt;tbody id=&#x27;&quot;</span>+tbody_id+<span class="string">&quot;&#x27;&gt;&lt;/tbody&gt;&quot;</span> ;</span><br><span class="line">                    html += <span class="string">&#x27;&lt;/table&gt;&#x27;</span> ;</span><br><span class="line">                    </span><br><span class="line">                    $this.obj.innerHTML = html;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                </span><br><span class="line">                <span class="comment">//</span></span><br><span class="line">                initHeader();</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">return</span> &#123;</span><br><span class="line">                    tbody_id : tbody_id ,</span><br><span class="line">                    allData : <span class="literal">null</span> ,</span><br><span class="line">                    ids : [], <span class="comment">//保存每一行的id</span></span><br><span class="line">                    index : <span class="number">0</span>,<span class="comment">//作为行号和id</span></span><br><span class="line">                    <span class="comment">//加载数据</span></span><br><span class="line">                    load : <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">                        <span class="built_in">this</span>.allData = data;</span><br><span class="line">                        <span class="keyword">var</span> html = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">                        <span class="comment">//console.log($(&#x27;#&#x27; + tbody_id));</span></span><br><span class="line">                        <span class="keyword">var</span> len = data.length; <span class="comment">//总行数</span></span><br><span class="line">                        <span class="keyword">var</span> columnSize = columns.length;<span class="comment">//总列数</span></span><br><span class="line">                        <span class="comment">//alert(len);</span></span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; len ; i++)&#123;</span><br><span class="line">                            <span class="built_in">this</span>.ids.push(<span class="string">&#x27;mui-dataGrid-tr_&#x27;</span> + ( <span class="keyword">new</span> <span class="built_in">Date</span>().getTime() ) + <span class="string">&#x27;_&#x27;</span> + <span class="built_in">this</span>.index++) ;</span><br><span class="line">                            <span class="comment">//console.log(this.ids[this.index - 1]);</span></span><br><span class="line">                            <span class="comment">//console.log(this.ids[this.index - 1].substring(this.ids[this.index - 1].length - 1 )); //获取行号</span></span><br><span class="line">                            html += <span class="string">&quot;&lt;tr id=&#x27;&quot;</span>+<span class="built_in">this</span>.ids[<span class="built_in">this</span>.index - <span class="number">1</span>]+<span class="string">&quot;&#x27;&gt;&quot;</span>; <span class="comment">/*之前在这里少了一个单引号，最终显示的数据只有全部的一半，现在已经更正*/</span></span><br><span class="line">                            <span class="comment">//遍历列</span></span><br><span class="line">                            <span class="comment">//console.log(types);</span></span><br><span class="line">                            <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; columnSize ; j++)&#123;</span><br><span class="line">                                <span class="keyword">var</span> columnName = columns[j];</span><br><span class="line">                                <span class="keyword">if</span>(data[i][columnName])&#123;</span><br><span class="line">                                    html += <span class="string">&#x27;&lt;td&gt;&#x27;</span> + data[i][columnName] + <span class="string">&#x27;&lt;/td&gt;&#x27;</span>;</span><br><span class="line">                                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(types[j] == <span class="string">&#x27;checkColumn&#x27;</span>)&#123;</span><br><span class="line">                                    html += <span class="string">&#x27;&lt;td&gt;&lt;input type=&quot;checkbox&quot; value=&quot;&quot;/&gt;&lt;/td&gt;&#x27;</span>;</span><br><span class="line">                                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                                    html += <span class="string">&#x27;&lt;td&gt;&lt;/td&gt;&#x27;</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                                </span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="comment">//列遍历完后，这一行才结束</span></span><br><span class="line">                            html += <span class="string">&#x27;&lt;/tr&gt;&#x27;</span></span><br><span class="line">                            </span><br><span class="line">                        &#125;</span><br><span class="line">                        </span><br><span class="line">                        <span class="comment">//展示数据</span></span><br><span class="line">                        win.$(<span class="string">&#x27;#&#x27;</span> + <span class="built_in">this</span>.tbody_id).obj.innerHTML = html;</span><br><span class="line">                        </span><br><span class="line">                        <span class="comment">//给每一行添加事件</span></span><br><span class="line">                        <span class="built_in">this</span>.ids.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">rowId</span>)</span>&#123;</span><br><span class="line">                            win.$(<span class="string">&#x27;#&#x27;</span> + rowId).on(<span class="string">&#x27;click&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                                <span class="built_in">this</span>.toggleClass(<span class="string">&#x27;selected&#x27;</span>);</span><br><span class="line">                                <span class="keyword">if</span>(<span class="built_in">this</span>.hasClass(<span class="string">&#x27;selected&#x27;</span>))&#123;</span><br><span class="line">                                    <span class="built_in">this</span>.obj.getElementsByTagName(<span class="string">&#x27;input&#x27;</span>)[<span class="number">0</span>].checked = <span class="literal">true</span>;</span><br><span class="line">                                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                                    <span class="built_in">this</span>.obj.getElementsByTagName(<span class="string">&#x27;input&#x27;</span>)[<span class="number">0</span>].checked = <span class="literal">false</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;);</span><br><span class="line">                        &#125;);</span><br><span class="line">                        </span><br><span class="line">                        </span><br><span class="line">                            </span><br><span class="line">                    &#125; ,</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">//获取所有数据</span></span><br><span class="line">                    getData : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="built_in">this</span>.allData;</span><br><span class="line">                    &#125; ,</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">//根据行号获取某一行</span></span><br><span class="line">                    </span><br><span class="line">                    getRow : <span class="function"><span class="keyword">function</span>(<span class="params">rowIndex</span>)</span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="built_in">this</span>.getData()[rowIndex];</span><br><span class="line">                    &#125; ,</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">//获取所有的行号</span></span><br><span class="line">                    getSize : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                        <span class="keyword">var</span> len = <span class="number">0</span>;</span><br><span class="line">                        <span class="built_in">this</span>.getSelected &amp;&amp; (len = <span class="built_in">this</span>.getSelected().length) ;</span><br><span class="line">                        <span class="keyword">return</span> len;</span><br><span class="line">                    &#125; ,</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">//返回选中的行，一条或者多条</span></span><br><span class="line">                    getSelected : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                        <span class="keyword">var</span> rows = win.$(<span class="string">&#x27;.selected&#x27;</span>).obj; <span class="comment">//获取所有选中行</span></span><br><span class="line">                        <span class="keyword">var</span> len = <span class="number">0</span>;</span><br><span class="line">                        len = rows.length;</span><br><span class="line">                        <span class="keyword">var</span> arr = [];</span><br><span class="line">                        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; len;i++)&#123;</span><br><span class="line">                            <span class="comment">//console.log(rows[i].id.substring(rows[i].id.length - 1));</span></span><br><span class="line">                            arr.push(<span class="built_in">this</span>.getRow(rows[i].id.split(<span class="string">&#x27;_&#x27;</span>)[<span class="number">2</span>])) ;</span><br><span class="line">                        &#125;</span><br><span class="line">                        </span><br><span class="line">                        arr.length == <span class="number">1</span> &amp;&amp; ( arr = arr[<span class="number">0</span>] );</span><br><span class="line">                        </span><br><span class="line">                        <span class="keyword">return</span> arr;</span><br><span class="line">                        </span><br><span class="line">                        <span class="comment">//this.ids[this.index - 1].substring(this.ids[this.index - 1].length - 1 )</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    </span><br><span class="line">                    </span><br><span class="line">                    </span><br><span class="line">                    </span><br><span class="line">                &#125;;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    win.$ = miniQuery;</span><br><span class="line">    </span><br><span class="line">    win.mui = &#123;</span><br><span class="line">        get : <span class="function"><span class="keyword">function</span>(<span class="params">sel</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> miniQuery(sel);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;)(<span class="built_in">window</span>);</span><br></pre></td></tr></table></figure><p>附录B mui.css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.linkbutton</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: .<span class="number">4em</span> .<span class="number">9em</span>; <span class="comment">/*em的好处就是随着父元素的字体大小而变化，当该元素的字体变化时，会自适应*/</span></span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">1</span>);</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ac0</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: .<span class="number">2em</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">1px</span> <span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">5</span>);</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">0</span> -.<span class="number">06em</span> .<span class="number">24em</span> <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">5</span>); <span class="comment">/*将阴影设置为半透明，就无所谓底色了，都能很好地适应*/</span></span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">130%</span>; </span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.5</span>; <span class="comment">/*行高是字号的1.5倍*/</span></span><br><span class="line">    <span class="attribute">display</span>:inline-block;</span><br><span class="line">    <span class="attribute">cursor</span>:pointer;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&quot;微软雅黑&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tableBox</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">1200px</span>;</span><br><span class="line">    <span class="attribute">background</span>:<span class="number">#f9f9f9</span>;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">20px</span> auto <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>:<span class="number">6px</span>;</span><br><span class="line">    <span class="attribute">position</span>:relative;</span><br><span class="line">    <span class="attribute">font-family</span>: 微软雅黑;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tableBox</span> <span class="selector-tag">table</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">border</span>:<span class="number">2px</span> solid <span class="number">#fff</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tableBox</span> <span class="selector-tag">table</span> <span class="selector-tag">tr</span> &#123;</span><br><span class="line">    <span class="attribute">border-collapse</span>: separate;   </span><br><span class="line">    <span class="attribute">border-spacing</span>: <span class="number">1px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*选中行*/</span></span><br><span class="line"><span class="selector-class">.tableBox</span> <span class="selector-tag">table</span> <span class="selector-tag">tr</span><span class="selector-class">.selected</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>:<span class="number">#cce4f3</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">/*表头*/</span></span><br><span class="line"><span class="selector-class">.tableBox</span>  <span class="selector-tag">th</span>&#123;  </span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#eaeaea</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">6px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#666</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tableBox</span>  <span class="selector-tag">td</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">13px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">4px</span> <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>毕竟是自己DIY出来的，所以没仔细测试，肯定还有一些BUG。不过不管怎么说，都算是一次尝试吧，呵呵。</p><p>转自<a href="http://www.cnblogs.com/skyblue-li/p/6010625.html">http://www.cnblogs.com/skyblue-li/p/6010625.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 码路刺客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 转载 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为什么ETL任务困难</title>
      <link href="2016/10/15/WhyDifficultOnETLJob/"/>
      <url>2016/10/15/WhyDifficultOnETLJob/</url>
      
        <content type="html"><![CDATA[<h3 id="工具繁多"><a href="#工具繁多" class="headerlink" title="工具繁多"></a>工具繁多</h3><p>从 DataStage到Kettle, ETL 工具覆盖了商业化领域和开源领域, 价格从几十万到免费,起码有几十种选择。</p><p>有人要说了,选择多不是一件好事么?如果再早几年,我会同意这是好事,可到现在,我要说 NO!</p><p>前面关于决策思维的博文提到一个论点:相比于普通人做出决策,专家是会直接给一种可行方案还是罗列众多方案类比优劣?</p><p>答案是前者,也是我反对选择众多是好事这一论点的依据之一。</p><span id="more"></span><h4 id="那么选择多有什么坏处"><a href="#那么选择多有什么坏处" class="headerlink" title="那么选择多有什么坏处?"></a>那么选择多有什么坏处?</h4><ul><li>基础方案混杂。各公司方案不同,甚至一个公司 ETL 环节也采用不同工具及架构,人才无法公用,维护成本高。</li><li>数据项目失败案例远多于成功案例, 项目选型越复杂成功概率越低。大量公司做 BI、做大数据,甚至在没有人懂的情况下招人开工!事实上在数据领域,熟手都清楚一个现象,没有成功案例的人很难做成数据项目。很残忍的现实,但也让那些盲目投入资源跟风做项目的公司考虑冷静下来了。</li><li>抬高实施门槛。现在大家都想做数据,进入大数据领域,尤其是有很多不具备该领域经验的公司想要做。那么实施前首先就是选型了,如果从三个产品选一个来做还可行的话,那么要从三十个产品中选型,这个工作本身就阻碍了数据项目的开展!</li></ul><h3 id="GUI工具"><a href="#GUI工具" class="headerlink" title="GUI工具"></a>GUI工具</h3><p>说到这里反对的朋友更多了,GUI 所见即所得,降低使用门槛,好处一页都写不完,作为一名数据领域从业者,我决然反对,自己都能感觉到火药味。 为了论证我的观点,这里要罗列ETL领域那些GUI的罪证了。</p><h4 id="ETL工具的六大问题"><a href="#ETL工具的六大问题" class="headerlink" title="ETL工具的六大问题"></a>ETL工具的六大问题</h4><ul><li>工具太大了,卡卡卡!我不是说 SSIS 之类,也不是说 Kettle 相关,我说的是他们所有人……</li><li>好用的太贵, 便宜的不好用!</li><li>组件式的拖拉开发,性能真的没法起来!尤其是那些依靠组件解决数据变化提取的兄弟们,你们想多了。</li><li>我需要一包厕纸而已,你非要给我整个超市。在我蹲之前非得找遍整个超市!大家对比下里面的功能自己使用的比率。</li><li>说 GUI 简单好用的,我强烈反对。GUI 好调试么?映射过程报错了大家要怎么办?检查源检查目标也就算了,连映射环节都要排查。除了自己设定的格式类型,还要考虑工具环节自己的转换类型,这不是增加负担么?</li><li>部署,我都不想说部署了。一千个任务下来,ETL 工具别谈部署了!这时候有同学开始研究调度,有些关注数据质量,任务数量起来,想什么都是多的,保佑这混乱情况别出岔子就阿弥陀佛了。</li></ul><h3 id="ETL工具阻碍了设计"><a href="#ETL工具阻碍了设计" class="headerlink" title="ETL工具阻碍了设计"></a>ETL工具阻碍了设计</h3><ul><li>直接用工具拉数据的项目,认真找找有没有架构设计,有没有项目文档,有没有扩展性考虑,性能考虑?或者简单点,这项目换人可能接手下来么?</li><li>数据项目是团队项目,ETL 工具是个人化工具。如果多个成员不能无缝接替工作,对不起,我认为这不是数据项目。哦不对,不算是一个项目。</li><li>组件报错是工具问题,转换异常跟自己没关系。工具的 bug 和我真没关系,我项目做得好好的,ETL 工具崩溃了管我什么事?遇到这种情况不说我也知道做法,崩溃了再起来跑一跑嘛,运气好数据就跑出来了。至于数据质量管理是什么这样的问题,就别问出来了。</li></ul><p>转自<br><a href="http://www.infotrim.cn/article/5">http://www.infotrim.cn/article/5</a></p>]]></content>
      
      
      <categories>
          
          <category> BI墨客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 转载 </tag>
            
            <tag> 数据仓库 </tag>
            
            <tag> BI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从大数据负责人招聘看决策思维</title>
      <link href="2016/10/15/DecisionThoughtOnBigdata/"/>
      <url>2016/10/15/DecisionThoughtOnBigdata/</url>
      
        <content type="html"><![CDATA[<h3 id="决策是非理性的"><a href="#决策是非理性的" class="headerlink" title="决策是非理性的"></a>决策是非理性的</h3><p>我们受到的教育是要理性思考,理性决策,信奉理性至上的思维模式。可惜的是现实并非如此,绝大多数的决策都是采用自然主义决策方式,而情景模拟又是其主流方法。对此感兴趣的朋友建议查看亚马逊近期榜单作品《如何做出正确决策:直击决策真相》了解更多。</p><p>简而言之,无论是紧迫条件的救火队员还是军事要务的重大决定,决策的真相都如同我们前面介绍的方式:脑海中假设一条可行道路,一步步证明它是可行的。</p><p>说到专家和普通决策的区别,大家还是要注意这个真相:专家决策都是迅速定下一条可行方案,而非拿出多套方案理性对比! </p><span id="more"></span><h3 id="大数据负责人的要求是什么"><a href="#大数据负责人的要求是什么" class="headerlink" title="大数据负责人的要求是什么"></a>大数据负责人的要求是什么</h3><h4 id="有成功大数据经验"><a href="#有成功大数据经验" class="headerlink" title="有成功大数据经验"></a>有成功大数据经验</h4><p>大家要注意,我举证论据,至少都是讲三点的,可我这里只给出一条。 经常查看此类招聘的朋友很容易看出来,另外两点因素是职业素养和对大数据生态的理解,我完全同意这个看法,但此处认为和我举证这一点比,其他的都完全不是问题。</p><h5 id="为什么要有成功大数据经验"><a href="#为什么要有成功大数据经验" class="headerlink" title="为什么要有成功大数据经验?"></a>为什么要有成功大数据经验?</h5><ul><li>1.因为招聘你去的地方通常是没有成功经验的,不然要你去干吗?</li><li>2.具备成功大数据经验的人真的很少! 这里大家应该慎重考虑下,基于这个观点,跳槽、换团队是大忌。为什么?因为如果你已经有成功经验,机会根本不是问题。而你不幸没有成功经验,跳槽、换团队都不能解决你成功经验的问题。</li><li>3.大数据项目的成功,不会只有一个人,但会取决于核心人物。好好珍惜现有团队,做成项目,并且不要说不懂其他同事的工作。大数据本来就是融合型工作,你永远只会自己做的一块,就不要费时间争取负责人的角色了。</li></ul><h5 id="为什么工作素养和-hadoop-等生态理解不重要"><a href="#为什么工作素养和-hadoop-等生态理解不重要" class="headerlink" title="为什么工作素养和 hadoop 等生态理解不重要?"></a>为什么工作素养和 hadoop 等生态理解不重要?</h5><p>这个问题起码要说三点:</p><ul><li>1.工作素养大部分都能做得很好,极少成为个人瓶颈不是吗?难道不是吗?</li><li>2.面试要求的 hadoop、spark、storm……这些不是招聘者的本质要求,招聘你去的真正需求是能将项目做出来,做成功。至于这些细节技术方案,面试者有多少人懂得?再说了,开源系统版本迭代那么快,完全依靠这些方案要踩多少坑招聘者哪里知道?不仅如此,作为负责人是要规避让企业踩坑才合格!</li><li>3.我看到好多人转向大数据,学 python 又学 R, 学 Java 又学 Scala, 学数据库又学数据仓库。这样的做法可行吗? 真心奉劝停下来冷静思考下!</li></ul><p>大数据是团队项目,不是单兵作战! 再说了,等你把所有学完, 企业等的花儿都谢了好么? 随便学一个感兴趣的, 找到工作再一步步深入, 各种大会、各种社区适合有经验的人、有方法的人,这些场景只要记住大家推荐的书籍回来好好学任务就完成了。</p><h3 id="补偿机制的使用"><a href="#补偿机制的使用" class="headerlink" title="补偿机制的使用"></a>补偿机制的使用</h3><p>我们常说:”打一个耳光给一个苹果”,是不是耳光就没那么疼了?</p><p>这不止是一个心理现象,在面试大数据负责人这样重要岗位时一样可以用于决策。</p><p>通常我们做出决策时,会在自己优势领域选定方案持续推进。要么成功达到目标,要么走不下去调转方向,可最终都是能完成任务的。</p><p>那么为什么就算是专家也会遇到放弃方案跳转方向的情况,一方面是我们的确会遇到各种未知的问题,另一个更重要的方面就是:我们每个人在多个维度都有优点,切记!</p><p>我们总看到话术中说:”同学你工作做得不好,但你在工作过程中表现出来的沟通能力还是很强的。”类似的情况数不胜数,与其说是心理补偿机制,倒不如说展示出我们每个人其实都不只有一个优势领域!</p><p>那么这和大数据负责人招聘又有什么关系呢?</p><ul><li>1.大数据负责人也是人,有长处也有短板。就算平时勤快对团队工作都了解, 涉及到每一块深度领域细节所知也是很有限的。</li><li>2.有限的人遇到无知的需求。这里用词不太合适,但其实很多企业寻找人才时对这个领域是一片空白的。那么提出的要求自然是互联网上随处能搜集到的岗位需求模板。虽然大家都理解每个公司、每个团队做数据都有些不同之处,但对于完全不了解行情的公司只能然并卵。除了网上找模板我也想不出更好的办法了。</li><li>3.有限的人要用优点补充缺点。招聘的时候发现你可视化不强,那应该展示自己数据仓库的优势了,如果发现你 hadoop 不熟,你是时候分享对 storm 的研究成果了。 大家要考虑清楚团队项目中的个人定位, 一味地追求个人什么都会,项目发展会很有限,企业也会很不放心啊。</li></ul><p>转自<br><a href="http://www.infotrim.cn/article/7">http://www.infotrim.cn/article/7</a></p>]]></content>
      
      
      <categories>
          
          <category> BI墨客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 转载 </tag>
            
            <tag> BigData </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>是时候管理你的知识了</title>
      <link href="2016/10/08/TimeForPKM/"/>
      <url>2016/10/08/TimeForPKM/</url>
      
        <content type="html"><![CDATA[<p>今天饶有兴趣的了解了PKM，深感做好PMK还真不是件容易事。从小到大，我们都说学习知识，也就说明知识并不会简单的成为自己的东西，知识在成为自己的之前的身份是信息。从信息转化为自己的知识是有一个过程，这就是自己的思考、总结、应用以及分享。</p><p>所以也就不难理解，从小到大，我们在学习之后要做练习，学是我们接收信息的过程，习则是引导我们进行思考然后运用的过程。现在回想起来，这一路学习知识的过程总少了一点什么，是的，我们做了很多练习，背了很多东西，然而知识在成为了自己的之后却很快又溜走了，时间长了就遗忘了是一个因素，另一个重要的因素是没有将知识管理起来的思想，他们大多成了我们脑海里的碎片，彼此没有关联。</p><span id="more"></span><p>大学时读的专业是信息管理，毕业拿了管理学士学位，现在想起来连最起码的知识管理都不会，真是惭愧。</p><h3 id="PKM是什么"><a href="#PKM是什么" class="headerlink" title="PKM是什么"></a>PKM是什么</h3><blockquote><p>个人知识管理（Personal Knowledge Management）的概念一般指个人通过工具建立知识体系并不断完善，进行知识的收集、消化吸收和创新的过程。</p></blockquote><p>说白了，PKM就是将信息转化为自己的知识后有序的存储在自己的记忆里。</p><h3 id="为什么需要PKM"><a href="#为什么需要PKM" class="headerlink" title="为什么需要PKM"></a>为什么需要PKM</h3><p>德鲁克说过，没有人为你负责，除了你自己，而你唯一的资本就是知识。你唯一的能力就是应用知识创造价值的能力PKM的最终目标仍然是提升自我的核心竞争力，体现知识创造价值，因此就需要再次强调了不能脱离了某个场景或领域来单独的谈个人知识管理，否则就失去了目标和方向。</p><p>当然放在现在这样的社会，只要你不是富二代，官二代，不愁吃穿，希望用知识的力量改变自己的人，都需要PKM吧。</p><h3 id="与PIM的区别"><a href="#与PIM的区别" class="headerlink" title="与PIM的区别"></a>与PIM的区别</h3><p>PIM(Personal Information Management)即个人信息管理，与个人知识管理的区别也就是信息与知识的区别了，我们每天通过网络，新闻，他人诉说接收到了很多信息，信息大爆炸的时代，获取信息对我们来说很容易，然而我们记住了多少，总结了多少，运用了多少？简单的拿来主义不会让我们沉淀多少知识，转化需要一个过程。</p><h3 id="怎么做PKM"><a href="#怎么做PKM" class="headerlink" title="怎么做PKM"></a>怎么做PKM</h3><p>管理需要一套方法，概括起来：</p><ul><li>1.收集信息</li><li>2.吸收知识</li><li>3.实践应用</li><li>4.分享探讨</li></ul><p>信息时代的今天，在每个过程中都可以采用一些信息技术工具来帮助我们管理自己的知识。目标就是将信息分类，多回顾多思考，用管理思想让知识为我们创造财富。</p><p>以下简单画了一个思维导图：</p><center><img src="/img/posts/PKM-1.gif"></img></center><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>PKM的开始可能都不完美，这中间需要一个漫长的过程，不断的实践，借鉴，迭代调整，找到适合自己的方法。愿我们都在知识的海洋中驰骋而不迷失方向。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔感悟 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 知识管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>那些年，我们没有微信</title>
      <link href="2016/09/21/NoWeChatBefore/"/>
      <url>2016/09/21/NoWeChatBefore/</url>
      
        <content type="html"><![CDATA[<p><img src="/img/posts/NoWeChatBefore-1.jpg" alt="NoWeChatBefore-1"></p><p>你朋友圈的第一条状态是什么时间？<br>我的第一条状态来自2012年12月6日，我是个比较愚钝的人，那天之前我用的还是诺基亚E63，红色的全键盘手机，大学男朋友送的，上学时候超酷。</p><span id="more"></span><p>后来，这部E63和送E63给我的人，都相继离开了我。但是很久以后，我还记得摁E63全键盘时候的感觉，突兀不平的小按钮如同多年来开启记忆的键盘，生硬而又真实存在的痕迹。</p><p><img src="/img/posts/NoWeChatBefore-2.jpg" alt="NoWeChatBefore-2"></p><p>2009年的时候，我们还在热衷于互踩QQ空间，每天都要去好朋友的空间留言，证明万古长青的友谊。在空间里养花藤、偷菜、开饭馆、开牧场，花着钱在学校网吧里偷菜，一个都不放过，乐此不疲。如今，我再也没勇气点开空间的农场、牧场和饭馆。我害怕看到满屏的狼藉，就如同未曾来及认真告别的青春岁月，呼啸而过的全是兵荒马乱的伤感。偶尔翻翻以前的留言板，字里行间熟悉而又陌生的炙热让自己常常自问，忙着向前奔跑的这些年到底失去了什么。</p><p><img src="/img/posts/NoWeChatBefore-3.jpg" alt="NoWeChatBefore-3"></p><p>2008年，大江南北唱的都是《北京欢迎你》。我们是在KTV《北京欢迎你》的大合唱中毕业的。那时候年轻的我们轻而易举的承诺，信誓旦旦的诉说未来，这些后来都成为了回忆里无法承受的负重。在师大田家炳教学楼九楼，我第一次有了自己的人人网账号，那时候人人网还叫校内网。每天刷不完的分享，各种视频、各种图集、各种文章。现在手机里还有人人网的客户端，偶尔登录也不过是抱着侥幸想法去看看，不存在于微信好友，又屏蔽了QQ空间动态的当日同窗会不会在人人网上更新状态。只是想知道你过得好，记忆似乎都少了些尘土的味道。只可惜尘封不动的人人网，只有自己偶尔的自娱自乐。就如同这些年来，念念不忘只不过是自己对岁月的藕断丝连，有点孤单，有点荒芜。</p><p><img src="/img/posts/NoWeChatBefore-4.jpg" alt="NoWeChatBefore-4"></p><p>2010年，有一个软件叫飞信。用飞信互加了好友，发信息不要钱。它比QQ方便，我们曾经的塞班系统里，都有这个软件。我们用飞信一起约上课、约逛街、约吃饭。即使它会偶尔系统延缓，没有及时收到信息，我们仍然执着的使用它。远远不如现在微信便捷的飞信那头，却永远都有一个人给你回音。你哭你笑，身边都有一帮吵吵闹闹，不离不弃的伙伴。大学时候宿舍的老小，每个月包免费短信、免费语音最多的套餐，和异地的男朋友煲电话粥，一打就好几个小时。宿舍的灯都熄了很久，她才会回来，带着笑意或者泪水。现在她快结婚了，新郎不是那个愿意每日在深夜里陪着她讲好几个小时电话的男孩。我们也只能笑着去释怀，一起度过的青春，谁都不亏欠谁，因为青春就是用来怀念的。</p><p><img src="/img/posts/NoWeChatBefore-5.jpg" alt="NoWeChatBefore-5"></p><p>2016年，距离那些年已经过去很久，16岁的高中也好，19岁的大学也罢。在频频回首之间，已无当年。来时的路，一直走一直失去，在没有意识到的青春。失去的除了童年那个有很多件花裙子的洋娃娃，除了信誓旦旦说着友谊万古长青的好朋友，除了承诺陪伴你走到白头的初恋，除了朝夕相处憧憬梦想的同窗，还有那颗曾经永远不知忧愁烦恼的快乐的心。慢慢的，心里什么都没有了就像没有了痛苦。<br>我们在朋友圈写下，最近生活很糟，想了三十秒，删除。发呆五分钟后，重新打了一个微笑的表情，不到十分钟，收到几十个赞。拉出来一个曾经的好友，发送最近好吗？三十分钟后，收到回复，恩。<br>宁愿拉上窗帘躲在被子里睡一觉，因为再也感受不到曾经用着诺基亚手机，每日在空间偷菜，为了省钱发飞信，每月套餐内免费短信和语音都不够用的快乐。</p><p>文/凌云端<br>转自：<a href="http://www.5time.cn/show/25216.html">http://www.5time.cn/show/25216.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 生活点滴 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Play Framework 2.5 环境搭建与新建项目（二）</title>
      <link href="2016/09/21/PlayFrameworkInit2/"/>
      <url>2016/09/21/PlayFrameworkInit2/</url>
      
        <content type="html"><![CDATA[<h2 id="activator-ui-方式"><a href="#activator-ui-方式" class="headerlink" title="activator ui 方式"></a>activator ui 方式</h2><p>打开命令行窗口，输入以下命令：</p><pre><code>activator ui</code></pre><span id="more"></span>    <p><img src="/img/posts/PlayFrameworkInit-14.gif" alt="PlayFrameworkInit-14"></p><p>浏览器中打开一个页面，类似于一个IDE，实际上也是一个网页版的IDE。</p><p><img src="/img/posts/PlayFrameworkInit-11.gif" alt="PlayFrameworkInit-11"></p><p>选择 <code>Seeds-&gt;Play Java Seed</code>，在右下角选择项目创建到的文件夹路径，然后点 <code>Create app</code> 完成创建。 </p><p>在Build页面，可以看到初始化项目时引入依赖包等等。如果是首次创建项目，等待时间应该会很久，跟命令行创建过程差不多。</p><p><img src="/img/posts/PlayFrameworkInit-12.gif" alt="PlayFrameworkInit-12"></p><p>Code页面可以查看项目创建的文件结构以及编辑代码，虽说是一个开发环境，编辑代码的时候是没有提示的，不像Eclipse或者Intellij idea那么方便，在目录结构导航菜单中，可以看到一些新建文件夹和文件等菜单，对于 <code>Create Eclipse project</code> <code>Create Intellij project</code> 菜单，他们可以将你的项目转换成Eclipse或者Idea的目录结构，更好的导入。</p><p><img src="/img/posts/PlayFrameworkInit-13.gif" alt="PlayFrameworkInit-13"></p><p>在Run界面，可以启动项目，然后在浏览器中浏览项目页面，前提是Build完成。</p><h2 id="intellij-idea-方式"><a href="#intellij-idea-方式" class="headerlink" title="intellij idea 方式"></a>intellij idea 方式</h2><p>官网给出用Eclipse或者intellij idea的编程环境来创建和调试Play项目的方法，这里用idea, eclipse赶脚太麻烦了。我用的idea 2015的。进入设置看下</p><p><img src="/img/posts/PlayFrameworkInit-15.gif" alt="PlayFrameworkInit-15"></p><p>进入设置看下Scala和SBT两个插件是否安装了，如果没有，点击 <code>Browse repositories</code>安装一下。</p><p><img src="/img/posts/PlayFrameworkInit-16.gif" alt="PlayFrameworkInit-16"></p><h3 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h3><p>在新建项目面板中，<code>Scala-&gt;Activator</code> </p><p><img src="/img/posts/PlayFrameworkInit-17.gif" alt="PlayFrameworkInit-17"></p><p>然后下一步，填入项目名称，下面选择模板，键盘输入play java seed就会找到这个选项。下面的Project SDK就是本机的JDK环境。点击完成。</p><p><img src="/img/posts/PlayFrameworkInit-18.gif" alt="PlayFrameworkInit-18"></p><p>新建项目需要引入一些依赖包，所以很慢。</p><p><img src="/img/posts/PlayFrameworkInit-19.gif" alt="PlayFrameworkInit-19"></p><h3 id="导入项目"><a href="#导入项目" class="headerlink" title="导入项目"></a>导入项目</h3><p>选择导入项目所在文件夹。</p><p><img src="/img/posts/PlayFrameworkInit-20.gif" alt="PlayFrameworkInit-20"></p><p>项目模块选择SBT。</p><p><img src="/img/posts/PlayFrameworkInit-21.gif" alt="PlayFrameworkInit-21"></p><p>完成设置。</p><p><img src="/img/posts/PlayFrameworkInit-22.gif" alt="PlayFrameworkInit-22"></p><h3 id="启动调试"><a href="#启动调试" class="headerlink" title="启动调试"></a>启动调试</h3><p>官方给的是，在Edit Config菜单中，点击 <code>+</code> 选择SBT Task，然后Name里写个名称，Tasks里输个 <code>run</code> 就可以了。</p><p><img src="/img/posts/PlayFrameworkInit-25.gif" alt="PlayFrameworkInit-25"></p><p><img src="/img/posts/PlayFrameworkInit-26.gif" alt="PlayFrameworkInit-26"></p><p><img src="/img/posts/PlayFrameworkInit-23.gif" alt="PlayFrameworkInit-23"></p><p>但是几次启动调试都失败了，比如下面的错误，不知道啥原因。估计是有什么依赖包没下载全。</p><p><img src="/img/posts/PlayFrameworkInit-24.gif" alt="PlayFrameworkInit-24"></p><p>我们其实可以在项目文件中右键，然后在菜单中选择 <code>Run Play 2 App</code>菜单，就可以启动项目。</p><p><img src="/img/posts/PlayFrameworkInit-27.gif" alt="PlayFrameworkInit-27"></p><p>这时候在运行调试编辑中可以看到有一个Play 2 App的项目了。</p><p><img src="/img/posts/PlayFrameworkInit-28.gif" alt="PlayFrameworkInit-28"></p><p>如果信息窗口中出现以下提示信息：</p><p><strong>SBT compilation for play framework 2.x disabled by default</strong></p><p>进入File-&gt;Setting菜单，将下面选项勾选即可。</p><p><img src="/img/posts/PlayFrameworkInit-29.gif" alt="PlayFrameworkInit-29"></p>]]></content>
      
      
      <categories>
          
          <category> 码路刺客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> Play Framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Play Framework 2.5 环境搭建与新建项目（一）</title>
      <link href="2016/09/20/PlayFrameworkInit/"/>
      <url>2016/09/20/PlayFrameworkInit/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Play Framework是啥？引用下百度百科的说法：</p><blockquote><p>Play！是一个full-stack（全栈的）Java Web应用框架，包括一个简单的无状态MVC模型，具有Hibernate的对象持续，一个基于Groovy的模板引擎，以及建立一个现代Web应用所需的所有东西。</p></blockquote><p>当然，这个介绍是比较旧的，对于老版本的Play!，这么说没毛病。进入<a href="https://www.playframework.com/">Play!官网</a>看看，满眼的绿啊，有一股清新之感呐。版本都到<code>2.5.8</code>了。追溯1.0版本都是在2010.07.28发布的，到现在已经有6年时间了。</p><span id="more"></span><p><img src="/img/posts/PlayFrameworkInit-1.gif" alt="PlayFrameworkInit-1"></p><p>其实从Play!2.3.8版本开始变化就很大了，引入了<code>activator</code>,<code>typesafe</code>,<code>SBT</code>啥啥的各种东东，一开始都不大懂这些，只要知道跟之前版本相差很远就好了。这个号称是拯救Java程序员的神器，带着一颗好(zhe)奇(teng)的心开始探索一番。</p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h3><p><img src="/img/posts/PlayFrameworkInit-2.gif" alt="PlayFrameworkInit-2"></p><p>进入到官网的下载界面，点击下载就可以了，一个名为<code>typesafe-activator-1.3.10-minimal.zip</code>的压缩文件，没错，这就是全部了。但是从名字里的minimal就可以看出这是个精简版的环境包，用这个有代价的噢，尤其在我大天朝。在新建项目的时候会下载各种依赖包，很多国外站点在国内访问是很慢的，所以新建项目的过程非常考验耐性。所以还是下载那个Offline Distrbution版本的，离线版本的600+M，本以为用这个离线版的会快很多，结果。。。。。。。。是谁谁应该都会吐槽，这TM不是离线的麽，下了几百兆的东西，你告我创建项目的时候还要更新和各种下载依赖包！！！！！</p><p>不过突然想到一个问题，人家是离线包，我在新建项目的时候是连着网的，莫非是要把网断开么！行，我等下试试。</p><h3 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h3><p>按正常步骤来，把下载的压缩包加压到一个目录里，比如:</p><p>F:\PlayFramework\typesafe-activator-1.3.10\activator-dist-1.3.10</p><p>然后进入到bin目录，复制地址栏的地址:</p><p>F:\PlayFramework\typesafe-activator-1.3.10\activator-dist-1.3.10\bin</p><p>把这个加到Windows的环境变量里，怎么添加我就不多讲了。</p><p>添加完以后，在你想创建项目的目录下空白处按住<code>Shit</code>键，然后点鼠标右键，弹出菜单选择“在此处打开命令行”弹出命令行窗口。输入<code>activator</code>命令，然后在浏览器中打开一个说明页面的话就说明环境变量添加的没问题了。</p><h3 id="小问题"><a href="#小问题" class="headerlink" title="小问题"></a>小问题</h3><p><img src="/img/posts/PlayFrameworkInit-3.gif" alt="PlayFrameworkInit-3"></p><p>关于那个系统找不到文件提示：</p><p><strong>ACTIVATOR_HOME=F:\PlayFramework\typesafe-activator-1.3.10\activator-dist-1.3.10<br>系统找不到文件 BIN_DIRECTORY..\conf\sbtconfig.txt。</strong></p><p>这个其实没啥影响，但是非要纠结的话，可以用文本编辑器看看</p><p>F:\PlayFramework\typesafe-activator-1.3.10\activator-dist-1.3.10\bin</p><p>目录下的 <strong>activator.bat</strong> 文件。找到</p><p><img src="/img/posts/PlayFrameworkInit-4.gif" alt="PlayFrameworkInit-4"></p><pre><code>set SBT_HOME=%BIN_DIRECTORY</code></pre><p>这行，不知道是官方故意怎么干的还是马虎造成的错误，感觉少了个<code>%</code>，应该是</p><pre><code>set SBT_HOME=%BIN_DIRECTORY%</code></pre><p>改成上述那样其实也会报错，因为</p><p>F:\PlayFramework\typesafe-activator-1.3.10\activator-dist-1.3.10\</p><p>路径下就没有conf文件夹，里面就没有sbtconfig.txt文件，要是真看着不舒服的话，就建一个conf文件夹，然后里面建一个sbtconfig.txt配置文件，然后把下面这段复制到文件里面：</p><pre><code># Set the java args to high-Xmx512M-XX:MaxPermSize=256m-XX:ReservedCodeCacheSize=128m# Set the extra SBT options-Dsbt.log.format=true</code></pre><h2 id="项目创建和启动"><a href="#项目创建和启动" class="headerlink" title="项目创建和启动"></a>项目创建和启动</h2><h3 id="命令行方式"><a href="#命令行方式" class="headerlink" title="命令行方式"></a>命令行方式</h3><p>下面就正式用命令行创建项目了。命令行输入</p><pre><code>activator new onlineTest</code></pre><p>onlineTest是项目名称，然后稍等下会列出一些模板名称，根据个人喜好，用Java就输入5然后回车，用Scala语言写程序的就输入6然后回车，其他的我没试，不过就是创建一个项目结构目录嘛，大概差不多。</p><p><img src="/img/posts/PlayFrameworkInit-5.gif" alt="PlayFrameworkInit-5"></p><p>然后就看到F:\PlayFramework目录下多了一个文件夹，名称就是你输入的项目名称。<br>继续命令行输入 </p><pre><code>cd onlineTest </code></pre><p>切换到项目目录下，再输入 </p><pre><code>activator run </code></pre><p>就会编译项目然后启动运行服务了。</p><p><img src="/img/posts/PlayFrameworkInit-6.gif" alt="PlayFrameworkInit-6"></p><p>得说一下，因为我之前创建过项目了，换句话说该下载的依赖包都下载了，所以很快。就启动了，在浏览器输入</p><pre><code>localhost:9000</code></pre><p>就可以看到界面了。</p><p><img src="/img/posts/PlayFrameworkInit-7.gif" alt="PlayFrameworkInit-7"></p><p>但是如果是第一次创建的话，而且还是在国内没有什么破墙手段的话，对不住了您呐，先沏壶茶，嗑袋瓜子，睡个午觉，那等的花都谢了。</p><p>一开始我还好奇，它下载的东西都哪去了，没往项目目录里下载，其实是往用户目录下的 <strong>.ivy2</strong> 和 <strong>.sbt</strong> 两个隐藏文件夹里下载了，如果你看到这两个文件夹的大小有变化，恭喜你，就是在下载依赖包的路上了。很有可能你一个午觉醒来发现瓦擦！中途网络下载超时启动失败了！那么同样恭喜你，换个网络或者同一个网络下再试几次。毕竟Play!框架嘛，有种被Play的赶脚。</p><p><img src="/img/posts/PlayFrameworkInit-8.gif" alt="PlayFrameworkInit-8"></p><p>其实我也试过像之前我说的把网络断掉，然后运行启动命令，可能还是因为我这之前下载过了依赖包，所以很快，不大清楚首次创建运行项目的时候咋样，你可以试试。</p><p>唉，本来想睡觉的，但是还是想好（zhe）奇（teng）下断网会怎样，我就把用户目录下的.ivy2和.sbt两个隐藏文件夹删了，然后断开网络，重新建一个offlineTest项目试试。</p><p><img src="/img/posts/PlayFrameworkInit-9.gif" alt="PlayFrameworkInit-9"></p><p>得，报错了，我输入过ignore，直接停止了，不行，我有试过last，然后看到命令行窗口刷刷刷的快速往上飘各种信息。感觉有希望啊。然后又来了一个停顿</p><p><img src="/img/posts/PlayFrameworkInit-10.gif" alt="PlayFrameworkInit-10"></p><p>继续输入last，回车后继续刷刷刷的。。。。。好久。。。。。好想睡觉。</p><p>又来了个停顿，输入last回车。。。。。等<del>等灯等灯</del></p><p>后面又输入两次last，还没完事儿。。。。。算了睡觉!!</p><p>后续</p><p><a href="/2016/09/21/PlayFrameworkInit2">Play Framework 2.5 环境搭建与新建项目（二）</a></p>]]></content>
      
      
      <categories>
          
          <category> 码路刺客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> Play Framework </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电脑右键菜单中没有新建和在此处打开命令行选项的问题</title>
      <link href="2016/09/17/PCProblemRightKeyItem/"/>
      <url>2016/09/17/PCProblemRightKeyItem/</url>
      
        <content type="html"><![CDATA[<p>不知道由于什么原因，突然发现鼠标右键没有了新建选项，想新建个文件夹都不行，而且在计算机里的“新建文件夹”也不行。 </p><span id="more"></span><p><img src="/img/posts/PCProblemRightKeyItem-1.png" alt="PCProblemRightKeyItem-1"></p><p>网上搜了下，给出以下解决方法可行，我的系统是Windows 10 的。</p><p>开始菜单中搜 “cmd” 或者用 <code>Win + R</code> 快捷键打开命令行窗口，输入以下命令回车即可。</p><pre><code>reg add &quot;HKEY_CLASSES_ROOT\Directory\Background\shellex\ContextMenuHandlers\New&quot; /ve /d &quot;&#123;D969A300-E7FF-11d0-A93B-00A0C90F2719&#125;&quot; /t REG_SZ /f</code></pre><p>对于一般正常的Windows系统，在文件夹空白部分按住shift键再单击鼠标右键会多出来一个“在此处打开命令”选项，这样命令行执行的路径就可以直接到你所在的文件夹中，不需要<code>cd</code>命令切换。今天莫名其妙发现这个“在此处打开命令”选项没了。</p><p>网上搜罗后虽没找到解决方法，但是有另外方法打开这个命令行：<br>在文件夹中按<code>Alt+D</code>键，此时光标聚焦到上方的地址栏，再输入<code>cmd</code>回车就可以打开命令行窗口了。</p><p>后来发现软媒魔方软件可以解决。打开软媒设置，在右键菜单-&gt;添加右键菜单项目中勾选“在此处打开命令窗口”就可以了。</p><p><img src="/img/posts/PCProblemRightKeyItem-2.png" alt="PCProblemRightKeyItem-2"></p>]]></content>
      
      
      <categories>
          
          <category> 生活点滴 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【PowerDesigner】Constraint name uniqueness问题及处理</title>
      <link href="2016/09/12/ConstraintNameUniquenessProblem/"/>
      <url>2016/09/12/ConstraintNameUniquenessProblem/</url>
      
        <content type="html"><![CDATA[<p>使用PowerDesigner生成数据库脚本时报 Constraint name uniqueness 错误：</p><p><img src="/img/posts/ConstraintNameUniquenessProblem-1.png" alt="ConstraintNameUniquenessProblem-01"></p><span id="more"></span><p>双击每行错误，发现外键引用的名字有重复的：</p><p><img src="/img/posts/ConstraintNameUniquenessProblem-2.png" alt="ConstraintNameUniquenessProblem-02"></p><p>惯性去网上找解决办法，找到的主要是两个方法：</p><p><strong>1.使用Automatic Correction</strong></p><p>右键错误行，菜单中选择Automatic Correction，自动更正错误。</p><p><img src="/img/posts/ConstraintNameUniquenessProblem-3.png" alt="ConstraintNameUniquenessProblem-03"></p><p>这样Constraint name 就会自动编号处理。</p><p><img src="/img/posts/ConstraintNameUniquenessProblem-4.png" alt="ConstraintNameUniquenessProblem-04"></p><p><strong>2.手动修改Constraint name</strong></p><p>在外键引用编辑页面，点击Constraint name最右面的那个头像，然后修改Constraint name名称就可以了。</p><p><img src="/img/posts/ConstraintNameUniquenessProblem-5.png" alt="ConstraintNameUniquenessProblem-05"></p><p>虽然可以解决问题，但感觉治标不治本。仔细看自动生成的Constraint name，应该是有一个模版，根据名称模板自动生成的。只要找到这个名称模板，根据自己的规则修改下不就好了。所以给出第三种处理方法。</p><p><strong>3.修改引用名称模板</strong></p><p>菜单项  数据库(Database)-&gt;Edit Current DBMS…<br>找到Scipt-&gt;Objects-&gt;Reference-&gt;ConstName节点，看到Value值就是自动生成的引用名称模板，具体含义就不解释了，对比下实际生成的引用名称就明白了，我改成 FK_%REFR% ，让自动生成的名称就是外键编辑窗口中自定义的Code名称加个FK_前缀就行了。</p><p><img src="/img/posts/ConstraintNameUniquenessProblem-6.png" alt="ConstraintNameUniquenessProblem-06"></p>]]></content>
      
      
      <categories>
          
          <category> BI墨客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> 数据仓库 </tag>
            
            <tag> BI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据仓库设计的7个步骤，7个禁忌和7种思路</title>
      <link href="2016/09/06/21RulesForDataWarehousing/"/>
      <url>2016/09/06/21RulesForDataWarehousing/</url>
      
        <content type="html"><![CDATA[<h3 id="高效实现数据仓库的七个步骤"><a href="#高效实现数据仓库的七个步骤" class="headerlink" title="高效实现数据仓库的七个步骤"></a>高效实现数据仓库的七个步骤</h3><p>数据仓库和我们常见的RDBMS系统有些亲缘关系，但它又有所不同。如果你没有实施过数据仓库，那么从设定目标到给出设计，从创建数据结构到编写数据分析程序，再到面对挑剔的用户的评估，整个过程都会带给你一种与以往的项目完全不同的体验。一句话，如果你试图以旧有的方式创建数据仓库，那你所面对的不是预算超支就是所建立的数据仓库无法良好运作。<br>在处理一个数据仓库项目时需要注意的问题很多，但同时也有很多有建设性的参考可以帮助你更顺利的完成任务。开放思维，不断尝试新的途径，对于找到一种可行的数据仓库实现方法来说也是必需的。</p><span id="more"></span><ul><li>1.配备一个全职的项目经理或你自己全面负责项目管理<br>在通常情况下，项目经理都会同时负责多个项目的实施。这么做完全是出于资金和IT资源方面的考虑。但是对于数据仓库项目的管理，绝对不能出现一人身兼数个项目的情况。由于你所处的领域是你和你的团队之前没有进入过的领域，有关数据仓库的一切－数据分析、设计、编程、测试、修改、维护－全都是崭新的，因此你或者你指派的项目经理如果能全心投入，对于项目的成功会有很大帮助。</li><li>2.将项目管理职责推给别的项目经理<br>由于数据仓库实现过程实在是太困难了，为了避免自虐，你可以在当前阶段的项目完成后就将项目管理职责推给别的项目经理。当然，这个新的项目经理一定要复合第一条所说的具有全职性。为什么要这么做呢？首先，从项目经理的角度看，数据仓库实施过程的任何一个阶段都足以让人身心疲惫。从物理存储设备的开发到Extract-Transform-Load的实现，从设计开发模型到OLAP，所有阶段都明显的比以前接触的项目更加困难。每个阶段不但需要新的处理方法、新的管理方法，还需要创新性的观点。所以将管理职责推给别的项目经理不但不会对项目有损害，还可以起到帮助作用。</li><li>3.与用户进行沟通<br>这里所讲的内容远比一篇文章本身要重要的多。你必须明白，在数据仓库的设计阶段，那些潜在用户自己也不清楚他们到底需要数据仓库为他们做什么。他们在不断的探索和发现自己的需求，而你的开发团队也在和客户的接触中做着同样的事情。更加频繁的与客户接触，多做记录，并让你的团队更关注于项目需求讨论的结果而不是讨论的过程本身。<br>既然你和客户的交流是为了了解存储的数据是何种类型以及如何有效存储数据，你也许需要（和你的用户一起）采用一种新的方法观察数据，而不是直接处理数据。你可以尝试从中找出隐藏的信息，比如在一段时期内的数字涨落等。不要试图追寻项目需求的答案，而是要让答案找上门来。</li><li>4.以技术/信息库作为领导<br>由于数据仓库实施的各个阶段都有很大不同，因此你需要有人能起到维持整个项目的连续进行的作用，不过这个职责并不需要那种全职性。项目实施有三个重要方面：架构、技术和业务。将架构作为重点可以保证在整个项目中，数据仓库的架构从物理层往上，都会受到良好的维护。而我们应该将技术作为重点，因为开发团队和关键用户都在使用他们以前从未用过的工具，必须有人监督开发过程以及工具使用的一致性。<br>最后，在数据仓库的应用过程中浮现出来的业务需求必须被详细分析和记录，以促机开发过程持续下去。如果用户不能很好的开发人员以及其它用户沟通，那么数据分析和度量方面的开发进程就会延期，所以必须有人关注业务方面的开发，推动开发进入更高级别。</li><li>5.跳出反复修改程序的陷阱<br>第一次实现的数据仓库肯定不会是最终交付的版本。为什么呢？实际上在真正见到产品前，你无法确定的知道自己的目标是什么。或者说，最终用户只有在使用数据仓库产品一段时间后，才能明确告诉你这个产品是不是他所希望的。与你以往处理的项目不同，业务智能还处于发展的初期，每个公司对业务智能都有不同的解释，因此你的项目决不会一次成功。<br>为了以正确的格式获得数据，你需要在不断变化的状况中摸索前进。BI具有很强的个性，不同的环境、不同的市场以及不同的企业都有不同的BI。这又代表什么呢？这表示你需要把数据库管理员放在一个消息相对封闭的环境中，不要让他知道数据仓库的数据结构以及ETL程序在不断的改变。对此没有别的办法。这样可以减轻你和DBA所承受的压力。</li><li>6.对大量的前端资源进行数据源分析<br>在数据仓库实现过程中，你不得不在旧有的数据中艰难跋涉，这些数据来自老的数据库、老的磁带机以及远程的数据。它们中的大部分都凌乱不堪，并且难以获取。你要对这些数据进行大量处理，并且还要设计ETL程序来寻找其中的有用信息。如果你希望整个项目做起来比较顺利，并且找到一种方法能够一次成功，那就需要你的开发人员必须花费足够的时间来充分研究这些旧有数据，将凌乱的数据规则化，并尽力设计和实现强壮的数据采集和转换过程。数据仓库的ETL部分会占用整个项目资源的百分之八十，所以一定要确定你的资源都用在刀刃上了。</li><li>7.将人际关系处理放在首位<br>在数据仓库实现过程中真正的地狱不是来自技术或者开发方面，而是来自你周围的人。你也许会遇到一个对项目并不乐观而又没时间听你陈述的领导。你也许会遇到一些开发人员将进度拖延太长时间还抱怨为什么不能用老方法实施。你也许还会遇到一些抱有不切实际的幻想的用户，他们希望轻点鼠标就能实现想象中的功能，但却不愿在他们那边多做些智力投资，更好的培训他们自己的员工。而你也已经疲惫不堪，鼓励投资，以及在开发团队和用户（甚至老板）中推广新的开发技巧。<br>总之你要保持微笑。当一切搞定，你的烦恼也就一扫而空了，笑到最后才笑得最轻松。</li></ul><h3 id="数据仓库开发过程中的七个禁忌"><a href="#数据仓库开发过程中的七个禁忌" class="headerlink" title="数据仓库开发过程中的七个禁忌"></a>数据仓库开发过程中的七个禁忌</h3><p>过去我们一直使用的OLTP技术也许隐藏着许多严重的缺陷。数据仓库的实现并不是一个简单的任务，你会发现以前积累下来的丰富经验，并不适合处理每个数据仓库的独特需求。<br>下面列出的条款是你在实现数据仓库过程中一定会面对的问题，其中一些看起来并没有想象中那么严重，但是你还是应该尽量避免出现类似问题。数据仓库并不是一个事务处理系统，它没有一定的标准也不会实现某个特定的应用，但它本质上是非常有组织性的。总之，每个公司所建立的数据仓库都是唯一的，并且每一次数据仓库的实现方法都不是一成不变的。在实现数据仓库时需要注意的不单是”应该如何作”，更要注意”不该如何做”。下面就是我们总结的七点”不该如何作”。</p><ul><li>1.不要编写自己无法快速修改的代码<br>你所要编写的程序主要用于数据分析，而不是处理事务。而你的用户也并不真正知道他们自己真正想要一个什么样的程序。因此你不得不反复修改代码好几次，才会明白用户到底需要一个什么样的程序。如果你编写的程序具有良好的结构和灵活性，就算需要修改也不会太浪费力气。反之，你会被自己累死。</li><li>2.不要使用无法修改的数据库访问API<br>在过去，你的数据库可以为大量的客户提供稳定的数据查询服务。而如今，你的程序必须能够应付更多的数据查询。这使得重新改写程序以使得每个查询请求能得到最大的数据量成为势在必行的工作，而一般来说这种代码修改都不会一次成功，所以只有选择合适的可以修改的API，才能使程序尽快适应新的需求。</li><li>3.不要设计任何无法扩展的东西<br>在联机处理过程（OLTP）应用中，数据分析并不是一个真正的应用程序。实际上，数据分析的关键是获取大量旧的数据，从中提取数据模型，并以此模型推断出新的信息。而你所编写的访问潜在信息的代码应该具有可扩展性，可以附加新的数据。千万别在支持数据分析的代码中假定数据都是固定格式的。</li><li>4.不要附加不必要的功能<br>一个仓库要做的是恰到好处的服务，用户走进仓库，从货架上取得自己所需得信息，仅此而已。由于业务智能、分析以及规律性的问题都有各自的处理程序，因此你的客户唯一的需要就是获取信息。他们需要一种应用环境，可以让他们快速的从数据仓库中取得分析过程所需的数据，而不论这个数据是什么样子的。也许你想帮助他们精炼一下获得的数据，但最好不要这么做。一定要记住，不要给客户的数据分析程序添加任何会影响数据访问性能的功能。</li><li>5.不要简化数据清除和数据源分析的步骤<br>在实现数据仓库过程中最应该注意的地方就是为Extract-Transform-Load机制分析数据源，以及为优化负载而清除数据。安全的做法是假设项目经理在这个阶段会需要整个项目资源的一半以上。相反，如果你在这方面进行了简化，稍后肯定会后悔。所以就算系统工作缓慢，也不要简化清理旧的数据的过程。</li><li>6.不要避免颗粒度和分区问题<br>在数据仓库设计过程中有两个最大的数据存储问题，第一是如何给转换数据定位一个恰当的颗粒度等级，第二是如何将数据绝对的分区。为什么这两点问题如此重要呢？因为整个数据仓库的响应能力受颗粒度影响，并且数据访问的效率直接与数据分区性能有关。因此这是具有关键性的工作，不要试图避免面对这些问题。</li><li>7.不要在没考虑业务问题前就使用OLAP<br>用户在亲眼见到程序前通常都不知道自己到底想要个什么样的程序。因此他们的观点有不少错误，比如他们希望分析结果会忠实反应性能度量，或者希望程序会使他们部门或公司的业务工作有所不同。而你必须跳出自己的职责范围，从IT管理者的角度考虑用户部门直至整个企业的运行方式，才能在开发过程中避免这类问题。在通常的OLTP开发中，你可以比较方便的理解业务流程。而在联机分析处理（OLAP）领域，任何事情都需要亲自考察，而在你周围工作的人也许并不会发现你对业务方面存在的误解。因此，不要自以为已经了解了足够的信息。不断的询问才能使你真正了解”业务智能”中的”业务”到底是什么样子的</li></ul><h3 id="顺利开发数据仓库的七种思路"><a href="#顺利开发数据仓库的七种思路" class="headerlink" title="顺利开发数据仓库的七种思路"></a>顺利开发数据仓库的七种思路</h3><p>对于大多数IT顾问来说，实现一个数据仓库的难度比以前做过的任何项目难度都要大。考虑到不同的数据结构、用途以及应用程序开发方法，以前所积累的经验和技巧大部分都无用武之地了。但是只要在你的前进道路上稍加修正，你就会发现实现一个数据仓库并不是难事，就算你是第一次实现数据仓库也没问题。<br>下面列出了数据仓库实施过程需要考虑的步骤，有一些你可能从来没有意识到，而另一些可能已经在实施过程中使用到了，但是重新思考一番也许你会有更多的领悟。开放思维，不断尝试新的途径，找到一种可行的数据仓库实现方法。</p><ul><li>1.再三考虑应用程序的实现方法<br>数据仓库并不涉及事务处理，并且在报表方面也仅占一小部分。而数据仓库应用程序的本质是分析，尤其是针对业务智能的分析。BI并不是通常所说的数据：它是一种从旧有数据中,模型化得到的新的数据。那么如何才能从旧有数据中挖出这些新数据呢？事实上，这个工作不是让你来完成的，而是你的客户所要完成的。从项目主管的角度看，应该有一个经验丰富的数据表格设计师与你合作，进而决定如何将各类程序融合在一起。其中所遇到的最主要的挑战将是如何用新的方法观察数据，这也是你的客户正在试图使用的方法。</li><li>2.创建抽象的、良好部署的数据库访问组件<br>在过去你接触过的数据库项目和现在的数据仓库之间，有一点绝对不同，那就是：在Online Transaction Processing （OLTP）环境中，用户数量非常大，但使用到的数据却比较少；而在Online Analytical Processing （OLAP）环境中情况却正好相反，少量的用户在使用大量的数据。而你的工作就是编写一个应用程序来优化这种不同。这里有一个线索：在你所有的分析程序中，都要能抓取连续的数据项，这样在以后建立和访问的数据结构中才能存放与原数据物理结构类似的数据。具体如何实现呢？首先不要规格化数据。第二将其放入数组中最小化读取请求数。按照这种方法，DBA会很乐意与你合作。</li><li>3.保持松散<br>现在回头看看第一步，你应该可以理解定义一个分析程序不是件简单事了，而且一般情况下，很难在第一次就实现符合要求的最终产品。而在你将要进行分析的数据结构上同样存在这种问题。一句话，实现过程会有很多变数，你需要不断的改动你的程序。通常我们都希望将改动次数降到最低。在一个数据仓库实现过程中，本质是要分析过程毫无差错，这也需要DBA的参与。不要死抓住你的程序设计、代码、框图，或你建立的其它什么东西不放手，要根据这种变化而不断进行调整。</li><li>4.将管理放在首位<br>在分析数据源方面你做的如何呢？你是否认为清理垃圾数据的工作非常困难？并不是只有你一个人这样想，做过类似工作的人都有这种看法。在一个一般规模的机构中，作为数据仓库实现过程的一部分，会有大量的旧有数据必须进行一致性处理。所以分析数据源并花费数个小时编写转换程序将旧有数据导入数据仓库是整个数据仓库实现过程中最艰难的一部分。并且这也是整个项目中最重要的一环，可以占到整个项目周期和预算的四分之三。所以一定要小心对待。</li><li>5.从字里行间发现问题<br>与用户交流是个很麻烦的事情，为什么这么说呢？因为很多用户在见到最终产品前都不知道自己想要什么样的产品。定义数据仓库应用程序是一个探索的过程，而且这个过程要反复进行。记住所谓的”业务智能”是用户自己定义的，他们按照自己的理解来处理业务流程。因此这些用户就是连接数据和业务处理过程间的桥梁。他们所要的并不是数据本身，而是隐藏在数据后面的智能性。你可以让他们讨论、思考并给出建设性的意见。但千万不要让他们解决或让他们任意想象和发表那些”有可能”的观点。最后，一定要随时留意用户得出的结论。</li><li>6.保持领先<br>数据仓库看起来没有传统的OLTP模式根深蒂固，事实如此。虽然很多人投身数据仓库的开发中，但由于其框架与以前的系统大相径庭，因此在开始的一段时间数据仓库的实现看上去相当混乱。但是坚持下去是很重要的。它具有两方面重要的作用。<br>第一，技术的领先性。它可以跟踪项目中任何阶段的软件工具的部署和正确使用，以及开发过程。如果这复合你的背景，你可以对此多加留意。<br>第二，体系结构的领先性。它使得项目在各个阶段转换时，数据仓库和它所支持的系统的物理以及逻辑架构都具有持续性，不会发生改变。这也是你能提供的。</li><li>7.发出警告<br>最后你要记住，你并不是唯一登上新大陆的人。你周围的每一个人都会有下面一点或几点问题：不现实的期望、对技术的误解、旧习惯或坏习惯、竞争行为，或缺乏对项目的信任度。虽然交流沟通等任务应该是项目经理负责的，但实际上你也要担负起相同的责任。那么作为技术总监你该怎么作呢？首先当然是要真诚的对待周围的人，但一定要竖立威信，适当的发出警告。当你发现项目进度缓慢、资源流失，或者员工失去目标，就要直言不讳的说出来。快速明确的给予警告在大部分情况下都是明智之举。匆忙上马的数据仓库项目也许会出轨，但不要让失败的项目把你拉下马。</li></ul><p>转自<a href="http://blogger.org.cn/blog/more.asp?name=xueflhg&amp;id=4233">http://blogger.org.cn/blog/more.asp?name=xueflhg&amp;id=4233</a></p>]]></content>
      
      
      <categories>
          
          <category> BI墨客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 转载 </tag>
            
            <tag> 数据仓库 </tag>
            
            <tag> BI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSIS中代码页(Code Page)问题</title>
      <link href="2016/09/06/SSISCodePageProblem/"/>
      <url>2016/09/06/SSISCodePageProblem/</url>
      
        <content type="html"><![CDATA[<p>MSDN对于Code Page的解释是：</p><blockquote><p>对于字符和 Unicode 数据，代码页是代表特定字母、数字或符号的位模式的定义（例如 0x20 代表空格，0x74 代表字符“t”）。某些数据类型为每个字符使用一个字节；每个字节的位模式可以是 256 种不同位模式之一。</p></blockquote><p>在做SSIS项目的Data Coversion时，经常会遇到类似这样的问题：</p><p>** The column “xxx” cannot be processed because more than one code page (1252 and 936) are specified… **</p><span id="more"></span><p>这个问题一般会提示在Destination控件上（如OLE DB Destination），既数据导入的目的地，同时也会提示在Data Flow Task控件上，意思是在转换匹配的时候，字符集定义的代码页多于一个。不过当Destination控件问题解决了，Data Flow Task控件上的问题就会随之解决，因为Destination控件存在于Data Flow Task控件中。</p><p>关于这个问题的解决方法，网上一般的说法是将Source控件（如OLE DB Source）的AlwaysUseDefaultCodePage属性设置为true即可。<br>但我在实验中发现，直接在Visual Studio IDE右面的属性窗口设置是不起作用的，应该右键点击OLE DB Source控件，点击Show Advanced Editor…</p><p><img src="/img/posts/SSISCodePageProblem-1.jpeg" alt="DataWarehouseSchemeCompare-01"></p><p>在弹出的窗口中选择Component Properties，然后将在这里将属性AlwaysUseDefaultCodePage设置为true，DefaultCodePage也应为936。</p><p><img src="/img/posts/SSISCodePageProblem-2.jpeg" alt="DataWarehouseSchemeCompare-01"></p><p>这样设置了之后，这个问题就解决了。</p><p>转自：<a href="http://www.cnblogs.com/michaelxu/archive/2009/10/14/1583111.html">http://www.cnblogs.com/michaelxu/archive/2009/10/14/1583111.html</a></p>]]></content>
      
      
      <categories>
          
          <category> BI墨客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 转载 </tag>
            
            <tag> SSIS </tag>
            
            <tag> MSBI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入对比数据仓库模式：Kimball vs Inmon</title>
      <link href="2016/08/26/DataWarehouseSchemeCompare/"/>
      <url>2016/08/26/DataWarehouseSchemeCompare/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote><p>毛主席曾经说：实践若不以革命理论为指南，就会变成盲目的实践。</p></blockquote><p>Kimball和Inmon是两种主流的数据仓库方法论，分别由 Ralph Kimbal大神 和 Bill Inmon大神提出，在实际数据仓库建设中，业界往往会相互借鉴使用两种开发模式。本文将详细介绍 Kimball 和 Inmon 理论在实际数据仓库建设中的应用与对比,通过数据仓库理论武装数据仓库实践。</p><span id="more"></span><p><img src="/img/posts/DataWarehouseSchemeCompare-01.png" alt="DataWarehouseSchemeCompare-01"></p><h2 id="什么是Kimball"><a href="#什么是Kimball" class="headerlink" title="什么是Kimball"></a>什么是Kimball</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>Kimball 模式从流程上看是是自底向上的，即从数据集市到数据仓库再到数据源(先有数据集市再有数据仓库)的一种敏捷开发方法。对于Kimball模式，数据源往往是给定的若干个数据库表，数据较为稳定但是数据之间的关联关系比较复杂，需要从这些OLTP中产生的事务型数据结构抽取出分析型数据结构，再放入数据集市中方便下一步的BI与决策支持。</p><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><p>通常，Kimball都是以最终任务为导向。首先，在得到数据后需要先做数据的探索，尝试将数据按照目标先拆分出不同的表需求。其次，在明确数据依赖后将各个任务再通过ETL由Stage层转化到DM层。这里DM层数据则由若干个事实表和维度表组成。接着，在完成DM层的事实表维度表拆分后，数据集市一方面可以直接向BI环节输出数据了，另一方面可以先DW层输出数据，方便后续的多维分析。</p><p>Kimball往往意味着快速交付、敏捷迭代，不会对数据仓库架构做过多复杂的设计，在变换莫测的互联网行业，这种架构方式逐渐成为一种主流范式。</p><h2 id="什么是Inmon"><a href="#什么是Inmon" class="headerlink" title="什么是Inmon"></a>什么是Inmon</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p>Inmon 模式从流程上看是自顶向下的，即从数据源到数据仓库再到数据集市的（先有数据仓库再有数据市场）一种瀑布流开发方法。对于Inmon模式，数据源往往是异构的，比如从自行定义的爬虫数据就是较为典型的一种，数据源是根据最终目标自行定制的。这里主要的数据处理工作集中在对异构数据的清洗，包括数据类型检验，数据值范围检验以及其他一些复杂规则。在这种场景下，数据无法从stage层直接输出到dm层，必须先通过ETL将数据的格式清洗后放入dw层，再从dw层选择需要的数据组合输出到dm层。在Inmon模式中，并不强调事实表和维度表的概念，因为数据源变化的可能性较大，需要更加强调数据的清洗工作，从中抽取实体-关系。</p><h3 id="流程-1"><a href="#流程-1" class="headerlink" title="流程"></a>流程</h3><p>通常，Inmon都是以数据源头为导向。首先，需要探索性地去获取尽量符合预期的数据，尝试将数据按照预期划分为不同的表需求。其次，明确数据的清洗规则后将各个任务通过ETL由Stage层转化到DW层，这里DW层通常涉及到较多的UDF开发，将数据抽象为实体-关系模型。接着，在完成DW的数据治理之后，可以将数据输出到数据集市中做基本的数据组合。最后，将数据集市中的数据输出到BI系统中去辅助具体业务。</p><h2 id="特征对比"><a href="#特征对比" class="headerlink" title="特征对比"></a>特征对比</h2><p><img src="/img/posts/DataWarehouseSchemeCompare-02.jpg" alt="DataWarehouseSchemeCompare-02"></p><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><table><thead><tr><th>特性</th><th>Kimball</th><th>Inmon</th></tr></thead><tbody><tr><td>数据摄取</td><td>yes</td><td>yes</td></tr><tr><td>stage</td><td>yes</td><td>yes</td></tr><tr><td>ETL</td><td>yes</td><td>yes</td></tr><tr><td>数据集市</td><td>yes</td><td>yes</td></tr><tr><td>商业需求</td><td>yes</td><td>yes</td></tr><tr><td>数据时间属性</td><td>yes</td><td>yes</td></tr><tr><td>数据仓库优先</td><td>no</td><td>yes</td></tr><tr><td>事实维度拆分</td><td>yes</td><td>no</td></tr><tr><td>关系表维护</td><td>no</td><td>yes</td></tr><tr><td>处理导向</td><td>yes</td><td>no</td></tr><tr><td>数据模型泛化</td><td>no</td><td>yes</td></tr><tr><td>精心设计</td><td>no</td><td>yes</td></tr><tr><td>缓慢变化维</td><td>yes</td><td>no</td></tr><tr><td>连续变化维</td><td>no</td><td>yes</td></tr></tbody></table><h3 id="优劣比较"><a href="#优劣比较" class="headerlink" title="优劣比较"></a>优劣比较</h3><table><thead><tr><th>特性</th><th>Kimball</th><th>Inmon</th></tr></thead><tbody><tr><td>时间</td><td>快速交付</td><td>路漫漫其修远兮</td></tr><tr><td>开发难度</td><td>小</td><td>大</td></tr><tr><td>维护难度</td><td>大</td><td>小</td></tr><tr><td>技能要求</td><td>入门级</td><td>专家级</td></tr><tr><td>数据要求</td><td>特定业务</td><td>企业级</td></tr></tbody></table><h2 id="具体例子"><a href="#具体例子" class="headerlink" title="具体例子"></a>具体例子</h2><p>相信一通理论之后可能还是能困惑，现在举一个具体的例子。</p><h3 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h3><p>股票交易为例：</p><p>（OLTP）原始数据包含了如下几张事务表：(真实场景字段设计更为复杂，此处已经简化)</p><ul><li>交易记录表：记录用户下单情况</li></ul><table><thead><tr><th>交易记录ID</th><th>用户ID</th><th>交易ID</th><th>交易单号</th><th>标的CODE</th><th>出价</th><th>现价</th><th>方向</th><th>手数</th><th>创建时间</th><th>修改时间</th><th>状态</th><th>备注</th><th>类型</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>1</td><td>MR123456</td><td>A123456</td><td>9.0</td><td>9.5</td><td>买</td><td>100</td><td>2016-10-10 10:58:00</td><td>2016-10-10 10:58:00</td><td>未成交</td><td>NULL</td><td>创业板</td></tr><tr><td>2</td><td>1</td><td>1</td><td>MR123456</td><td>A123456</td><td>9.0</td><td>8.9</td><td>买</td><td>200</td><td>2016-10-10 11:00:00</td><td>2016-10-10 11:00:10</td><td>已成交</td><td>NULL</td><td>创业板</td></tr><tr><td>3</td><td>1</td><td>2</td><td>MR123457</td><td>A123456</td><td>10.1</td><td>10.2</td><td>卖</td><td>200</td><td>2016-10-10 14:00:00</td><td>2016-10-10 14:00:30</td><td>已成交</td><td>NULL</td><td>创业板</td></tr></tbody></table><ul><li>成交日志表：记录用户下单且成交的情况</li></ul><table><thead><tr><th>成交日志ID</th><th>用户ID</th><th>外部单号</th><th>交易记录ID</th><th>标的CODE</th><th>方向</th><th>手数</th><th>成交价格</th><th>创建时间</th><th>修改时间</th><th>状态</th><th>备注</th><th>类型</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>MR123456</td><td>2</td><td>A123456</td><td>买</td><td>200</td><td>8.9</td><td>2016-10-10 11:00:10</td><td>2016-10-10 11:00:10</td><td>正常</td><td>NULL</td><td>创业板</td></tr><tr><td>2</td><td>1</td><td>MR123456</td><td>3</td><td>A123456</td><td>卖</td><td>200</td><td>10.1</td><td>2016-10-10 14:00:30</td><td>2016-10-10 14:00:30</td><td>正常</td><td>NULL</td><td>创业板</td></tr></tbody></table><ul><li>用户信息表</li></ul><table><thead><tr><th>用户ID</th><th>别名</th><th>姓名</th><th>联系方式</th><th>性别</th><th>身份号码</th><th>资产账户ID</th><th>是否开通创业板</th><th>风险评级</th><th>资产余额</th><th>创建时间</th><th>修改时间</th><th>用户类型</th><th>资产类型</th></tr></thead><tbody><tr><td>1</td><td>FinanceR</td><td>张三</td><td>1234567890</td><td>女</td><td>12345567890X</td><td>SA123213</td><td>是</td><td>高</td><td>12321312.00</td><td>2015-10-10 14:00:00</td><td>2016-10-10 14:00:00</td><td>A</td><td>现金账户</td></tr></tbody></table><h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><p>如果是 Inmon 模式，我们需要将数据库拆分成 用户实体表、成交日志实体表、用户与成交日志关系表等多个子模块。<br>如果是 Kimball 模式，我们则需要将数据库拆分成 用户维度表、用户资产事实表、成交事实表。在Kimball模式中，我们不需要单独维护关系表，因为关系已经冗余在维度表和事实表中。</p><h3 id="Inmon-模式："><a href="#Inmon-模式：" class="headerlink" title="Inmon 模式："></a>Inmon 模式：</h3><p>用户实体表</p><table><thead><tr><th>用户ID</th><th>别名</th><th>姓名</th><th>联系方式</th><th>性别</th><th>身份号码</th><th>是否开通创业板</th><th>风险评级</th><th>资产余额</th><th>创建时间</th><th>修改时间</th><th>用户类型</th><th>资产类型</th></tr></thead><tbody><tr><td>1</td><td>FinanceR</td><td>张三</td><td>1234567890</td><td>女</td><td>12345567890X</td><td>是</td><td>高</td><td>12321312.00</td><td>2015-10-10 14:00:00</td><td>2016-10-10 14:00:00</td><td>A</td><td>现金账户</td></tr></tbody></table><p>成交关系表</p><table><thead><tr><th>成交ID</th><th>用户ID</th></tr></thead><tbody><tr><td>1</td><td>1</td></tr><tr><td>2</td><td>1</td></tr></tbody></table><p>用户资产关系表</p><table><thead><tr><th>资产ID</th><th>用户ID</th></tr></thead><tbody><tr><td>SA123213</td><td>1</td></tr></tbody></table><h3 id="Kimball-模式"><a href="#Kimball-模式" class="headerlink" title="Kimball 模式"></a>Kimball 模式</h3><p>用户维度表</p><table><thead><tr><th>用户ID</th><th>别名</th><th>姓名</th><th>联系方式</th><th>性别</th><th>身份号码</th><th>是否创业板</th><th>风险评级ID</th><th>创建时间</th><th>修改时间</th><th>用户类型ID</th><th>资产ID</th></tr></thead><tbody><tr><td>1</td><td>FinanceR</td><td>张三</td><td>1234567890</td><td>女</td><td>SA123213</td><td>1</td><td>1</td><td>2015-10-10 14:00:00</td><td>2016-10-10 14:00:00</td><td>1</td><td>SA123213</td></tr></tbody></table><p>可以看到这里的用户维度表不包含业务交易信息，变化相对缓慢（静态）。<br>而风险评级、用户类型也需要由风险评级维度表、用户类型维度表来维护</p><p>用户资产事实表</p><table><thead><tr><th>资产ID</th><th>用户ID</th><th>账户余额</th><th>资产类型</th><th>创建时间</th><th>修改时间</th></tr></thead><tbody><tr><td>SA123213</td><td>1</td><td>12321312.00</td><td>现金账户</td><td>2016-10-10 14:00:00</td><td>2016-10-10 14:00:00</td></tr></tbody></table><p>这里的用户资产事实表通常数据是由用户资产交易日志产生的，因为日志存在只插入，不更新的特点（快速增加、最细粒度。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>对于大多数互联网公司由于需求的快速变化，处心积虑设计（Inmon）实体-关系的设计哲学似乎并不能满足快速迭代的业务需要。所以，更多场景下趋向于使用（Kimball）维度-事实的设计哲学反而可以更快地完成任务。<br>数据仓库建设通常以日为粒度，将OLTP数据变化的不情况增量同步到数据仓库中。<br>在数据仓库的实际工作中，80%的时间会花费在任务调度、数据清洗和业务梳理上，只有20%的时间会投入到数据挖掘上。</p><p>转自<a href="https://segmentfault.com/a/1190000006255954">https://segmentfault.com/a/1190000006255954</a></p>]]></content>
      
      
      <categories>
          
          <category> BI墨客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 转载 </tag>
            
            <tag> 数据仓库 </tag>
            
            <tag> BI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据仓库维度建模10大基本原则</title>
      <link href="2016/08/23/Datawarehouse-10Dimension-principle/"/>
      <url>2016/08/23/Datawarehouse-10Dimension-principle/</url>
      
        <content type="html"><![CDATA[<h3 id="原则1"><a href="#原则1" class="headerlink" title="原则1"></a>原则1</h3><p><strong>载入详细的原子数据到维度结构中</strong></p><blockquote><p>维度建模应该使用最基础的原子数据进行填充，以支持不可预知的来自用户查询的过滤和分组请求，用户通常不希望每次只看到一个单一的记录，但是你无法预测 用户想要掩盖哪些数据，想要显示哪些数据，如果只有汇总数据，那么你已经设定了数据的使用模式，当用户想要深入挖掘数据时他们就会遇到障碍。当然，原子数据也可以通过概要维度建模进行补充，但企业用户无法只在汇总数据上工作，他们需要原始数据回答不断变化的问题。</p></blockquote><span id="more"></span><h3 id="原则2"><a href="#原则2" class="headerlink" title="原则2"></a>原则2</h3><p><strong>围绕业务流程构建维度模型</strong></p><blockquote><p>业务流程是组织执行的活动，它们代表可测量的事件，如下一个订单或做一次结算，业务流程通常会捕获或生成唯一的与某个事件相关的性能指标，这些数据转换成事实后，每个业务流程都用一个原子事实表表示，除了单个流程事实表外，有时会从多个流程事实表合并成一个事实表，而且合并事实表是对单一流程事实表的一 个很好的补充，并不能代替它们。</p></blockquote><h3 id="原则3"><a href="#原则3" class="headerlink" title="原则3"></a>原则3</h3><p><strong>确保每个事实表都有一个与之关联的日期维度表</strong></p><blockquote><p>原则2中描述的可测量事件总有一个日期戳信息，每个事实表至少都有一个外键，关联到一个日期维度表，它的粒度就是一天，使用日历属性和非标准的关于测量事件日期的特性，如财务月和公司假日指示符，有时一个事实表中有多个日期外键。</p></blockquote><h3 id="原则4"><a href="#原则4" class="headerlink" title="原则4"></a>原则4</h3><p><strong>确保每个事实表中的事实具有相同的粒度或同级的详细程度</strong></p><blockquote><p>在组织事实表时粒度上有三个基本原则：事务，周期快照或累加快照。无论粒度类型如何，事实表中的度量单位都必须达到相同水平的详细程度，如果事实表中的事实表现的粒度不一样，企业用户会被搞晕，BI应用程序会很脆弱，或者返回的结果根本就不对。</p></blockquote><h3 id="原则5"><a href="#原则5" class="headerlink" title="原则5"></a>原则5</h3><p><strong>解决事实表中的多对多关系</strong></p><blockquote><p>由于事实表存储的 是业务流程事件的结果，因此在它们的外键之间存在多对多(M:M)的关系，如多个仓库中的多个产品在多天销售，这些外键字段不能为空，有时一个维度可以为单个测量事件赋予多个值，如一个保健对应多个诊断，或多个客户有一个银行账号，在这些情况下，它的不合理直接解决了事实表中多值维度，这可能违反了测量事件的天然粒度，因此我们使用多对多，双键桥接表连接事实表。</p></blockquote><h3 id="原则6"><a href="#原则6" class="headerlink" title="原则6"></a>原则6</h3><p><strong>解决维度表中多对一的关系</strong></p><blockquote><p>属性之间分层的、多对一(M：1)的关系通常未规范化，或者被收缩到扁平型维度表中，如果你曾经有过为事务型系统设计实体关系模型的经历，那你一定要抵抗住旧有的思维模式，要将其规范化或将M:1关系拆分成更小的子维度，维度反向规范化是维度建模中常用的词汇。在单个维度表中多对一(M:1)的关系非常常见，一对一的关系，如一个产品描述对应一个产品代码，也可以在维度表中处理，在事实表中偶尔也有多对一关系，如详细当维度表中有上百万条记录时，它推出的属性又经常发生变化。不管怎样，在事实表中要慎用M:1关系。</p></blockquote><h3 id="原则7"><a href="#原则7" class="headerlink" title="原则7"></a>原则7</h3><p><strong>存储报告标记和过滤维度表中的范围值</strong></p><blockquote><p>更重要的是，编码和关联的解码及用于标记和查询过滤的描述符应该被捕获到维度表中，避免在事实表中存储神秘的编码字段或庞大的描述符字段，同样，不要只 在维度表中存储编码，假定用户不需要描述性的解码，或它们将在BI应用程序中得到解决。如果它是一个行/列标记或下拉菜单过滤器，那么它应该当作一个维度属性处理。尽管我们在原则5中已经陈述过，事实表外键不应该为空，同时在维度表的属性字段中使用“NA”或另一个默认值替换空值来避免空值也是明智的，这样可以减少用户的困惑。</p></blockquote><h3 id="原则8"><a href="#原则8" class="headerlink" title="原则8"></a>原则8</h3><p><strong>确定维度表使用了代理键</strong></p><blockquote><p>按顺序分配代理键(除了日期维度)可以获得一系列的操作优势，包括更小的事实表、索引以及性能改善，如果你正在跟踪维度属性的变化，为每个变化使用一个 新的维度记录，那么确实需要代理键，即使你的商业用户没有初始化跟踪属性改变的设想值，使用代理也会使下游策略变化更宽松，代理也允许你使用多个业务键映射到一个普通的配置文件，有利于你缓冲意想不到的业务活动，如废弃产品编号的回收或收购另一家公司的编码方案。</p></blockquote><h3 id="原则9"><a href="#原则9" class="headerlink" title="原则9"></a>原则9</h3><p><strong>创建一致的维度集成整个企业的数据</strong></p><blockquote><p>对于企业数据仓库一致的维度(也叫做通用维度、标准或参考维度)是最基本的原则，在ETL系统中管理一次，然后在所有事实表中都可以重用，一致的维度在 整个维度模型中可以获得一致的描述属性，可以支持从多个业务流程中整合数据，企业数据仓库总线矩阵是最关键的架构蓝图，它展现了组织的核心业务流程和关联的维度，重用一致的维度可以缩短产品的上市时间，也消除了冗余设计和开发过程，但一致的维度需要在数据管理和治理方面有较大的投入。</p></blockquote><h3 id="原则10"><a href="#原则10" class="headerlink" title="原则10"></a>原则10</h3><p><strong>不断平衡需求和现实，提供用户可接受的并能够支持他们决策的DW/BI解决方案</strong></p><blockquote><p>维度建模需要不断在用户需求和数据源事实之间进行平衡，才能够提交可执行性好的设计，更重要的是，要符合业务的需要，需求和事实之间的平衡是DW/BI 从业人员必须面对的事实，无论是你集中在维度建模，还是项目策略、技术/ETL/BI架构或开发/维护规划都要面对这一事实。</p></blockquote><p>转自：<a href="http://www.cnblogs.com/hadoopdev">http://www.cnblogs.com/hadoopdev</a> </p>]]></content>
      
      
      <categories>
          
          <category> BI墨客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 转载 </tag>
            
            <tag> 数据仓库 </tag>
            
            <tag> BI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown教程</title>
      <link href="2016/08/20/MarkDown%E6%95%99%E7%A8%8B/"/>
      <url>2016/08/20/MarkDown%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>本Markdown编辑器使用<a href="https://github.com/benweet/stackedit">StackEdit</a>修改而来，用它写博客，将会带来全新的体验哦：</p><ul><li><strong>Markdown和扩展Markdown简洁的语法</strong></li><li><strong>代码块高亮</strong></li><li><strong>图片链接和图片上传</strong></li><li><strong><em>LaTex</em>数学公式</strong></li><li><strong>UML序列图和流程图</strong></li><li><strong>离线写博客</strong></li><li><strong>导入导出Markdown文件</strong></li><li><strong>丰富的快捷键</strong><span id="more"></span></li></ul><hr><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><ul><li>加粗    <code>Ctrl + B</code> </li><li>斜体    <code>Ctrl + I</code> </li><li>引用    <code>Ctrl + Q</code></li><li>插入链接    <code>Ctrl + L</code></li><li>插入代码    <code>Ctrl + K</code></li><li>插入图片    <code>Ctrl + G</code></li><li>提升标题    <code>Ctrl + H</code></li><li>有序列表    <code>Ctrl + O</code></li><li>无序列表    <code>Ctrl + U</code></li><li>横线    <code>Ctrl + R</code></li><li>撤销    <code>Ctrl + Z</code></li><li>重做    <code>Ctrl + Y</code></li></ul><h2 id="Markdown及扩展"><a href="#Markdown及扩展" class="headerlink" title="Markdown及扩展"></a>Markdown及扩展</h2><blockquote><p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的HTML页面。    —— <a href="https://zh.wikipedia.org/wiki/Markdown" target="_blank"> [ 维基百科 ]</p></blockquote><p>使用简单的符号标识不同的标题，将某些文字标记为<strong>粗体</strong>或者<em>斜体</em>，创建一个<a href="http://www.csdn.net/">链接</a>等，详细语法参考帮助？。</p><p>本编辑器支持 <strong>Markdown Extra</strong> , 　扩展了很多好用的功能。具体请参考<a href="https://github.com/jmcmanus/pagedown-extra" title="Pagedown Extra">Github</a>.  </p><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><p><strong>Markdown　Extra</strong>　表格语法：</p><table><thead><tr><th>项目</th><th>价格</th></tr></thead><tbody><tr><td>Computer</td><td>$1600</td></tr><tr><td>Phone</td><td>$12</td></tr><tr><td>Pipe</td><td>$1</td></tr></tbody></table><p>可以使用冒号来定义对齐方式：</p><table><thead><tr><th align="left">项目</th><th align="right">价格</th><th align="center">数量</th></tr></thead><tbody><tr><td align="left">Computer</td><td align="right">1600 元</td><td align="center">5</td></tr><tr><td align="left">Phone</td><td align="right">12 元</td><td align="center">12</td></tr><tr><td align="left">Pipe</td><td align="right">1 元</td><td align="center">234</td></tr></tbody></table><p>###定义列表</p><dl><dt><strong>Markdown　Extra</strong>　定义列表语法：<br>项目１<br>项目２<br>:   定义 A</dt><dd>定义 B</dd></dl><dl><dt>项目３</dt><dd>定义 C</dd></dl><p>:   定义 D</p><pre><code>&gt; 定义D内容</code></pre><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><p>代码块语法遵循标准markdown代码，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@requires_authorization</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">somefunc</span>(<span class="params">param1=<span class="string">&#x27;&#x27;</span>, param2=<span class="number">0</span></span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;A docstring&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> param1 &gt; param2: <span class="comment"># interesting</span></span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;Greater&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> (param2 - param1 + <span class="number">1</span>) <span class="keyword">or</span> <span class="literal">None</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>message = <span class="string">&#x27;&#x27;&#x27;interpreter</span></span><br><span class="line"><span class="string"><span class="meta">... </span>prompt&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>###脚注<br>生成一个脚注[^footnote].<br>  [^footnote]: 这里是 <strong>脚注</strong> 的 <em>内容</em>.</p><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><p>用 <code>[TOC]</code>来生成目录：</p><p>[TOC]</p><h3 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h3><p>使用MathJax渲染<em>LaTex</em> 数学公式，详见<a href="http://math.stackexchange.com/">math.stackexchange.com</a>.</p><ul><li>行内公式，数学公式为：$\Gamma(n) = (n-1)!\quad\forall n\in\mathbb N$。</li><li>块级公式：</li></ul><p>$$    x = \dfrac{-b \pm \sqrt{b^2 - 4ac}}{2a} $$</p><p>更多LaTex语法请参考 <a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference">这儿</a>.</p><h3 id="UML-图"><a href="#UML-图" class="headerlink" title="UML 图:"></a>UML 图:</h3><p>可以渲染序列图：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">张三-&gt;李四: 嘿，小四儿, 写博客了没?</span><br><span class="line">Note right of 李四: 李四愣了一下，说：</span><br><span class="line">李四--&gt;张三: 忙得吐血，哪有时间写。</span><br></pre></td></tr></table></figure><p>或者流程图：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">st&#x3D;&gt;start: 开始</span><br><span class="line">e&#x3D;&gt;end: 结束</span><br><span class="line">op&#x3D;&gt;operation: 我的操作</span><br><span class="line">cond&#x3D;&gt;condition: 确认？</span><br><span class="line"></span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;e</span><br><span class="line">cond(no)-&gt;op</span><br></pre></td></tr></table></figure><ul><li>关于 <strong>序列图</strong> 语法，参考 <a href="http://bramp.github.io/js-sequence-diagrams/">这儿</a>,</li><li>关于 <strong>流程图</strong> 语法，参考 <a href="http://adrai.github.io/flowchart.js/">这儿</a>.</li></ul><h2 id="离线写博客"><a href="#离线写博客" class="headerlink" title="离线写博客"></a>离线写博客</h2><p>即使用户在没有网络的情况下，也可以通过本编辑器离线写博客（直接在曾经使用过的浏览器中输入<a href="http://write.blog.csdn.net/mdeditor">write.blog.csdn.net/mdeditor</a>即可。<strong>Markdown编辑器</strong>使用浏览器离线存储将内容保存在本地。</p><p>用户写博客的过程中，内容实时保存在浏览器缓存中，在用户关闭浏览器或者其它异常情况下，内容不会丢失。用户再次打开浏览器时，会显示上次用户正在编辑的没有发表的内容。</p><p>博客发表后，本地缓存将被删除。　</p><p>用户可以选择 <i class="icon-disk"></i> 把正在写的博客保存到服务器草稿箱，即使换浏览器或者清除缓存，内容也不会丢失。</p><blockquote><p><strong>注意：</strong>虽然浏览器存储大部分时候都比较可靠，但为了您的数据安全，在联网后，<strong>请务必及时发表或者保存到服务器草稿箱</strong>。</p></blockquote><p>##浏览器兼容</p><ol><li>目前，本编辑器对Chrome浏览器支持最为完整。建议大家使用较新版本的Chrome。</li><li>IE９以下不支持</li><li>IE９，１０，１１存在以下问题<ol><li>不支持离线功能</li><li>IE9不支持文件导入导出</li><li>IE10不支持拖拽文件导入</li></ol></li></ol><hr>]]></content>
      
      
      <categories>
          
          <category> IT看客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
            <tag> Test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>改变世界的公式TOP10,最后一个一看就蒙圈了</title>
      <link href="2016/06/29/Foumula-TOP10/"/>
      <url>2016/06/29/Foumula-TOP10/</url>
      
        <content type="html"><![CDATA[<p>很多人不喜欢数学，因为他们觉得数学伤脑筋，可是，我们有很多的发明、创造都跟数学有关。</p><p>英国科学期刊《物理世界》曾让读者投票评选了“最伟大的公式”，最终榜上有名的十个公式既有无人不知的1+1=2，又有著名的E=mc2；既有简单的-圆周公式，又有复杂的欧拉公式……</p><p>很多人不喜欢数学，因为他们觉得数学伤脑筋，可是，我们有很多的发明、创造都跟数学有关。</p><p>英国科学期刊《物理世界》曾让读者投票评选了“最伟大的公式”，最终榜上有名的十个公式既有无人不知的1+1=2，又有著名的E=mc2；既有简单的-圆周公式，又有复杂的欧拉公式……</p><p><img src="/img/posts/Foumula-TOP10-1.jpg" alt="Foumula-TOP10-1"></p><span id="more"></span><p><img src="/img/posts/Foumula-TOP10-2.jpg" alt="Foumula-TOP10-2"><br><img src="/img/posts/Foumula-TOP10-3.jpg" alt="Foumula-TOP10-3"><br><img src="/img/posts/Foumula-TOP10-4.jpg" alt="Foumula-TOP10-4"><br><img src="/img/posts/Foumula-TOP10-5.jpg" alt="Foumula-TOP10-5"><br><img src="/img/posts/Foumula-TOP10-6.jpg" alt="Foumula-TOP10-6"><br><img src="/img/posts/Foumula-TOP10-7.jpg" alt="Foumula-TOP10-7"><br><img src="/img/posts/Foumula-TOP10-8.jpg" alt="Foumula-TOP10-8"><br><img src="/img/posts/Foumula-TOP10-9.jpg" alt="Foumula-TOP10-9"><br><img src="/img/posts/Foumula-TOP10-10.jpg" alt="Foumula-TOP10-10"></p><p>这个公式的巧妙之处在于，它没有任何多余的内容，将数学中最基本的e、i、pie放在了同一个式子中，同时加入了数学也是哲学中最重要的0和1，再以简单的加号相连。<br>高斯曾经说：“一个人第一次看到这个公式而不感到它的魅力，他不可能成为数学家。”</p><p><img src="/img/posts/Foumula-TOP10-11.jpg" alt="Foumula-TOP10-11"><br><img src="/img/posts/Foumula-TOP10-12.jpg" alt="Foumula-TOP10-12"></p>]]></content>
      
      
      <categories>
          
          <category> 生活点滴 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 转载 </tag>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【T-SQL】group by 和grouping sets</title>
      <link href="2016/06/13/SQL-GroupByAndGroupingSets/"/>
      <url>2016/06/13/SQL-GroupByAndGroupingSets/</url>
      
        <content type="html"><![CDATA[<p>遇到一个情况，需要在内网系统中出一个统计报表。需要根据不同条件使用多个group by语句，需要将所有聚合的数据进行union操作来完成不同维度的统计查看。<br>知道发现了在SQL  Server 2008之后引入了grouping sets这个对于group by的增强后，上面的需求实现起来就简单的多，下面我们用AdventureWork中的表作为demo来解释一下grouping sets.</p><span id="more"></span><p>假设我现在需要两个维度查询我的销售额度，查询T-SQL如下：</p><p><img src="/img/posts/SQL-GroupByAndGroupingSets-1.png" alt="SQL-GroupByAndGroupingSets-1"></p><p>而使用SQL Server 2008之后新增的grouping sets语句，仅仅需要这样写：</p><p><img src="/img/posts/SQL-GroupByAndGroupingSets-3.png" alt="SQL-GroupByAndGroupingSets-3"></p><p>值得注意的是，虽然上面使用grouping sets语句和多个group by语句差生的结果完全一样，但顺序完全不同。</p><p>grouping  sets，仅仅是语法糖？</p><p>从上面的结果来看，使用grouping  sets仅仅是一个可以少写代码的语法糖，但实际情况是，group sets在遇到多个条件时，聚合是一次性从数据库中取出所有需要的操作的数据，在内存中对数据库进行聚合操作并生成结果。而union all是多次扫描表，将返回的结果进行union操作。这也就是为什么grouping  sets和union操作所返回的数据顺序是不同的原因。</p><p>下面通过查看上面两个语句的IO和CPU来进行对比：</p><p><img src="/img/posts/SQL-GroupByAndGroupingSets-5.png" alt="SQL-GroupByAndGroupingSets-5"></p><p>通过上面的图来看grouping sets不仅仅只是语法糖，而是从执行原理做出了改变</p><p>对于grouping sets来说，还经常和grouping函数联合使用，这个函数是反应目标列是否聚合，如果聚合则返回1，否则返回0，如下：</p><p><img src="/img/posts/SQL-GroupByAndGroupingSets-6.png" alt="SQL-GroupByAndGroupingSets-6"></p><p>转自：<a href="http://www.cnblogs.com/CareySon/archive/2011/12/19/2293245.html">http://www.cnblogs.com/CareySon/archive/2011/12/19/2293245.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 码路刺客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 转载 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> SQL Server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【SSIS】几个通用属性</title>
      <link href="2016/06/13/SSIS-GeneralAttribures/"/>
      <url>2016/06/13/SSIS-GeneralAttribures/</url>
      
        <content type="html"><![CDATA[<p>记录几个简单常用SSIS包常用属性，都是通用属性：</p><ul><li>1.<code>Disable</code> 设置属性为<code>true</code>是该任务不能执行</li><li>2.<code>DelayValidation</code> 设置为<code>true</code>只至运行时才验证任务中的属性，在非连接状态下和为任务包输入一个外部参数值但是直到部署时才验证这种情况下会很有用。它的默认设置为<code>false</code></li><li>3.<code>Description</code> 该属性描述任务包的情形。默认的值是<code>&lt;task name&gt;</code>,如果多个任务类型相同则设置为<code>&lt;task name 1&gt;</code>(数字1递增)。这个属性不是唯一的，只需要准确描述任务包项目方便其他人理解</li><li>4.<code>ExecValueVariable</code> 存储任务输出的用户变量，默认的值是<code>&lt;none&gt;</code>,不输出。</li><li>5.<code>FailPackageonFailure</code> 设置这个属性为<code>true</code>,当<code>package</code>中有一个任务失败那么他的上层的任务也将失败。它的上层任务可能是一个package或者container。 </li></ul><span id="more"></span><ul><li>6.ID 自动为每个任务产生的唯一ID,是一个GUID形式的字符串</li><li>7.<code>IsolationLevel</code> 如果设置了事务模式，那么可以设置事务的隔离级别。事务的隔离级别有好几种：读取提交<code>ReadCommitted</code>，重复读<code>ReapeatableRead</code>,串行化的<code>Seralizable</code>，不设置的<code>Unapecified</code>，快照<code>Snapshot</code>。默认的属性使串行化的。这些选项依据SQL Server的事务而来。</li><li>8.<code>LoggingMode</code> 设置任务的支持记录模式。可选值有：使用父任务设置<code>UseParentSetting</code>，可用<code>Enable</code>,不可用<code>Disabled</code>。默认值是使用父任务设置，意思是告诉任务使用上层task的日志记录模式。</li><li>9.<code>Name</code> 该属性和任务相关联，默认的值是<code>&lt;task name&gt;</code>，如果有多个相同类型的任务可以设置<code>&lt;task name1&gt;</code>(数字1自增)。作为一个ssis设计值，应该时常修改这个属性，使得它更具有可读性，但是它必须在这个package中必须是唯一。</li><li>10.<code>TransctionOption</code>:设置task的事务属性。他的值可以使不支持<code>NotSupported</code>，支持<code>Supported</code>，根据需要的<code>Required</code>。默认的设置是支持的，使得整个任务中可以使用事务。</li></ul><p>转自 指尖流淌<br><a href="http://www.cnblogs.com/zhijianliutang/archive/2012/04/25/2470546.html">http://www.cnblogs.com/zhijianliutang/archive/2012/04/25/2470546.html</a></p>]]></content>
      
      
      <categories>
          
          <category> BI墨客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 转载 </tag>
            
            <tag> BI </tag>
            
            <tag> SSIS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>放开那程序猿！构建业务导向的大数据云平台</title>
      <link href="2016/06/05/BuildBusinessOrientedBigDataCloudPlatform/"/>
      <url>2016/06/05/BuildBusinessOrientedBigDataCloudPlatform/</url>
      
        <content type="html"><![CDATA[<p>按数据处理方式及使用目标，企业级IT系统可分为OLTP和OLAP系统。简而言之，OLTP系统生产数据，OLAP系统加工数据。从数据到智慧的转换金字塔上看，OLTP系统实现了底层的数据产生和存储以及面向事务的信息整合，在这之上的各层就要依赖OLAP系统了。OLAP概念源自决策支持系统（DSS），企业中的数据仓库、数据集市、统计报表、驾驶舱、数据挖掘等都属于OLAP体系。其中，数据仓库和数据集市主要实现信息整合，一般统称为数据整合平台。统计报表、驾驶舱、数据挖掘进一步利用数据整合平台的成果，帮助用户发现知识并最终形成智慧。 </p><span id="more"></span><p><img src="/img/posts/BuildBusinessOrientedBigDataCloudPlatform-1.png" alt="BuildBusinessOrientedBigDataCloudPlatform-1"></p><p>OLAP系统的主要用户是分析人员和管理人员，目标是支持管理决策，依据是企业生产经营过程中产生的全量数据，是一个按目标使用场景对数据进行加工、利用的过程。这过程一般可以划分五个阶段：业务部门定义需求；IT部门根据需求获取并整合相关数据；IT部门根据需求设计分析模型；IT部门开发实施并发布；业务部门应用并衡量实际成效。在传统的数据基础和技术环境下，这个周期可能要经历较漫长的时间。还在建设OLAP体系的情况自不必多说，即便已建成OLAP体系统，要及时响应业务部门的需求也是较困难的，而且很有可能最终的交付质量不能达到需求方的预期。</p><p><img src="/img/posts/BuildBusinessOrientedBigDataCloudPlatform-2.png" alt="BuildBusinessOrientedBigDataCloudPlatform-2"></p><p>下图是目前较常见的OLAP体系简图，上游系统指那些OLTP系统，是数据源。数据整合平台包括ODS、数据仓库、数据集市等，主要实现数据整合。下游系统指那些利用数据整合平台成果的系统，包括统计报表、驾驶舱、数据挖掘等。其中，数据整合平台承上启下，在整个OLAP体系中非常重要。按照目前较普遍的架构，从上游到下游的数据流向，至少分为同构层、整合层、应用层。其中同构层在模型上基本与上游接入数据源基本保持一致，整合层一般会采用高范式模型进行数据整合，应用层面向下游具体应用采用星型模型。这个架构是在Inmon帮和Kimball派十几年如一日的不断撕逼和妥协中演进出来的，应该是一种最佳实践。但随着互联网+大数据时代到来，对数据应用有着更高效、更深入的要求，这种架构本身固有的缺点被不断放大。</p><p><img src="/img/posts/BuildBusinessOrientedBigDataCloudPlatform-3.png" alt="BuildBusinessOrientedBigDataCloudPlatform-3"></p><p><strong>开发周期长</strong></p><p>为了避免因上游系统接入模型的变化而导致数据整合平台模型的被动调整，整合层建模时一般会采用较高范式实现高内聚、低耦合，ER实体较多、关系复杂。这样就增加了ETL设计、开发以及测试的复杂度，同时ETL程序执行效率也低。业务部门提出的需求，IT首先由下至上逐层对模型进行分析，即便只需在应用层开发，基于上述原因也需要一周以上。如果涉及要改动整合层，开发周期要一个月左右，业务部门显然是不能接受的。最后的结局不用猜都知道，苦逼的程序猿只能再一次强睁熊猫眼天天加班赶工。但是故事并没有到此结束，马上一个意想不到但细细想想又是顺理成章的伴生问题发生了。</p><p><strong>架构迅速变坏</strong></p><p>在日复一日的高压下，程序猿只能另辟蹊径为自己减负。既然工作量是由于数据模型和层次的复杂性引起的，那最有效的减少工作量的方法无非就是：1、绕过整合层，数据直接从同构层到应用层。2、还是从通过整合层，但使用面向应用的自建模型。无论哪种方法，都使整合层形同虚设，从同构层到应用层形成一个个数据井道。虽然单个开发任务的开发时间缩短了，但各数据井道之间无法复用，所以总的开发时间绝对要更多，而且后期的维护工作将是一场噩梦。</p><p><img src="/img/posts/BuildBusinessOrientedBigDataCloudPlatform-4.png" alt="BuildBusinessOrientedBigDataCloudPlatform-4"></p><p><strong>效率低</strong></p><p>架构变坏后，数据一致性无法保证，大量数据重复存储，大量指标重复计算，ETL作业数急剧上升，数据整合平台效率自然会越来越差。即便架构还能保持，但随着时间的推移，数据量及业务需求不断增加，架构上倾向分割出更多的层次，以便实现更多的复用。随着层次的增加，数据迁移的路径就变长了，长久以往也难逃低效率的宿命。</p><p><img src="/img/posts/BuildBusinessOrientedBigDataCloudPlatform-5.png" alt="BuildBusinessOrientedBigDataCloudPlatform-5"></p><p>再回顾下OLAP数据应用的五个阶段，从业务提出需求到业务应用验证形成闭环，这过程是由IT导向推动的，IT首先与业务讨论分析需求，在业务模型层面中达成共识，然后再映射到系统模型，实现对来自上游系统的数据进行加工处理，最后通过OLAP系统将结果在业务语境中展现给用户，之前讨论的所有弊病都此有关。而对于像银行、保险等发展较成熟的行业，其业务语境、模型是较稳定的，支持业务开展的上游IT系统的系统模型也应该是相对稳定的，因此业务模型和系统模型间能形成较稳定的映射关系。这样只要能达到足够细的粒度，就能实现操纵业务模型来改变系统模型的目的。而业务模型又能被业务所能理解，因此这个闭环过程就可以完全由业务导向不需要IT的参与，整个过程可以简化为：业务设计模型，业务应用验证。</p><p>文／season7（简书作者）<br>原文链接：<a href="http://www.jianshu.com/p/d55d8eeac219">http://www.jianshu.com/p/d55d8eeac219</a></p>]]></content>
      
      
      <categories>
          
          <category> BI墨客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 转载 </tag>
            
            <tag> BI </tag>
            
            <tag> BigData </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>房地产行业商业智能解决方案分享</title>
      <link href="2016/06/05/RealEstateBISolutionCaseShare/"/>
      <url>2016/06/05/RealEstateBISolutionCaseShare/</url>
      
        <content type="html"><![CDATA[<p>中国地产行业经过了20多年的发展，房地产行业整合已成大势所趋，逐步由区域开发转变为集团化的跨地区综合开发商。然而，对于处在超常规速度发展的房地产企业来说，其面临的挑战也是超常规的。首先，房地产企业要在有限的资金和人力条件下，同一时间，对全国区域范围内的多个项目做出科学的决策，以及进行合理地资源平衡，这是一项非常复杂的系统工程。另外，由单个区域开发到全国跨地区开发所带来的管理上的复杂程度也是呈几何级数增长的。这就对企业在项目进度控制、现金流管理等方面提出了更加精细的要求。 </p><span id="more"></span><p>针对此情况，企业的信息化管理急需优化升级，新的方案要做到既不影响现有应用系统运行，又能对全公司数据进行精细化集中分析处理。商业智能正是这样一个优秀的解决方案，其自动灵活，准确及时的特性可以帮助企业将数据处理的工作重点从原本的数据整合转移到数据分析上来。</p><p>在以往的实施案例中我们发现，对于房地产这种行业背景深厚，数据产量又大的行业，数据的处理和分析能力是商业智能软件必须具备的重要特性。数据体量大，分支结构复杂，调度频率高都是巨大的挑战。像国内某地产巨头利用了商业智能软件FineBI得天独厚的稳定性和大数据处理优势，从以下几个方面解决了问题：</p><p><strong>1、构建决策驾驶舱</strong></p><p>商业智能系统支持多种数据库数据源，比如Oracle，sql server，DB2等等，以及Excel，txt，XML文件数据源，系统对于读取的数据源可以进行ETL转换以适应分析需求。</p><p>其次，商业智能由于其优秀的自动建模特性，能避免业务人员对数据库内容的深入了解，减少与技术人员的反复沟通，大大降低时间成本。</p><p>此外，以往传统的报表数据呈现方式缺乏灵活性和直观性，利用商业智能的各种图表，比如柱形图、折线图、饼图还有适用于地产行业的地图、仪表盘、环形图，以图形的方式直观展现数据，多维度多关联决策分析，辅助决策。</p><p><strong>2、实时销售管理</strong></p><p>房地产的销售往往具有形式多样，周期长，工作复杂的特点，其销售数据往往具有很强的实时性。如果利用商业智能平台进行各类销售分析，比如销售、回款、应收款、可售库存、推盘、动态成本、杜邦分析、资金计划等各类细分主题的分析，可以更好地从数据中观测销售过程出现的问题，例如哪里的楼盘销量低，哪里的楼盘回款率低</p><p><img src="/img/posts/RealEstateBISolutionCaseShare-1.jpg" alt="RealEstateBISolutionCaseShare-1"></p><p><strong>3、精确市场定位，合理开发</strong></p><p>商业智能系统不仅可以分析企业内部的各项业务数据，还可以应用到企业外部环境，比如分析一个或多个地区的人口分布，住房条件，交通情况，土地利用率等，这些数据往往在决策调整方面具有引导性，帮助企业在后续开发中因地制宜地制定方案，如户型档次，楼层高低设置等，做到由内而外，由外之内的信息互通。</p><p><img src="/img/posts/RealEstateBISolutionCaseShare-2.jpg" alt="RealEstateBISolutionCaseShare-2"></p><p><strong>4、创新挖掘客户需求</strong></p><p>地产销售的对象复杂多样，而房地产依靠客户需求盈利，因此，对客户的分析至关重要。利用商业智能系统我们可以实现客户消费行为的分析，从客户的年龄，地域，收入水平，教育情况，消费方式，喜好等方面进行分析，帮助营销人员找出影响消费者的机会与方式，实现对不同层次用户的精准营销。</p><p><strong>5、房地产行业的营销利器</strong></p><p>房地产行业，营销为重，商业智能系统可以帮助企业市场销售团队进行销售量的增长与人均可支配收入回归分析、个人购买与集团购买房地产比重的拟合与分析、房地产销售波动率回归分析等，实时发现市场发展趋势的变化，以做到及时调整营销策略，优化销售模式。</p><p><img src="/img/posts/RealEstateBISolutionCaseShare-3.jpg" alt="RealEstateBISolutionCaseShare-3"></p><p>原文链接：<a href="http://www.jianshu.com/p/30f32bf773d1">http://www.jianshu.com/p/30f32bf773d1</a></p>]]></content>
      
      
      <categories>
          
          <category> BI墨客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 转载 </tag>
            
            <tag> BI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【SQL SERVER】OPENQUERY远程函数引用及参数传值问题</title>
      <link href="2016/05/27/SQL-SERVER-RPC-FUNCTION-CALL/"/>
      <url>2016/05/27/SQL-SERVER-RPC-FUNCTION-CALL/</url>
      
        <content type="html"><![CDATA[<h3 id="模拟数据"><a href="#模拟数据" class="headerlink" title="模拟数据"></a>模拟数据</h3><p>两台服务器，都安装有数据库，服务器A,服务器B。</p><p>服务器B的数据库上配置有指向服务器A的数据库的链接数据库。</p><p>服务器A的数据库Test里创建以下两个函数，一个函数返回一个表值，一个返回单个字符串值。</p><span id="more"></span><pre><code>CREATE FUNCTION FUN_ReturnTable(    @para VARCHAR(50))RETURNS @table TABLE(    col VARCHAR(50))ASBEGIN    INSERT INTO @table            ( col )    VALUES  ( &#39;This is Test.&#39;),            ( @para )RETURNEND GO CREATE FUNCTION FUN_ReturnValue (@para VARCHAR(50)) RETURNS varchar(50)ASBEGIN        RETURN (&#39;Input para is &#39;+@para)END GO</code></pre><h3 id="调用测试"><a href="#调用测试" class="headerlink" title="调用测试"></a>调用测试</h3><p>服务器A上的数据库可以执行</p><pre><code>SELECT * FROM  Test.dbo.FUN_ReturnTable(&#39;haha&#39;) --返回表SELECT dbo.FUN_ReturnValue(&#39;haha&#39;) --返回单个值</code></pre><p>然后在服务器B上的数据库运行以下语句调用（假设配置的链接服务器为LS）</p><pre><code>SELECT LS.Test.dbo.FUN_ReturnValue(&#39;haha&#39;)</code></pre><p>于是就报错了:”不允许远程函数引用 ‘LS.Test.dbo.FUN_ReturnValue’，找不到列名 ‘LS’，或者列名不明确。”</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>可以看到这样直接通过链接数据库调用是不行的。需要换个方式，改用OPENQUERY。</p><pre><code>DECLARE @a VARCHAR(50)set @a = (select * from openquery(LS,&#39;select Test.dbo.FUN_ReturnValue(&#39;&#39;haha&#39;&#39;)&#39;))select @a --返回的字符串值SELECT * from openquery(LS,&#39;select * from Test.dbo.FUN_ReturnTable(&#39;&#39;haha&#39;&#39;)&#39;) --返回的表值</code></pre><p>以上的调用，函数的参数值是写死的，如果传一个动态参数，改成下面这样：</p><pre><code>DECLARE @a VARCHAR(50)DECLARE @b VARCHAR(50)set @a = (select * from openquery(LS,&#39;select Test.dbo.FUN_ReturnValue(&#39;&#39;&#39;+@b+&#39;&#39;&#39;)&#39;))select @a</code></pre><p>是无法运行的，提示错误：</p><p><img src="/img/posts/SQL-SERVER-RPC-FUNCTION-CALL-1.jpg" alt="SQL-SERVER-RPC-FUNCTION-CALL-1"></p><p>这个问题我就费解了，OPENQUERY的第二个参数不能直接带有动态变量，不知道啥原因，官网上也备注说明不可以含有参数。</p><p>解决方法是换种方式调用，改用EXEC的方法。</p><pre><code>DECLARE @b VARCHAR(50)DECLARE @sql varchar(500)set @b = &#39;haha&#39;;set @sql = &#39;select a from openquery(LS,&#39;&#39;select Test.dbo.FUN_ReturnValue(&#39;&#39;&#39;&#39;&#39;+@b+&#39;&#39;&#39;&#39;&#39;) AS a&#39;&#39;)&#39;;exec(@sql);</code></pre><p>以上语句是可以执行的，输出“Input para is haha”单行的字符串。那么现在问题来了，我想将现在输出的结果赋值给一个本地变量@a，所以想当然就这样写</p><pre><code>DECLARE @a VARCHAR(50)DECLARE @b VARCHAR(50)DECLARE @sql varchar(500)set @b = &#39;haha&#39;;set @sql = &#39;select a from openquery(LS,&#39;&#39;select Test.dbo.FUN_ReturnValue(&#39;&#39;&#39;&#39;&#39;+@b+&#39;&#39;&#39;&#39;&#39;) AS a&#39;&#39;)&#39;;set @a = exec(@sql); --是错误的，语法错误set @a = (select * from exec(@sql)); --是错误的，语法错误select @a;</code></pre><p>以上给@a变量赋值方法都不行。于是将@a改为表变量。</p><pre><code>DECLARE @b VARCHAR(50)DECLARE @sql varchar(500)DECLARE @a table( name varchar(50))set @b = &#39;haha&#39;;set @sql = &#39;select a from openquery(LS,&#39;&#39;select Test.dbo.FUN_ReturnValue(&#39;&#39;&#39;&#39;&#39;+@b+&#39;&#39;&#39;&#39;&#39;) AS a&#39;&#39;)&#39;;insert into @a exec(@sql); --将结果插入表里select name from @a</code></pre><p>这样结果就保存到表变量了。调用返回表值的函数也是可以的。</p><pre><code>DECLARE @b VARCHAR(50)DECLARE @sql varchar(500)DECLARE @a table( name varchar(50))set @b = &#39;haha&#39;;set @sql = &#39;select * from openquery(LS,&#39;&#39;select * from Test.dbo.FUN_ReturnTable(&#39;&#39;&#39;&#39;&#39;+@b+&#39;&#39;&#39;&#39;&#39;) AS a&#39;&#39;)&#39;; --调用表值函数。insert into @a exec(@sql);select name from @a</code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>1.SQL SERVER通过链接服务器是可以调用远程数据库的存储过程的。<ul><li>通过 <code>exec LS.Test.dbo.testSP &#39;haha&#39;</code> 的方式，其中LS是链接服务器，Test是数据库名称。但是这种方式需要将链接服务器配置为用户RPC。</li><li>通过 <code>select * from openquery(LS,&#39;exec Test.dbo.testSP &#39;&#39;haha&#39;&#39; &#39;)</code>的方式,其中LS是链接服务器，Test是数据库名称。</li></ul></li><li>2.SQL SERVER通过链接服务器远程调用函数不能通过 <code>LS.Test.dbo.testFun(&#39;haha&#39;)</code>的方式直接调用，改用OPENQUERY的方式。</li><li>3.OPENQUERY的第二个参数不能含有参数变量。如果需要传递参数，改成拼接字符串的形式，<code>EXEC</code> 命令执行字符串。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 码路刺客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> 原创 </tag>
            
            <tag> SQL Server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【SQL SERVER】链接数据库“无法启动分布式事务”的问题及解决</title>
      <link href="2016/05/26/Linked-Server-RPC/"/>
      <url>2016/05/26/Linked-Server-RPC/</url>
      
        <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>当在SQL SERVER数据库里配置了Linded Server(链接数据库)时，就有可能有通过链接数据库调用其他服务器上的数据库的存储过程的需求，可是在还没有进行配置之前就会报出这样的错误：“该伙伴事务管理器已经禁止了它对远程/网络事务的支持，无法启动分布式事务”、“未将服务器配置为RPC”。在网上搜索了下，结合自己的情况整理了一下。</p><span id="more"></span><p><img src="/img/posts/Linked-Server-RPC-8.jpg" alt="Linked-Server-RPC-8"></p><p><img src="/img/posts/Linked-Server-RPC-9.jpg" alt="Linked-Server-RPC-9"></p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p><strong>数据库服务器属性设置</strong></p><p>在本地数据库与远程数据库都对数据库服务器属性进行设置，勾选【需要将分布式事务用户服务器到服务器的通信】。</p><p><img src="/img/posts/Linked-Server-RPC-1.jpg" alt="Linked-Server-RPC-1"></p><p><strong>启动MSDTC服务</strong></p><p>在本地数据库的服务器与远程数据库的服务器上开启如下服务：<br>MSDTC服务提供分布式事务服务，如果要在数据库中使用分布式事务，必须在参与的双方服务器启动MSDTC（Distributed Transaction Coordinator）服务。</p><p><strong>打开135端口</strong></p><p>在本地数据库的服务器与远程数据库的服务器上开启此端口。<br>MSDTC服务依赖于RPC（Remote Procedure Call (RPC)）服务,RPC使用135端口，保证RPC服务启动，如果服务器有防火墙，保证135端口不被防火墙挡住。（这里我在Win Server 2008 r2里开启进出站端口规则，没起作用，就直接关掉防火墙然后解决了）</p><p><strong>MSDTC设置</strong></p><p>在本地数据库的服务器与远程数据库的服务器上设置如下：<br>打开“控制面板——管理工具――组件服务”，以此打开“组件服务――计算机——我的电脑——本地DTC”，右键属性，切换到【安全】选项卡，设置下面这些东东。</p><p><img src="/img/posts/Linked-Server-RPC-2.jpg" alt="Linked-Server-RPC-2"></p><p><img src="/img/posts/Linked-Server-RPC-3.jpg" alt="Linked-Server-RPC-3"></p><p><strong>配置RPC</strong></p><p>如果报“未将服务器配置为RPC”的错误，需要右键配置的链接服务器，打开属性窗口，切换到【服务器选项】选项卡，将RPC,RPC Out更改为true.</p><p><img src="/img/posts/Linked-Server-RPC-4.jpg" alt="Linked-Server-RPC-4"></p><p>这里我在改的时候报出这样的错误：“不允许对系统目录进行即系更新”。于是乎在网上搜罗解决方法，但是看着都挺麻烦，我的方法挺简单。</p><p><img src="/img/posts/Linked-Server-RPC-5.jpg" alt="Linked-Server-RPC-5"></p><p>右键链接数据库，【编写链接服务器脚本为】，【CREATE到】，【新查询编辑器窗口】，在出现的脚本中找到这两句，把false改成true，然后运行这两句命令就可以了。</p><p><img src="/img/posts/Linked-Server-RPC-6.jpg" alt="Linked-Server-RPC-6"></p><p><img src="/img/posts/Linked-Server-RPC-7.jpg" alt="Linked-Server-RPC-7"></p>]]></content>
      
      
      <categories>
          
          <category> 码路刺客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> 原创 </tag>
            
            <tag> SQL Server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>令人惊叹的30个自然奇观</title>
      <link href="2016/05/25/30-Astonishing-Nature-Places-on-Earth/"/>
      <url>2016/05/25/30-Astonishing-Nature-Places-on-Earth/</url>
      
        <content type="html"><![CDATA[<p>经常在旅行的时候，你会发现大自然鬼斧神工下的美景，尽管有时候都让人怀疑那是真的，但我们美丽的星球就真的让奇迹发生了。今天，我们搜集了30个地球上不可思议的景观分享给大家。 </p><h5 id="Pink-Lake-Hillier-Australia"><a href="#Pink-Lake-Hillier-Australia" class="headerlink" title="Pink Lake Hillier, Australia"></a><a href="https://en.wikipedia.org/wiki/Lake_Hillier">Pink Lake Hillier, Australia</a></h5><p><img src="/img/posts/30-Astonishing-Nature-Places-on-Earth-1.jpg" alt="30-Astonishing-Nature-Places-on-Earth-1"></p><span id="more"></span><h5 id="Giant-crystal-cave-in-Nacia-Mexico"><a href="#Giant-crystal-cave-in-Nacia-Mexico" class="headerlink" title="Giant crystal cave in Nacia, Mexico"></a><a href="http://en.wikipedia.org/wiki/Cave_of_the_Crystals">Giant crystal cave in Nacia, Mexico</a></h5><p><img src="/img/posts/30-Astonishing-Nature-Places-on-Earth-2.jpg" alt="30-Astonishing-Nature-Places-on-Earth-2"></p><h5 id="Shimmering-shores-of-Vaadhoo-Maldives"><a href="#Shimmering-shores-of-Vaadhoo-Maldives" class="headerlink" title="Shimmering shores of Vaadhoo, Maldives"></a>Shimmering shores of Vaadhoo, Maldives</h5><p><img src="/img/posts/30-Astonishing-Nature-Places-on-Earth-3.jpg" alt="30-Astonishing-Nature-Places-on-Earth-3"></p><h5 id="Giant-clouds-over-Beijing"><a href="#Giant-clouds-over-Beijing" class="headerlink" title="Giant clouds over Beijing"></a>Giant clouds over Beijing</h5><p>这个也算啊？</p><p><img src="/img/posts/30-Astonishing-Nature-Places-on-Earth-4.jpg" alt="30-Astonishing-Nature-Places-on-Earth-4"></p><p><img src="/img/posts/30-Astonishing-Nature-Places-on-Earth-5.jpg" alt="30-Astonishing-Nature-Places-on-Earth-5"></p><h5 id="Natural-salt-water-fountain-off-the-coast-of-Oregon"><a href="#Natural-salt-water-fountain-off-the-coast-of-Oregon" class="headerlink" title="Natural salt water fountain off the coast of Oregon"></a><a href="http://en.wikipedia.org/wiki/Cape_Perpetua">Natural salt water fountain off the coast of Oregon</a></h5><p><img src="/img/posts/30-Astonishing-Nature-Places-on-Earth-6.jpg" alt="30-Astonishing-Nature-Places-on-Earth-6"></p><h5 id="Reflective-salt-flats-in-Bolivia"><a href="#Reflective-salt-flats-in-Bolivia" class="headerlink" title="Reflective salt flats in Bolivia"></a><a href="http://en.wikipedia.org/wiki/Salar_de_Uyuni">Reflective salt flats in Bolivia</a></h5><p><img src="/img/posts/30-Astonishing-Nature-Places-on-Earth-7.jpg" alt="30-Astonishing-Nature-Places-on-Earth-7"></p><h5 id="National-Park-Hitachi-Japan-National-Park-Hitachi-Japan"><a href="#National-Park-Hitachi-Japan-National-Park-Hitachi-Japan" class="headerlink" title="[National Park Hitachi, Japan](National Park Hitachi, Japan)"></a>[National Park Hitachi, Japan](National Park Hitachi, Japan)</h5><p><img src="/img/posts/30-Astonishing-Nature-Places-on-Earth-8.jpg" alt="30-Astonishing-Nature-Places-on-Earth-8"></p><h5 id="Mount-Roraima-joint-Venezuela-Guyana-and-Brazil"><a href="#Mount-Roraima-joint-Venezuela-Guyana-and-Brazil" class="headerlink" title="Mount Roraima (joint Venezuela, Guyana and Brazil)"></a><a href="http://en.wikipedia.org/wiki/Mount_Roraima">Mount Roraima (joint Venezuela, Guyana and Brazil)</a></h5><p><img src="/img/posts/30-Astonishing-Nature-Places-on-Earth-9.jpg" alt="30-Astonishing-Nature-Places-on-Earth-9"></p><h5 id="Frozen-air-bubbles-in-Abraham-Lake"><a href="#Frozen-air-bubbles-in-Abraham-Lake" class="headerlink" title="Frozen air bubbles in Abraham Lake"></a><a href="http://en.wikipedia.org/wiki/Abraham_Lake">Frozen air bubbles in Abraham Lake</a></h5><p><img src="/img/posts/30-Astonishing-Nature-Places-on-Earth-10.jpg" alt="30-Astonishing-Nature-Places-on-Earth-10"></p><h5 id="Beautiful-sandstone-formations-in-Arizona"><a href="#Beautiful-sandstone-formations-in-Arizona" class="headerlink" title="Beautiful sandstone formations in Arizona"></a>Beautiful sandstone formations in Arizona</h5><p><img src="/img/posts/30-Astonishing-Nature-Places-on-Earth-11.jpg" alt="30-Astonishing-Nature-Places-on-Earth-11"></p><h5 id="Underground-natural-springs-in-Mexico"><a href="#Underground-natural-springs-in-Mexico" class="headerlink" title="Underground natural springs in Mexico"></a>Underground natural springs in Mexico</h5><p><img src="/img/posts/30-Astonishing-Nature-Places-on-Earth-12.jpg" alt="30-Astonishing-Nature-Places-on-Earth-12"></p><h5 id="Isle-of-Skye-Hebrides-Scotland"><a href="#Isle-of-Skye-Hebrides-Scotland" class="headerlink" title="Isle of Skye (Hebrides, Scotland)"></a><a href="http://en.wikipedia.org/wiki/Skye">Isle of Skye (Hebrides, Scotland)</a></h5><p><img src="/img/posts/30-Astonishing-Nature-Places-on-Earth-13.jpg" alt="30-Astonishing-Nature-Places-on-Earth-13"></p><h5 id="Rainbow-Eucalyptus-trees-in-Kailua-Hawaii"><a href="#Rainbow-Eucalyptus-trees-in-Kailua-Hawaii" class="headerlink" title="Rainbow Eucalyptus trees in Kailua, Hawaii"></a>Rainbow Eucalyptus trees in Kailua, Hawaii</h5><p><img src="/img/posts/30-Astonishing-Nature-Places-on-Earth-14.jpg" alt="30-Astonishing-Nature-Places-on-Earth-14"></p><p><img src="/img/posts/30-Astonishing-Nature-Places-on-Earth-15.jpg" alt="30-Astonishing-Nature-Places-on-Earth-15"></p><h5 id="The-Blood-Falls-in-Antarctica"><a href="#The-Blood-Falls-in-Antarctica" class="headerlink" title="The Blood Falls in Antarctica"></a><a href="http://en.wikipedia.org/wiki/Blood_Falls">The Blood Falls in Antarctica</a></h5><p><img src="/img/posts/30-Astonishing-Nature-Places-on-Earth-16.jpg" alt="30-Astonishing-Nature-Places-on-Earth-16"></p><h5 id="Tunnel-of-Love-Ukraine"><a href="#Tunnel-of-Love-Ukraine" class="headerlink" title="Tunnel of Love, Ukraine"></a><a href="http://en.wikipedia.org/wiki/Klevan">Tunnel of Love, Ukraine</a></h5><p><img src="/img/posts/30-Astonishing-Nature-Places-on-Earth-17.jpg" alt="30-Astonishing-Nature-Places-on-Earth-17"></p><h5 id="White-beaches-harbor-Australia"><a href="#White-beaches-harbor-Australia" class="headerlink" title="White beaches harbor, Australia"></a>White beaches harbor, Australia</h5><p><img src="/img/posts/30-Astonishing-Nature-Places-on-Earth-18.jpg" alt="30-Astonishing-Nature-Places-on-Earth-18"></p><h5 id="The-underwater-forest-of-Lake-Kaindy"><a href="#The-underwater-forest-of-Lake-Kaindy" class="headerlink" title="The underwater forest of Lake Kaindy"></a><a href="http://en.wikipedia.org/wiki/Lake_Kaindy">The underwater forest of Lake Kaindy</a></h5><p><img src="/img/posts/30-Astonishing-Nature-Places-on-Earth-19.jpg" alt="30-Astonishing-Nature-Places-on-Earth-19"></p><p><img src="/img/posts/30-Astonishing-Nature-Places-on-Earth-20.jpg" alt="30-Astonishing-Nature-Places-on-Earth-20"></p><h5 id="Volcanic-Lightning-in-Kyushu"><a href="#Volcanic-Lightning-in-Kyushu" class="headerlink" title="Volcanic Lightning in Kyushu"></a>Volcanic Lightning in Kyushu</h5><p><img src="/img/posts/30-Astonishing-Nature-Places-on-Earth-21.jpg" alt="30-Astonishing-Nature-Places-on-Earth-21"></p><p><img src="/img/posts/30-Astonishing-Nature-Places-on-Earth-22.jpg" alt="30-Astonishing-Nature-Places-on-Earth-22"></p><h5 id="The-cave-of-the-mountain-river-in-the-province-of-Quang-Binh-Vietnam"><a href="#The-cave-of-the-mountain-river-in-the-province-of-Quang-Binh-Vietnam" class="headerlink" title="The cave of the mountain river in the province of Quang Binh, Vietnam"></a><a href="http://en.wikipedia.org/wiki/S%C6%A1n_%C4%90o%C3%B2ng_Cave">The cave of the mountain river in the province of Quang Binh, Vietnam</a></h5><p><img src="/img/posts/30-Astonishing-Nature-Places-on-Earth-23.jpg" alt="30-Astonishing-Nature-Places-on-Earth-23"></p><h5 id="Great-Blue-Hole-Belize-Central-America"><a href="#Great-Blue-Hole-Belize-Central-America" class="headerlink" title="Great Blue Hole, Belize (Central America)"></a><a href="http://en.wikipedia.org/wiki/Great_Blue_Hole">Great Blue Hole, Belize (Central America)</a></h5><p><img src="/img/posts/30-Astonishing-Nature-Places-on-Earth-24.jpg" alt="30-Astonishing-Nature-Places-on-Earth-24"></p><h5 id="Colorful-Chinese-mountains-Zhangye-Danxia"><a href="#Colorful-Chinese-mountains-Zhangye-Danxia" class="headerlink" title="Colorful Chinese mountains, Zhangye Danxia"></a>Colorful Chinese mountains, Zhangye Danxia</h5><p><img src="/img/posts/30-Astonishing-Nature-Places-on-Earth-30.jpg" alt="30-Astonishing-Nature-Places-on-Earth-30"></p><h5 id="Light-pillars-over-Moscow"><a href="#Light-pillars-over-Moscow" class="headerlink" title="Light pillars over Moscow"></a>Light pillars over Moscow</h5><p><img src="/img/posts/30-Astonishing-Nature-Places-on-Earth-25.jpg" alt="30-Astonishing-Nature-Places-on-Earth-25"></p><h5 id="Fingal’s-Cave-Isle-of-Staffa-Scotland"><a href="#Fingal’s-Cave-Isle-of-Staffa-Scotland" class="headerlink" title="Fingal’s Cave, Isle of Staffa, Scotland"></a><a href="http://en.wikipedia.org/wiki/Fingal%27s_Cave">Fingal’s Cave, Isle of Staffa, Scotland</a></h5><p><img src="/img/posts/30-Astonishing-Nature-Places-on-Earth-26.jpg" alt="30-Astonishing-Nature-Places-on-Earth-26"></p><h5 id="Mendenhall-Ice-Caves-in-Juneau-Alaska-USA"><a href="#Mendenhall-Ice-Caves-in-Juneau-Alaska-USA" class="headerlink" title="Mendenhall Ice Caves in Juneau, Alaska (USA)"></a><a href="http://en.wikipedia.org/wiki/Mendenhall_Glacier">Mendenhall Ice Caves in Juneau, Alaska (USA)</a></h5><p><img src="/img/posts/30-Astonishing-Nature-Places-on-Earth-27.jpg" alt="30-Astonishing-Nature-Places-on-Earth-27"></p><h5 id="Spiderweb-cocooned-trees-in-Pakistan"><a href="#Spiderweb-cocooned-trees-in-Pakistan" class="headerlink" title="Spiderweb cocooned trees in Pakistan"></a>Spiderweb cocooned trees in Pakistan</h5><p><img src="/img/posts/30-Astonishing-Nature-Places-on-Earth-28.jpg" alt="30-Astonishing-Nature-Places-on-Earth-28"></p><p><img src="/img/posts/30-Astonishing-Nature-Places-on-Earth-29.jpg" alt="30-Astonishing-Nature-Places-on-Earth-29"></p>]]></content>
      
      
      <categories>
          
          <category> 生活点滴 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 视觉图片 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS插件:类似PPT翻页过渡动画效果</title>
      <link href="2016/05/22/JS-AddIn-PPTSlideEffect/"/>
      <url>2016/05/22/JS-AddIn-PPTSlideEffect/</url>
      
        <content type="html"><![CDATA[<p>bespoke-fx是一款类似PPT演示稿效果的JavaScript幻灯片插件。该幻灯片可以使用键盘的左右方向键来前后切换，它内置了23种CSS3动画过渡效果，非常实用。</p><p><img src="/img/posts/JS-AddIn-PPTSlideEffect.jpg" alt="JS-AddIn-PPTSlideEffect"></p><span id="more"></span><p><a href="http://www.htmleaf.com/Demo/201605203497.html">查看DEMO</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>可以通过 npm 或 bower 来安装在该插件。</p><pre><code>$ bower install bespoke-fx$ npm install bespoke-fx    </code></pre><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>该插件基于bespoke.js插件，使用时先要引入bespoke.js文件，再引入bespoke-fx.js文件。另外还需要引入main.css和animations.css样式文件。</p><pre><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;path/to/main.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;path/to/animations.css&quot;&gt;&lt;script src=&quot;js/bespoke.js&quot;&gt;&lt;/script&gt;&lt;script src=&quot;js/bespoke-fx.js&quot;&gt;&lt;/script&gt;</code></pre><p>该幻灯片插件的基本HTML结构如下：</p><pre><code>&lt;article&gt;  &lt;section&gt;Slide 1&lt;/section&gt;  &lt;section&gt;Slide 2&lt;/section&gt;  &lt;section&gt;Slide 3&lt;/section&gt;&lt;/article&gt;              </code></pre><p><strong>初始化插件</strong></p><p>可以使用下面的方法来初始化该幻灯片插件。</p><pre><code>bespoke.horizontal.from(&#39;article&#39;, &#123;  fx: true&#125;);</code></pre><p>或者传入配置参数：</p><pre><code>bespoke.vertical.from(&#39;article&#39;, &#123;  fx: &#123;    direction: &quot;vertical&quot;,    transition: &quot;cube&quot;,    reverse: true  &#125;&#125;);</code></pre><h3 id="配置参数"><a href="#配置参数" class="headerlink" title="配置参数"></a>配置参数</h3><p>bespoke-fx幻灯片插件的配置参数如下：</p><ul><li>direction：动画的方向，可以是：horizontal 或 vertical。</li><li>transition：指定过渡动画的类型，参考下面的多行过渡类型描述。</li><li>reverse：设置为true强迫执行反向动画。</li></ul><p><strong>过渡动画</strong></p><p>可用的CSS3动画过渡动画如下：</p><ul><li>move</li><li>move-fade</li><li>move-both-fade</li><li>move-different-easing</li><li>scale-down-out-move-in</li><li>move-out-scale-up</li><li>scale-up-up</li><li>scale-down-up</li><li>glue</li><li>flip</li><li>fall</li><li>newspaper</li><li>push</li><li>pull</li><li>fold</li><li>unfold</li><li>room</li><li>cube</li><li>carousel</li><li>sides</li><li>slide</li><li><em>设置单独幻灯片的参数</em>*</li></ul><p>你可以通过<code>data-bespoke-transition</code>、<code>data-bespoke-direction</code>和<code>data-bespoke-reverse</code>来为某个幻灯片slide设置单独的参数。例如：</p><pre><code>&lt;section data-bespoke-fx-transition=&quot;cube&quot;  data-bespoke-fx-direction=&quot;vertical&quot;  data-bespoke-fx-reverse=&quot;true&quot;&gt;Slide&lt;/section&gt;</code></pre><p>bespoke-fx幻灯片插件的github地址为：<a href="https://github.com/ebow/bespoke-fx">https://github.com/ebow/bespoke-fx</a>.</p><p>转自 JQuery之家<br><a href="http://www.htmleaf.com/jQuery/Slideshow-Scroller/201605203496.html">http://www.htmleaf.com/jQuery/Slideshow-Scroller/201605203496.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 码路刺客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 转载 </tag>
            
            <tag> jQuery </tag>
            
            <tag> 前端 </tag>
            
            <tag> CSS </tag>
            
            <tag> JavaScript </tag>
            
            <tag> 设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【SSIS】中Precedence Constraint 优先约束的使用</title>
      <link href="2016/05/21/SSIS-Precedence-Constraint/"/>
      <url>2016/05/21/SSIS-Precedence-Constraint/</url>
      
        <content type="html"><![CDATA[<h3 id="开篇介绍"><a href="#开篇介绍" class="headerlink" title="开篇介绍"></a>开篇介绍</h3><p>Precedence Constraint 优先约束 - 在控制流中使用，用来链接控制流中各种 Task，Container，并且要求满足一定的条件才能执行相关联的 Task 或者 Container。 比如下图中，第一个 Execute SQL Task 叫做 Precedence-Executable 优先可执行任务，而Script Task 由于在关联箭头的下游，所以它叫做 Constrained-Executable 受约束可执行任务。关联箭头的上游任务自然先执行，关联箭头下方的这种受约束可执行任务是否能够被执行则要取决于 Precedence Constraint 的配置了。</p><span id="more"></span><p><img src="/img/posts/SSIS-Precedence-Constraint-1.png" alt="SSIS-Precedence-Constraint-1"></p><p>EST_SELECT_VALUE 中的配置 </p><p><img src="/img/posts/SSIS-Precedence-Constraint-2.png" alt="SSIS-Precedence-Constraint-2"></p><p>查询的结果赋值给一个字符串类型的变量，Script Task 就是显示一下这个变量的值而已。</p><p><img src="/img/posts/SSIS-Precedence-Constraint-3.png" alt="SSIS-Precedence-Constraint-3"></p><p>双击绿色的线之后默认可以看到下面的这个配置，其中包括了约束与多约束的选项和配置。</p><ul><li>1.Evlaution Operation = Constraint  按上游 Task 执行结果决定是否执行下游 Script Task 任务（按执行结果约束）</li><li>Value = Success  上游任务 EST_SELECT_VALUE 执行成功后才执行下游 Script Task </li></ul><p><img src="/img/posts/SSIS-Precedence-Constraint-4.png" alt="SSIS-Precedence-Constraint-4"></p><p>EST_SELECT_VALUE 执行成功后自动执行 SCE_SHOW_RESULT</p><p><img src="/img/posts/SSIS-Precedence-Constraint-5.png" alt="SSIS-Precedence-Constraint-5"></p><p>**Value = Failure上游任务 EST_SELECT_VALUE 执行失败后才执行下游 Script Task **</p><p>新建一个 SCR_SHOW_ERROR Script Task，里面不做任何操作。</p><p><img src="/img/posts/SSIS-Precedence-Constraint-6.png" alt="SSIS-Precedence-Constraint-6"></p><p>修改 EST_SELECT_VALUE 与 SCR_SHOW_ERROR 之间的连接线，改成 Failure。</p><p><img src="/img/posts/SSIS-Precedence-Constraint-7.png" alt="SSIS-Precedence-Constraint-7"></p><p>将 EST_SELECT_VALUE 中的 SQL 语句改成 SELECT 1/0 AS A，这样会发生一个除数为零的错误，但是 SCR_SHOW_ERROR 是可以被执行到的。</p><p><img src="/img/posts/SSIS-Precedence-Constraint-8.png" alt="SSIS-Precedence-Constraint-8"></p><p>Value = Complete 上游任务 EST_SELECT_VALUE 无论执行成功或者失败，只要执行完毕就执行下游 Script Task </p><p>新建一个 Script Task - SCR_SHOW_COMPLETE，里面不做任何操作。</p><p><img src="/img/posts/SSIS-Precedence-Constraint-9.png" alt="SSIS-Precedence-Constraint-9"></p><p>修改连接线为 Complete。</p><p><img src="/img/posts/SSIS-Precedence-Constraint-10.png" alt="SSIS-Precedence-Constraint-10"></p><p>当 SQL 语句为 SELECT 1/0 AS A  EST_SELECT_VALUE 执行失败时，它被执行到了。</p><p><img src="/img/posts/SSIS-Precedence-Constraint-11.png" alt="SSIS-Precedence-Constraint-11"></p><p>当 SQL 语句为 SELECT 1 AS A  EST_SELECT_VALUE 执行成功时，它也被执行到了。</p><p><img src="/img/posts/SSIS-Precedence-Constraint-12.png" alt="SSIS-Precedence-Constraint-12"></p><p><strong>Evlaution Operation = Expression  按表达式约束，与上游任务执行成功与否的结果无关</strong></p><p>添加两个 Script Task - SCR_SHOW_EXP_EMPTY 和 SCR_SHOW_EXP_VALUE。</p><p><img src="/img/posts/SSIS-Precedence-Constraint-13.png" alt="SSIS-Precedence-Constraint-13"></p><p>SCR_SHOW_EXP_EMPTY 的约束配置 -</p><p><img src="/img/posts/SSIS-Precedence-Constraint-14.png" alt="SSIS-Precedence-Constraint-14"></p><p>SCR_SHOW_EXP_VALUE 中的约束配置 -</p><p><img src="/img/posts/SSIS-Precedence-Constraint-15.png" alt="SSIS-Precedence-Constraint-15"></p><p>当 EST_SELECT_VALUE 中的 SQL 为 SELECT 1 AS A 时，PV_RESULT 的值为1，且 EST_SELECT_VALUE 执行成功！</p><p><img src="/img/posts/SSIS-Precedence-Constraint-16.png" alt="SSIS-Precedence-Constraint-16"></p><p>当 EST_SELECT_VALUE 中的 SQL 为 SELECT 1/0 AS A 时，PV_RESULT 的值不能从 EST_SELECT_VALUE 中正常接受，使用默认值 “”，且 EST_SELECT_VALUE 执行失败！</p><p><img src="/img/posts/SSIS-Precedence-Constraint-17.png" alt="SSIS-Precedence-Constraint-17"></p><p>可见 SCR_SHOW_RESULT，SCR_SHOW_ERROR，SCR_SHOW_COMPLETE 是否执行只与 EST_SELECT_VALUE 执行的结果有关( Success，Failure，Complete)，而与表达式无关。</p><p>而 SCR_SHOW_EXP_EMPTY 和 SCR_SHOW_EXP_VALUE 的执行只与表达式相关，而与 EST_SELECT_VALUE 的执行结果无关。</p><h3 id="执行结果-AND-表达式-和-执行结果-OR-表达式"><a href="#执行结果-AND-表达式-和-执行结果-OR-表达式" class="headerlink" title="执行结果 AND 表达式 和 执行结果 OR 表达式"></a>执行结果 AND 表达式 和 执行结果 OR 表达式</h3><p>新添加四个 Script Task</p><p><img src="/img/posts/SSIS-Precedence-Constraint-18.png" alt="SSIS-Precedence-Constraint-18"></p><p>SCR_SHOW_SUCCESS_&amp;_EMPTY 中的配置要求 Expression 与 Constraint 同时成立。</p><p><img src="/img/posts/SSIS-Precedence-Constraint-19.png" alt="SSIS-Precedence-Constraint-19"></p><p>SCR_SHOW_SUCCESS_OR_EMPTY 中的配置要求 Expression 与 Constraint 有一个成立。</p><p><img src="/img/posts/SSIS-Precedence-Constraint-20.png" alt="SSIS-Precedence-Constraint-20"></p><p>SCR_SHOW_FALIURE_&amp;_VALUE 中的配置要求 Expression 与 Constraint 同时成立。</p><p><img src="/img/posts/SSIS-Precedence-Constraint-21.png" alt="SSIS-Precedence-Constraint-21"></p><p>SCR_SHOW_FALIURE_OR_VALUE 中的配置要求 Expression 与 Constraint 有一个成立。</p><p><img src="/img/posts/SSIS-Precedence-Constraint-22.png" alt="SSIS-Precedence-Constraint-22"></p><p>当 EST_SELECT_VALUE 中的 SQL 为 SELECT 1/0 AS A 时，执行状态 = Failure，PV_RESULT 为 EMPTY 空字符串。</p><p>所以 SRC_SHOW_SUCCESS_OR_EMPTY 满足 PV_RESULT ==”” 条件，而 SCR_SHOW_FAILURE_OR_VALUE 满足 执行结果 = Failure。</p><p><img src="/img/posts/SSIS-Precedence-Constraint-23.png" alt="SSIS-Precedence-Constraint-23"></p><p>当 EST_SELECT_VALUE 中的 SQL 为 SELECT 1 AS A 时，执行状态 = Success，PV_RESULT 为 1。</p><p>所以 SRC_SHOW_SUCCESS_OR_EMPTY 满足执行状态 = SUCCESS 条件，而 SCR_SHOW_FAILURE_OR_VALUE 满足 PV_RESULT !=””。</p><p><img src="/img/posts/SSIS-Precedence-Constraint-24.png" alt="SSIS-Precedence-Constraint-24"></p><h3 id="多约束的情况"><a href="#多约束的情况" class="headerlink" title="多约束的情况"></a>多约束的情况</h3><p>SCR_ALL_TRUE 受 EST_SELECT_VALUE_1 和 EST_SELECT_VALUE_2 共同影响。</p><p><img src="/img/posts/SSIS-Precedence-Constraint-25.png" alt="SSIS-Precedence-Constraint-25"></p><p>默认情况下 SCR_ALL_TRUE 的两个优先约束都是如下图所示，这种多约束的情况要表示的意思是。从 EST_SELECT_VALUE_1 到 SCR_ALL_TRUE 只有一个结果就是 True 或者 False，这个 True 或者 False 是由 EST_SELECT_VALUE_1 中的 Constraint/Expression/Constraint and Expression/Constraint or Expression 最终结果得到的 - True 或 False。同样 EST_SELECT_VALUE_2 也能得到一个最终的计算结果 - True 或 False。</p><p>也就是说有多个条件约束对 SCR_ALL_TRUE 起约束作用，那么如何实现两种约束共同作用于 SCR_ALL_TRUE 呢？就是下面的 Multiple Constraints 中的 Logical AND 或者 Logical OR 选项来决定的了。</p><p><img src="/img/posts/SSIS-Precedence-Constraint-26.png" alt="SSIS-Precedence-Constraint-26"></p><p><strong>测试条件 1</strong></p><ul><li>1.EST_SELECT_VALUE_1 - SQL = SELECT 1 AS A</li><li>2.EST_SELECT_VALUE_2 - SQL = SELECT 1 AS A</li><li>3.Logical AND (虽然是两条约束线，但是更改其中一条，另外一条也会自动更改，也就是说必须同时为 Logical AND 或者 Logical OR)。</li></ul><p><img src="/img/posts/SSIS-Precedence-Constraint-27.png" alt="SSIS-Precedence-Constraint-27"></p><p><strong>测试条件 2</strong></p><ul><li>1.EST_SELECT_VALUE_1 - SQL = SELECT 1 AS A</li><li>2.EST_SELECT_VALUE_2 - SQL = SELECT 1/0 AS A</li><li>3.Logical AND</li></ul><p><img src="/img/posts/SSIS-Precedence-Constraint-28.png" alt="SSIS-Precedence-Constraint-28"></p><p><strong>测试条件 3</strong></p><ul><li>1.EST_SELECT_VALUE_1 - SQL = SELECT 1 AS A</li><li>2.EST_SELECT_VALUE_2 - SQL = SELECT 1/0 AS A</li><li>3.Logical OR</li></ul><p>线条同时变为虚线，执行成功！</p><p><img src="/img/posts/SSIS-Precedence-Constraint-29.png" alt="SSIS-Precedence-Constraint-29"></p><p><strong>测试条件 4</strong></p><ul><li>1.EST_SELECT_VALUE_1 - SQL = SELECT 1 AS A</li><li>2.EST_SELECT_VALUE_2 - SQL = SELECT 1/0   AS A  (Constraint - Completion)</li><li>3.Logical OR</li></ul><p>线条同时变为虚线，执行成功！</p><p><img src="/img/posts/SSIS-Precedence-Constraint-30.png" alt="SSIS-Precedence-Constraint-30"></p><p><strong>测试条件 5</strong></p><ul><li>1.EST_SELECT_VALUE_1 - SQL = SELECT 1 AS A</li><li>2.EST_SELECT_VALUE_2 - SQL = SELECT 1/0   AS A  (Constraint - Completion)</li><li>3.Logical AND  执行成功！</li></ul><p><img src="/img/posts/SSIS-Precedence-Constraint-31.png" alt="SSIS-Precedence-Constraint-31"></p><p><strong>PS 小窍门</strong></p><p>为了更清楚的知道条件表达式和约束的内容，我们可以通过设置约束线的属性让这些信息显示出来，而不是通过人工注释的方式。</p><p>选中 Constraint 线，修改其 ShowAnnotation 属性，将 AsNeeded 修改为 ConstraintOptions。</p><p><img src="/img/posts/SSIS-Precedence-Constraint-32.png" alt="SSIS-Precedence-Constraint-32"></p><p>这样就可以清楚的看到约束中的状态判断和表达式判断了！</p><p><img src="/img/posts/SSIS-Precedence-Constraint-33.png" alt="SSIS-Precedence-Constraint-33"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>以上就是 Precedence Constraint 的全部内容！虽然感觉内容比较多，但是这些配置条件在不同的情形中的确会碰到。比如在文件归档任务中，就有类似于这样的条件约束。一种是只要前面加载数据成功就归档，一种是不管前面数据加载成功不成功只要执行完毕就执行归档操作。</p><p>本文转自 微软BI 之SSIS 系列 - Precedence Constraint 详解优先约束的使用<br><a href="https://ask.hellobi.com/blog/biwork/624">https://ask.hellobi.com/blog/biwork/624</a></p>]]></content>
      
      
      <categories>
          
          <category> BI墨客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 转载 </tag>
            
            <tag> BI </tag>
            
            <tag> SSIS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【SSIS】中Foreach循环容器处理XML数据</title>
      <link href="2016/05/16/SSIS-XMLTask-ProcessArrays/"/>
      <url>2016/05/16/SSIS-XMLTask-ProcessArrays/</url>
      
        <content type="html"><![CDATA[<p>上一篇文章 <a href="/2016/05/16/SSIS-XMLTask-ProcessArrays">在SSIS 中使用 Web Service 以及 解析XML 数据</a> 中介绍了使用SSIS的WebService控件解析XML数据，最后也提到对于返回的XML数含有数组类型的时候需要一点额外的处理。</p><span id="more"></span><h3 id="示例说明"><a href="#示例说明" class="headerlink" title="示例说明"></a>示例说明</h3><p><a href="http://www.webxml.com.cn/WebServices/WeatherWebService.asmx">WeatherWebService</a> 是WebXml.com.cn 天气预报 Web 服务，数据每2.5小时左右自动更新一次，准确可靠。包括 340 多个中国主要城市和 60 多个国外主要城市三日内的天气预报数据。</p><p><img src="/img/posts/SSIS-XMLTask-ProcessArrays-1.jpg" alt="SSIS-XMLTask-ProcessArrays-1.jpg"></p><p>我们可以通过这个服务的接口获得我们需要的城市或地区的天气等信息。本示例将介绍在SSIS中用Web服务任务组件调用天气预报Web服务的接口查询城市的天气等信息，因为返回XML格式的数据含有数组，所以用Foreach循环容器组件的NodeList枚举器来处理，获取我们需要的信息插入到数据库的表。</p><h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><p><strong>HTTP连接</strong></p><p>首先我们建立一个HTTP连接，服务器URL如下：<br><a href="http://www.webxml.com.cn/WebServices/WeatherWebService.asmx?wsdl">http://www.webxml.com.cn/WebServices/WeatherWebService.asmx?wsdl</a></p><p><img src="/img/posts/SSIS-XMLTask-ProcessArrays-2.jpg" alt="SSIS-XMLTask-ProcessArrays-2.jpg"></p><p><strong>Web服务任务</strong></p><p>拖入Web服务任务组件，打开编辑器，在常规面板中，HttpConnection连接选择上一步新建的Http连接，WSDLFile为自己新建的一个wsdl格式的文件，OverwriteWSDLFile为True.点击【下载WSDL】。</p><p><img src="/img/posts/SSIS-XMLTask-ProcessArrays-3.jpg" alt="SSIS-XMLTask-ProcessArrays-3.jpg"></p><p>切换到输入面板，Method中选择getWeatherbyCityName,然后下面出现的变量里填一个城市名称，当然也可以用变量。</p><p><img src="/img/posts/SSIS-XMLTask-ProcessArrays-4.jpg" alt="SSIS-XMLTask-ProcessArrays-4.jpg"></p><p>切换到输出面板，这里，我们将返回的XML格式的数据保存到一个Object类型的变量里。这样Web服务任务组件就设置好了。</p><p><img src="/img/posts/SSIS-XMLTask-ProcessArrays-5.jpg" alt="SSIS-XMLTask-ProcessArrays-5.jpg"></p><p><strong>返回数据说明</strong></p><p>到WeatherWebService网站上查看getWeatherbyCityName的调用说明：</p><blockquote><p>根据城市或地区名称查询获得未来三天内天气情况、现在的天气实况、天气和生活指数<br>调用方法如下：输入参数：theCityName = 城市中文名称(国外城市可用英文)或城市代码(不输入默认为上海市)，如：上海 或 58367，如有城市名称重复请使用城市代码查询(可通过 getSupportCity 或 getSupportDataSet 获得)；返回数据： 一个一维数组 String(22)，共有23个元素。<br>String(0) 到 String(4)：省份，城市，城市代码，城市图片名称，最后更新时间。String(5) 到 String(11)：当天的 气温，概况，风向和风力，天气趋势开始图片名称(以下称：图标一)，天气趋势结束图片名称(以下称：图标二)，现在的天气实况，天气和生活指数。String(12) 到 String(16)：第二天的 气温，概况，风向和风力，图标一，图标二。String(17) 到 String(21)：第三天的 气温，概况，风向和风力，图标一，图标二。String(22) 被查询的城市或地区的介绍</p></blockquote><p>可以看到返回的是一个一维数组。</p><p><img src="/img/posts/SSIS-XMLTask-ProcessArrays-6.jpg" alt="SSIS-XMLTask-ProcessArrays-6.jpg"></p><p><img src="/img/posts/SSIS-XMLTask-ProcessArrays-7.jpg" alt="SSIS-XMLTask-ProcessArrays-7.jpg"></p><p>我们将用循环处理这个一维数组，然后获得我们需要的字段，比如省份，城市，城市代码，最后更新时间，当天气温，概况，风向和风力，现在的天气实况，天气和生活指数。</p><p><strong>Foreach循环容器</strong></p><p>在控制流中拖入Foreach循环容器，双击打开编辑器，在集合面板中，Enumerator选择Foreach NodeList 枚举器，DocumentSourceType为输入的XML数据存储类型，这里选择上一步的保存XML数据的变量，DocumentSource为变量名称。</p><p>EnumerationType选择NodeText,因为这里我们想要的是XML数据中<string>标签中的值，不是节点。OuterXPathStringSourceType是XPath查询的类型，这里我们选DirectInput，然后OuterXPathString是我们查询XML的节点语法，这里填/ArrayOfString/*，它表示查询XML数据中的ArrayOfString这个节点下的所有节点，具体的XPath语法可以参考<a href="http://www.w3school.com.cn/xpath/">XPath 教程</a>。</p><p><img src="/img/posts/SSIS-XMLTask-ProcessArrays-8.jpg" alt="SSIS-XMLTask-ProcessArrays-8.jpg"></p><p>切换到变量映射面板，这里新建一个变量保存每次循环取到<string>节点的时候，节点里的值。这样，Foreach循环容器设置就完成了。</p><p><img src="/img/posts/SSIS-XMLTask-ProcessArrays-9.jpg" alt="SSIS-XMLTask-ProcessArrays-9.jpg"></p><p><strong>信息输出</strong></p><p>为方便演示，我就不连接数据库了，把获取到的信息显示出来就好了。将一个脚本任务拖入到Foreach循环容器里面。双击打开编辑器，脚本类型这里用的VBA，然后新建了连个变量：ID,InfoStr,ID是每次循环的下标值，依次加1，InfoStr保存组合成的信息值。然后在ReadWriteVariables里添加进来。点击【编辑脚本】，打开脚本编辑器，输入处理代码。</p><p><img src="/img/posts/SSIS-XMLTask-ProcessArrays-10.jpg" alt="SSIS-XMLTask-ProcessArrays-10.jpg"></p><p><img src="/img/posts/SSIS-XMLTask-ProcessArrays-11.jpg" alt="SSIS-XMLTask-ProcessArrays-11.jpg"></p><p>最后将组合信息字符串输出，还是拖入一个脚本任务，编辑器设置如下：</p><p><img src="/img/posts/SSIS-XMLTask-ProcessArrays-12.jpg" alt="SSIS-XMLTask-ProcessArrays-12.jpg"></p><p>最后执行包任务，可以看到输出的信息。</p><p><img src="/img/posts/SSIS-XMLTask-ProcessArrays-13.jpg" alt="SSIS-XMLTask-ProcessArrays-13.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> BI墨客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> BI </tag>
            
            <tag> SSIS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【SSIS】使用 Web Service 以及 解析XML 数据</title>
      <link href="2016/05/15/SSIS-Web-Service/"/>
      <url>2016/05/15/SSIS-Web-Service/</url>
      
        <content type="html"><![CDATA[<h3 id="Web-Service简介"><a href="#Web-Service简介" class="headerlink" title="Web Service简介"></a>Web Service简介</h3><p>Web Service是一种构建应用程序的普遍模型,可以在任何支持网络通信的操作系统中实施运行;它是一种新的web 应用程序分支，是自包含、自描述、模块化的应用，可以发布、定位、通过web调用。Web Service是一个应用组件,它逻辑性的为其他应用程序提供数据与服务.各应用程序通过网络协议和规定的一些标准数据格式（Http，XML，Soap)来访问Web Service,通过Web Service内部执行得到所需结果.Web Service可以执行从简单的请求到复杂商务处理的任何功能。一旦部署以后，其他Web Service应用程序可以发现并调用它部署的服务。</p><span id="more"></span><p><strong>技术和规则</strong></p><p>在构建和使用Web Service时,主要用到以下几个关键的技术和规则:</p><ul><li>1.XML:描述数据的标准方法.</li><li>2.SOAP:表示信息交换的协议.</li><li>3.WSDL:Web服务描述语言.</li><li>4.UDDI(Universal Description, Discovery and Integration):通用描述、发现与集成，它是一种独立于平台的，基于XML语言的用于在互联网上描述商务的协议。</li></ul><p>实际上，WebService的主要目标是跨平台的可互操作性。为了达到这一目标，WebService完全基于XML（可扩展标记语言）、XSD（XMLSchema）等独立于平台、独立于软件供应商的标准，是创建可互操作的、分布式应用程序的新平台。由此可以看出，在以下三种情况下，使用WebService会带来极大的好处。</p><h3 id="示例说明"><a href="#示例说明" class="headerlink" title="示例说明"></a>示例说明</h3><p>本示例将调用美国一个查询城市编码的Webservice接口，将查询到的信息保存到我们自己数据库的表中。<br><a href="http://www.webservicex.net/uszip.asmx">http://www.webservicex.net/uszip.asmx</a> 是一个查询美国城市编码信息的Webservice接口，例如我们点击GetInfoByCity方法，输入New York，调用后返回XML格式的文件。</p><p><img src="/img/posts/SSIS-Web-Service-4.jpg" alt="SSIS-Web-Service-4.jpg"></p><p><img src="/img/posts/SSIS-Web-Service-5.jpg" alt="SSIS-Web-Service-5.jpg"></p><p><img src="/img/posts/SSIS-Web-Service-6.jpg" alt="SSIS-Web-Service-6.jpg"></p><h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><p><strong>添加HTTP链接管理器</strong></p><p>新建SSIS项目后，在连接管理器中右键选择【新建连接】，弹出的管理器类型面板中选择HTTP,点击添加后出现HTTP连接管理器面板，服务器URL填：</p><p><a href="http://www.webservicex.net/uszip.asmx?WSDL">http://www.webservicex.net/uszip.asmx?WSDL</a></p><p>注意，末尾要加上 ?WSDL 参数。单击【测试按钮】，测试连接成功后单击【确定】关闭对话框。</p><p><img src="/img/posts/SSIS-Web-Service-1.jpg" alt="SSIS-Web-Service-1.jpg"></p><p><img src="/img/posts/SSIS-Web-Service-2.jpg" alt="SSIS-Web-Service-2.jpg"></p><p><img src="/img/posts/SSIS-Web-Service-3.jpg" alt="SSIS-Web-Service-3.jpg"></p><p><strong>设置Web服务任务控件</strong></p><p>拖入Web服务任务控件，双击后打开Web服务任务编辑器，常规面板中，连接选择我们刚刚建的HTTP连接，WSDLFile需要我们自己建一个，OverwriteWSDLFile选项为true.之后单击【下载WSDL】按钮，如果不单击这个，后面就会报错的。</p><p><img src="/img/posts/SSIS-Web-Service-7.jpg" alt="SSIS-Web-Service-7.jpg"></p><p>切换到输入面板，在Service选择USZip,Method中有四个方法可以选，这里用GetInfoByCity，如果上面一步没有点击下载WSDL按钮的话，这里就选不了，要报错的。选完后下面那栏说明出现中文乱码，不用管它。参数赋值里面我就直接给了一个New York，当然也可以勾上变量复选框，用自己定义的包变量。</p><p><img src="/img/posts/SSIS-Web-Service-8.jpg" alt="SSIS-Web-Service-8.jpg"></p><p>切换到输出面板，输出类型可以选择文件或者是变量，这里我选了文件，把返回的XML保存在新建的XML文件里。</p><p><img src="/img/posts/SSIS-Web-Service-9.jpg" alt="SSIS-Web-Service-9.jpg"></p><p>执行下Web服务任务，返回的XML格式数据就保存在里文件里。这里要执行一下任务，让XML文件里有数据，为后面步骤做准备。</p><p><img src="/img/posts/SSIS-Web-Service-10.jpg" alt="SSIS-Web-Service-10.jpg"></p><p><strong>数据流任务部分</strong></p><p>控制流中拖入数据流任务，在数据流任务中拖入XML源控件，双击打开XML源编辑器，XML位置选择上面步骤创建的XML文件，然后点击【生成XSD】，输入一个XSD文件名，这个文件是用来生成对XML结构说明的。</p><p><img src="/img/posts/SSIS-Web-Service-11.jpg" alt="SSIS-Web-Service-11.jpg"></p><p><img src="/img/posts/SSIS-Web-Service-12.jpg" alt="SSIS-Web-Service-12.jpg"></p><p>切换到列面板，如果出现提示，单击【确定】。这里就会出现对XSD文件解析出要生成的列了。</p><p><img src="/img/posts/SSIS-Web-Service-3.jpg" alt="SSIS-Web-Service-13.jpg"></p><p><img src="/img/posts/SSIS-Web-Service-3.jpg" alt="SSIS-Web-Service-14.jpg"></p><p>数据流中拖入OLEDB目标控件，选择新建一个表。切换到列映射，可以编辑对应的输入输出列，这里默认就可以了。</p><p><img src="/img/posts/SSIS-Web-Service-15.jpg" alt="SSIS-Web-Service-15.jpg"></p><p><img src="/img/posts/SSIS-Web-Service-16.jpg" alt="SSIS-Web-Service-16.jpg"></p><p>至此，所有任务就建好了，执行一下包，看看数据库中的表是否有数据了。</p><p><img src="/img/posts/SSIS-Web-Service-17.jpg" alt="SSIS-Web-Service-17.jpg"></p><p><img src="/img/posts/SSIS-Web-Service-18.jpg" alt="SSIS-Web-Service-18.jpg"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>1.HTTP连接部分的URL要带上?WSDL参数。</li><li>2.Web服务编辑器常规面板配置好WSDL文件后要先下载WSDL。</li><li>3.Web服务编辑器输出面板中，也可以把返回的XML数据保存在一个变量里，在后面的XML源中调用，但是我试了不成功，还不清楚问题出在哪。</li><li>4.XML源编辑器里，要生成XSD文件，这个貌似对于比较标准的XML文件可以生成，我后来试了个其它Webservice的接口调用返回XML文件，里面有两个命名空间，然后生成XSD就报错了。</li><li>5.最后一点也是耗费我最多时间的问题，我后来想调用国家天气查询的Webservice接口，但是返回的XML文件是带有数组类型的，像下图那样，这样的话用本文的做法生成XSD那里可以生成，但是只会出现string一列，写入数据库的表里只有string一列而且字段值都是NULL。所以要另外进行一些处理，这在后面的另一篇文章(<a href="/2016/05/16/SSIS-XMLTask-ProcessArrays">SSIS中Foreach循环容器处理XML数据</a>)里介绍。</li></ul><p><img src="/img/posts/SSIS-Web-Service-19.jpg" alt="SSIS-Web-Service-19.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> BI墨客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> BI </tag>
            
            <tag> SSIS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【SSIS】利用SSIS模板快速开发SSIS Package</title>
      <link href="2016/05/06/SSIS-Template-For-SSISPackage/"/>
      <url>2016/05/06/SSIS-Template-For-SSISPackage/</url>
      
        <content type="html"><![CDATA[<p>在做 ETL 项目的时候，往往很多 Package 的开发都是基于相同的模型和流程。比如在 Package 开始运行时需要向 Process Log 表中插入记录，在 Package 运行结束的时候更新运行状态。</p><span id="more"></span><p><img src="/img/posts/SSIS-Template-For-SSISPackage-1.jpg" alt="SSIS-Template-For-SSISPackage-1"></p><p>在错误处理阶段同一个项目中的所有 Package 也是相同的处理方式，除此之外还有设计到 Package 的配置还有一些参数和验证流程等等基本上都一致。</p><p><img src="/img/posts/SSIS-Template-For-SSISPackage-2.jpg" alt="SSIS-Template-For-SSISPackage-2"></p><p><strong>配置过程</strong></p><p>如果每次开发一个 Package 都需要重新拖拉这些控件并配置连接管理器，配置 SQL 语句和参数，并且要保证配置的东西都正确那么还需要简单的测试下, 这些会浪费很多不必要的精力和时间。特别是不同的开发人员可能在命名方式，以及配置方式和规范上如果不一致的话在后期维护阶段是一件非常麻烦的事情。</p><p><img src="/img/posts/SSIS-Template-For-SSISPackage-3.jpg" alt="SSIS-Template-For-SSISPackage-3"></p><p>因此在项目开始初期，根据业务需要设计好日志系统、配置好通用的数据库连接配置和必要的参数、通用的参数验证等等之后，在本地找到这个 Package，并将 Package 复制到 DTS 的模板目录下。</p><p>不同的安装环境可能复制的目标目录各有不同。</p><p>本人安装环境是 WIN7 64X + SQL Server 2012 + Visual Studio 2012</p><p>将 Package 复制到以下目录</p><p>C:\Program Files (x86)\Microsoft Visual Studio 10.0\Common7\IDE\PrivateAssemblies\ProjectItems\DataTransformationProject\DataTransformationItems </p><p>部分人的环境可能比较复杂，既安装过 SQL Server 2012 也安装过 2008 或者 2008 R2 并且除了 Visual Studio 2012 也可能安装过其它版本的 Visual Studio，因此可能需要打开各自目录都去尝试下，有人可能适用于</p><p>C:\Program Files (x86)\Microsoft Visual Studio 10.0\Common7\IDE\PrivateAssemblies\ProjectItems\DataTransformationProject\</p><p><img src="/img/posts/SSIS-Template-For-SSISPackage-4.jpg" alt="SSIS-Template-For-SSISPackage-4"></p><p>重启开发工具，我的是 SSDT 以前2008 版本叫BIDS。选中新建的项目 SSISMSDN 右键 -&gt; Add -&gt; New Item, 就会看到如上图所示的 Package 模板。</p><p>新建的 Package 可以看到很多控件都已经存在包括数据库连接管理器，所以说非常方便。最后记得将 Package 名字改成你所需要的，并重新生成新的 ID即可。</p><p><img src="/img/posts/SSIS-Template-For-SSISPackage-5.jpg" alt="SSIS-Template-For-SSISPackage-5"></p><p>除了 SSIS Package 模板之外，可以看到上面提到的目标目录中还有其它的 SSRS，SSAS 目录，虽然没有尝试过 SSRS/SSAS 项目模板，但估计也可以像 SSIS Package 这样来操作。</p><p>转自BIWORK<br><a href="http://ask.hellobi.com/blog/biwork/588">http://ask.hellobi.com/blog/biwork/588</a></p>]]></content>
      
      
      <categories>
          
          <category> BI墨客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 转载 </tag>
            
            <tag> BI </tag>
            
            <tag> SSIS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>比尔·盖茨：如果你看完了这些极其难懂的书，请给我投简历！</title>
      <link href="2016/05/06/The-Art-of-Computer-Programming/"/>
      <url>2016/05/06/The-Art-of-Computer-Programming/</url>
      
        <content type="html"><![CDATA[<p>在硅谷的世界里，有几本比《计算机编程艺术》（ “The Art of Computer Programming”）更受人认可的书，这些书也是斯坦福大学名誉教授Donald Knuth点名的非常不错的书。而在比尔盖茨的演讲中，他甚至表示：“如果你自认为是个非常优秀的程序员。那么你如果全部读完了Knuth编写的《计算机编程艺术》这本书的话。你一定要给我发份简历”。而这句好像开完笑的话，便可以说明比尔盖茨对其的高度评价，同时这些话也被收录在了这本书的第一卷的第三版的封面上。</p><span id="more"></span><p><img src="/img/posts/The-Art-of-Computer-Programming-1.jpg" alt="The-Art-of-Computer-Programming-1"></p><p>据说，这句话是自盖茨曾经工作的辛迪加报纸专栏里流传出来的，而该专栏还称这本书非常具有传奇色彩，而它的难度更让很多人把它拒之门外，下面是其具体描述：<br>“这是一门让人难懂的学科，我花了好几个月时间去读它，看了20页之后就把书丢到一边，一星期之后又回来读另外20页。如果有人傲慢的说他看明白了书中的一切，那么Knuth将帮助他们了解世界是如何的深刻而复杂。”</p><p><img src="/img/posts/The-Art-of-Computer-Programming-2.jpg" alt="The-Art-of-Computer-Programming-2"></p><p>《计算机编程艺术》第一卷于1962年问世，它是第一本深入探讨编程的数学性和科学性的书籍。Knuth将这本书视为其一生的工作，并表示如果情况允许的话，这本书将共有七卷。最新的一本书于2015年12月发布。<br>旧金山企业家Carl Tashian在最近的一篇媒体文章中说道：“Donald Knuth的《计算机编程艺术》有四个精装册，每本的封面都是暗紫色，让人看起来很舒服。而书的本身也像人们透了这样的一个信息：“外行者靠边站，因为这本书是给真正从事编程工作的程序员看的。”<br>就已经跨过这个阶段的Knuth来说，他的技术能力已经成为高科技产业一个传奇。而想要超越单纯的编码深入到程序员工作底层的复杂性，程序员们必须要熟读这本书。<br>Amazon评论家在1997年写道：“如果算机科学有可兰经，圣经等等经书，那也这就是它。”<br>这本书因全面而彻底的讲述编程而闻名，当然，其同时也极大地挑战和挫伤了很多程序员的自尊心。这本书对Knuth的案例和其i严谨的数学证明即使是对于比尔盖茨来说仍是有着很大的困惑的。<br>尽管它有悠久的出版历史，Knuth通过不断更新《计算机编程艺术》的版本来获得更多的粉丝。如果你发现他的书中有任何错误，你就可能得到有名的Knuth奖励检查，总数为2.56美元的奖金。而这笔奖金还被他专门赋予了“一个十六进制的美元”的特殊意义。因此，我们可以认为这笔奖金的获得对于那些想要证明自己知道自己在说些什么的人来说是一笔宝贵的奖励。<br>当然，众所周知天下之大，我们不可能什么都知道。就像你需要开车，你并不需要知道内燃机是如何工作的这件事情一样，你也没有必要为了了解如何编写程序来强硬的读这本书，所以不要把这个事情看成一个必须的读本就好。当然，如果想要有更多的这方面探索的话，这本书还是非常不错的。</p><p>原文链接：<a href="http://toutiao.com/a6279342772928119041/">http://toutiao.com/a6279342772928119041/</a></p>]]></content>
      
      
      <categories>
          
          <category> IT看客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 转载 </tag>
            
            <tag> IT资讯 </tag>
            
            <tag> 计算机基原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何在没有主键的SQL Server表里删除重复行</title>
      <link href="2016/04/26/Delete-duplicate-rows-with-no-primary-key/"/>
      <url>2016/04/26/Delete-duplicate-rows-with-no-primary-key/</url>
      
        <content type="html"><![CDATA[<p>有没有遇到过在一个没有主键标志的表里存了重复的数据行，要把重复的行删掉保留一行的情况呢？我们可以设置SQL Server的ROWCUNT变量来限制影响的数据行数，默认的数据值是0，代表所有行，但是这个值可以在运行SQL语句之前进行设定。</p><p>咱们首先建个测试用的表，插入几条条记录。</p><pre><code>CREATE TABLE dbo.duplicateTest    (      [ID] [INT] ,      [FirstName] [VARCHAR](25) ,      [LastName] [VARCHAR](25)    )ON  [PRIMARY];INSERT INTO dbo.duplicateTest VALUES(1, &#39;Bob&#39;,&#39;Smith&#39;) INSERT INTO dbo.duplicateTest VALUES(2, &#39;Dave&#39;,&#39;Jones&#39;) INSERT INTO dbo.duplicateTest VALUES(3, &#39;Karen&#39;,&#39;White&#39;) INSERT INTO dbo.duplicateTest VALUES(1, &#39;Bob&#39;,&#39;Smith&#39;)INSERT INTO dbo.duplicateTest VALUES(2, &#39;Dave&#39;,&#39;Jones&#39;)INSERT INTO dbo.duplicateTest VALUES(1, &#39;Bob&#39;,&#39;Smith&#39;) </code></pre><span id="more"></span><p>表内数据如下：</p><pre><code>SELECT * FROM dbo.duplicateTest</code></pre><p><img src="/img/posts/Delete-duplicate-rows-with-no-primary-key-1.jpg" alt="全部数据"></p><p>我们要找到Bob Smith的记录可以用以下语句：</p><pre><code>SELECT * FROM dbo.duplicateTest WHERE ID = 1 AND FirstName = &#39;Bob&#39; AND LastName = &#39;Smith&#39;</code></pre><p>找到三行数据</p><p><img src="/img/posts/Delete-duplicate-rows-with-no-primary-key-2.jpg" alt="图2"></p><p>在SQL Server 2000 和 2005上我们可以使用SET ROWCOUNT 命令来限制一条语句作用的行数，设置为1我们就可以删除一条重复的记录了。删除前与删除后的对比如下：</p><p><img src="/img/posts/Delete-duplicate-rows-with-no-primary-key-3.jpg" alt="图3"></p><p>在SQL Server 2005上，我们也可以用TOP命令。像下面这样：</p><pre><code>SELECT * FROM dbo.duplicateTest DELETE TOP(1) FROM dbo.duplicateTest WHERE ID = 1 SELECT * FROM dbo.duplicateTest</code></pre><p>删除前与删除后的对比如下：</p><p><img src="/img/posts/Delete-duplicate-rows-with-no-primary-key-4.jpg" alt="图4"></p><p><strong>总结</strong></p><ul><li>1、这个方法可以在表中没有明显标志字段来区分每一行的情况，但也有局限，如果一个表中不知道每行记录都有多少行重复的记录，就不能用了，TOP(1)也只是删除重复行中的一行。</li><li>2、如果明确知道表里每行记录都有2行、3行……重复的记录，倒是个不错的选择。</li><li>3、如果表里有个ID自增长的字段，就可以采用删掉重复行保留ID最小的那个行的方法了。</li><li>4、如果表里没有ID自增长的字段，又不知道每行有多少条重复记录，重复记录行都一样，那还是先把记录DISTINCT出来存到临时表里，清空原表，再把临时表的数据插入原表，这样应该是最省事的了。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 码路刺客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> 原创 </tag>
            
            <tag> SQL Server </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CodePen上碉堡的前端设计和代码</title>
      <link href="2016/04/26/codepen-top-10/"/>
      <url>2016/04/26/codepen-top-10/</url>
      
        <content type="html"><![CDATA[<p>CodePen有很多出众的前代码片段，设计师或喜欢前端的人员可以都可能常去那边寻找灵感或学习一些代码的运用。CodePen放出2015年度最热门的100个代码片段，很多代码确实很赞，大家不要错过哦，下面我们筛选几个给大家欣赏。</p><span id="more"></span><p>加载会比较慢，要有耐心哦。</p><p><strong>Chill the lion</strong></p><p>很可爱的筛子，按住鼠标左键风车会转动哦。</p><iframe height="268" frameborder="no" style="width: 100%;" allowfullscreen="true" allowtransparency="true" src="//codepen.io/Yakudoo/embed/YXxmYR/?height=268&theme-id=0&default-tab=result" scrolling="no"></iframe><p>pen#PwLXXP</p><p>用代码写的一个教学视频教程，一边code，一边绘制一个心形图案。</p><iframe height="268" frameborder="no" style="width: 100%;" allowfullscreen="true" allowtransparency="true" src="//codepen.io/jakealbaugh/embed/PwLXXP/?height=268&theme-id=0&default-tab=result" scrolling="no"></iframe><p>DaftPunKonsole</p><p>一个小游戏，但没研究出怎么玩？连成一个句子吗？</p><iframe height="268" frameborder="no" style="width: 100%;" allowfullscreen="true" allowtransparency="true" src="//codepen.io/kowlor/embed/MYOKRd/?height=268&theme-id=0&default-tab=result" scrolling="no"></iframe><p>Elastic SVG Sidebar Material Design</p><p>一个SVG侧边栏，那个弹性动画很NICE.</p><iframe height="268" frameborder="no" style="width: 100%;" allowfullscreen="true" allowtransparency="true" src="//codepen.io/suez/embed/emjwvP/?height=268&theme-id=0&default-tab=result" scrolling="no"></iframe><p>10 stylish hover effects with less</p><p>10个文字HOVER特效，那个像游览一样的效果场景很适当。</p><iframe height="268" frameborder="no" style="width: 100%;" allowfullscreen="true" allowtransparency="true" src="//codepen.io/caraujo/embed/VYOjNM/?height=268&theme-id=0&default-tab=result" scrolling="no"></iframe><p>Gooey Menu</p><p>菜单效果</p><iframe height="268" frameborder="no" style="width: 100%;" allowfullscreen="true" allowtransparency="true" src="//codepen.io/lbebber/embed/LELBEo/?height=268&theme-id=0&default-tab=result" scrolling="no"></iframe><p>MOTION for the web</p><p>文字动画，字好看，动画也好看。</p><iframe height="268" frameborder="no" style="width: 100%;" allowfullscreen="true" allowtransparency="true" src="//codepen.io/sol0mka/embed/ogOYJj/?height=268&theme-id=0&default-tab=result" scrolling="no"></iframe><p>10 stunning hover effects with scss</p><p>10个文字应用特效</p><iframe height="268" frameborder="no" style="width: 100%;" allowfullscreen="true" allowtransparency="true" src="//codepen.io/caraujo/embed/LVPzxO/?height=268&theme-id=0&default-tab=result" scrolling="no"></iframe><p>Bubble • Layout</p><iframe height="268" frameborder="no" style="width: 100%;" allowfullscreen="true" allowtransparency="true" src="//codepen.io/sol0mka/embed/yNOage/?height=268&theme-id=0&default-tab=result" scrolling="no"></iframe><p>Flipside</p><p>这个弹窗的交互很赞呢。</p><iframe height="268" frameborder="no" style="width: 100%;" allowfullscreen="true" allowtransparency="true" src="//codepen.io/hakimel/embed/ZYRgwB/?height=268&theme-id=0&default-tab=result" scrolling="no"></iframe><p>其它代码片段中也有很多惊艳或者实用的案例，请前往Codepen网站查看。</p><p>网站名称：The most hearted of 2015</p><p>网站地址：<a href="http://codepen.io/2015/popular/pens/">http://codepen.io/2015/popular/pens/</a></p><p>本文转自：设计达人 <a href="http://www.shejidaren.com/codepen-top-100-of-2015.html">http://www.shejidaren.com/codepen-top-100-of-2015.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 码路刺客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 转载 </tag>
            
            <tag> 前端编程 </tag>
            
            <tag> jQuery </tag>
            
            <tag> CSS </tag>
            
            <tag> JavaScript </tag>
            
            <tag> 设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习制作CSS3 3D旋转透视效果</title>
      <link href="2016/04/24/CSS3-transform-style-3D-Cool/"/>
      <url>2016/04/24/CSS3-transform-style-3D-Cool/</url>
      
        <content type="html"><![CDATA[<p>之前学习 react+webpack ，偶然路过 webpack 官网 ，看到顶部的 LOGO ，就很感兴趣。</p><p><img src="/img/posts/CSS3-transform-style-3D-Cool-16.jpg" alt="CSS3-transform-style-3D-Cool-16"></p><span id="more"></span><p>最近觉得自己 CSS3 过于薄弱，想着深入学习一番，遂以这个 LOGO 为切入口，好好研究学习了一下相关的 CSS3 属性。webpack 的 LOGO 动画效果乍看不是很难，深入了解之后，觉得内部其实大有学问，自己折腾了一番，做了一系列相关的 CSS3 动画效果。</p><p>先上 demo ，没有将精力放在兼容上，请用 chrome 打开。</p><p>本文完整的代码，以及更多的 CSS3 效果，在<a href="https://github.com/chokcoco/css3-">github</a>上可以看到，也希望大家可以点个star。</p><p>嗯，可能有些人打不开 demo 或者页面乱了，贴几张效果图：（图片有点大，耐心等待一会）</p><p>立方体 3D 旋转</p><p><img src="/img/posts/CSS3-transform-style-3D-Cool-1.gif" alt="立方体 3D 旋转"></p><p>3D 透视照片墙</p><p><img src="/img/posts/CSS3-transform-style-3D-Cool-2.gif" alt="3D 透视照片墙"></p><p>跳跃的音符</p><p><img src="/img/posts/CSS3-transform-style-3D-Cool-3.gif" alt="跳跃的音符"></p><p>可能上面的效果对精通 CSS3 的而言小菜一碟，写本文的目的也是我自己学习积累的一个过程，感兴趣的就可以一起往下看啦。</p><p>其实 CSS3 效果真的很强大，上面的效果都是纯 CSS 实现，个人感觉越是深入 CSS 的学习，越是觉得自己不懂 CSS ，不过话说回来，这些效果的实用场景不大，但是作为一个有追求的前端，我觉得还是有必要去好好了解一下这些属性。</p><p>所以本文接下来要讲的大概有：</p><ul><li>transform-style: preserve-3d 三维效果</li><li>perspective and perspective-origin 3D视距，透视/景深效果</li><li>CSS3 filter CSS3滤镜</li><li>transparent、radial-gradient 透明与渐变</li></ul><h3 id="transform-style"><a href="#transform-style" class="headerlink" title="transform-style"></a>transform-style</h3><p>要利用 CSS3 实现 3D 的效果，最主要的就是借助 transform-style 属性。transform-style 只有两个值可以选择：</p><p>语法：</p><p><code>transform-style:flat|preserve-3d;</code><br><code>transform-style:flat;// 默认，子元素将不保留其3D位置</code><br><code>transform-style:preserve-3d;// 子元素将保留其3D位置。</code></p><p>当我们指定一个容器的<code>transform-style</code>的属性值为<code>preserve-3d</code>时，容器的后代元素便会具有 3D 效果，这样说有点抽象，也就是当前父容器设置了<code>preserve-3d</code>值后，它的子元素就可以相对于父元素所在的平面，进行 3D 变形操作。</p><p>当父元素设置了<code>transform-style:preserve-3d</code>后，就可以对子元素进行 3D 变形操作了，3D 变形和 2D 变形一样可以，使用<code>transform</code>属性来设置，或者可以通过制定的函数或者通过三维矩阵来对元素变型操作：</p><ul><li>1、使用<code>translateX(length)</code>、<code>translateY(length)</code> 、 <code>translateZ(length)</code> 来进行 3D 位移操作，与 2D 操作一样，对元素进行位移操作，也可以合并为 <code>translate3d(x,y,z)</code> 这种写法；</li><li>2、使用 <code>scaleX()</code> 、<code>scaleY()</code> 、<code>scaleZ()</code> 来进行3D 缩放操作，也可以合并为<code>scale3d(number,number,number)</code> 这种写法；</li><li>3、使用 <code>rotateX(angle)</code> 、<code>rotateY(angle)</code> 、<code>rotateZ(angle)</code> 来进行 3D 旋转操作，也可以合并为 <code>rotate3d(Xangle,Yangle,Zangle)</code> 这种写法。</li></ul><p>对于 API 的学习，我建议去源头看看，不要满足于消费别人的总结。</p><p>这里要特别提出的，3D 坐标轴，所谓的绕 X、Y、Z 轴的三个轴，这个不难，感觉空间想象困难的，照着 API 试试，绕每个轴都转一下就明白了：</p><p><img src="/img/posts/CSS3-transform-style-3D-Cool-4.jpg" alt="CSS3-transform-style-3D-Cool-4"></p><p>了解过后，那么依靠上面所说的，其实我们就已经可以做一个立方体出来了。所谓实践出真知，下面就看看该如何一步步得到一个立方体。</p><p>** 1、准备六个正方形 **</p><p>这个好理解，正方体六个面，首先用 div 做出6个面，包裹在同一个父级容器下面，父级容器设置 <code>transform-style:preserve-3d</code> ，这样接下来就可以对6个面进行 3D 变换操作，为了方便演示，我用 6 个颜色不一样的面：</p><p><img src="/img/posts/CSS3-transform-style-3D-Cool-5.jpg" alt="CSS3-transform-style-3D-Cool-5"></p><p>上面的图是示意有6个面，当然我们要把6个正方形 div 设置为绝对定位，重叠叠在一起，那么应该是这样的，只能看到一个面：</p><p><img src="/img/posts/CSS3-transform-style-3D-Cool-6.jpg" alt="CSS3-transform-style-3D-Cool-6"></p><p><strong>2、父容器做简单的变换</strong></p><p>为了最后的看上去的效果好看，我们需要先对父容器进行变换，运用上面说的 rotate 属性，将容器的角度改变一下：</p><p><code>.cube-container&#123;-webkit-transform:rotateX(-33.5deg)rotateY(45deg);transform:rotateX(-33.5deg)rotateY(45deg);&#125;</code></p><p>那么，变换之后，得到这样一个图形：</p><p><img src="/img/posts/CSS3-transform-style-3D-Cool-7.jpg" alt="CSS3-transform-style-3D-Cool-7"></p><p>嗯，这个时候，6 个 div 面仍然是重叠在一起的。</p><p><strong>3、对每个面做 3D 变换</strong></p><p>接下来就是对每个面进行 3D 变换了，运用 <code>rotate</code> 可以对 div 平面进行旋转，运用 <code>translate</code> 可以对 div 平面进行平移，而且要记住现在我们是在三维空间内变换，转啊转啊，我们可能会得到这样的形状：</p><p><img src="/img/posts/CSS3-transform-style-3D-Cool-8.jpg" alt="CSS3-transform-style-3D-Cool-8"></p><p>算好旋转角度和偏移距离，最后上面的 6 个面就可以完美拼成一个立方体咯！为了效果更好，我给每个面增加一些透明度，最后得到一个完整的立方体：</p><p><img src="/img/posts/CSS3-transform-style-3D-Cool-9.jpg" alt="CSS3-transform-style-3D-Cool-9"></p><p>为了更有立体感，我们可以调整父容器的旋转角度，旋转看上去更立体的角度:</p><p><img src="/img/posts/CSS3-transform-style-3D-Cool-10.jpg" alt="CSS3-transform-style-3D-Cool-10"></p><p>至此，一个 3D 立方体就完成了。写这篇文章的时候，本来到这里，这一块应该就结束了，但是写到这里的时候，突然突发奇想，既然正方体可以（正六面体），那么正四面体，正八面体甚至球体应该也能做出来吧？<br>嗯，没有按住躁动的心，立马动手尝试了一番，最后做出了下面的两个：</p><p><img src="/img/posts/CSS3-transform-style-3D-Cool-11.gif" alt="CSS3-transform-style-3D-Cool-11"></p><p><img src="/img/posts/CSS3-transform-style-3D-Cool-12.gif" alt="CSS3-transform-style-3D-Cool-12"></p><p>就不再详细讨论如何一步一步得到这两个了，有兴趣的可以去我的 github 上看看源码，或者直接和我讨论交流，简单的谈谈思路：</p><p>正四面体</p><p>和正方体一样，我们首先要准备 4 个三角形（下面会详细讲如何利用 CSS3 制作一个三角形 div），注意 4 个三角形应该是重叠在一起的，然后将其中三个分别沿着三条边的中心点旋转 70.5 度（正四面体临面夹角），就可以得到一个正四面体。</p><p>注意沿着三条边的中心点旋转 70.5 度这句话，意思是每个图形要定位一次旋转中心，也就是 <code>transform-origin</code> 属性，它允许我们设置旋转元素的基点位置。</p><p>球体</p><p>上面的 GIF 图因为添加了 <code>animation</code> 动画效果，看上去很像一个球体在运动，其实只用了 4 个 div，每个 div 利用 <code>border-radius:100%</code> 设置为圆形，然后以中心点为基准，每个圆形 div 绕 Y 轴旋转不同的角度，再让整个圆形容器绕 Y 轴动起来，就可以得到这样一个效果了。</p><p>继续说 3D ，接下来要说的属性是 <code>persepective</code> 和 <code>perspective-origin</code> 。</p><h3 id="persepective"><a href="#persepective" class="headerlink" title="persepective"></a>persepective</h3><p>语法</p><p><code>perspective:number|none;</code></p><p><code>perspective</code> 为一个元素设置三维透视的距离，仅作用于元素的后代，而不是其元素本身。</p><p>简单来说，当元素没有设置 <code>perspective</code> 时，也就是当 <code>perspective:none/0</code> 时所有后代元素被压缩在同一个二维平面上，不存在景深的效果。</p><p>而如果设置 <code>perspective</code> 后，将会看到三维的效果。</p><h3 id="perspective-origin"><a href="#perspective-origin" class="headerlink" title="perspective-origin"></a>perspective-origin</h3><p><code>perspective-origin</code> 表示 3D 元素透视视角的基点位置，默认的透视视角中心在容器是 <code>perspective</code> 所在的元素，而不是他的后代元素的中点，也就是 <code>perspective-origin: 50% 50%</code>。</p><p>语法</p><p><code>perspective-origin:x-axisy-axis;// x-axis : 定义该视图在 x 轴上的位置。默认值：50%// y-axis : 定义该视图在 y 轴上的位置。默认值：50%</code></p><p>值得注意的是，CSS3 3D 变换中的透视的透视点是在浏览器的前方。</p><p>说总是很难理解，运用上面我们做出来的正方体试验一下，我设置了正方体的边长为 50 px ，这里设置正方体容器 <code>cuber-inner</code> 的 <code>persepective</code> 的为 100 px，而 <code>perspective-origin</code> 保持为默认值：</p><p><code>-webkit-perspective-origin:50%50%;</code><br><code>perspective-origin:50%50%;</code><br><code>-webkit-perspective:100px;</code><br><code>perspective:100px;</code></p><p>上面这样设置，也就是相当于我站在 100px 的长度外去看这个立方体，效果如下：</p><p><img src="/img/posts/CSS3-transform-style-3D-Cool-13.jpg" alt="CSS3-transform-style-3D-Cool-13"></p><p>通过调整 <code>persepective</code> 和 <code>perspective-origin</code> 的值，可以看到不一样的图形，这个很好理解，我们观测一个物体的角度和距离物体的距离不断发生改变，我们看的物体也是不一样的，嗯想象一下小学课文，杨桃和星星，就能容易明白了。</p><p>需要提出的是，我上面的几个正多面体图形和球形图形是没有加上 <code>ersepective</code> 值的，感兴趣的可以加上试一下看看效果。</p><p><strong>3D 透视照片墙</strong></p><p>回到文章一开始我贴的那个 3D 照片墙，运用 <code>transform-style: preserve-3d</code> 和 <code>persepective</code> ，可以做出效果很好的这种 3D 照片墙旋转效果。</p><p>代码就不贴了，本文已经很长了，只是简单的谈谈原理，感兴趣的去扒源码看看。</p><ul><li>1、设立一个舞台，也就是包裹旋转的图片们的容器，给他设置一个 <code>persepective</code> 距离，以及 t<code>ransform-style: preserve-3d</code> 让后代可以进行 3D 变换；</li><li>2、准备 N 张图片置于容器内部，N 的大小看个人喜好了，图片的 3D 旋转木马效果是类似钢管舞旋转的运动，因此是绕 Y 轴的，我们关心的是 <code>rotateY</code> 的大小，根据我们添加的图片数量，用 360° 的圆周角将每个图片等分，也就是让每张图片绕 Y 轴旋转固定角度依次散开：（下面的图为示意效果，我调整了一下角度和透明度）</li></ul><p><img src="/img/posts/CSS3-transform-style-3D-Cool-14.jpg" alt="CSS3-transform-style-3D-Cool-14"></p><ul><li>3、这个时候，N 张图肯定是重合叠在了一起，所以这里关键一步是运用 <code>translateZ(length)</code> 让图片沿 Z 轴平移，也就是运用 <code>translateZ</code> 可以让图片离我们更近或者更远，因为上一步设置了图片不同的 <code>rotateY()</code> 角度，所以 N 张图片设定一个 <code>translateZ</code> 后，图片就很自然以中点为圆心分散开了，也就是这样：</li></ul><p><img src="/img/posts/CSS3-transform-style-3D-Cool-15.jpg" alt="CSS3-transform-style-3D-Cool-15"></p><ul><li>4、最后利用 <code>animation</code> ，我们让舞台，也就是包裹着图片的容器绕 Y 轴旋转起来（<code>rotateY</code>），那么一个类似旋转木马的 3D 照片墙效果就完成了！</li></ul><p>这里要注意的一点是设置的 <code>persepective</code> 值和单个图片 <code>translateZ(length)</code> 的值，<code>persepectiv</code>e 一定要比 <code>translateZ(length)</code> 的值大，否则就是相当于舞台跑你身后去了，肯定是看不到效果了。</p><p>本来想继续说</p><ul><li>CSS3 filter CSS3滤镜</li><li>transparent、radial-gradient 透明与渐变</li></ul><p>这些个可以让动画效果变得更赞的一些 CSS3 属性，但是觉得本文篇幅已经很长，而且这两个属性有点偏离主题，打算另起一文，再做深入探究。</p><p>再说两点本文没有谈到的，但是很有用处的小细节，感兴趣的可以去了解了解，也会在接下来进行详细探讨：</p><ul><li>1、使用 transform3d api 代替 transform api，强制开启 GPU 加速，提升网站动画渲染性能；</li><li>2、使用 CSS3 will-change 提高页面滚动、动画等渲染性能</li></ul><p>原文来自：<a href="http://www.l-ch.net/">http://www.l-ch.net</a></p><p>本文作者： 伯乐在线 - chokcoco</p><p>原题：使用 CSS3 实现的一些 3D&amp;&amp;有趣 的动画效果（纯CSS实现）</p>]]></content>
      
      
      <categories>
          
          <category> 码路刺客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 转载 </tag>
            
            <tag> 前端编程 </tag>
            
            <tag> CSS </tag>
            
            <tag> 设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL Server 2014的BI开发工具SSDT(以前的BIDS)安装</title>
      <link href="2016/04/24/SQL-Server-2014-SSDT-Install/"/>
      <url>2016/04/24/SQL-Server-2014-SSDT-Install/</url>
      
        <content type="html"><![CDATA[<p>当我们安装好SQL Server 2014以后，会发现以前随数据库安装的BI开发套件SQL Server Reporting Services (SSRS), SQL Server Analysis Services (SSAS), 和 SQL Server Integration Services (SSIS)都不见了，怎么弄回来呢？</p><p>在安装开发版或者企业版的SQL Server 2014的时候，你可能已经注意到以前被我们熟知的Business Intelligence Development Studio (BIDS) 已经没有了。从SQL Server 2012开始，这套BI应用工具集已经变成了SQL Server Data Tools)(SSDT)，在SQL Server 2014中，SSDT已经完全在SQL Server的安装过程里消失了。但是，要把Business Intelligence (BI)应用工具安装回来也是很容易的。</p><span id="more"></span><h3 id="安装SQL-Server-2014-BI-Tools"><a href="#安装SQL-Server-2014-BI-Tools" class="headerlink" title="安装SQL Server 2014 BI Tools"></a>安装SQL Server 2014 BI Tools</h3><p>在以前版本的SQL Server里，用来开发SSIS,SSAS,SSRS的BI解决方案都是包含在SQL Server的安装过程里的，在特性部分里可以进行勾选，如下图所示：</p><p><img src="/img/posts/SQL-Server-2014-SSDT-Install-1.jpg" alt="SQL-Server-2014-SSDT-Install-1"></p><p>但是，当你安装SQL Server 2014的时候，你会发现选项没有了，如下图：</p><p><img src="/img/posts/SQL-Server-2014-SSDT-Install-2.jpg" alt="SQL-Server-2014-SSDT-Install-2"></p><h3 id="SQL-Server-Data-Tools-SSDT和SSDT-BI-的演变"><a href="#SQL-Server-Data-Tools-SSDT和SSDT-BI-的演变" class="headerlink" title="SQL Server Data Tools (SSDT和SSDT-BI)的演变"></a>SQL Server Data Tools (SSDT和SSDT-BI)的演变</h3><p>由于微软公司在这方面的说明较少，让情况变得有点复杂。事实上，SQL Server 2014的SSDT已经成为了Visual Studio的插件为数据库重构，架构比较以及各种诸如视图、存储过程等对象的创建提供服务支持。而SSDT-BI这个工具也已经成为Visual Studio的一个组件，它才是开发SSIS,SSAS,SSRS解决方案的真正的开发工具。</p><p>以上两个工具都可以在<a href="http://msdn.microsoft.com/en-us/hh297027.aspx">http://msdn.microsoft.com/en-us/hh297027.aspx</a> 下载到。每个工具各提供两个版本，一个是Visual Studio 2012的，一个是 Visual Studio 2013的。</p><p><img src="/img/posts/SQL-Server-2014-SSDT-Install-3.jpg" alt="SQL-Server-2014-SSDT-Install-3"></p><p><img src="/img/posts/SQL-Server-2014-SSDT-Install-4.jpg" alt="SQL-Server-2014-SSDT-Install-4"></p><h3 id="安装SQL-Server-Data-Tools-SSDT"><a href="#安装SQL-Server-Data-Tools-SSDT" class="headerlink" title="安装SQL Server Data Tools(SSDT)"></a>安装SQL Server Data Tools(SSDT)</h3><p>微软已经完全把SSDT的安装从SQL Server安装中独立出来了。安装过程也是非常简单，你只需要决定是否让BI工具成为Visual Studio 2013或者Visual Studio 2012的一部分就可以了。</p><p>我们以Visual Studio 2013版本的为例。注意下，咱们不需要先安装Visual Studio 2013在电脑上然后再安装SSDT-BI。安装程序会安装Visual Studio 2013 shell然后提供BI工具作为一个组件。SSDT-BI安装将会添加以下组件：</p><ul><li>Microsoft .NET Framework 4.5.1,</li><li>Microsoft Visual Studio 2012 Shell (Isolated) Redistributable Package,</li><li>Microsoft Visual Studio 2012 Shell (Integrated) Redistributable Package,</li><li>Microsoft Visual Studio 2013 Shell (Isolated) Redistributable Package,</li><li>Microsoft Visual Studio 2013 Shell (Integrated) Redistributable Package,</li><li>Microsoft Visual Studio Tools for Applications 2012,</li><li>Microsoft Report Viewer 2014 Runtime.</li></ul><p>正式的安装过程跟SQL Server安装过程也很像。注意不管是否安装SQL Server 2014数据库程序，以下界面都选择全新安装。我安装的文件名称：SSDTBI_x86_CHS.exe，你可能会去找x64版本的，但是没有这个版本，官网下载的都是x86的，但是不影响安装。</p><p><img src="/img/posts/SQL-Server-2014-SSDT-Install-8.jpg" alt="SQL-Server-2014-SSDT-Install-8"></p><p>安装过程的以下界面勾选SQL Server Data Tools - Business Intelligence就可以了。</p><p><img src="/img/posts/SQL-Server-2014-SSDT-Install-5.jpg" alt="SQL-Server-2014-SSDT-Install-5"></p><p>安装好以后，在开始菜单出现 SQL Server Data Tools for Visual Studio 2013选项。</p><p><img src="/img/posts/SQL-Server-2014-SSDT-Install-6.jpg" alt="SQL-Server-2014-SSDT-Install-6"></p><p>现在，我们可以打开SSDT for Visual Studio 2013来创建SSIS,SSAS,SSRS项目方案了。</p><p><img src="/img/posts/SQL-Server-2014-SSDT-Install-7.jpg" alt="SQL-Server-2014-SSDT-Install-7"></p>]]></content>
      
      
      <categories>
          
          <category> BI墨客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> BI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【SSIS】进行列转行格式的转换</title>
      <link href="2016/04/07/SSIS-Pivot/"/>
      <url>2016/04/07/SSIS-Pivot/</url>
      
        <content type="html"><![CDATA[<h2 id="问题引入"><a href="#问题引入" class="headerlink" title="问题引入"></a>问题引入</h2><p>有如下格式的文件，需要转换成如图二的格式导入数据库里，这就是所谓的列传行的格式，是一种逆透视的操作。用Excel透视操作或者写个VBA宏程序是可以实现的，我们现在用SSIS的逆透视组件来实现下。</p><span id="more"></span><p><img src="/img/posts/48.png" alt="行格式"></p><p><img src="/img/posts/49.png" alt="列格式"></p><h2 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h2><ul><li>Windows 7</li><li>SQL Server 2008 R2</li><li>Business Intelligence Development Studio</li></ul><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p>首先废话不多说，新建SSIS项目</p><p><img src="/img/posts/50.png" alt="新建SSIS项目"></p><p>拖入EXCEL数据源，选择源文件。</p><p><img src="/img/posts/51.png" alt="拖入EXCEL数据源"></p><p>拖入逆透视组件</p><p><img src="/img/posts/52.png" alt="逆透视组件"></p><p><img src="/img/posts/53.png" alt="逆透视编辑器"></p><p>打开逆透视编辑器，这里有几个说明的地方：</p><ul><li>1.可用输入列里面的传递，如果勾上了，这一列将不进行逆透视，就是直接输出到目标文件或者数据库里。</li><li>2.可用输入列里左边的复选框勾上就是需要将这列进行逆透视的操作，勾选后将会出现在下面。</li><li>3.下面目标列里默认是空的，需要自己填，这一列的值将会是源文件1号到31号每一列里的金额值，所以目标列填的都一样，略坑的是需要一个一个填，我复制黏贴了30遍。</li><li>4.透视键值列名最好改个名称，就是输入列逆透视后放在那一列下面，这里填的就是列名，1号到31号将会作为“几号”列下面的值。</li></ul><p>其他默认，按确定。确认完了，发现有错误。提示：</p><blockquote><p>数据流任务 [逆透视 [116]] 出错: UnPivot 元数据不正确。在 UnPivot 转换中，对于所有设置了 PivotKeyValue 且指向相同 DestinationColumn 的输入列，其元数据都必须与 DestinationColumn 完全匹配。</p></blockquote><p><img src="/img/posts/54.png" alt="报错"></p><p>这是啥问题，折腾了一点时间，在逆透视组件的高级编辑器了怎么调都不好使。仔细看了下，会不会是数据类型的问题，果然，逆透视列的数据类型不是都一样的，所以就添加了一个数据转换组件。</p><p><img src="/img/posts/55.png" alt="数据类型"></p><p><img src="/img/posts/56.png" alt="数据类型"></p><p><img src="/img/posts/57.png" alt="数据类型转换"></p><p>在数据转换组件里把字符串类型都转成浮点型数据。</p><p><img src="/img/posts/58.png" alt="逆透视编辑器"></p><p>最好把之前的那个逆透视的组件删了，重新建一个。把逆透视的列改成类型转换的输出列，目标列又复制黏贴了30次。</p><p>这样逆透视的组件就不会报错了，然后执行下数据流，哟，报错了，提示一个或多个组件未能通过验证。</p><p><img src="/img/posts/59.png" alt="再次报错"></p><p>噢，才想起来项目属性里有一个调试设置什么64位运行环境的要改成false才可以。</p><p><img src="/img/posts/60.png" alt="项目属性"></p><p>这样就不会报错了。</p><p><img src="/img/posts/61.png" alt="顺利执行"></p><p>拖入EXCEL目标组件，列与逆透视组件输出列对应，目标EXCEL是有表头的。</p><p><img src="/img/posts/62.png" alt="EXCEL目标组件"></p><p>转换初见成果啊，但是看着有点不爽，想把年月跟几号列合成一个日期列，日期格式是20160406这种的，在目标表里加入一个日期列。</p><p><img src="/img/posts/63.png" alt="写入Excel文件"></p><p>拖入一个派生列组件，在派生列编辑器里增加一列派生列，表达式如下，就是对字符串的截取拼接，这里就不解释了，然后在Excel目标里给这个派生列映射到目标表的“日期”。</p><pre><code>(DT_WSTR,6)[年月] + RIGHT(&quot;0&quot; + SUBSTRING([几号],1,FINDSTRING([几号],&quot;日&quot;,1) - 1),2)</code></pre><p><img src="/img/posts/64.png" alt="派生列"></p><p>重新执行下数据流，嗯，达到目的。</p><p><img src="/img/posts/65.png" alt="执行成功"></p><h2 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h2><ul><li>在使用处理数据列的组件之前最好加一个数据类型转换的组件，看看有哪些数据类型是不符合我们预期的。</li><li>项目属性里的调试64位运行时不知道啥情况，为TRUE时会报错，得设置为FASLE。</li><li>逆透视组件设置相对简单，找好逆透视的列以及行数据要放在哪列里就可以了。</li></ul>]]></content>
      
      
      <categories>
          
          <category> BI墨客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> BI </tag>
            
            <tag> SSIS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用CSS3 &amp; jQuery创建apple TV海报视差效果</title>
      <link href="2016/03/27/AppleTV-Poster-Like/"/>
      <url>2016/03/27/AppleTV-Poster-Like/</url>
      
        <content type="html"><![CDATA[<p>你见过新版的<strong>Apple TV视差效</strong>果么?非常棒，我们用CSS和jQuery来实现它，尽量看起来和原效果一样。</p><center><img src="/img/posts/35.gif"></img></center><span id="more"></span><p>本教程里，我将使用CSS,HTML和jQuery来创建一个近似Apple TV视差效果，如果你正在阅读，我假设你对上述三种技术都有基本的了解。</p><p>废话不多说，开始第一部分。</p><h2 id="HTML页面"><a href="#HTML页面" class="headerlink" title="HTML页面"></a>HTML页面</h2><p>我们的页面结构像下面这样：</p><pre><code>&lt;div class=&quot;poster&quot;&gt;  &lt;div class=&quot;shine&quot;&gt;&lt;/div&gt;  &lt;div class=&quot;layer-1&quot;&gt;&lt;/div&gt;  &lt;div class=&quot;layer-2&quot;&gt;&lt;/div&gt;  &lt;div class=&quot;layer-3&quot;&gt;&lt;/div&gt;  &lt;div class=&quot;layer-4&quot;&gt;&lt;/div&gt;  &lt;div class=&quot;layer-5&quot;&gt;&lt;/div&gt;&lt;/div&gt;</code></pre><p>首先，需要一个样式类为 <code>.poster</code> 的 <code>div</code> ，在这个 <code>div</code> 里包含5个其他样式的层 <code>div</code>。在这五个层 <code>div</code> 上有一个 <code>shine</code> div来添加一些闪光效果。</p><h2 id="CSS部分"><a href="#CSS部分" class="headerlink" title="CSS部分"></a>CSS部分</h2><p>首先，添加以下代码确保网页 <code>body</code> 部分的高度是整个页面高度：</p><pre><code>body, html &#123; height: 100%; min-height: 100%; &#125;</code></pre><p>再给 <code>body</code> 部分一些背景渐变颜色：</p><pre><code>body &#123; background: linear-gradient(to bottom, #f6f7fc 0%,#d5e1e8 40%); &#125;</code></pre><p>为了让 <code>.poster</code> 有3D旋转的效果，父容器需要设置透视和变换效果。如我们所见，<code>div</code> 的父容器就是 <code>body</code> 本身，所以添加以下CSS代码：</p><pre><code>body &#123;    background: linear-gradient(to bottom, #f6f7fc 0%,#d5e1e8 40%);    transform-style: preserve-3d;    transform: perspective(800px);&#125;</code></pre><p>现在给卡片设置样式跟大小，让它在页面居中，添加一些圆角跟阴影效果：</p><pre><code>.poster &#123;    width: 320px;    height: 500px;    position: absolute;    top: 50%; left: 50%;    margin: -250px 0 0 -160px;    border-radius: 5px;    box-shadow: 0 45px 100px rgba(0, 0, 0, 0.4);    overflow:hidden;&#125;</code></pre><p>为了让海报居中，需要设置 <code>position</code> 的值为 <code>absolute</code>，<code>top:50%</code> , ‘left:50%’, 上部的 <code>margin</code> 值是 <code>div</code> 高度的一半的负数，左边的 <code>margin</code> 值是 <code>div</code> 宽度的一半的负数。需要记住的是 <code>.poster</code> 的中心也是整个页面的中心。</p><center><img src="/img/posts/36.jpg"></img></center><p>我们可以用以下的CSS选择器来选择所有的层：</p><pre><code>div[class *= &#39;layer-&#39;]</code></pre><p><code>.poster</code> 已经设计好了，来看看效果。</p><p>所以，CSS选择了所有class类名里含有“layer-”的 <code>div</code>。</p><p>现在，设置所有的层的 <code>position</code> 值是 <code>absolute</code>, <code>background-repeat</code> 值为 <code>no-repeat</code>, <code>background-position</code> 为 <code>top left</code>, 层背景的大小为100%宽度和自动高度。</p><pre><code>div[class*=&quot;layer-&quot;] &#123;    position: absolute;    top: -10px; left: -10px;    right: -10px; bottom: -10px;    background-size: 100% auto;    background-repeat: no-repeat;    background-position: 0 0;    transition:0.1s;&#125;</code></pre><p>注意到 <code>top</code>,<code>left</code>,<code>right</code>,<code>bottom</code> 的值都是-10px,目的是让层的大小比 <code>poster</code> 的大20px，这样在各个层进行视察效果的时候就不会看到层的边缘部分了。</p><p>以下是给每个层添加背景：</p><pre><code>.layer-1 &#123;    background-image: url(&#39;http://designmodo.com/demo/apple-tv-parallax/images/1.png&#39;);&#125;.layer-2 &#123;    background-image: url(&#39;http://designmodo.com/demo/apple-tv-parallax/images/2.png&#39;);&#125;.layer-3 &#123;    top: 0; bottom: 0;    left: 0; right: 0;    background-image: url(&#39;http://designmodo.com/demo/apple-tv-parallax/images/3.png&#39;);&#125;.layer-4 &#123;    background-image: url(&#39;http://designmodo.com/demo/apple-tv-parallax/images/4.png&#39;);&#125;.layer-5 &#123;    background-image: url(&#39;http://designmodo.com/demo/apple-tv-parallax/images/5.png&#39;);&#125;</code></pre><p>在 <code>layer-3</code> 部分， 层不会移动，所以尺寸就不用太大了。</p><center><img src="/img/posts/37.jpg"></img></center><h2 id="JavaScript部分"><a href="#JavaScript部分" class="headerlink" title="JavaScript部分"></a>JavaScript部分</h2><p>在开始之前，请确保已经引入了jQuery库，否则会报错的。</p><p>视差效果的逻辑是这样的，每当鼠标移动的时候，根据光标的位置，<code>.poster</code> 的 <code>transforms：translateY</code>,<code>rotate</code>,<code>rotateY</code> 属性将会改变。光标距离页面左上角越远，动画的效果越明显。</p><p>公式就类似于这样的：offsetX=0.5-光标距离页面顶端的位置/宽度。</p><p>为了每个元素的值都不一样，将给每一个光标公式返回的值乘以一个自定义的值，返回HTML的代码给每个会有动画的层元素添加 <code>data-offset=数字</code> 的属性。</p><pre><code>&lt;div data-offset=&quot;15&quot; class=&quot;poster&quot;&gt;    &lt;div class=&quot;shine&quot;&gt;&lt;/div&gt;    &lt;div data-offset=&quot;-2&quot; class=&quot;layer-1&quot;&gt;&lt;/div&gt;    &lt;div class=&quot;layer-2&quot;&gt;&lt;/div&gt;    &lt;div data-offset=&quot;1&quot; class=&quot;layer-3&quot;&gt;&lt;/div&gt;    &lt;div data-offset=&quot;3&quot; class=&quot;layer-4&quot;&gt;&lt;/div&gt;    &lt;div data-offset=&quot;10&quot; class=&quot;layer-5&quot;&gt;&lt;/div&gt;&lt;/div&gt;</code></pre><p>每一个 <code>.layers</code> 的规则都相同，但是我们给他们应用到 <code>translateY</code> 和 <code>translateX</code> 属性上。</p><p><code>data-offset</code> 属性的值越大，动画的效果越明显，可以改变这些值体验下。</p><p>为了代码可读性，我们在JavaScript里给 <code>.poster</code> 赋值给 <code>$poster</code> 变量，<code>.shine</code> 给 <code>$shine</code> 变量，<code>$layer</code> 变量代表所有层，<code>w</code>,<code>h</code>代表页面的宽度和高度。</p><pre><code>var $poster = $(&#39;.poster&#39;),$shine = $(&#39;.shine&#39;),$layer = $(&#39;div[class*=&quot;layer-&quot;]’);</code></pre><p>现在，需要考虑下当光标移动的时候获取到光标位置的问题。我们可以用 <code>$(window)</code> 的 <code>mousemove</code> 事件来实现，这个事件会返回一个JavaScript对象，含有我们需要的位置信息和其他一些我们暂时还用不到的变量。</p><pre><code>$(window).on(&#39;mousemove&#39;, function(e) &#123;    var w=e.currentTarget.innerWidth,h=e.currentTarget.innerHeight;    var offsetX = 0.5 - e.pageX / w, /* where e.pageX is our cursor X coordinate */    offsetY = 0.5 - e.pageY / h,    offsetPoster = $poster.data(&#39;offset&#39;), /* custom value for animation depth */    transformPoster = &#39;translateY(&#39; + -offsetX * offsetPoster + &#39;px) rotateX(&#39; + (-offsetY * offsetPoster) + &#39;deg) rotateY(&#39; + (offsetX * (offsetPoster * 2)) + &#39;deg)&#39;;    /* apply transform to $poster */    $poster.css(&#39;transform&#39;, transformPoster);    /* parallax foreach layer */    /* loop thought each layer */    /* get custom parallax value */    /* apply transform */    $layer.each(function() &#123;        var $this = $(this);        var offsetLayer = $this.data(&#39;offset&#39;) || 0; /* get custom parallax value, if element docent have data-offset, then its 0 */        var transformLayer = &#39;translateX(&#39; + offsetX * offsetLayer + &#39;px) translateY(&#39; + offsetY * offsetLayer + &#39;px)&#39;;                 $this.css(&#39;transform&#39;, transformLayer);    &#125;);&#125;);</code></pre><p>下一步，就是用上面解释的公式来计算<code>offsetY</code>和<code>offsetX</code>的值，然后就是把视差效果应用到<code>.posert</code>和每一个海报层。</p><p>非常酷啊，现在我们就有了一个有视差效果的小部件了。</p><center><img src="/img/posts/38.jpg"></img></center><p>但是还没完,海报上的光泽部分还没设置</p><p>现在回到CSS部分，给<code>.shine</code> div 绝对定位，添加一个渐变颜色效果，设置<code>z-index</code>属性值为100，让它在所有层的上面。</p><pre><code>.shine &#123;    position: absolute;    top: 0; left: 0; right: 0; bottom: 0;    background: linear-gradient(90deg, rgba(255,255,255,.5) 0%,rgba(255,255,255,0) 60%);    z-index: 100;&#125;</code></pre><p>已经有了一个漂亮的闪光层在海报上，但是为了达到更逼真的效果，光照应该随着光标的移动而变化。</p><center><img src="/img/posts/39.jpg"></img></center><p>我们怎么做呢？可能你还记得无聊的初三数学课，当你想着你在学一些你从来都不会用到的公式的时候，我们现在就用到了。</p><p>所以，倾斜的角度应该等于光标与海报中心形成三角形的角度的相反值。（还记得吧，海报的中心就是整个页面的中心啊，也就是页面宽度和高度的二分之一）</p><center><img src="/img/posts/40.jpg"></img></center><p>首先，找到光标与页面中心形成的三角形的直角边，光标与中心连线后作出一个直角三角形。</p><p>然后用 <code>Math.atan2()</code> 函数得到中心点的角度值。注意这个函数的返回值使用弧度值来表示的，所以我们得在CSS中转换成角的度数，用以下公式：</p><p>弧度值*180/pi = 角度值</p><pre><code>var $poster = $(&#39;.poster&#39;);    var $shine = $(&#39;.shine&#39;);    var $layer = $(&#39;div[class *= &quot;layer-&quot;]&#39;);    $poster.data(&quot;offset&quot;,15);    $(window).on(&#39;mousemove&#39;, function(e) &#123;        var w=e.currentTarget.innerWidth,h=e.currentTarget.innerHeight;        var offsetX = 0.5 - e.pageX / w, /* where e.pageX is our cursor X coordinate */        offsetY = 0.5 - e.pageY / h,        offsetPoster = $poster.data(&#39;offset&#39;), /* custom value for animation depth */        transformPoster = &#39;translateY(&#39; + -offsetX * offsetPoster + &#39;px) rotateX(&#39; + (-offsetY * offsetPoster) + &#39;deg) rotateY(&#39; + (offsetX * (offsetPoster * 2)) + &#39;deg)&#39;;        dy = e.pageY - h / 2,        dx = e.pageX - w / 2,        theta = Math.atan2(dy,dx), /* get angle in radians */        angle = theta * 180 / Math.PI; /* convert rad in degrees */        /* apply transform to $poster */        $poster.css(&#39;transform&#39;, transformPoster);        /* parallax foreach layer */        /* loop thought each layer */        /* get custom parallax value */        /* apply transform */        $layer.each(function() &#123;            var $this = $(this);            var offsetLayer = $this.data(&#39;offset&#39;) || 0; /* get custom parallax value, if element docent have data-offset, then its 0 */            var transformLayer = &#39;translateX(&#39; + offsetX * offsetLayer + &#39;px) translateY(&#39; + offsetY * offsetLayer + &#39;px)&#39;;            $this.css(&#39;transform&#39;, transformLayer);        &#125;);    &#125;);    </code></pre><p>你会发现角度值的范围是从-180到180度，以下代码修复这个问题让角度值从0-360度：</p><pre><code>if (angle &lt; 0) &#123;    angle = angle + 360;&#125;</code></pre><p>现在角度有了，就可以随着光标的移动来动态改变渐变颜色的角度值：</p><pre><code>$shine.css(&#39;background&#39;, &#39;linear-gradient(&#39; + (angle - 90) + &#39;deg, rgba(255,255,255,&#39; + e.pageY / h + &#39;) 0%,rgba(255,255,255,0) 80%)&#39;);</code></pre><p>注意：减去90度的原因是 <code>linear-gradient</code> 属性的需要，如果你使用 <code>-webkit-linear-gradient</code>,<code>-moz-linear-gradient</code>属性就没有必要。</p><p>所有都OK了，可以点击来查看示例：</p><p><a href="http://designmodo.com/demo/apple-tv-parallax/">我是DEMO</a></p><p>译自 <a href="http://designmodo.com/apple-tv-effect/">http://designmodo.com/apple-tv-effect/</a></p>]]></content>
      
      
      <categories>
          
          <category> 码路刺客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端编程 </tag>
            
            <tag> jQuery </tag>
            
            <tag> 翻译 </tag>
            
            <tag> CSS </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>17个jQuery实用技巧</title>
      <link href="2016/03/23/17JqueryTips/"/>
      <url>2016/03/23/17JqueryTips/</url>
      
        <content type="html"><![CDATA[<h2 id="检查-jQuery-是否加载"><a href="#检查-jQuery-是否加载" class="headerlink" title="检查 jQuery 是否加载"></a>检查 jQuery 是否加载</h2><p>在使用 jQuery 进行任何操作之前，你需要先确认它已经加载：</p><pre><code>if (typeof jQuery == &#39;undefined&#39;) &#123;  console.log(&#39;jQuery hasn\&#39;t loaded&#39;);&#125; else &#123;  console.log(&#39;jQuery has loaded&#39;);&#125;</code></pre><span id="more"></span><h2 id="返回顶部按钮"><a href="#返回顶部按钮" class="headerlink" title="返回顶部按钮"></a>返回顶部按钮</h2><p>利用 jQuery 中的 animate 和 scrollTop 方法，你无需插件就可以创建简单的 scroll up 效果:</p><pre><code>// 返回顶部$(&#39;a.top&#39;).click(function (e) &#123;  e.preventDefault();  $(document.body).animate(&#123;scrollTop: 0&#125;, 800);&#125;);&lt;!-- 设置锚 --&gt;&lt;a class=&quot;top&quot; href=&quot;#&quot;&gt;Back to top&lt;/a&gt;</code></pre><p>调整 scrollTop 的值即可改变滚动着陆位置。你实际所做的是在 800 毫秒内不断设置文档主体的位置，直到它滚动到顶部。</p><h2 id="预加载图片"><a href="#预加载图片" class="headerlink" title="预加载图片"></a>预加载图片</h2><p>如果你的网页使用了大量并非立即可见的图片（例如悬停鼠标触发的图片），那么预加载这些图片就显得很有意义了:</p><pre><code>$.preloadImages = function () &#123;  for (var i = 0; i &lt; arguments.length; i++) &#123;    $(&#39;&lt;img&gt;&#39;).attr(&#39;src&#39;, arguments[i]);  &#125;&#125;;$.preloadImages(&#39;img/hover-on.png&#39;, &#39;img/hover-off.png&#39;);</code></pre><h2 id="判断图片是否加载完成"><a href="#判断图片是否加载完成" class="headerlink" title="判断图片是否加载完成"></a>判断图片是否加载完成</h2><p>在有些情况下，为了继续执行脚本，你需要检查图片是否已经完全加载:</p><pre><code>$(&#39;img&#39;).load(function () &#123;  console.log(&#39;image load successful&#39;);&#125;);</code></pre><p>同样，换用一个带有 id 或者 class 属性的 <img> 标签，你也可以检查特定图片是否加载完成。</p><h2 id="自动修复失效图片"><a href="#自动修复失效图片" class="headerlink" title="自动修复失效图片"></a>自动修复失效图片</h2><p>如果你在你的网站上发现了失效的图片链接，逐个去替换它们将会是个苦差。这段简单的代码可以很大程度地减轻痛苦：</p><pre><code>$(&#39;img&#39;).on(&#39;error&#39;, function () &#123;  if(!$(this).hasClass(&#39;broken-image&#39;)) &#123;    $(this).prop(&#39;src&#39;, &#39;img/broken.png&#39;).addClass(&#39;broken-image&#39;);  &#125;&#125;);</code></pre><p>即使你暂无任何失效的链接，添加这段代码也不会有任何损失。</p><h2 id="鼠标悬停切换-class"><a href="#鼠标悬停切换-class" class="headerlink" title="鼠标悬停切换 class"></a>鼠标悬停切换 class</h2><p>如果你希望在用户将鼠标悬停在某个可点击元素上时改变它的视觉效果，你可以在该元素被悬停时给它添加一个 class，当鼠标不再悬停时，移除这个 class：</p><pre><code>$(&#39;.btn&#39;).hover(function () &#123;  $(this).addClass(&#39;hover&#39;);&#125;, function () &#123;  $(this).removeClass(&#39;hover&#39;);&#125;);</code></pre><p>如果你还寻求更简单的途径，可以使用 toggleClass 方法，仅需添加必要的 CSS：</p><pre><code>$(&#39;.btn&#39;).hover(function () &#123;  $(this).toggleClass(&#39;hover&#39;);&#125;);</code></pre><p>注：在这种情况下，使用 CSS 或许是一个更快速的解决方案，但这种方法仍然值得稍作了解。</p><h2 id="禁用输入字段"><a href="#禁用输入字段" class="headerlink" title="禁用输入字段"></a>禁用输入字段</h2><p>有时，你可能希望在用户完成特定操作（例如，勾选“我已阅读条例”的确认框）前禁用表单的提交按钮或禁用其中某个输入框。你可以在你的输入字段上添加 disabled 属性，而后你能在需要时启用它：</p><pre><code>$(&#39;input[type=&quot;submit&quot;]&#39;).prop(&#39;disabled&#39;, true);</code></pre><p>你只需在输入字段上再次运行 prop 方法, 但是这一次把 disabled 值改为 false：</p><pre><code>$(&#39;input[type=&quot;submit&quot;]&#39;).prop(&#39;disabled&#39;, false);</code></pre><h2 id="阻止链接加载"><a href="#阻止链接加载" class="headerlink" title="阻止链接加载"></a>阻止链接加载</h2><p>有时你不希望链接到指定页面或者重载当前页面，而是想让它们干些别的，例如触发其它脚本。这需要在阻止默认动作上做些文章：</p><pre><code>$(&#39;a.no-link&#39;).click(function (e) &#123;  e.preventDefault();&#125;);</code></pre><h2 id="缓存-jQuery-选择器"><a href="#缓存-jQuery-选择器" class="headerlink" title="缓存 jQuery 选择器"></a>缓存 jQuery 选择器</h2><p>想想你在项目中一次又一次地写了多少相同的选择器吧。每个 $(‘.element’) 都必须查询一次整个 DOM,不管它是否曾这样执行过。作为代替，我们只运行一次选择器，并把结果储存在一个变量中：</p><pre><code>var blocks = $(&#39;#blocks&#39;).find(&#39;li&#39;);</code></pre><p>现在你能在任何地方使用 blocks 变量而无需每次查询 DOM 了:</p><pre><code>$(&#39;#hideBlocks&#39;).click(function () &#123;  blocks.fadeOut();&#125;);$(&#39;#showBlocks&#39;).click(function () &#123;  blocks.fadeIn();&#125;);</code></pre><p>缓存 jQuery 的选择器是种简单的性能提升。</p><h2 id="切换淡出-滑动"><a href="#切换淡出-滑动" class="headerlink" title="切换淡出 / 滑动"></a>切换淡出 / 滑动</h2><p>淡出和滑动都是我们在 jQuery 中大量使用的效果。你可能只想在用户点击后展现某个元素，此时用 fadeIn 和 slideDown 方法就很完美。但是如果你希望这个元素在首次点击时出现，在再次点击时消失，这段代码就很有用了：</p><pre><code>// 淡出$(&#39;.btn&#39;).click(function () &#123;  $(&#39;.element&#39;).fadeToggle(&#39;slow&#39;);&#125;);// 切换$(&#39;.btn&#39;).click(function () &#123;  $(&#39;.element&#39;).slideToggle(&#39;slow&#39;);&#125;);</code></pre><h2 id="简单的手风琴效果"><a href="#简单的手风琴效果" class="headerlink" title="简单的手风琴效果"></a>简单的手风琴效果</h2><p>这是一个快速实现手风琴效果的简单方法:</p><pre><code>// 关闭所有面板$(&#39;#accordion&#39;).find(&#39;.content&#39;).hide();// 手风琴效果$(&#39;#accordion&#39;).find(&#39;.accordion-header&#39;).click(function () &#123;  var next = $(this).next();  next.slideToggle(&#39;fast&#39;);  $(&#39;.content&#39;).not(next).slideUp(&#39;fast&#39;);  return false;&#125;);</code></pre><p>通过添加这段脚本，你实际要做的只是提供必要的 HTML 元素以便它正常运行。</p><h2 id="使两个-div-等高"><a href="#使两个-div-等高" class="headerlink" title="使两个 div 等高"></a>使两个 div 等高</h2><p>有时你希望无论两个 div 各自包含什么内容，它们总有相同的高度：</p><pre><code>$(&#39;.div&#39;).css(&#39;min-height&#39;, $(&#39;.main-div&#39;).height());</code></pre><p>这个例子设置了 min-height，意味着高度可以大于主 div 而不能小于它。然而，更灵活的方法是遍历一组元素，然后将高度设置为最高元素的高度：</p><pre><code>var $columns = $(&#39;.column&#39;);var height = 0;$columns.each(function () &#123;  if ($(this).height() &gt; height) &#123;    height = $(this).height();  &#125;&#125;);$columns.height(height);</code></pre><p>如果你希望所有列高度相同：</p><pre><code>var $rows = $(&#39;.same-height-columns&#39;);$rows.each(function () &#123;  $(this).find(&#39;.column&#39;).height($(this).height());&#125;);</code></pre><h2 id="在新标签页-新窗口打开外部链接"><a href="#在新标签页-新窗口打开外部链接" class="headerlink" title="在新标签页 / 新窗口打开外部链接"></a>在新标签页 / 新窗口打开外部链接</h2><p>在一个新的浏览器标签页或窗口中打开外部链接，并确保相同来源的链接在同一个标签页或者窗口中打开：</p><pre><code>$(&#39;a[href^=&quot;http&quot;]&#39;).attr(&#39;target&#39;, &#39;_blank&#39;);$(&#39;a[href^=&quot;//&quot;]&#39;).attr(&#39;target&#39;, &#39;_blank&#39;);$(&#39;a[href^=&quot;&#39; + window.location.origin + &#39;&quot;]&#39;).attr(&#39;target&#39;, &#39;_self&#39;);</code></pre><p>注： window.location.origin 在 IE10 中不可用. 这个修复方案 正是关注于该问题。</p><h2 id="通过文本查找元素"><a href="#通过文本查找元素" class="headerlink" title="通过文本查找元素"></a>通过文本查找元素</h2><p>通过使用 jQuery 的 contains() 选择器，你能够查找元素内容中的文本。若文本不存在，该元素将被隐藏：</p><pre><code>var search = $(&#39;#search&#39;).val();$(&#39;div:not(:contains(&quot;&#39; + search + &#39;&quot;))&#39;).hide();</code></pre><h2 id="在-visibility-属性变化时触发"><a href="#在-visibility-属性变化时触发" class="headerlink" title="在 visibility 属性变化时触发"></a>在 visibility 属性变化时触发</h2><p>当用户的焦点离开或者重新回到某个标签页时，触发 Javasrcipt：</p><pre><code>$(document).on(&#39;visibilitychange&#39;, function (e) &#123;  if (e.target.visibilityState === &quot;visible&quot;) &#123;    console.log(&#39;Tab is now in view!&#39;);  &#125; else if (e.target.visibilityState === &quot;hidden&quot;) &#123;    console.log(&#39;Tab is now hidden!&#39;);  &#125;&#125;);</code></pre><h2 id="Ajax-调用错误处理"><a href="#Ajax-调用错误处理" class="headerlink" title="Ajax 调用错误处理"></a>Ajax 调用错误处理</h2><p>当一个 Ajax 调用返回 404 或 500 错误时，错误处理程序将被执行。若错误处理未被定义，其它 jQuery 代码可能不再有效。所以定义一个全局的 Ajax 错误处理：</p><pre><code>$(document).ajaxError(function (e, xhr, settings, error) &#123;  console.log(error);&#125;);</code></pre><h2 id="链式插件调用"><a href="#链式插件调用" class="headerlink" title="链式插件调用"></a>链式插件调用</h2><p>jQuery 允许通过“链式”插件调用的方法，来缓解反复查询 DOM 和创建多个 jQuery 对象的过程。例如，下面的代码代表着你的插件调用：</p><pre><code>$(&#39;#elem&#39;).show();$(&#39;#elem&#39;).html(&#39;bla&#39;);$(&#39;#elem&#39;).otherStuff();</code></pre><p>通过使用链式操作，有了显著的改善:</p><pre><code>$(&#39;#elem&#39;)  .show()  .html(&#39;bla&#39;)  .otherStuff();</code></pre><p>另一种方法是在变量（以 $ 为前缀）中，对元素进行缓存：</p><pre><code>var $elem = $(&#39;#elem&#39;);$elem.hide();$elem.html(&#39;bla&#39;);$elem.otherStuff();</code></pre><p>无论是链式操作，还是缓存元素，都是 jQuery 中用以简化和优化代码的最佳实践。</p><p>转自<a href="https://github.com/xitu/gold-miner/blob/master/TODO/jQuery-Tips-Everyone-Should-Know.md">https://github.com/xitu/gold-miner/blob/master/TODO/jQuery-Tips-Everyone-Should-Know.md</a></p>]]></content>
      
      
      <categories>
          
          <category> 码路刺客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 转载 </tag>
            
            <tag> 前端编程 </tag>
            
            <tag> jQuery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>365cons：每天一枚图标，可免费下载</title>
      <link href="2016/03/23/IconForEveryday/"/>
      <url>2016/03/23/IconForEveryday/</url>
      
        <content type="html"><![CDATA[<p>大家都听过“An apple a day keeps the doctor away”这句俚语，现在网络上也开始流行养成习惯持续去做某一件事情，例如先前介绍过的100 Days UI百日设计挑战每天发布一个全新使用者界面设计来启发灵感，当然你也可以为自己设定一个习惯养成目标，HabitRPG甚至让生活变成游戏，让你通过每日任务来建立好的生活习惯，这些想法都值得我们好好思考如何在一成不变的工作中产生更多价值。</p><span id="more"></span><center><img src="/img/posts/21.jpg"></img></center><p>最近发现一个很棒的项目365cons，由一位西雅图视觉设计师Amy开发，网站每天会更新释出一个免费图标让使用者下载！Amy给自己立下一个目标：在2016年的每一天都发布一款全新图标，借此探索各种风格及练习设计相关技术。这些图标都与设计师生活息息相关，不局限于特定主题。</p><p>365cons提供的图标格式包括：SVG、PNG两种版本，每一个图标都能在网页预览，无须注册就能免费下载使用。图标授权方式采MIT License，可被免费下载使用于任何地方。</p><p>站点名称：<strong>365cons</strong></p><p>网站连接：<a href="http://www.365cons.com/">http://www.365cons.com/</a></p><p><strong>使用教学</strong></p><p><strong>STEP 1</strong></p><p>开启365cons网站后，可以看到网站收录的免费图标项目，这些图标都是由设计师亲自设计开发，每日更新，不过网站没有提供订阅方式，如果你想追踪更新，那么可以定时回到网站来逛逛。</p><center><img src="/img/posts/22.jpg"></img></center><p><strong>STEP 2</strong></p><p>在每一个图标下方，会有该图标编号、名称，以及SVG和PNG档案下载连接。</p><center><img src="/img/posts/23.jpg"></img></center><p>如果你有任何想法或建议，都可以通过网站上的网址与设计师联系，这些图标设计都非常可爱，也跟一般在外面看到的图标集不太一样，多了那么一点独特与天真浪漫！喜欢的话能将它下载下来使用，完全免费。</p><p>转自 <a href="http://toutiao.com/a6262086085100273922/">http://toutiao.com/a6262086085100273922/</a></p>]]></content>
      
      
      <categories>
          
          <category> IT看客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 转载 </tag>
            
            <tag> 设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>有道笔记支持Markdown啦</title>
      <link href="2016/03/23/YouDaoNoteMarkdownSupport/"/>
      <url>2016/03/23/YouDaoNoteMarkdownSupport/</url>
      
        <content type="html"><![CDATA[<p>继有道云协作率先支持markdown语法之后，令人振奋的markdown编辑功能现已在web版有道云笔记优雅上线，移动端也已支持预览！<br>不要着急，PC客户端也将随后支持markdown的编辑预览！</p><h2 id="何为Markdown？"><a href="#何为Markdown？" class="headerlink" title="何为Markdown？"></a>何为Markdown？</h2><p>Markdown是一种轻量级的<strong>「标记语言」</strong>，通常为程序员群体所用，目前它已是全球最大的技术分享网站GitHub和技术问答网站StackOverFlow的御用书写格式。</p><span id="more"></span><p>非技术类笔记用户，千万不要被<strong>「标记」</strong>、<strong>「语言」</strong>吓到，markdown的语法十分简单，常用的标记符号不超过十个，用于日常写作记录绰绰有余，不到半小时就能完全掌握。</p><p>就是这十个不到的标记符号，却能让人优雅地沉浸式记录，专注内容而不是纠结排版，达到<strong>「心中无尘，码字入神」</strong>的境界。</p><h2 id="Markdown有哪些优点？"><a href="#Markdown有哪些优点？" class="headerlink" title="Markdown有哪些优点？"></a>Markdown有哪些优点？</h2><ul><li>易写：纵使文科出身的你，半小时也能完全掌握常用的markdown基本语法.</li><li>易读：兼顾「什么人都能打开」和「排版样式不变」。所谓「什么人都能打开」是指，Markdown属于兼容性极强的纯文本，可以用所有文本编辑器打开，避免了「用Windows的人打不开.pages文件」的情况发生;Markdown文本轻松可转成HTML、电子书等格式，而HTML是整个万维网（web）的标记语言，也是目前主流电子书格式（EPUB、mobi、Kindle专有格式.azw）所用的标记语言。人们如果采用Markdown标注格式，对日后的文件转换工作将大有裨益。所谓「排版样式不变」是指，在转化为富文本/HTML等格式后依然可以保留原本的排版和阅读体验。不会出现「我这篇稿子是用旧版Word写的，你用新版Word看可能格式会有点问题」的情况。</li></ul><h2 id="利用新增markdown功能做什么？"><a href="#利用新增markdown功能做什么？" class="headerlink" title="利用新增markdown功能做什么？"></a>利用新增markdown功能做什么？</h2><ul><li><strong>1.代码高亮</strong></li></ul><center><img src="/img/posts/24.jpg"></img></center><ul><li><strong>2.制作待办事项Todo list</strong></li></ul><center><img src="/img/posts/25.jpg"></img></center><ul><li><strong>3.高效绘制 流程图、序列图、甘特图、表格</strong></li></ul><p><strong>流程图：</strong></p><center><img src="/img/posts/26.jpg"></img></center><p><strong>序列图：</strong></p><center><img src="/img/posts/27.jpg"></img></center><p><strong>甘特图：</strong></p><center><img src="/img/posts/28.jpg"></img></center><p><strong>表格：</strong></p><center><img src="/img/posts/29.jpg"></img></center><ul><li><strong>4.书写LaTeX公式</strong></li></ul><center><img src="/img/posts/30.jpg"></img></center><p>够酷吗？？</p><p>如果你是<strong>程序员</strong>，你可以用来写日志、技术文稿、记录代码片段、起草邮件</p><p>如果你是<strong>科研人员/工科学生</strong>，你可以用来撰写科技论文，记录工科笔记</p><p>如果你是<strong>文字工作者/热爱文字</strong>的人，你可以用来写作</p><p>如果你是<strong>微信运营人员</strong>，你可以用来替微信编辑器编写微信文章</p><h2 id="web版有道云笔记做到了什么？"><a href="#web版有道云笔记做到了什么？" class="headerlink" title="web版有道云笔记做到了什么？"></a>web版有道云笔记做到了什么？</h2><ul><li><strong>1.实时同步预览，即看即所得</strong></li></ul><p>我们将笔记编辑界面一分为二，左边为编辑区，右边为预览区，两区滚动条同步。在编辑区的操作能够实时反映在预览区，方便及时调整和查看最终版面效果。</p><ul><li><strong>2.工具栏内置markdown语法，方便新手学习</strong></li></ul><p>编辑页面顶端的工具栏有对应代码，如果你是一个不熟悉markdown语法的新手，可以先尝试用编辑栏辅助操作。也可以在网上搜索「markdown语法指南」进行学习。</p><p>当然，如果你觉得工具栏太打扰，点击下方分界条即可隐藏工具栏，切换到极简编辑环境。</p><ul><li><strong>3.实时云端保存</strong></li></ul><p>markdown模式继承了有道云笔记的优良传统，你每一次击键的内容都会实时保存在云端，无需担心浏览器崩溃、设备没电、突然断网等情况。对于写作者来说，更是再也不用担心因为各种原因痛失文稿的情况了。</p><h2 id="web版Markdown实操指南"><a href="#web版Markdown实操指南" class="headerlink" title="web版Markdown实操指南"></a>web版Markdown实操指南</h2><ul><li>1.点击“新建”按钮，可选择新建markdown文件</li></ul><center><img src="/img/posts/31.jpg"></img></center><ul><li>2.可直接通过markdown语句编辑文件，也可以使用编辑器实现格式调整</li></ul><center><img src="/img/posts/32.jpg"></img></center><ul><li>3.界面大小可点击分界条调整。<br>点击“1”处，编辑器收起；<br>点击“2”处，左侧编辑区域全屏。</li></ul><center><img src="/img/posts/33.jpg"></img></center><p>点击后效果如配图4</p><center><img src="/img/posts/34.jpg"></img></center><p>转自 <a href="http://toutiao.com/a6265175131246657794/">http://toutiao.com/a6265175131246657794/</a></p>]]></content>
      
      
      <categories>
          
          <category> IT看客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IT资讯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用CSS创建翻转动画</title>
      <link href="2016/03/19/CSS-For-Flip-Effect/"/>
      <url>2016/03/19/CSS-For-Flip-Effect/</url>
      
        <content type="html"><![CDATA[<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CSS动画是非常有意思的，用一些简单的属性就可以创建出来，从优雅的淡入到更加惊艳的效果都可以，翻页效果就是其中之一，它通过在容器的正面跟反面包含不同的内容来加以实现。本文就是用尽可能简单的方法来实现这种效果。</p><center><img src="/img/posts/CSS-For-Flip-Effect.png"></img></center><span id="more"></span><p><a href="https://davidwalsh.name/demo/css-flip.php">查看演示</a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;注：本文不是第一篇讲述这种效果怎么做的文章，但是我发现很多将这个的文章都过于复杂，添加了很多额外的样式代码到案例里面，让读者搞不清那些代码是需要的哪些不是。本文不会有这个问题，只含有一些必要的样式，你可以随意美化翻转的每个页。</p><h3 id="HTML结构"><a href="#HTML结构" class="headerlink" title="HTML结构"></a>HTML结构</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以下HTML结构就是为了达到有两面的效果的：</p><pre><code>    &lt;div class=&quot;flip-container&quot; ontouchstart=&quot;this.classList.toggle(&#39;hover&#39;);&quot;&gt;            &lt;div class=&quot;flipper&quot;&gt;                    &lt;div class=&quot;front&quot;&gt;                            &lt;!-- 正面内容 --&gt;                    &lt;/div&gt;                    &lt;div class=&quot;back&quot;&gt;                            &lt;!-- 反面内容 --&gt;                    &lt;/div&gt;            &lt;/div&gt;    &lt;/div&gt;</code></pre><p>　　正如你预料的，有两个内容面板：正面跟反面。你将惊奇的发现包含的CSS样式不多：</p><pre><code>/* 整个容器，包括透视 */.flip-container &#123;    perspective: 1000;&#125;/* 鼠标放上去的时候翻转 */.flip-container:hover .flipper, .flip-container.hover .flipper &#123;    transform: rotateY(180deg);&#125;.flip-container, .front, .back &#123;    width: 320px;    height: 480px;&#125;/* 翻转速度设置 */.flipper &#123;    transition: 1.5s;    transform-style: preserve-3d;    position: relative;&#125;/* 翻转页的时候隐藏背面 */.front, .back &#123;    backface-visibility: hidden;    position: absolute;    top: 0;    left: 0;&#125;/* 前面板放在上面 */.front &#123;    z-index: 2;    /* for firefox 31 */    transform: rotateY(0deg);&#125;/* 背面初始的时候隐藏 */.back &#123;    transform: rotateY(180deg);&#125;</code></pre><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们来看下大体的实现过程：</p><ul><li>最外面的容器设置了整个动画区域的<a href="https://developer.mozilla.org/en-US/docs/Web/CSS/perspective">透视</a>范围</li><li>内层的容器是真正用于翻转的元素，父容器被激活的时候翻转了180度。这也是控制翻转速度的地方，把翻转角度改成-180度就会反方向翻转了。</li><li>正面和反面的元素被决定定位了，这样他们就可以很好的层叠在彼此之上。他们的 <code>backface-visibility</code> 属性是 <code>hidden</code>, 所以当正面或者反面显示的时候，背面就隐藏起来。</li><li>正面元素比反面元素有一个比较高的 <code>z-index</code> 属性值所以它可以预先编码和显示在上层。</li><li>反面元素旋转了180度，成了背面。</li></ul><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以上就是所有要做的了，将这个简单的结构放在你想放的地方，修改你需要的正面跟反面的样式。</p><h3 id="来自CSS动画专家Ana-Tudor的说明"><a href="#来自CSS动画专家Ana-Tudor的说明" class="headerlink" title="来自CSS动画专家Ana Tudor的说明"></a>来自CSS动画专家Ana Tudor的说明</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在卡片元素上给属性设置确定的值(比如 <code>overflow: hidden</code>)将禁止有3D变换的子元素。我相信这是很重要的，因为我就曾这样设置过，导致所有的子元素都成了一样的3D变换了。</p><p>##CSS翻转开关##</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果你想用JavaScript代码来控制元素的翻转，一个简单的CSS类样式就可以了</p><pre><code>.flip-container:hover .flipper, .flip-container.hover .flipper, .flip-container.flip .flipper &#123;    transform: rotateY(180deg);&#125;</code></pre><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;添加这个翻转的类样式到你想要用JavaScript控制的元素里面，使用下面的JavaScript代码就可以起作用了。</p><pre><code>document.querySelector(&quot;#myCard&quot;).classList.toggle(&quot;flip&quot;)</code></pre><h3 id="CSS垂直翻转"><a href="#CSS垂直翻转" class="headerlink" title="CSS垂直翻转"></a>CSS垂直翻转</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;想要实现垂直翻转就需要添加 <code>transform-origin</code> 坐标轴的值。原来的翻转样式需要更新才能实现垂直地翻转。</p><pre><code>.vertical.flip-container &#123;    position: relative;&#125;.vertical .back &#123;    transform: rotateX(180deg);&#125;.vertical.flip-container .flipper &#123;    transform-origin: 100% 213.5px; /* 高度值的一半 */&#125;.vertical.flip-container:hover .flipper &#123;    transform: rotateX(-180deg);&#125;</code></pre><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;你将看到绕着X轴翻转的效果。</p><h3 id="支持IE浏览器"><a href="#支持IE浏览器" class="headerlink" title="支持IE浏览器"></a>支持IE浏览器</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;要兼容IE浏览器就需要对代码进行一些改动，因为IE还没兼容所有现代 <code>transform</code> 的属性。 本质上还是正面跟反面元素同时翻转。</p><pre><code>/* 整个容器，包括透视 */.flip-container &#123;    perspective: 1000;    transform-style: preserve-3d;&#125;/*  注意这里有修改 */.flip-container:hover .back &#123;    transform: rotateY(0deg);&#125;.flip-container:hover .front &#123;    transform: rotateY(180deg);&#125;.flip-container, .front, .back &#123;    width: 320px;    height: 480px;&#125;/* 翻转速度设置 */.flipper &#123;    transition: 0.6s;    transform-style: preserve-3d;    position: relative;&#125;/* 翻转页的时候隐藏背面 */.front, .back &#123;    backface-visibility: hidden;    transition: 0.6s;    transform-style: preserve-3d;    position: absolute;    top: 0;    left: 0;&#125;/* 注意这里有修改 */.front &#123;    z-index: 2;    transform: rotateY(0deg);&#125;/* 背面初始的时候隐藏 */.back &#123;    transform: rotateY(-180deg);&#125;/*     垂直翻转的修改*/.vertical.flip-container &#123;    position: relative;&#125;.vertical .back &#123;    transform: rotateX(180deg);&#125;.vertical.flip-container:hover .back &#123;    transform: rotateX(0deg);&#125;.vertical.flip-container:hover .front &#123;    transform: rotateX(180deg);&#125;</code></pre><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上面的代码就会在IE10以上工作了。</p><p><a href="https://davidwalsh.name/demo/css-flip.php">查看演示</a></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CSS翻转动画是很经典的，是CSS动画运用的代表性例子。稍加深入，就是3D CSS动画效果了，CSS代码真的算是很少了。这个效果对于HTML5游戏是很优雅的。对于卡片式的效果，简直完美。</p><p>本文译自<a href="https://davidwalsh.name/css-flip">https://davidwalsh.name/css-flip</a></p>]]></content>
      
      
      <categories>
          
          <category> 码路刺客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端编程 </tag>
            
            <tag> 翻译 </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web蓝天白云的极致体验</title>
      <link href="2016/03/17/Web-Cloud-Effect/"/>
      <url>2016/03/17/Web-Cloud-Effect/</url>
      
        <content type="html"><![CDATA[<p>还在感叹Web 3D云效果(<a href="/2016/03/15/CSS-3D-Cloud">《怎样用CSS做出3D效果的云》</a>)的时候，发现一个将这种效果用到极致的网站。这个网站貌似是个纯净水品牌的展示网站，但是这不妨碍给人一种引人入胜的体验。</p><p><img src="/img/posts/42.png" alt="Smartewater网站"></p><span id="more"></span><p><a href="http://www.drinksmartwater.com/#/home">Smartewater网站链接</a> </p><p>据介绍，网页是运用<a href="http://baike.baidu.com/link?url=PXMRpnJpNZFp1uF321fpVLsVJdBcB3LFboHIop_y7OSvE_9NAsTqhHwEnpG6wtI588UE2lJw5bLenky7zvE4b_">WebGL</a>,<a href="http://www.w3school.com.cn/html5/html5_canvas.asp">canvas</a>和<a href="http://www.w3school.com.cn/css3/css3_3dtransform.asp">CSS3D</a>技术做的，实现了不错的用户交互。</p><p>有兴趣可以观赏下，寻找一些灵感。整个网站页面设计还是很高端洋气的(废话，就是国外大牛做的)，页面上下滚动时的视差效果，云层缥缈的动画，阅兵蓝的背景，给人清新之感。交互设计这部分还可以控制云层，随着鼠标移动的方向在云层中穿梭，有木有在空中翱翔之感，噢，页面还有音乐的。</p><p>不过美中还是有瑕疵的：卡顿。下面来几幅大图</p><p><img src="/img/posts/43.png" alt="Smartewater网站界面"></p><p><img src="/img/posts/44.png" alt="导航栏"></p><p><img src="/img/posts/45.png" alt="交互：云层拉伸"></p><p><img src="/img/posts/46.png" alt="单击左键弹出模式菜单"></p><p><img src="/img/posts/47.png" alt="按住左键随意画各种形状的云"></p>]]></content>
      
      
      <categories>
          
          <category> IT看客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端编程 </tag>
            
            <tag> 原创 </tag>
            
            <tag> IT资讯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>怎样用CSS做出3D效果的云</title>
      <link href="2016/03/15/CSS-3D-Cloud/"/>
      <url>2016/03/15/CSS-3D-Cloud/</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>本文将介绍如何一步一步制作出一些3D效果的云彩，会用到一些高级的属性，主要是如何通过CSS的3D变换效果来实现，如果你想了解更多，<a href="https://developer.mozilla.org/En/CSS/Using_CSS_transforms">这地方是个不错的开始</a>。</p><p><img src="/img/posts/41.png" alt="静态效果图"></p><span id="more"></span><p>本教程将会分成几个部分，每一部分都会有详细的步骤让你理解HTML,CSS和Javascript都是如何工作的，每一步都有衔接，以及一个链接来测试单个部分的代码效果。<font color="brown"><strong>教程里的代码是最终demo的简化版，但是主要区别在每一部分都有说明</strong></font>。</p><ul><li>1.新建一个世界和视角</li><li>2.向我们创建的世界里添加对象</li><li>3.往我们的对象上添加层</li><li>4.让3D效果运行起来</li><li>5.最后总结</li></ul><h2 id="新建一个世界和视角"><a href="#新建一个世界和视角" class="headerlink" title="新建一个世界和视角##"></a>新建一个世界和视角##</h2><p>首先，我们需要两个<code>div</code>元素: <code>viewport</code> 和 <code>world</code>。剩下的部分将会在后面动态的加入。</p><p><code>viewport</code> 包含了整一个屏幕和一个摄影机。由于在CSS 3D变换中没有摄影机本身，就假想你在通过一个透明的玻璃屏幕来看屏幕里的视野，你也可以改变看视野的方向。我们将会把所有对象都放在里面，然后对他们进行变换。</p><p><code>world</code> 是一个用来固定所有对象的 <code>div</code> 盒子。 旋转，转化或者放大都变换都会改变我们的元素。<font color="brown"><strong>为简单起见，我将在需要使用浏览器前缀(-webkit,-moz,-0,-ms等等)的地方使用没有前缀的CSS属性</strong></font>。</p><p>这就是我们需要的所有盒子模型：</p><pre><code>&lt;div id=&quot;viewport&quot;&gt;    &lt;div id = &quot;world&quot; &gt;&lt;/div&gt;&lt;/div&gt;</code></pre><p>下面是我们定义的两个CSS样式,这里非常重要的是要将 <code>world</code> div 放在 <code>viewport</code> div里面，否则将无法渲染场景。要记住你将旋转一个放置在文档里的元素，像其他2D元素那样。</p><pre><code>#viewport&#123;    bottom:0;    left:0;    overflow:hidden;    perspective:400;    position:absolute;    right:0;    top:0;&#125;#world&#123;    height: 512px;    left: 50%;    margin-left: -256px;    margin-top: -256px;    position: absolute;    top: 50%;    transform-style: preserve-3d;    width: 512px;&#125;</code></pre><p>现在写一些代码来初始化我们的对象，绑定 <code>mousemove</code> 事件以及定义 <code>updateView()</code> 函数。</p><pre><code>/*    Defining our variables    world and viewport are DOM elements,    worldXAngle and worldYAngle are floats that hold the world rotations,    d is an int that defines the distance of the world from the camera */var world = document.getElementById( &#39;world&#39; ),    viewport = document.getElementById( &#39;viewport&#39; ),    worldXAngle = 0,    worldYAngle = 0,    d = 0;/*    Event listener to transform mouse position into angles     from -180 to 180 degress, both vertically and horizontally*/window.addEventListener( &#39;mousemove&#39;, function( e ) &#123;    worldYAngle = -( .5 - ( e.clientX / window.innerWidth ) ) * 180;    worldXAngle = ( .5 - ( e.clientY / window.innerHeight ) ) * 180;    updateView();&#125; );/*    Changes the transform property of world to be    translated in the Z axis by d pixels,    rotated in the X axis by worldXAngle degrees and    rotated in the Y axis by worldYAngle degrees.*/function updateView() &#123;    world.style.transform = &#39;translateZ( &#39; + d + &#39;px ) \    rotateX( &#39; + worldXAngle + &#39;deg) \    rotateY( &#39; + worldYAngle + &#39;deg)&#39;;&#125;</code></pre><p><code>world</code> 是红色的，<code>viewport</code> 有背景色来模拟天空，<code>mousewheel</code>滚轮事件来监听摄影机的远近距离。移动鼠标来观察红色的 <code>div</code> 是如何改变方向的。</p><p><a href="https://www.clicktorelease.com/blog/css3dclouds/1-base.html">这是这一部分的演示链接</a></p><h2 id="向我们创建的世界里添加对象"><a href="#向我们创建的世界里添加对象" class="headerlink" title="向我们创建的世界里添加对象##"></a>向我们创建的世界里添加对象##</h2><p>现在我们开始添加真正的3D内容。我们加入一些新的 <code>div</code> 放置在 <code>world</code> 空间里。有必要添加几个绝对位置的 <code>div</code> 作为 <code>world</code> 的子节点，但是用3D变换来替代 <code>left</code> 和 <code>top</code>, 他们默认会出现在 <code>world</code> 的中央位置。<code>width</code> 和 <code>height</code>属性无关紧要，因为这些新的容器是放置那些真实云的层。如果正式应用里最好将他们居中(通过设置 <code>margin-left</code> 和 <code>margin-top</code> 属性 来设置 <code>width</code> 和 <code>height</code> 一半的负数值)。</p><pre><code>.cloudBase &#123;    height: 20px;    left: 256px;    margin-left: -10px;    margin-top: -10px;    position: absolute;    top: 256px;    width: 20px;&#125;</code></pre><p>我们添加 <code>generate()</code> 和 <code>createCloud()</code> 方法来充实 <code>world</code>。<font color="brown"><strong>注意 random_{var} 不是真实的变量值，而是一个代码占位符,应该返回一个给定范围内的随机数</strong></font>。</p><pre><code>/*    objects is an array of cloud bases    layers is an array of cloud layers*/    var objects = [],    layers = [];/*    Clears the DOM of previous clouds bases     and generates a new set of cloud bases*/    function generate() &#123;        objects = [];        layers = [];        if ( world.hasChildNodes() ) &#123;            while ( world.childNodes.length &gt;= 1 ) &#123;                world.removeChild( world.firstChild );               &#125;         &#125;        for( var j = 0; j &lt;; 5; j++ ) &#123;            objects.push( createCloud() );        &#125;    &#125;/*    Creates a single cloud base: a div in world    that is translated randomly into world space.    Each axis goes from -256 to 256 pixels.*/    function createCloud() &#123;        var div = document.createElement( &#39;div&#39;  );        div.className = &#39;cloudBase&#39;;        var t = &#39;translateX( &#39; + random_x + &#39;px ) \        translateY( &#39; + random_y + &#39;px ) \        translateZ( &#39; + random_z + &#39;px )&#39;;        div.style.transform = t;        world.appendChild( div );        return div;    &#125;</code></pre><p>页面中那些粉红色方块的层就是云层模型了，这里有一个 <code>p</code> 变量来更简单的改变 <code>viewport.style.perspective</code> 的值。试着去改变这个变量来观察我们的摄影机是如何变化的。这个值越大，视角的垂直度就会越大。<font color="brown"><strong>再次提醒，那个 randowm_{var} 并不是真正的变量。</strong></font></p><p><a href="https://www.clicktorelease.com/blog/css3dclouds/2-objects.html">点我来观察这部分的演示</a></p><h2 id="往我们的对象上添加层"><a href="#往我们的对象上添加层" class="headerlink" title="往我们的对象上添加层##"></a>往我们的对象上添加层##</h2><p>现在有趣的事情开始发生了，我们添加了几个绝对位置的“云层” <code>div</code> 盒子来表示云，这些盒子将会用来装载云的贴图。</p><pre><code>.cloudLayer &#123;    height: 256px;    left: 50%;    margin-left: -128px;    margin-top: -128px;    position: absolute;    top: 50%;    width: 256px;&#125;</code></pre><p>旧的 <code>createCloud()</code> 函数做了一些改动，添加了云层的随机数。</p><pre><code>/*    Creates a single cloud base and adds several cloud layers.    Each cloud layer has random position ( x, y, z ), rotation (a)    and rotation speed (s). layers[] keeps track of those divs.*/function createCloud() &#123;    var div = document.createElement( &#39;div&#39;  );    div.className = &#39;cloudBase&#39;;    var t = &#39;translateX( &#39; + random_x + &#39;px ) \        translateY( &#39; + random_y + &#39;px ) \        translateZ( &#39; + random_z + &#39;px )&#39;;    div.style.transform = t;    world.appendChild( div );        for( var j = 0; j &lt; 5 + Math.round( Math.random() * 10 ); j++ ) &#123;        var cloud = document.createElement( &#39;div&#39; );        cloud.className = &#39;cloudLayer&#39;;                cloud.data = &#123;             x: random_x,            y: random_y,            z: random_z,            a: random_a,            s: random_s        &#125;;        var t = &#39;translateX( &#39; + random_x + &#39;px ) \            translateY( &#39; + random_y + &#39;px ) \            translateZ( &#39; + random_z + &#39;px ) \            rotateZ( &#39; + random_a + &#39;deg ) \            scale( &#39; + random_s + &#39; )&#39;;        cloud.style.transform = t;                div.appendChild( cloud );        layers.push( cloud );    &#125;        return div;&#125;</code></pre><p><a href="https://www.clicktorelease.com/blog/css3dclouds/3-layers.html">点我来观察第三部分的演示</a></p><p>云层就是那些蓝色带有一点白色边边的部分，看起来相当有层次感呐。移动鼠标来观察下每一层的位置是怎样的以及如何旋转的。</p><h2 id="让3D效果运行起来"><a href="#让3D效果运行起来" class="headerlink" title="让3D效果运行起来##"></a>让3D效果运行起来##</h2><p>接下来就是见证奇迹的时刻！我们用 <code>layers[]</code> 来为世界里每一个单独的云层建立一个引用。我们用 <code>worldXangle</code> 和 <code>worldYAngle</code> 来表示整个空间的选择变换。</p><p>如果我们将每个层都设置成相反的旋转，这会在viewport里重新调整他们：我们就有一个布告板了。<font color="brown">因为我们旋转world先是X方向然后是Y方向，我们需要反着顺序来旋转每一个层，首先是Y方向再是X方向，<strong>变换的顺序是非常重要的</strong>，如果你没有正确的设置顺序，元素的方向就都会不对了</font>。</p><pre><code>/*    Iterate layers[], update the rotation and apply the    inverse transformation currently applied to the world.    Notice the order in which rotations are applied.*/function update ()&#123;            for( var j = 0; j &lt; layers.length; j++ ) &#123;        var layer = layers[ j ];        layer.data.a += layer.data.speed;        var t = &#39;translateX( &#39; + layer.data.x + &#39;px ) \            translateY( &#39; + layer.data.y + &#39;px ) \            translateZ( &#39; + layer.data.z + &#39;px ) \            rotateY( &#39; + ( - worldYAngle ) + &#39;deg ) \            rotateX( &#39; + ( - worldXAngle ) + &#39;deg ) \            scale( &#39; + layer.data.s + &#39;)&#39;;        layer.style.transform = t;    &#125;        requestAnimationFrame( update );    &#125;</code></pre><p>来回的移动鼠标，你将会看到蓝色的云层现在已经变成垂直的了(他们总是面对这镜头),但是 <code>world</code> 和其他云基体还是三维空间里的对象。</p><p><a href="https://www.clicktorelease.com/blog/css3dclouds/4-update.html">点我来见证神奇的效果</a></p><h2 id="最后总结"><a href="#最后总结" class="headerlink" title="最后总结##"></a>最后总结##</h2><p>为了达到最后的效果，只需要将用来调试的那些颜色去掉，吧云层 <code>div</code> 用一个 <code>img</code> 贴上云的图片。<font color="brown"><strong>注意图片得是带有alpha通道的PNG格式，要不没效果。</strong></font></p><p><a href="https://www.clicktorelease.com/blog/css3dclouds/5-final.html">点我看看最后的效果</a></p><p><a href="http://www.clicktorelease.com/code/css3dclouds/">点我看看最后版本</a></p><p>当然，你可以随意换其他你想要的图片：烟雾痕迹，等离子体云，绿叶，飞行的面包机等等。只要把 <code>backgroud-image</code> 更改下就好了。混合不同比例的纹理材质会有神奇的效果。</p><p>随机的添加元素是可以的，但是你也可以创建有序的结构，比如树，鸭子形状的云或者复杂的大爆炸等。可以尝试一些3D曲线，创建固定的云的运行轨迹，创造一个多人游戏来猜3D云的形状等等，充满着无限可能。</p><p>NOTE：文中的代码都是简化了的哦，如果想一步一步实际操作的话最好保存下示例效果的链接页面来查看源码。</p><p>本文译自 <a href="https://www.clicktorelease.com/blog/how-to-make-clouds-with-css-3d#">https://www.clicktorelease.com/blog/how-to-make-clouds-with-css-3d#</a></p><p>涉及到一些3D透视等专业词汇翻译有误敬请见谅，欢迎指正。</p>]]></content>
      
      
      <categories>
          
          <category> 码路刺客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端编程 </tag>
            
            <tag> 翻译 </tag>
            
            <tag> CSS </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL强大的关键字Merge</title>
      <link href="2016/03/13/SQL-Merge/"/>
      <url>2016/03/13/SQL-Merge/</url>
      
        <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Merge关键字是一个神奇的DML关键字。它在SQL Server 2008被引入，它能将Insert,Update,Delete简单的并为一句。MSDN对于Merge的解释非常的短小精悍:”根据与源表联接的结果，对目标表执行插入、更新或删除操作。例如，根据在另一个表中找到的差异在一个表中插入、更新或删除行，可以对两个表进行同步。”,通过这个描述，我们可以看出Merge是关于对于两个表之间的数据进行操作的。可以想象出，需要使用Merge的场景比如:</p><ul><li> 数据同步</li><li> 数据转换</li><li> 基于源表对目标表做Insert,Update,Delete操作</li></ul><span id="more"></span><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><pre><code>merge [into] [目标表]using &lt;源表&gt;on 条件when matched 操作 when not matched 操作;</code></pre><h3 id="举个例子"><a href="#举个例子" class="headerlink" title="举个例子"></a>举个例子</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Merge建立连个表t1,t2。</p><pre><code>CREATE TABLE t1 (    id INT PRIMARY KEY,    name VARCHAR(20),    department VARCHAR(20),    grade INT DEFAULT 0);CREATE TABLE t2 (    id INT PRIMARY KEY,    name VARCHAR(20),    department VARCHAR(20),    grade INT DEFAULT 0);</code></pre><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Merge插入测试数据</p><pre><code>INSERT  INTO dbo.t1    ( id, name, department, grade )    VALUES  ( 1, &#39;aaaa&#39;, &#39;d1&#39;, 60 ),    ( 2, &#39;bbbb&#39;, &#39;d2&#39;, 70 ),    ( 3, &#39;cccc&#39;, &#39;d2&#39;, 70 ),    ( 4, &#39;dddd&#39;, &#39;d2&#39;, 70 ),    ( 5, &#39;eeee&#39;, &#39;d2&#39;, 75 ),    ( 6, &#39;ffff&#39;, &#39;d2&#39;, 70 ),    ( 7, &#39;gggg&#39;, &#39;d2&#39;, 80 );INSERT  INTO dbo.t2    ( id, name, department, grade )VALUES  ( 1, &#39;aaaa&#39;, &#39;d1&#39;, 60 ),    ( 2, &#39;bbbb&#39;, &#39;d2&#39;, 70 ),    ( 3, &#39;cccc&#39;, &#39;d3&#39;, 74 ),    ( 4, &#39;dddd&#39;, &#39;d4&#39;, 77 ),    ( 5, &#39;eeee&#39;, &#39;d5&#39;, 75 ),    ( 6, &#39;ffff&#39;, &#39;d6&#39;, 70 ),    ( 7, &#39;gggg&#39;, &#39;d7&#39;, 88 ),    ( 8, &#39;hhhh&#39;, &#39;d8&#39;, 70 ),    ( 9, &#39;iiii&#39;, &#39;d7&#39;, 70 ),    ( 10, &#39;jjjj&#39;, &#39;d9&#39;, 70 ),    ( 11, &#39;kkkk&#39;, &#39;d9&#39;, 70 );</code></pre><center><img src="/img/posts/SQL-Merge-1.png"></img></center><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;用merge语句将t2表的数据更新到t1表，如果t1表里存在t2表有name字段相等的数据(当然匹配条件可以有多个)，就用t2表的department字段值更新t1表的department值，如果t2表的name字段值在t1表里不存在就在t1表里插入新的行。</p><pre><code>MERGE INTO dbo.t1USING dbo.t2ON dbo.t1.name = t2.name --匹配字段WHEN MATCHED THEN UPDATE SET t1.department = t2.department --匹配有就更新WHEN NOT MATCHED THEN INSERT VALUES(id,name,department,grade); --匹配没有就插入</code></pre><center><img src="/img/posts/SQL-Merge-2.png"></img></center><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Merge当然如果看不出都对t1表做了哪些操作，还可以借助OUTPUT关键字来查看变化，例如修改语句如下</p><pre><code>MERGE INTO dbo.t1USING dbo.t2ON dbo.t1.name = t2.nameWHEN MATCHED THEN UPDATE SET t1.department = t2.departmentWHEN NOT MATCHED THEN INSERT VALUES(id,name,department,grade)OUTPUT --显示操作变化$action AS 操作类型,Inserted.id AS 插入id,Inserted.name AS 插入name,Inserted.department AS 插入department,Inserted.grade AS 插入grade;</code></pre><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Merge执行结果如图</p><center><img src="/img/posts/SQL-Merge-3.png"></img></center>]]></content>
      
      
      <categories>
          
          <category> 码路刺客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> 原创 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于李世石大战AlphaGo，看这一篇就足够了</title>
      <link href="2016/03/12/AlphaGo/"/>
      <url>2016/03/12/AlphaGo/</url>
      
        <content type="html"><![CDATA[<center><img src="/img/posts/19.jpg"></img></center><center>目前，AlphaGo以总比分3:0领先李世石</center><h3 id="为什么这场对弈成为“现象级事件”？"><a href="#为什么这场对弈成为“现象级事件”？" class="headerlink" title="为什么这场对弈成为“现象级事件”？###"></a>为什么这场对弈成为“现象级事件”？###</h3><blockquote><p>　　为什么人工智能与李世石的对弈如此牵动人心？如果对围棋缺乏了解，可能很难懂得个中奥妙。围棋是一种古老的策略游戏，胜负不仅取决于精妙的计算，还和棋手的个性修养、文化底蕴、临场状态等息息相关。从一个顶尖棋手的棋谱中，你几乎可以窥见他的小宇宙。曾经有一种观点认为，由于围棋的极度复杂性和深厚的文化秉性，人工智能几乎不可能战胜人类。但这一天终于还是来了，而且来得如此之快、如此之突兀。</p></blockquote><p style="text-align:right">*——蔡方华（《北京青年报》评论员）* <span id="more"></span><h3 id="曾也有机器战胜人类，却惨遭“过河拆桥”"><a href="#曾也有机器战胜人类，却惨遭“过河拆桥”" class="headerlink" title="曾也有机器战胜人类，却惨遭“过河拆桥”"></a>曾也有机器战胜人类，却惨遭“过河拆桥”</h3><p><font color="brown"><b>1997年卡斯帕罗夫对战深蓝</b></font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在“打败人类的计算机”方阵里，属深蓝名气最大。1997年，国际象棋世界冠军卡斯帕罗夫对IBM开发的国际象棋电脑“深蓝”拱手称臣。“第七回合，卡斯帕罗夫犯了一个不可挽回的低级错误，局势急转直下……在挣扎了几步之后，他放弃了抵抗，草草签了城下之盟。”深蓝当年完虐卡斯帕洛夫时的那股傲娇劲儿可见一斑，但它的结局却是：惨遭肢解，一半送进史密森尼博物院，另一半归美国计算机历史博物馆。<br><font color="brown"><b>2006年浪潮天梭击败5位中国象棋特级大师</b></font> </p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2006年，在“浪潮杯”首届中国象棋人机大战中，超级计算机浪潮天梭击败5位中国象棋特级大师。而浪潮天梭用以对弈的中国象棋软件“棋天大圣”，事实上是由东北大学的人工智能团队开发，据报道，浪潮天梭的开发者浪潮公司，可能因为怕“棋天大圣”抢了自家超级计算机的风头，“不希望新闻媒体关注这个软件”。<p style="text-align:right"><i>——broccoli（媒体人）</i></p></p><h3 id="人类为什么害怕李世石输给AlphaGo"><a href="#人类为什么害怕李世石输给AlphaGo" class="headerlink" title="人类为什么害怕李世石输给AlphaGo"></a>人类为什么害怕李世石输给AlphaGo</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;人类对人工智能的担忧由来已久，从1997年IBM超级电脑深蓝击败人类国际象棋冠军卡斯帕罗夫那时起，围棋就被看作是人类智力的最后壁垒。然而，当职业棋手、欧洲围棋冠军樊麾以5比0落败AlphaGo的消息传来之时，人们或许还来不及反应。 人工智能所拥有的知识只是人类知识的一个子集。机器永远没有想象力，纵使看上去有，那也是虚假的。人工智能对外界的学习依赖于人类的知识与想象，没有人类作为母体提供创作源，人工智能也将停止进化。当了解人工智能本质之后人们或感到这并不可怕，但科技永远是把双刃剑，人性的贪婪往往令之反噬其身。</p><p style="text-align:right"><i>——王飞跃（盘古智库学术委员会副主任委员、中国科学院自动化研究所研究员）</i></p><h3 id="AlphaGO是否给人类敲响了警钟？"><a href="#AlphaGO是否给人类敲响了警钟？" class="headerlink" title="AlphaGO是否给人类敲响了警钟？"></a>AlphaGO是否给人类敲响了警钟？</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;对于人类来说，现在最大的问题是难以对人工智能的态度形成共识，如人们当下对于阿尔法的态度一样。很多人正在思考和提议对人工智能的研发设置一定的限制，但显然，现在还不是合适的时机，人工智能目前的水平，还远没有达到引起大多数人危机意识的程度。因此，限制的边界在哪里？限制的起点在哪里？如何让限制成为共识？或者说，当限制成为共识的时候，是不是已经为时已晚？</p><p style="text-align:right"><i>——周云</i></p><center><img src="/img/posts/20.jpg"></img></center><center>《终结者：创世纪》继续了前四部对于人工智能的思考</center><h3 id="AlphaGo赢了，但AI距离人类还有很远距离"><a href="#AlphaGo赢了，但AI距离人类还有很远距离" class="headerlink" title="AlphaGo赢了，但AI距离人类还有很远距离"></a>AlphaGo赢了，但AI距离人类还有很远距离</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们在此并非否认AlphaGo为代表之一的AI所取得的长足进步，只是从整个AI，尤其是更贴近于普通人日常生活的诸多场景，也更具真正颠覆性的领域，AI仍有相当的路要走或者说与人类仍具有不小的差距，毕竟下棋只是一种高度结构化的情景而已。 我们认为，此次人机大战，无论最后的赢家是谁，以AlphaGo为代表的AI远未到傲骄于人类的地步，而人类也没有因为败给AlphaGo而就只剩下自怜，毕竟“人性”在更多时刻是发挥着正能量的作用，进而推动着包括AlphaGo在内的AI的进步，而世界也因“人性”才会这样丰富多彩而又扑朔迷离。</p><p style="text-align:right"><i>——孙永杰</i></p><h3 id="在AI“毁灭”人类前，人类可能会毁在更多问题上"><a href="#在AI“毁灭”人类前，人类可能会毁在更多问题上" class="headerlink" title="在AI“毁灭”人类前，人类可能会毁在更多问题上"></a>在AI“毁灭”人类前，人类可能会毁在更多问题上</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;人工智能的确是一个我们需要关注和警惕的领域，就像所有现代科学领域，如果不能有效的控制管理，都有可能产生巨大威力。但它目前仍然不是一个我们需要为之焦虑的话题。尤其是当我们面对空气污染、气候变化、贫困和流行病这些更有可能随时消灭人类的现实问题时。 尽管，比尔·盖茨发表过AI将对人类产生威胁的观点，但盖茨基金会大部分的工作重点依然在防止传染病方面。而他本人也认为（经过大量计算和分析），如果在有生之年经历人类大规模消亡，那么最有可能的祸根，不是核战争、不地震，也不是小行星的撞击，而是一场大规模的流行病。从致死数字和比例上看，黑死病和1918年的全球性H1N1甲型流感，完胜世界大战。</p><h3 id="关于这场“大战”，科技圈和围棋界的大佬都有话说"><a href="#关于这场“大战”，科技圈和围棋界的大佬都有话说" class="headerlink" title="关于这场“大战”，科技圈和围棋界的大佬都有话说"></a>关于这场“大战”，科技圈和围棋界的大佬都有话说</h3><p><font color="brown">【科技圈】</font></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>李开复：</strong>这次谷歌AI打败李世石比较悬，但是1-2年之内AI会完胜人类。AlphaGo去年底围棋等级分是3168，而李世石的等级分大约是3532。按照这个等级分对弈，AlphaGo每盘的胜算是11%，对弈五盘胜三盘以上的概率只有1.1%。 </p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>王小川（搜狗CEO）</strong>：AlphaGo的发布，是一个伟大的里程碑，深度学习的魅力在于只要一个领域里能够建模，并有充足的数据，就能够在这个领域里让机器做到超越人、取代人。但是，3月与韩国九段棋手李世石对弈，AlphaGo依然会完胜。除了围棋，人工智能在其他博弈类的封闭游戏里，也会横扫一切，完胜人类。 </p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>刘庆峰（科大讯飞董事长）:</strong>　在这场“人机大战”中，谷歌赢是理所应当。第一，虽然围棋本身的规则比象棋要复杂得多，但本质上仍有规则可循；第二，机器在有限时间内进行拟人运算，后台不知道放了多少台服务器，它的运算能力在短期内是会超过人类智能的，而围棋又是在个在特定时间内给出相对最优算法的游戏，在这方面机器本身就应该比人强。第三，AlphaGo有明确的PK对象，它对于人类的围棋套路是可以分析的。 </p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>刘锋（人工智能学家）：</strong>AlphaGo基本原理并没有新东西，核心价值是学习了近万盘人类历史高手的棋局，和自我对战下的3000万盘棋局总结的经验。这次比赛没有第三方真正监督，无法洗脱作弊嫌疑，同时谷歌过度追求市场影响。</p><p><font color="brown">【围棋界】</font></p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>聂卫平（中国棋圣）：</strong>人工智能不可能在围棋上赢得了人类。1988年我见证了人工智能在人类面前认输，虽然现在我们的电脑发生了根本性的变化，但我还是极大地怀疑，我认为电脑是不可能赢人的。你们说的这些东西我认为是忽悠，绝对是不可能的。围棋需要很强大的判断力，而人工智能目前还缺乏判断力。 </p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>华学明（中国国家围棋队领队）：</strong>人工智能战胜人类是一种趋势。但是我觉得未来即使是这样，也不能让围棋的魅力削弱。我希望人工智能可以增加围棋的创新力。 </p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>余斌（中国著名围棋教练）：</strong>标准实力下人类让两子对抗AI，这种情况下人再稍微出一点差错，AI是有可能赢的。这次谷歌AI想赢李世石不太可能，也许在2年后，5年后，最多10年，人工智能在围棋上就可以战胜人类。</p><p>文章转自 <b><a href="http://mp.weixin.qq.com/s?__biz=MzA4MjUzOTUxOQ==&mid=406103390&idx=1&sn=220c593b5040b7357d1f79512a9e90c6&scene=0#wechat_redirect">新华网思客</a></b></p>]]></content>
      
      
      <categories>
          
          <category> IT看客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 转载 </tag>
            
            <tag> IT资讯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>18种折纸，一起来怀念小时候吧</title>
      <link href="2016/03/09/Paper-Folding/"/>
      <url>2016/03/09/Paper-Folding/</url>
      
        <content type="html"><![CDATA[<p><span style="font-size: large;"><strong>1、会跳的青蛙</strong></span></p><p><span style="font-size: large;"><strong><a title="会跳的青蛙" href="/img/posts/1.gif" class="fancybox" data-fancybox-group="group"><img title="会跳的青蛙" src="/img/posts/1.gif" alt="会跳的青蛙" width="567" height="847" /></a></strong></span></p><span id="more"></span><p><span style="font-size: large;"><strong>2、无篷小船</strong></span></p><p><span style="font-size: large;"><strong><a href="/img/posts/2.gif" class="fancybox" data-fancybox-group="group" title="无蓬的小船"><img title="无蓬的小船" src="/img/posts/2.gif" alt="无蓬的小船" width="567" height="765" /></a></strong></span></p><p><span style="font-size: large;"><strong><span>3、风轮</span></strong></span></p><p><span style="font-size: large;"><strong><span><a title="风轮" href="/img/posts/3.gif" class="fancybox" data-fancybox-group="group"><img title="风轮" src="/img/posts/3.gif" alt="风轮" width="567" height="766" /></a></span></strong></span></p><p><span style="font-size: large;"><strong><span><span>4、气球</span></span></strong></span></p><p><span style="font-size: large;"><strong><span><span><a title="气球" href="/img/posts/4.gif" class="fancybox" data-fancybox-group="group"><img title="气球" src="/img/posts/4.gif" alt="气球" /></a></span></span></strong></span></p><p>&nbsp;</p><p><span style="font-size: large;"><strong><span><span>5、有篷小船</span></span></strong></span></p><p><span style="font-size: large;"><strong><span><span><a title="有蓬小船" href="/img/posts/5.gif" class="fancybox" data-fancybox-group="group"><img title="有蓬小船" src="/img/posts/5.gif" alt="有蓬小船" width="567" height="770" /></a></span></span></strong></span></p><p>&nbsp;</p><p><span style="font-size: large;"><strong><span><span>6、十字飞镖</span></span></strong></span></p><p><span style="font-size: large;"><strong><span><span><a title="十字飞镖" href="/img/posts/6.gif" class="fancybox" data-fancybox-group="group"><img title="十字飞镖" src="/img/posts/6.gif" alt="十字飞镖" width="567" height="765" /></a></span></span></strong></span></p><p>&nbsp;</p><p><span style="font-size: large;"><strong><span><span>7、东南西北</span></span></strong></span></p><p><span style="font-size: large;"><strong><span><span><a title="东南西北" href="/img/posts/7.gif" class="fancybox" data-fancybox-group="group"><img title="东南西北" src="/img/posts/7.gif" alt="东南西北" width="567" height="765" /></a></span></span></strong></span></p><p>&nbsp;</p><p><span style="font-size: large;"><strong><span><span>8、帆船</span></span></strong></span></p><p><span style="font-size: large;"><strong><span><span><a title="帆船" href="/img/posts/8.gif" class="fancybox" data-fancybox-group="group"><img title="帆船" src="/img/posts/8.gif" alt="帆船" width="567" height="770" /></a></span></span></strong></span></p><p>&nbsp;</p><p><span style="font-size: large;"><strong><span><span>9、千纸鹤</span></span></strong></span></p><p><span style="font-size: large;"><strong><span><span><a title="千纸鹤" href="/img/posts/9.jpg" class="fancybox" data-fancybox-group="group"><img title="千纸鹤" src="/img/posts/9.jpg" alt="千纸鹤" width="461" height="642" /></a></span></span></strong></span></p><p>&nbsp;</p><p><span style="font-size: large;"><strong><span><span>10、尖头飞机</span></span></strong></span></p><p><span style="font-size: large;"><strong><span><span><a title="尖头飞机" href="/img/posts/10.gif" class="fancybox" data-fancybox-group="group"><img title="尖头飞机" src="/img/posts/10.gif" alt="尖头飞机" width="567" height="760" /></a></span></span></strong></span></p><p>&nbsp;</p><p><span style="font-size: large;"><strong><span><span>11、平头飞机</span></span></strong></span></p><p><span style="font-size: large;"><strong><span><span><a title="平头飞机" href="/img/posts/11.gif" class="fancybox" data-fancybox-group="group"><img title="平头飞机" src="/img/posts/11.gif" alt="平头飞机" width="567" height="773" /></a></span></span></strong></span></p><p>&nbsp;</p><p><span style="font-size: large;"><strong><span><span>12、信封</span></span></strong></span></p><p><span style="font-size: large;"><strong><span><span><a title="信封" href="/img/posts/12.gif" class="fancybox" data-fancybox-group="group"><img title="信封" src="/img/posts/12.gif" alt="信封" width="567" height="768" /></a></span></span></strong></span></p><p>&nbsp;</p><p><span style="font-size: large;"><strong><span><span>13、爱心</span></span></strong></span></p><p><span style="font-size: large;"><strong><span><span><a title="爱心" href="/img/posts/13.gif" class="fancybox" data-fancybox-group="group"><img title="爱心" src="/img/posts/13.gif" alt="爱心" width="567" height="770" /></a></span></span></strong></span></p><p>&nbsp;</p><p><span style="font-size: large;"><strong><span><span>14、五角星</span></span></strong></span></p><p><span style="font-size: large;"><strong><span><span><a title="五角星" href="/img/posts/14.gif" class="fancybox" data-fancybox-group="group"><img title="五角星" src="/img/posts/14.gif" alt="五角星" width="567" height="768" /></a></span></span></strong></span></p><p>&nbsp;</p><p><span style="font-size: large;"><strong><span><span>15、花的折法</span></span></strong></span></p><p><span style="font-size: large;"><strong><span><span><a title="花" href="/img/posts/15-3.jpg" class="fancybox" data-fancybox-group="group"><img title="花" src="/img/posts/15-3.jpg" alt="花" width="191" height="340" /></a></span></span></strong></span></p><p><span style="font-size: large;"><strong><span><span><a title="花" href="/img/posts/15-1.jpg" class="fancybox" data-fancybox-group="group"><img title="花" src="/img/posts/15-1.jpg" alt="花" width="480" height="650" /></a></span></span></strong></span></p><p><span style="font-size: large;"><strong><span><span><a title="花" href="/img/posts/15-2.jpg" class="fancybox" data-fancybox-group="group"><img title="花" src="/img/posts/15-2.jpg" alt="花" width="480" height="654" /></a></span></span></strong></span></p><p>&nbsp;</p><p><span style="font-size: large;"><strong><span><span>16、小鬼</span></span></strong></span></p><p><span style="font-size: large;"><strong><span><span><a title="小鬼" href="/img/posts/16.jpg" class="fancybox" data-fancybox-group="group"><img title="小鬼" src="/img/posts/16.jpg" alt="小鬼" width="480" height="648" /></a></span></span></strong></span></p><p>&nbsp;</p><p><span style="font-size: large;"><strong><span><span>17、巫婆</span></span></strong></span></p><p><span style="font-size: large;"><strong><span><span><a title="巫婆" href="/img/posts/17-3.jpg" class="fancybox" data-fancybox-group="group"><img title="巫婆" src="/img/posts/17-3.jpg" alt="巫婆" width="305" height="217" /></a></span></span></strong></span></p><p><span style="font-size: large;"><strong><span><span><a title="巫婆" href="/img/posts/17-2.jpg" class="fancybox" data-fancybox-group="group"><img title="巫婆" src="/img/posts/17-2.jpg" alt="巫婆" width="480" height="654" /></a></span></span></strong></span></p><p><span style="font-size: large;"><strong><span><span><a title="巫婆" href="/img/posts/17-1.jpg" class="fancybox" data-fancybox-group="group"><img title="巫婆" src="/img/posts/17-1.jpg" alt="巫婆" width="480" height="654" /></a></span></span></strong></span></p><p>&nbsp;</p><p><span style="font-size: large;"><strong><span><span>18、站立的公鸡</span></span></strong></span></p><p><span style="font-size: large;"><strong><span><span><a title="站立的公鸡" href="/img/posts/18.jpg" class="fancybox" data-fancybox-group="group"><img title="站立的公鸡" src="/img/posts/18.jpg" alt="站立的公鸡" width="480" height="648" /></a></span></span></strong></span></p>]]></content>
      
      
      <categories>
          
          <category> 生活点滴 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活趣记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pentaho 6.0 安装与启动教程</title>
      <link href="2016/03/08/pentaho6-install/"/>
      <url>2016/03/08/pentaho6-install/</url>
      
        <content type="html"><![CDATA[<p>Pentaho商业智能框架提供一个架构和基础结构来创建商业智能解决方案。这个框架包含一个嵌入式的工作流。这个工作流可以很轻易地集成到业务流程里。Pentaho框架提供了核心服务，包括：单点登录、日志、审核、工作流、web services和工作流引擎。此外，Pentaho框架还包含一个解决方案引擎。该引擎集成了报表、多维分析、仪表盘和数据挖掘组件，以便构成一个复杂和完整的商业智能平台。</p><span id="more"></span><h3 id="Pentaho简介"><a href="#Pentaho简介" class="headerlink" title="Pentaho简介"></a>Pentaho简介</h3><p>Pentaho是一个以工作流为核心的、强调面向解决方案而非工具组件的BI套件，整合了多个开源项目，目标是和商业BI相抗衡。它包括：</p><ul><li>1.工作流引擎：Shark and JaWE</li><li>2.数据库：Firebird RDBMS</li><li>3.集成管理和开发环境：Eclipse</li><li>4.报表工具：Eclipse BIRT</li><li>5.ETL工具：Enhydra/Kettle</li><li>6.OLAP Server：Mondrian</li><li>7.OLAP展示：JPivot</li><li>8.数据挖掘组件：Weka</li><li>9.应用服务器和Portal服务器：JBoss</li><li>10.单点登陆服务及LDap认证：JOSSO</li><li>11.自定义脚本支持：Mozilla Rhino Javascript脚本处理器</li></ul><p>由上可见Pentaho是一个很完善的BI解决方案。Pentaho偏向于与业务流程相结合的BI解决方案，侧重于大中型企业应用。</p><h3 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h3><ul><li>WMware Workstation 10</li><li>Windows Server 2008 R2 x64</li><li>JDK 1.8</li><li>Pentaho 6.0(biserver-ce-6.0.1.0-386)</li></ul><h3 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装"></a>开始安装</h3><p>Windows Server 2008 R2 x64的虚拟机安装这里就不多说了，找个系统镜像安装下就得了，放一张虚拟机截图。</p><center><img src="/img/posts/20160308001-01.png" alt="20160308001-01"></img></center><p>下载Pentaho 6.0 社区版压缩包，官网地址<a href="http://community.pentaho.com/">http://community.pentaho.com/</a> ，下载的文件名biserver-ce-6.0.1.0-386.zip，900多MB的文件。</p><center><img src="/img/posts/20160308001-02.png" alt="20160308001-02"></img></center><p>进入到虚拟机后，将下载的压缩包解压到虚拟机的硬盘里，解压后的文件夹如下，看到start-pentaho的批处理文件是不是就有冲动点一下，不过点开后命令行窗口会一闪而过，并没有啥卵用。当然啦，JDK还没安呢。</p><center><img src="/img/posts/20160308001-03.png" alt="20160308001-03"></img></center><p>安装JDK就不用说了，我这里下载的是JDK1.8 64位的版本，安装完JDK路径如下</p><center><img src="/img/posts/20160308001-04.png" alt="20160308001-04"></img></center><p>这个时候，再去执行Pentaho文件夹里的start-pentaho批处理文件，似乎还是不行。表慌，进入Pentaho文件夹里的tomcat文件夹里的bin文件夹，自带的tomcat服务器是绿色版的，所以得添加下JDK和tomcat自身的路径，找到startup批处理文件，右键编辑，在开头加上这两行，注意替换下你自己的路径，第二行是pentaho自带的tomcat目录路径，当然，如果另外安装了tomcat来运行就不用自带的tomcat服务器了。</p><p><code>SET JAVA_HOME=C:\Program Files\Java\jdk1.8.0_20</code></p><p><code>SET CATALINA_HOME=C:\pentaho\biserver-ce\tomcat</code></p><center><img src="/img/posts/20160308001-05.png" alt="20160308001-05"></img></center><p>到这里基本上就可以运行Pentaho文件夹里的start-pentaho来启动了，启动需要一段时间。</p><center><img src="/img/posts/20160308001-06.png" alt="20160308001-06"></img></center><p> 当然，有可能还是运行不了，我一开始就是，在set-pentaho-env批处理文件里加了个pause，然后启动服务，输出下面这个，如果这样的话就增加一个系统环境变量_PENTAHO_JAVA_HOME，值设置到JDK路径就好了，但是一般不需要吧，我后来把这个系统环境变量删了也可以。</p><center><img src="/img/posts/20160308001-07.png" alt="20160308001-07"></img></center><p> 在windows server服务器里打开IE浏览器输入<a href="http://localhost:8080/">http://localhost:8080/</a> ，就可以看到如下登录界面了。输入默认用户名:admin，密码:password。就可以登录了。</p><center><img src="/img/posts/20160308001-08.png" alt="20160308001-08"></img></center><center><img src="/img/posts/20160308001-09.png" alt="20160308001-09"></img></center><p>这是在虚拟机里用浏览器访问，如果要在虚拟机外面的物理机浏览器访问呢，找到虚拟机网卡的IP地址，然后在物理机浏览器里输入：IP地址:8080就可以了，但是一开始我在外面访问不了，然后就到虚拟机里把服务器防火墙关了，再去物理机上访问就可以了。</p><center><img src="/img/posts/20160308001-10.png" alt="20160308001-10"></img></center><center><img src="/img/posts/20160308001-11.png" alt="20160308001-11"></img></center>]]></content>
      
      
      <categories>
          
          <category> BI墨客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 原创 </tag>
            
            <tag> BI </tag>
            
            <tag> pentaho </tag>
            
            <tag> 开源 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2015/12/03/hello-world/"/>
      <url>2015/12/03/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><span id="more"></span><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 生活点滴 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Test </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
